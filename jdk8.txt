[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Updating ProjectRef(uri("file:/home/andriy/.sbt/1.0/plugins/"), "global-plugins")...
[info] Done updating.
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Updating ProjectRef(uri("file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project/"), "jsoniter-scala-build")...
[info] Done updating.
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 19, 2018 8:09:01 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:985:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:954:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.24.2-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.24.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 55 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(8192)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 x.+=(v)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(8192)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 x.add(v)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("geometry");
[info]       private[this] val r1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d6(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d6(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d8(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d10(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d15(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d7(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.geoJSONCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e6(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e6(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e10(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e7(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.geoJSONCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.2-SNAPSHOT.jar ...
[info] Compiling 47 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 417 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 593 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/java-8-oracle/bin/java -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:54:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 355622.829 ops/s
[info] # Warmup Iteration   2: 798377.232 ops/s
[info] # Warmup Iteration   3: 805438.753 ops/s
[info] Iteration   1: 795936.733 ops/s
[info]                  ·gc.alloc.rate:                   2095.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3946.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 813227.084 ops/s
[info]                  ·gc.alloc.rate:                   2141.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3890.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 801894.294 ops/s
[info]                  ·gc.alloc.rate:                   2111.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4630.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 807242.389 ops/s
[info]                  ·gc.alloc.rate:                   2125.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3958.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 801765.727 ops/s
[info]                  ·gc.alloc.rate:                   2111.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3996.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   804013.245 ±(99.9%) 25110.033 ops/s [Average]
[info]   (min, avg, max) = (795936.733, 804013.245, 813227.084), stdev = 6520.996
[info]   CI (99.9%): [778903.213, 829123.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2117.251 ±(99.9%) 66.934 MB/sec [Average]
[info]   (min, avg, max) = (2095.698, 2117.251, 2141.839), stdev = 17.382
[info]   CI (99.9%): [2050.317, 2184.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2086.554 ±(99.9%) 591.019 MB/sec [Average]
[info]   (min, avg, max) = (1995.739, 2086.554, 2359.627), stdev = 153.486
[info]   CI (99.9%): [1495.535, 2677.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4084.411 ±(99.9%) 1183.546 B/op [Average]
[info]   (min, avg, max) = (3890.830, 4084.411, 4630.073), stdev = 307.363
[info]   CI (99.9%): [2900.865, 5267.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.155 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (0.081, 0.155, 0.204), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 470575.290 ops/s
[info] # Warmup Iteration   2: 1619806.016 ops/s
[info] # Warmup Iteration   3: 1659522.365 ops/s
[info] Iteration   1: 1649354.533 ops/s
[info]                  ·gc.alloc.rate:                   1173.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1243.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1609127.004 ops/s
[info]                  ·gc.alloc.rate:                   1145.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1602444.755 ops/s
[info]                  ·gc.alloc.rate:                   1140.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1293.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1620213.244 ops/s
[info]                  ·gc.alloc.rate:                   1153.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1623706.125 ops/s
[info]                  ·gc.alloc.rate:                   1155.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1291.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1620969.132 ±(99.9%) 69343.192 ops/s [Average]
[info]   (min, avg, max) = (1602444.755, 1620969.132, 1649354.533), stdev = 18008.207
[info]   CI (99.9%): [1551625.940, 1690312.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1153.636 ±(99.9%) 48.845 MB/sec [Average]
[info]   (min, avg, max) = (1140.410, 1153.636, 1173.652), stdev = 12.685
[info]   CI (99.9%): [1104.792, 1202.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1185.544 ±(99.9%) 696.864 MB/sec [Average]
[info]   (min, avg, max) = (981.732, 1185.544, 1332.376), stdev = 180.973
[info]   CI (99.9%): [488.680, 1882.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1150.654 ±(99.9%) 666.023 B/op [Average]
[info]   (min, avg, max) = (959.779, 1150.654, 1293.533), stdev = 172.964
[info]   CI (99.9%): [484.631, 1816.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.089 ±(99.9%) 0.117 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.089, 0.121), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.49% complete, ETA 01:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2622133.705 ops/s
[info] # Warmup Iteration   2: 3538689.827 ops/s
[info] # Warmup Iteration   3: 3605401.280 ops/s
[info] Iteration   1: 3539897.800 ops/s
[info]                  ·gc.alloc.rate:               233.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3594127.426 ops/s
[info]                  ·gc.alloc.rate:               237.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112.017 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3600128.314 ops/s
[info]                  ·gc.alloc.rate:                   237.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3579455.970 ops/s
[info]                  ·gc.alloc.rate:               236.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112.476 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3520310.454 ops/s
[info]                  ·gc.alloc.rate:      232.613 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3566783.993 ±(99.9%) 134810.258 ops/s [Average]
[info]   (min, avg, max) = (3520310.454, 3566783.993, 3600128.314), stdev = 35009.796
[info]   CI (99.9%): [3431973.735, 3701594.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   235.712 ±(99.9%) 8.928 MB/sec [Average]
[info]   (min, avg, max) = (232.613, 235.712, 237.885), stdev = 2.318
[info]   CI (99.9%): [226.785, 244.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.665 ±(99.9%) 440.558 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.665, 255.889), stdev = 114.411
[info]   CI (99.9%): [≈ 0, 645.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   90.010 ±(99.9%) 193.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90.010, 113.729), stdev = 50.322
[info]   CI (99.9%): [≈ 0, 283.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.73% complete, ETA 01:25:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30558.766 ops/s
[info] # Warmup Iteration   2: 166919.896 ops/s
[info] # Warmup Iteration   3: 169485.285 ops/s
[info] Iteration   1: 174489.531 ops/s
[info]                  ·gc.alloc.rate:                   1450.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14724.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 172166.657 ops/s
[info]                  ·gc.alloc.rate:                   1431.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12021.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.761 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 173253.173 ops/s
[info]                  ·gc.alloc.rate:                   1440.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15041.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.567 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 173484.457 ops/s
[info]                  ·gc.alloc.rate:                   1442.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12104.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 172818.079 ops/s
[info]                  ·gc.alloc.rate:                   1437.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12212.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   173242.379 ±(99.9%) 3307.586 ops/s [Average]
[info]   (min, avg, max) = (172166.657, 173242.379, 174489.531), stdev = 858.969
[info]   CI (99.9%): [169934.794, 176549.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1440.665 ±(99.9%) 27.314 MB/sec [Average]
[info]   (min, avg, max) = (1431.791, 1440.665, 1450.996), stdev = 7.093
[info]   CI (99.9%): [1413.351, 1467.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13088.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13088.002, 13088.003, 13088.003), stdev = 0.001
[info]   CI (99.9%): [13088.002, 13088.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1455.704 ±(99.9%) 663.936 MB/sec [Average]
[info]   (min, avg, max) = (1315.098, 1455.704, 1655.772), stdev = 172.422
[info]   CI (99.9%): [791.768, 2119.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13220.776 ±(99.9%) 5863.342 B/op [Average]
[info]   (min, avg, max) = (12021.309, 13220.776, 15041.124), stdev = 1522.691
[info]   CI (99.9%): [7357.434, 19084.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.757 ±(99.9%) 0.900 B/op [Average]
[info]   (min, avg, max) = (0.563, 0.757, 1.138), stdev = 0.234
[info]   CI (99.9%): [≈ 0, 1.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.98% complete, ETA 01:25:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188430.430 ops/s
[info] # Warmup Iteration   2: 514893.128 ops/s
[info] # Warmup Iteration   3: 527532.678 ops/s
[info] Iteration   1: 526783.730 ops/s
[info]                  ·gc.alloc.rate:                   1831.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5942.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 524003.600 ops/s
[info]                  ·gc.alloc.rate:                   1822.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5015.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 530382.571 ops/s
[info]                  ·gc.alloc.rate:                   1844.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5975.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 529060.535 ops/s
[info]                  ·gc.alloc.rate:                   1839.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5018.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 524511.501 ops/s
[info]                  ·gc.alloc.rate:                   1823.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5079.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   526948.388 ±(99.9%) 10701.065 ops/s [Average]
[info]   (min, avg, max) = (524003.600, 526948.388, 530382.571), stdev = 2779.032
[info]   CI (99.9%): [516247.323, 537649.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1832.347 ±(99.9%) 37.104 MB/sec [Average]
[info]   (min, avg, max) = (1822.513, 1832.347, 1844.524), stdev = 9.636
[info]   CI (99.9%): [1795.243, 1869.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1810.733 ±(99.9%) 673.396 MB/sec [Average]
[info]   (min, avg, max) = (1670.348, 1810.733, 2014.390), stdev = 174.879
[info]   CI (99.9%): [1137.337, 2484.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5406.296 ±(99.9%) 1946.828 B/op [Average]
[info]   (min, avg, max) = (5015.133, 5406.296, 5975.929), stdev = 505.585
[info]   CI (99.9%): [3459.468, 7353.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.212 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.212, 0.312), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.22% complete, ETA 01:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695673.893 ops/s
[info] # Warmup Iteration   2: 2018534.787 ops/s
[info] # Warmup Iteration   3: 2022817.952 ops/s
[info] Iteration   1: 2040519.334 ops/s
[info]                  ·gc.alloc.rate:                   788.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     502.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2033860.882 ops/s
[info]                  ·gc.alloc.rate:                   785.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2037625.835 ops/s
[info]                  ·gc.alloc.rate:                   787.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     504.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1995946.078 ops/s
[info]                  ·gc.alloc.rate:               771.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 516.355 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2033225.539 ops/s
[info]                  ·gc.alloc.rate:                   785.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2028235.534 ±(99.9%) 70431.614 ops/s [Average]
[info]   (min, avg, max) = (1995946.078, 2028235.534, 2040519.334), stdev = 18290.866
[info]   CI (99.9%): [1957803.920, 2098667.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   783.612 ±(99.9%) 27.291 MB/sec [Average]
[info]   (min, avg, max) = (771.081, 783.612, 788.320), stdev = 7.087
[info]   CI (99.9%): [756.322, 810.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   784.952 ±(99.9%) 694.957 MB/sec [Average]
[info]   (min, avg, max) = (651.198, 784.952, 987.969), stdev = 180.478
[info]   CI (99.9%): [89.995, 1479.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   608.801 ±(99.9%) 533.137 B/op [Average]
[info]   (min, avg, max) = (502.243, 608.801, 764.429), stdev = 138.454
[info]   CI (99.9%): [75.664, 1141.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.47% complete, ETA 01:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7770065.622 ops/s
[info] # Warmup Iteration   2: 7123067.527 ops/s
[info] # Warmup Iteration   3: 7292398.805 ops/s
[info] Iteration   1: 7241719.552 ops/s
[info]                  ·gc.alloc.rate:                   368.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7201690.315 ops/s
[info]                  ·gc.alloc.rate:                   366.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7224601.321 ops/s
[info]                  ·gc.alloc.rate:                   367.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7268950.610 ops/s
[info]                  ·gc.alloc.rate:                   369.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7178377.654 ops/s
[info]                  ·gc.alloc.rate:                   365.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   7223067.890 ±(99.9%) 134905.564 ops/s [Average]
[info]   (min, avg, max) = (7178377.654, 7223067.890, 7268950.610), stdev = 35034.546
[info]   CI (99.9%): [7088162.327, 7357973.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   367.243 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (365.036, 367.243, 369.649), stdev = 1.787
[info]   CI (99.9%): [360.363, 374.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   367.528 ±(99.9%) 310.074 MB/sec [Average]
[info]   (min, avg, max) = (331.198, 367.528, 511.574), stdev = 80.525
[info]   CI (99.9%): [57.453, 677.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   80.045 ±(99.9%) 67.049 B/op [Average]
[info]   (min, avg, max) = (71.686, 80.045, 111.187), stdev = 17.412
[info]   CI (99.9%): [12.997, 147.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.369 ±(99.9%) 2.953 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.369, 1.741), stdev = 0.767
[info]   CI (99.9%): [≈ 0, 3.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.645 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.081, 0.380), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.71% complete, ETA 01:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6904245.774 ops/s
[info] # Warmup Iteration   2: 10380410.481 ops/s
[info] # Warmup Iteration   3: 10516205.465 ops/s
[info] Iteration   1: 10629010.689 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10555016.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10550287.322 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10602697.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10813103.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   10630023.009 ±(99.9%) 414055.429 ops/s [Average]
[info]   (min, avg, max) = (10550287.322, 10630023.009, 10813103.181), stdev = 107528.880
[info]   CI (99.9%): [10215967.580, 11044078.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.96% complete, ETA 01:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68921.334 ops/s
[info] # Warmup Iteration   2: 320824.385 ops/s
[info] # Warmup Iteration   3: 313978.599 ops/s
[info] Iteration   1: 323303.308 ops/s
[info]                  ·gc.alloc.rate:                   1000.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4757.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 321485.579 ops/s
[info]                  ·gc.alloc.rate:                   995.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4794.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.611 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 322025.013 ops/s
[info]                  ·gc.alloc.rate:                   997.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4807.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 322947.856 ops/s
[info]                  ·gc.alloc.rate:                   999.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4819.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 322840.471 ops/s
[info]                  ·gc.alloc.rate:                   999.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4843.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   322520.445 ±(99.9%) 2865.027 ops/s [Average]
[info]   (min, avg, max) = (321485.579, 322520.445, 323303.308), stdev = 744.038
[info]   CI (99.9%): [319655.418, 325385.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   998.469 ±(99.9%) 8.492 MB/sec [Average]
[info]   (min, avg, max) = (995.286, 998.469, 1000.794), stdev = 2.205
[info]   CI (99.9%): [989.977, 1006.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   984.587 ±(99.9%) 25.880 MB/sec [Average]
[info]   (min, avg, max) = (977.225, 984.587, 993.554), stdev = 6.721
[info]   CI (99.9%): [958.707, 1010.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4804.267 ±(99.9%) 123.228 B/op [Average]
[info]   (min, avg, max) = (4757.263, 4804.267, 4843.633), stdev = 32.002
[info]   CI (99.9%): [4681.039, 4927.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.125), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.305 ±(99.9%) 0.681 B/op [Average]
[info]   (min, avg, max) = (0.203, 0.305, 0.611), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.20% complete, ETA 01:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 966245.143 ops/s
[info] # Warmup Iteration   2: 1720320.117 ops/s
[info] # Warmup Iteration   3: 1719845.156 ops/s
[info] Iteration   1: 1726051.409 ops/s
[info]                  ·gc.alloc.rate:                   2677.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2449.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1701244.971 ops/s
[info]                  ·gc.alloc.rate:                   2638.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2365.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2187.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1720153.490 ops/s
[info]                  ·gc.alloc.rate:                   2666.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2481.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1733568.551 ops/s
[info]                  ·gc.alloc.rate:                   2687.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2467.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1722534.432 ops/s
[info]                  ·gc.alloc.rate:                   2671.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2487.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1720710.571 ±(99.9%) 46223.712 ops/s [Average]
[info]   (min, avg, max) = (1701244.971, 1720710.571, 1733568.551), stdev = 12004.151
[info]   CI (99.9%): [1674486.858, 1766934.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2668.187 ±(99.9%) 70.748 MB/sec [Average]
[info]   (min, avg, max) = (2638.441, 2668.187, 2687.587), stdev = 18.373
[info]   CI (99.9%): [2597.439, 2738.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2440.000, 2440.000, 2440.000), stdev = 0.001
[info]   CI (99.9%): [2440.000, 2440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2641.014 ±(99.9%) 596.262 MB/sec [Average]
[info]   (min, avg, max) = (2365.128, 2641.014, 2723.159), stdev = 154.847
[info]   CI (99.9%): [2044.752, 3237.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2414.535 ±(99.9%) 492.569 B/op [Average]
[info]   (min, avg, max) = (2187.244, 2414.535, 2487.610), stdev = 127.919
[info]   CI (99.9%): [1921.966, 2907.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.091 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (0.057, 0.091, 0.135), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.44% complete, ETA 01:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.907 ops/s
[info] # Warmup Iteration   2: 9488674.658 ops/s
[info] # Warmup Iteration   3: 9943715.082 ops/s
[info] Iteration   1: 9901420.553 ops/s
[info]                  ·gc.alloc.rate:                   1208.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 9938687.160 ops/s
[info]                  ·gc.alloc.rate:                   1212.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9710453.393 ops/s
[info]                  ·gc.alloc.rate:                   1184.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9870758.067 ops/s
[info]                  ·gc.alloc.rate:               1204.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209.667 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 9880086.289 ops/s
[info]                  ·gc.alloc.rate:               1205.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      989.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157.584 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9860281.092 ±(99.9%) 337839.526 ops/s [Average]
[info]   (min, avg, max) = (9710453.393, 9860281.092, 9938687.160), stdev = 87735.852
[info]   CI (99.9%): [9522441.566, 10198120.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1202.984 ±(99.9%) 41.211 MB/sec [Average]
[info]   (min, avg, max) = (1184.725, 1202.984, 1212.487), stdev = 10.702
[info]   CI (99.9%): [1161.773, 1244.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1180.601 ±(99.9%) 685.225 MB/sec [Average]
[info]   (min, avg, max) = (982.290, 1180.601, 1314.966), stdev = 177.951
[info]   CI (99.9%): [495.376, 1865.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   188.546 ±(99.9%) 112.756 B/op [Average]
[info]   (min, avg, max) = (155.548, 188.546, 213.022), stdev = 29.282
[info]   CI (99.9%): [75.790, 301.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.481 ±(99.9%) 3.975 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.481, 2.327), stdev = 1.032
[info]   CI (99.9%): [≈ 0, 4.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.377), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.69% complete, ETA 01:23:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 900963.506 ops/s
[info] # Warmup Iteration   2: 2513791.586 ops/s
[info] # Warmup Iteration   3: 2627341.017 ops/s
[info] Iteration   1: 2600188.216 ops/s
[info]                  ·gc.alloc.rate:                   1823.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1194.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2616942.302 ops/s
[info]                  ·gc.alloc.rate:                   1835.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     998.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2560406.841 ops/s
[info]                  ·gc.alloc.rate:                   1796.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1027.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2612165.227 ops/s
[info]                  ·gc.alloc.rate:                   1832.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1216.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2634795.849 ops/s
[info]                  ·gc.alloc.rate:                   1848.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1009.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2604899.687 ±(99.9%) 107083.293 ops/s [Average]
[info]   (min, avg, max) = (2560406.841, 2604899.687, 2634795.849), stdev = 27809.191
[info]   CI (99.9%): [2497816.394, 2711982.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1827.410 ±(99.9%) 74.173 MB/sec [Average]
[info]   (min, avg, max) = (1796.726, 1827.410, 1848.225), stdev = 19.262
[info]   CI (99.9%): [1753.237, 1901.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1802.780 ±(99.9%) 682.278 MB/sec [Average]
[info]   (min, avg, max) = (1660.591, 1802.780, 2018.444), stdev = 177.185
[info]   CI (99.9%): [1120.502, 2485.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1089.153 ±(99.9%) 411.045 B/op [Average]
[info]   (min, avg, max) = (998.569, 1089.153, 1216.131), stdev = 106.747
[info]   CI (99.9%): [678.107, 1500.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.229), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.075, 0.138), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.93% complete, ETA 01:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8753401.326 ops/s
[info] # Warmup Iteration   2: 9534049.189 ops/s
[info] # Warmup Iteration   3: 9862758.487 ops/s
[info] Iteration   1: 9633700.945 ops/s
[info]                  ·gc.alloc.rate:                   1224.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9810014.666 ops/s
[info]                  ·gc.alloc.rate:                   1247.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9732244.578 ops/s
[info]                  ·gc.alloc.rate:                   1236.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9704967.890 ops/s
[info]                  ·gc.alloc.rate:                   1233.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9601986.458 ops/s
[info]                  ·gc.alloc.rate:                   1220.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9696582.907 ±(99.9%) 317014.981 ops/s [Average]
[info]   (min, avg, max) = (9601986.458, 9696582.907, 9810014.666), stdev = 82327.784
[info]   CI (99.9%): [9379567.926, 10013597.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1232.351 ±(99.9%) 40.892 MB/sec [Average]
[info]   (min, avg, max) = (1220.167, 1232.351, 1247.161), stdev = 10.620
[info]   CI (99.9%): [1191.458, 1273.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.092 ±(99.9%) 713.044 MB/sec [Average]
[info]   (min, avg, max) = (1002.704, 1209.092, 1349.661), stdev = 185.175
[info]   CI (99.9%): [496.048, 1922.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   196.178 ±(99.9%) 114.220 B/op [Average]
[info]   (min, avg, max) = (163.773, 196.178, 221.226), stdev = 29.662
[info]   CI (99.9%): [81.958, 310.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.010, 0.017), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.673
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.18% complete, ETA 01:23:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159154.523 ops/s
[info] # Warmup Iteration   2: 611464.702 ops/s
[info] # Warmup Iteration   3: 625985.659 ops/s
[info] Iteration   1: 628819.426 ops/s
[info]                  ·gc.alloc.rate:                   1662.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4099.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 621590.070 ops/s
[info]                  ·gc.alloc.rate:                   1643.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4180.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 634128.139 ops/s
[info]                  ·gc.alloc.rate:                   1676.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4132.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 633253.306 ops/s
[info]                  ·gc.alloc.rate:                   1673.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4164.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 633769.856 ops/s
[info]                  ·gc.alloc.rate:                   1675.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4182.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.258 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   630312.159 ±(99.9%) 20509.046 ops/s [Average]
[info]   (min, avg, max) = (621590.070, 630312.159, 634128.139), stdev = 5326.134
[info]   CI (99.9%): [609803.113, 650821.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1666.229 ±(99.9%) 53.421 MB/sec [Average]
[info]   (min, avg, max) = (1643.650, 1666.229, 1676.475), stdev = 13.873
[info]   CI (99.9%): [1612.808, 1719.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1662.973 ±(99.9%) 71.725 MB/sec [Average]
[info]   (min, avg, max) = (1637.686, 1662.973, 1684.307), stdev = 18.627
[info]   CI (99.9%): [1591.248, 1734.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4151.900 ±(99.9%) 137.423 B/op [Average]
[info]   (min, avg, max) = (4099.048, 4151.900, 4182.652), stdev = 35.688
[info]   CI (99.9%): [4014.478, 4289.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.229, 0.422), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.42% complete, ETA 01:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 870379.753 ops/s
[info] # Warmup Iteration   2: 1832701.657 ops/s
[info] # Warmup Iteration   3: 1892640.206 ops/s
[info] Iteration   1: 1908225.427 ops/s
[info]                  ·gc.alloc.rate:                   1921.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1642.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1912245.163 ops/s
[info]                  ·gc.alloc.rate:                   1924.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1651.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1874827.318 ops/s
[info]                  ·gc.alloc.rate:                   1887.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1411.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1857442.127 ops/s
[info]                  ·gc.alloc.rate:                   1869.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1717.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1848126.651 ops/s
[info]                  ·gc.alloc.rate:                   1860.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1442.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1880173.337 ±(99.9%) 112062.996 ops/s [Average]
[info]   (min, avg, max) = (1848126.651, 1880173.337, 1912245.163), stdev = 29102.404
[info]   CI (99.9%): [1768110.342, 1992236.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1892.543 ±(99.9%) 113.420 MB/sec [Average]
[info]   (min, avg, max) = (1860.211, 1892.543, 1924.825), stdev = 29.455
[info]   CI (99.9%): [1779.123, 2005.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1584.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1584.000, 1584.000, 1584.000), stdev = 0.001
[info]   CI (99.9%): [1584.000, 1584.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1880.219 ±(99.9%) 678.513 MB/sec [Average]
[info]   (min, avg, max) = (1681.290, 1880.219, 2027.111), stdev = 176.208
[info]   CI (99.9%): [1201.706, 2558.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1573.027 ±(99.9%) 527.475 B/op [Average]
[info]   (min, avg, max) = (1411.164, 1573.027, 1717.680), stdev = 136.984
[info]   CI (99.9%): [1045.552, 2100.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.056, 0.089), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.67% complete, ETA 01:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.865 ops/s
[info] # Warmup Iteration   2: 18084758.823 ops/s
[info] # Warmup Iteration   3: 18428761.065 ops/s
[info] Iteration   1: 18592212.544 ops/s
[info]                  ·gc.alloc.rate:                   567.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          578.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18588059.681 ops/s
[info]                  ·gc.alloc.rate:                   566.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18549555.476 ops/s
[info]                  ·gc.alloc.rate:               565.822 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 18542885.150 ops/s
[info]                  ·gc.alloc.rate:                   565.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18692843.135 ops/s
[info]                  ·gc.alloc.rate:               570.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.023 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   18593111.197 ±(99.9%) 230978.794 ops/s [Average]
[info]   (min, avg, max) = (18542885.150, 18593111.197, 18692843.135), stdev = 59984.459
[info]   CI (99.9%): [18362132.403, 18824089.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   567.143 ±(99.9%) 7.341 MB/sec [Average]
[info]   (min, avg, max) = (565.571, 567.143, 570.348), stdev = 1.906
[info]   CI (99.9%): [559.802, 574.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   570.855 ±(99.9%) 544.523 MB/sec [Average]
[info]   (min, avg, max) = (324.149, 570.855, 653.794), stdev = 141.411
[info]   CI (99.9%): [26.332, 1115.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   48.301 ±(99.9%) 45.902 B/op [Average]
[info]   (min, avg, max) = (27.498, 48.301, 55.243), stdev = 11.920
[info]   CI (99.9%): [2.400, 94.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.91% complete, ETA 01:22:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2132131.183 ops/s
[info] # Warmup Iteration   2: 5949643.195 ops/s
[info] # Warmup Iteration   3: 6140834.834 ops/s
[info] Iteration   1: 6142895.595 ops/s
[info]                  ·gc.alloc.rate:                   1686.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     419.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5996231.069 ops/s
[info]                  ·gc.alloc.rate:                   1646.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5992173.206 ops/s
[info]                  ·gc.alloc.rate:                   1645.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5993547.858 ops/s
[info]                  ·gc.alloc.rate:                   1645.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6134315.394 ops/s
[info]                  ·gc.alloc.rate:                   1683.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     432.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6051832.624 ±(99.9%) 305294.178 ops/s [Average]
[info]   (min, avg, max) = (5992173.206, 6051832.624, 6142895.595), stdev = 79283.928
[info]   CI (99.9%): [5746538.447, 6357126.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1661.294 ±(99.9%) 83.116 MB/sec [Average]
[info]   (min, avg, max) = (1645.010, 1661.294, 1686.114), stdev = 21.585
[info]   CI (99.9%): [1578.178, 1744.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1662.842 ±(99.9%) 74.209 MB/sec [Average]
[info]   (min, avg, max) = (1635.757, 1662.842, 1684.341), stdev = 19.272
[info]   CI (99.9%): [1588.633, 1737.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   432.470 ±(99.9%) 31.226 B/op [Average]
[info]   (min, avg, max) = (419.098, 432.470, 440.212), stdev = 8.109
[info]   CI (99.9%): [401.244, 463.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.023, 0.037), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.16% complete, ETA 01:22:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17305201.095 ops/s
[info] # Warmup Iteration   2: 22642702.521 ops/s
[info] # Warmup Iteration   3: 23699425.458 ops/s
[info] Iteration   1: 24502744.363 ops/s
[info]                  ·gc.alloc.rate:                   747.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 24482845.828 ops/s
[info]                  ·gc.alloc.rate:                   746.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24470028.571 ops/s
[info]                  ·gc.alloc.rate:                   746.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23640190.788 ops/s
[info]                  ·gc.alloc.rate:                   721.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23718379.569 ops/s
[info]                  ·gc.alloc.rate:                   723.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   24162837.824 ±(99.9%) 1703676.923 ops/s [Average]
[info]   (min, avg, max) = (23640190.788, 24162837.824, 24502744.363), stdev = 442439.487
[info]   CI (99.9%): [22459160.901, 25866514.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   737.053 ±(99.9%) 51.734 MB/sec [Average]
[info]   (min, avg, max) = (721.101, 737.053, 747.330), stdev = 13.435
[info]   CI (99.9%): [685.319, 788.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.349 ±(99.9%) 569.435 MB/sec [Average]
[info]   (min, avg, max) = (663.347, 730.349, 994.880), stdev = 147.881
[info]   CI (99.9%): [160.914, 1299.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   47.522 ±(99.9%) 35.575 B/op [Average]
[info]   (min, avg, max) = (42.617, 47.522, 63.990), stdev = 9.239
[info]   CI (99.9%): [11.948, 83.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.005, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.40% complete, ETA 01:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21600207.624 ops/s
[info] # Warmup Iteration   2: 27611112.524 ops/s
[info] # Warmup Iteration   3: 27896892.801 ops/s
[info] Iteration   1: 27895548.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 27915973.294 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 27916363.255 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 27917231.035 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 27919586.534 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   27912940.539 ±(99.9%) 37825.133 ops/s [Average]
[info]   (min, avg, max) = (27895548.576, 27912940.539, 27919586.534), stdev = 9823.067
[info]   CI (99.9%): [27875115.406, 27950765.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.65% complete, ETA 01:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 408568.752 ops/s
[info] # Warmup Iteration   2: 1315725.941 ops/s
[info] # Warmup Iteration   3: 1322789.829 ops/s
[info] Iteration   1: 1353343.379 ops/s
[info]                  ·gc.alloc.rate:                   2002.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2298.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1323408.522 ops/s
[info]                  ·gc.alloc.rate:                   1957.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2374.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1330133.569 ops/s
[info]                  ·gc.alloc.rate:                   1967.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2380.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1347075.258 ops/s
[info]                  ·gc.alloc.rate:                   1992.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2364.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1330622.301 ops/s
[info]                  ·gc.alloc.rate:                   1968.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2001.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1336916.606 ±(99.9%) 48750.326 ops/s [Average]
[info]   (min, avg, max) = (1323408.522, 1336916.606, 1353343.379), stdev = 12660.305
[info]   CI (99.9%): [1288166.280, 1385666.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1977.712 ±(99.9%) 72.134 MB/sec [Average]
[info]   (min, avg, max) = (1957.443, 1977.712, 2002.058), stdev = 18.733
[info]   CI (99.9%): [1905.579, 2049.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1940.433 ±(99.9%) 537.563 MB/sec [Average]
[info]   (min, avg, max) = (1692.683, 1940.433, 2023.799), stdev = 139.603
[info]   CI (99.9%): [1402.870, 2477.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2283.995 ±(99.9%) 621.312 B/op [Average]
[info]   (min, avg, max) = (2001.343, 2283.995, 2380.841), stdev = 161.353
[info]   CI (99.9%): [1662.683, 2905.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (0.074, 0.132, 0.172), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.89% complete, ETA 01:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279050.985 ops/s
[info] # Warmup Iteration   2: 337712.671 ops/s
[info] # Warmup Iteration   3: 336076.727 ops/s
[info] Iteration   1: 339091.287 ops/s
[info]                  ·gc.alloc.rate:                   2021.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9312.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 335176.680 ops/s
[info]                  ·gc.alloc.rate:                   1998.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9477.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 337665.960 ops/s
[info]                  ·gc.alloc.rate:                   2013.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9447.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.679 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 340756.582 ops/s
[info]                  ·gc.alloc.rate:                   2031.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9390.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 337365.775 ops/s
[info]                  ·gc.alloc.rate:                   2011.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9503.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   338011.257 ±(99.9%) 8002.018 ops/s [Average]
[info]   (min, avg, max) = (335176.680, 338011.257, 340756.582), stdev = 2078.099
[info]   CI (99.9%): [330009.239, 346013.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2015.487 ±(99.9%) 47.714 MB/sec [Average]
[info]   (min, avg, max) = (1998.473, 2015.487, 2031.814), stdev = 12.391
[info]   CI (99.9%): [1967.772, 2063.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.001, 9384.001, 9384.001), stdev = 0.001
[info]   CI (99.9%): [9384.001, 9384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2024.535 ±(99.9%) 47.441 MB/sec [Average]
[info]   (min, avg, max) = (2006.420, 2024.535, 2037.125), stdev = 12.320
[info]   CI (99.9%): [1977.093, 2071.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9426.377 ±(99.9%) 293.770 B/op [Average]
[info]   (min, avg, max) = (9312.678, 9426.377, 9503.466), stdev = 76.291
[info]   CI (99.9%): [9132.607, 9720.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.408 ±(99.9%) 0.897 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.408, 0.679), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.13% complete, ETA 01:21:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263318.797 ops/s
[info] # Warmup Iteration   2: 471134.239 ops/s
[info] # Warmup Iteration   3: 483082.738 ops/s
[info] Iteration   1: 483830.024 ops/s
[info]                  ·gc.alloc.rate:                   659.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2121.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 484690.079 ops/s
[info]                  ·gc.alloc.rate:                   660.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2115.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 485082.963 ops/s
[info]                  ·gc.alloc.rate:                   660.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2115.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 485142.522 ops/s
[info]                  ·gc.alloc.rate:                   660.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2119.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 485537.809 ops/s
[info]                  ·gc.alloc.rate:                   661.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2122.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   484856.679 ±(99.9%) 2494.481 ops/s [Average]
[info]   (min, avg, max) = (483830.024, 484856.679, 485537.809), stdev = 647.809
[info]   CI (99.9%): [482362.198, 487351.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   660.510 ±(99.9%) 3.517 MB/sec [Average]
[info]   (min, avg, max) = (659.080, 660.510, 661.499), stdev = 0.913
[info]   CI (99.9%): [656.993, 664.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.001, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   652.833 ±(99.9%) 5.265 MB/sec [Average]
[info]   (min, avg, max) = (651.471, 652.833, 654.894), stdev = 1.367
[info]   CI (99.9%): [647.568, 658.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2119.081 ±(99.9%) 12.436 B/op [Average]
[info]   (min, avg, max) = (2115.491, 2119.081, 2122.593), stdev = 3.229
[info]   CI (99.9%): [2106.645, 2131.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.529 ±(99.9%) 4.153 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.529, 2.459), stdev = 1.079
[info]   CI (99.9%): [≈ 0, 4.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.721 ±(99.9%) 13.512 B/op [Average]
[info]   (min, avg, max) = (0.135, 1.721, 7.998), stdev = 3.509
[info]   CI (99.9%): [≈ 0, 15.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.38% complete, ETA 01:21:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1195124.229 ops/s
[info] # Warmup Iteration   2: 1261124.100 ops/s
[info] # Warmup Iteration   3: 1301952.125 ops/s
[info] Iteration   1: 1303052.843 ops/s
[info]                  ·gc.alloc.rate:                   867.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     803.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1305836.348 ops/s
[info]                  ·gc.alloc.rate:                   869.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1201.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1302238.953 ops/s
[info]                  ·gc.alloc.rate:                   867.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1299648.765 ops/s
[info]                  ·gc.alloc.rate:                   865.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1212.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1301771.955 ops/s
[info]                  ·gc.alloc.rate:                   866.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1213.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1302509.773 ±(99.9%) 8645.556 ops/s [Average]
[info]   (min, avg, max) = (1299648.765, 1302509.773, 1305836.348), stdev = 2245.224
[info]   CI (99.9%): [1293864.216, 1311155.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   867.304 ±(99.9%) 5.799 MB/sec [Average]
[info]   (min, avg, max) = (865.413, 867.304, 869.570), stdev = 1.506
[info]   CI (99.9%): [861.504, 873.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   866.533 ±(99.9%) 706.850 MB/sec [Average]
[info]   (min, avg, max) = (664.775, 866.533, 1003.548), stdev = 183.567
[info]   CI (99.9%): [159.683, 1573.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1047.085 ±(99.9%) 854.461 B/op [Average]
[info]   (min, avg, max) = (803.000, 1047.085, 1213.311), stdev = 221.901
[info]   CI (99.9%): [192.624, 1901.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.080, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.62% complete, ETA 01:21:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76806.664 ops/s
[info] # Warmup Iteration   2: 115015.454 ops/s
[info] # Warmup Iteration   3: 115219.801 ops/s
[info] Iteration   1: 112870.407 ops/s
[info]                  ·gc.alloc.rate:                   3908.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4058.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56590.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.451 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 114965.079 ops/s
[info]                  ·gc.alloc.rate:                   3981.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3736.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51142.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.995 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 113951.988 ops/s
[info]                  ·gc.alloc.rate:                   3945.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56416.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.300 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 114925.187 ops/s
[info]                  ·gc.alloc.rate:                   3979.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55940.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.425 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 115476.196 ops/s
[info]                  ·gc.alloc.rate:                   3998.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51033.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.702 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   114437.771 ±(99.9%) 3986.192 ops/s [Average]
[info]   (min, avg, max) = (112870.407, 114437.771, 115476.196), stdev = 1035.201
[info]   CI (99.9%): [110451.579, 118423.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3962.684 ±(99.9%) 138.781 MB/sec [Average]
[info]   (min, avg, max) = (3908.039, 3962.684, 3998.515), stdev = 36.041
[info]   CI (99.9%): [3823.903, 4101.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54496.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54496.004, 54496.004, 54496.004), stdev = 0.001
[info]   CI (99.9%): [54496.003, 54496.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3941.812 ±(99.9%) 709.636 MB/sec [Average]
[info]   (min, avg, max) = (3736.149, 3941.812, 4085.404), stdev = 184.290
[info]   CI (99.9%): [3232.176, 4651.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54224.511 ±(99.9%) 11064.586 B/op [Average]
[info]   (min, avg, max) = (51033.792, 54224.511, 56590.406), stdev = 2873.438
[info]   CI (99.9%): [43159.925, 65289.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.167), stdev = 0.027
[info]   CI (99.9%): [0.025, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.775 ±(99.9%) 1.436 B/op [Average]
[info]   (min, avg, max) = (1.425, 1.775, 2.300), stdev = 0.373
[info]   CI (99.9%): [0.339, 3.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   58.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.87% complete, ETA 01:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232145.029 ops/s
[info] # Warmup Iteration   2: 311251.190 ops/s
[info] # Warmup Iteration   3: 316886.525 ops/s
[info] Iteration   1: 317620.062 ops/s
[info]                  ·gc.alloc.rate:                   1081.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4903.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 317145.194 ops/s
[info]                  ·gc.alloc.rate:                   1080.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4920.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 316488.211 ops/s
[info]                  ·gc.alloc.rate:                   1077.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6602.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.518 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 321961.634 ops/s
[info]                  ·gc.alloc.rate:                   1096.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4892.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 319683.558 ops/s
[info]                  ·gc.alloc.rate:                   1088.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4940.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   318579.732 ±(99.9%) 8612.242 ops/s [Average]
[info]   (min, avg, max) = (316488.211, 318579.732, 321961.634), stdev = 2236.572
[info]   CI (99.9%): [309967.490, 327191.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1084.947 ±(99.9%) 29.318 MB/sec [Average]
[info]   (min, avg, max) = (1077.831, 1084.947, 1096.447), stdev = 7.614
[info]   CI (99.9%): [1055.630, 1114.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1062.620 ±(99.9%) 570.927 MB/sec [Average]
[info]   (min, avg, max) = (989.558, 1062.620, 1327.637), stdev = 148.268
[info]   CI (99.9%): [491.694, 1633.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5251.941 ±(99.9%) 2907.536 B/op [Average]
[info]   (min, avg, max) = (4892.706, 5251.941, 6602.276), stdev = 755.078
[info]   CI (99.9%): [2344.405, 8159.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.371 ±(99.9%) 0.458 B/op [Average]
[info]   (min, avg, max) = (0.204, 0.371, 0.518), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.11% complete, ETA 01:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403942.630 ops/s
[info] # Warmup Iteration   2: 651630.527 ops/s
[info] # Warmup Iteration   3: 671192.596 ops/s
[info] Iteration   1: 673281.008 ops/s
[info]                  ·gc.alloc.rate:               496.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 597.945 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 668510.623 ops/s
[info]                  ·gc.alloc.rate:                   492.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1532.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 656178.138 ops/s
[info]                  ·gc.alloc.rate:               483.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 781.326 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 656278.758 ops/s
[info]                  ·gc.alloc.rate:                   483.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1562.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 674726.540 ops/s
[info]                  ·gc.alloc.rate:               497.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 759.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   665795.014 ±(99.9%) 34774.866 ops/s [Average]
[info]   (min, avg, max) = (656178.138, 665795.014, 674726.540), stdev = 9030.922
[info]   CI (99.9%): [631020.148, 700569.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   490.719 ±(99.9%) 25.615 MB/sec [Average]
[info]   (min, avg, max) = (483.655, 490.719, 497.318), stdev = 6.652
[info]   CI (99.9%): [465.105, 516.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   441.918 ±(99.9%) 743.636 MB/sec [Average]
[info]   (min, avg, max) = (255.787, 441.918, 651.474), stdev = 193.120
[info]   CI (99.9%): [≈ 0, 1185.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1046.736 ±(99.9%) 1781.061 B/op [Average]
[info]   (min, avg, max) = (597.945, 1046.736, 1562.368), stdev = 462.536
[info]   CI (99.9%): [≈ 0, 2827.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.506 ±(99.9%) 4.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.448), stdev = 1.086
[info]   CI (99.9%): [≈ 0, 4.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.193 ±(99.9%) 9.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.193, 5.764), stdev = 2.557
[info]   CI (99.9%): [≈ 0, 11.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.36% complete, ETA 01:20:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1916153.520 ops/s
[info] # Warmup Iteration   2: 2128815.006 ops/s
[info] # Warmup Iteration   3: 2106179.317 ops/s
[info] Iteration   1: 2146964.208 ops/s
[info]                  ·gc.alloc.rate:                   993.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2138827.514 ops/s
[info]                  ·gc.alloc.rate:                   989.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2139818.495 ops/s
[info]                  ·gc.alloc.rate:                   989.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2157571.794 ops/s
[info]                  ·gc.alloc.rate:                   998.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2156086.979 ops/s
[info]                  ·gc.alloc.rate:                   997.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2147853.798 ±(99.9%) 33847.138 ops/s [Average]
[info]   (min, avg, max) = (2138827.514, 2147853.798, 2157571.794), stdev = 8789.994
[info]   CI (99.9%): [2114006.660, 2181700.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   993.545 ±(99.9%) 15.906 MB/sec [Average]
[info]   (min, avg, max) = (989.322, 993.545, 998.100), stdev = 4.131
[info]   CI (99.9%): [977.639, 1009.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.271 ±(99.9%) 18.489 MB/sec [Average]
[info]   (min, avg, max) = (993.873, 999.271, 1006.032), stdev = 4.802
[info]   CI (99.9%): [980.782, 1017.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   732.198 ±(99.9%) 9.894 B/op [Average]
[info]   (min, avg, max) = (728.594, 732.198, 734.696), stdev = 2.569
[info]   CI (99.9%): [722.304, 742.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.049, 0.061), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.60% complete, ETA 01:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2437357.464 ops/s
[info] # Warmup Iteration   2: 2684378.219 ops/s
[info] # Warmup Iteration   3: 2682484.705 ops/s
[info] Iteration   1: 2683744.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2674352.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2674446.700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2673446.918 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2672305.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2675659.085 ±(99.9%) 17717.833 ops/s [Average]
[info]   (min, avg, max) = (2672305.561, 2675659.085, 2683744.170), stdev = 4601.265
[info]   CI (99.9%): [2657941.252, 2693376.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.85% complete, ETA 01:20:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308747.763 ops/s
[info] # Warmup Iteration   2: 381778.962 ops/s
[info] # Warmup Iteration   3: 393572.143 ops/s
[info] Iteration   1: 394605.616 ops/s
[info]                  ·gc.alloc.rate:                   567.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1311.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 393576.031 ops/s
[info]                  ·gc.alloc.rate:                   566.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2627.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 392216.157 ops/s
[info]                  ·gc.alloc.rate:                   564.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2635.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 394029.855 ops/s
[info]                  ·gc.alloc.rate:               566.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2626.243 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 394404.093 ops/s
[info]                  ·gc.alloc.rate:               567.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      329.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1313.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   393766.350 ±(99.9%) 3663.094 ops/s [Average]
[info]   (min, avg, max) = (392216.157, 393766.350, 394605.616), stdev = 951.294
[info]   CI (99.9%): [390103.257, 397429.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   566.443 ±(99.9%) 5.114 MB/sec [Average]
[info]   (min, avg, max) = (564.294, 566.443, 567.624), stdev = 1.328
[info]   CI (99.9%): [561.329, 571.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   525.877 ±(99.9%) 692.380 MB/sec [Average]
[info]   (min, avg, max) = (328.732, 525.877, 657.501), stdev = 179.809
[info]   CI (99.9%): [≈ 0, 1218.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2102.838 ±(99.9%) 2779.298 B/op [Average]
[info]   (min, avg, max) = (1311.168, 2102.838, 2635.708), stdev = 721.775
[info]   CI (99.9%): [≈ 0, 4882.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 3.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 2.042), stdev = 0.902
[info]   CI (99.9%): [≈ 0, 3.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.713 ±(99.9%) 13.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.713, 8.146), stdev = 3.598
[info]   CI (99.9%): [≈ 0, 15.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.09% complete, ETA 01:20:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15593.328 ops/s
[info] # Warmup Iteration   2: 18972.235 ops/s
[info] # Warmup Iteration   3: 18845.604 ops/s
[info] Iteration   1: 18960.144 ops/s
[info]                  ·gc.alloc.rate:                   1367.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              113473.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110287.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.912 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 19063.294 ops/s
[info]                  ·gc.alloc.rate:                   1374.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              113480.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110126.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.749 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19007.285 ops/s
[info]                  ·gc.alloc.rate:                   1370.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              113479.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110974.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.447 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18797.905 ops/s
[info]                  ·gc.alloc.rate:                   1355.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              113480.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112576.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19028.822 ops/s
[info]                  ·gc.alloc.rate:                   1371.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              113480.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111595.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.887 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   18971.490 ±(99.9%) 400.433 ops/s [Average]
[info]   (min, avg, max) = (18797.905, 18971.490, 19063.294), stdev = 103.991
[info]   CI (99.9%): [18571.057, 19371.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1367.889 ±(99.9%) 28.871 MB/sec [Average]
[info]   (min, avg, max) = (1355.395, 1367.889, 1374.546), stdev = 7.498
[info]   CI (99.9%): [1339.018, 1396.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   113478.530 ±(99.9%) 11.381 B/op [Average]
[info]   (min, avg, max) = (113473.275, 113478.530, 113480.049), stdev = 2.956
[info]   CI (99.9%): [113467.149, 113489.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1339.324 ±(99.9%) 31.633 MB/sec [Average]
[info]   (min, avg, max) = (1328.628, 1339.324, 1349.203), stdev = 8.215
[info]   CI (99.9%): [1307.691, 1370.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   111112.081 ±(99.9%) 3874.317 B/op [Average]
[info]   (min, avg, max) = (110126.052, 111112.081, 112576.494), stdev = 1006.148
[info]   CI (99.9%): [107237.763, 114986.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.167), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.548 ±(99.9%) 17.730 B/op [Average]
[info]   (min, avg, max) = (1.743, 6.548, 13.749), stdev = 4.604
[info]   CI (99.9%): [≈ 0, 24.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.33% complete, ETA 01:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20156.773 ops/s
[info] # Warmup Iteration   2: 29979.753 ops/s
[info] # Warmup Iteration   3: 31034.913 ops/s
[info] Iteration   1: 31267.251 ops/s
[info]                  ·gc.alloc.rate:                   839.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              42277.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32860.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 31325.852 ops/s
[info]                  ·gc.alloc.rate:                   841.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49331.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.229 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30486.699 ops/s
[info]                  ·gc.alloc.rate:                   818.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33891.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30420.002 ops/s
[info]                  ·gc.alloc.rate:               816.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      987.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51093.309 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 30633.397 ops/s
[info]                  ·gc.alloc.rate:                   822.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33984.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   30826.640 ±(99.9%) 1680.232 ops/s [Average]
[info]   (min, avg, max) = (30420.002, 30826.640, 31325.852), stdev = 436.351
[info]   CI (99.9%): [29146.408, 32506.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   827.634 ±(99.9%) 45.794 MB/sec [Average]
[info]   (min, avg, max) = (816.578, 827.634, 841.051), stdev = 11.893
[info]   CI (99.9%): [781.840, 873.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42253.986 ±(99.9%) 51.416 B/op [Average]
[info]   (min, avg, max) = (42248.014, 42253.986, 42277.872), stdev = 13.353
[info]   CI (99.9%): [42202.569, 42305.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.066 ±(99.9%) 691.697 MB/sec [Average]
[info]   (min, avg, max) = (652.770, 788.066, 987.542), stdev = 179.631
[info]   CI (99.9%): [96.369, 1479.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40231.986 ±(99.9%) 35205.237 B/op [Average]
[info]   (min, avg, max) = (32860.210, 40231.986, 51093.309), stdev = 9142.688
[info]   CI (99.9%): [5026.748, 75437.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.318 ±(99.9%) 7.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.318, 5.229), stdev = 2.007
[info]   CI (99.9%): [≈ 0, 10.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.58% complete, ETA 01:19:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36792.513 ops/s
[info] # Warmup Iteration   2: 39602.830 ops/s
[info] # Warmup Iteration   3: 39772.641 ops/s
[info] Iteration   1: 40021.654 ops/s
[info]                  ·gc.alloc.rate:                   537.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13071.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.662 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 39992.150 ops/s
[info]                  ·gc.alloc.rate:                   537.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26162.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39887.074 ops/s
[info]                  ·gc.alloc.rate:                   535.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26232.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40017.825 ops/s
[info]                  ·gc.alloc.rate:               537.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          21144.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13073.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 39973.742 ops/s
[info]                  ·gc.alloc.rate:                   537.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26175.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   39978.489 ±(99.9%) 210.701 ops/s [Average]
[info]   (min, avg, max) = (39887.074, 39978.489, 40021.654), stdev = 54.718
[info]   CI (99.9%): [39767.788, 40189.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   537.144 ±(99.9%) 2.732 MB/sec [Average]
[info]   (min, avg, max) = (535.949, 537.144, 537.660), stdev = 0.709
[info]   CI (99.9%): [534.412, 539.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21144.011, 21144.011, 21144.012), stdev = 0.001
[info]   CI (99.9%): [21144.010, 21144.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   531.916 ±(99.9%) 701.327 MB/sec [Average]
[info]   (min, avg, max) = (332.397, 531.916, 665.026), stdev = 182.132
[info]   CI (99.9%): [≈ 0, 1233.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20943.026 ±(99.9%) 27665.658 B/op [Average]
[info]   (min, avg, max) = (13071.835, 20943.026, 26232.142), stdev = 7184.684
[info]   CI (99.9%): [≈ 0, 48608.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.359 ±(99.9%) 2.605 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.359, 1.568), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 2.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.136 ±(99.9%) 102.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.136, 61.662), stdev = 26.602
[info]   CI (99.9%): [≈ 0, 116.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.82% complete, ETA 01:19:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15010.872 ops/s
[info] # Warmup Iteration   2: 25164.002 ops/s
[info] # Warmup Iteration   3: 25085.606 ops/s
[info] Iteration   1: 25156.654 ops/s
[info]                  ·gc.alloc.rate:                   1302.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82203.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25061.652 ops/s
[info]                  ·gc.alloc.rate:                   1297.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82936.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.844 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25603.471 ops/s
[info]                  ·gc.alloc.rate:                   1325.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81648.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.839 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25508.403 ops/s
[info]                  ·gc.alloc.rate:                   1320.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82428.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25037.178 ops/s
[info]                  ·gc.alloc.rate:                   1295.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84334.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.617 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25273.471 ±(99.9%) 1015.944 ops/s [Average]
[info]   (min, avg, max) = (25037.178, 25273.471, 25603.471), stdev = 263.837
[info]   CI (99.9%): [24257.527, 26289.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1308.208 ±(99.9%) 52.333 MB/sec [Average]
[info]   (min, avg, max) = (1295.953, 1308.208, 1325.323), stdev = 13.591
[info]   CI (99.9%): [1255.875, 1360.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81456.019 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (81456.017, 81456.019, 81456.024), stdev = 0.003
[info]   CI (99.9%): [81456.008, 81456.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1328.254 ±(99.9%) 42.789 MB/sec [Average]
[info]   (min, avg, max) = (1314.105, 1328.254, 1341.756), stdev = 11.112
[info]   CI (99.9%): [1285.465, 1371.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82710.405 ±(99.9%) 3924.105 B/op [Average]
[info]   (min, avg, max) = (81648.725, 82710.405, 84334.973), stdev = 1019.078
[info]   CI (99.9%): [78786.300, 86634.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.700 ±(99.9%) 10.303 B/op [Average]
[info]   (min, avg, max) = (2.617, 5.700, 8.991), stdev = 2.676
[info]   CI (99.9%): [≈ 0, 16.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.07% complete, ETA 01:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15993.211 ops/s
[info] # Warmup Iteration   2: 26997.962 ops/s
[info] # Warmup Iteration   3: 27441.599 ops/s
[info] Iteration   1: 27036.260 ops/s
[info]                  ·gc.alloc.rate:                   1851.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              107792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96636.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27300.944 ops/s
[info]                  ·gc.alloc.rate:                   1869.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              107769.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115648.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.600 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27608.108 ops/s
[info]                  ·gc.alloc.rate:                   1890.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95823.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.120 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27372.082 ops/s
[info]                  ·gc.alloc.rate:                   1874.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116516.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.379 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 27091.285 ops/s
[info]                  ·gc.alloc.rate:                   1854.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118103.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.837 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27281.736 ±(99.9%) 885.606 ops/s [Average]
[info]   (min, avg, max) = (27036.260, 27281.736, 27608.108), stdev = 229.989
[info]   CI (99.9%): [26396.130, 28167.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1868.178 ±(99.9%) 60.001 MB/sec [Average]
[info]   (min, avg, max) = (1851.794, 1868.178, 1890.177), stdev = 15.582
[info]   CI (99.9%): [1808.177, 1928.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   107763.558 ±(99.9%) 68.003 B/op [Average]
[info]   (min, avg, max) = (107752.016, 107763.558, 107792.016), stdev = 17.660
[info]   CI (99.9%): [107695.555, 107831.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1881.471 ±(99.9%) 742.943 MB/sec [Average]
[info]   (min, avg, max) = (1660.150, 1881.471, 2033.007), stdev = 192.940
[info]   CI (99.9%): [1138.528, 2624.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   108545.934 ±(99.9%) 43438.072 B/op [Average]
[info]   (min, avg, max) = (95823.913, 108545.934, 118103.626), stdev = 11280.729
[info]   CI (99.9%): [65107.862, 151984.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.999 ±(99.9%) 7.211 B/op [Average]
[info]   (min, avg, max) = (3.600, 5.999, 8.379), stdev = 1.873
[info]   CI (99.9%): [≈ 0, 13.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.31% complete, ETA 01:19:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12683.459 ops/s
[info] # Warmup Iteration   2: 27161.781 ops/s
[info] # Warmup Iteration   3: 27114.123 ops/s
[info] Iteration   1: 26886.716 ops/s
[info]                  ·gc.alloc.rate:                   1577.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95927.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.437 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 26807.556 ops/s
[info]                  ·gc.alloc.rate:                   1572.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97047.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.111 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27222.580 ops/s
[info]                  ·gc.alloc.rate:                   1596.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77024.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27387.130 ops/s
[info]                  ·gc.alloc.rate:                   1606.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.393 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 27469.944 ops/s
[info]                  ·gc.alloc.rate:                   1611.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96499.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.963 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   27154.785 ±(99.9%) 1139.579 ops/s [Average]
[info]   (min, avg, max) = (26807.556, 27154.785, 27469.944), stdev = 295.945
[info]   CI (99.9%): [26015.206, 28294.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1592.840 ±(99.9%) 67.056 MB/sec [Average]
[info]   (min, avg, max) = (1572.364, 1592.840, 1611.234), stdev = 17.414
[info]   CI (99.9%): [1525.784, 1659.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   92312.018 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (92312.016, 92312.018, 92312.022), stdev = 0.003
[info]   CI (99.9%): [92312.008, 92312.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1596.790 ±(99.9%) 573.527 MB/sec [Average]
[info]   (min, avg, max) = (1332.294, 1596.790, 1684.323), stdev = 148.943
[info]   CI (99.9%): [1023.263, 2170.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92551.125 ±(99.9%) 33458.831 B/op [Average]
[info]   (min, avg, max) = (77024.718, 92551.125, 97047.641), stdev = 8689.152
[info]   CI (99.9%): [59092.294, 126009.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.621 ±(99.9%) 8.704 B/op [Average]
[info]   (min, avg, max) = (1.204, 3.621, 6.111), stdev = 2.261
[info]   CI (99.9%): [≈ 0, 12.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.56% complete, ETA 01:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22736.905 ops/s
[info] # Warmup Iteration   2: 30482.487 ops/s
[info] # Warmup Iteration   3: 29981.629 ops/s
[info] Iteration   1: 30416.136 ops/s
[info]                  ·gc.alloc.rate:                   1687.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86123.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.232 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30164.260 ops/s
[info]                  ·gc.alloc.rate:                   1673.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87346.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.689 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30504.957 ops/s
[info]                  ·gc.alloc.rate:                   1692.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86745.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.444 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30244.929 ops/s
[info]                  ·gc.alloc.rate:                   1678.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87823.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.333 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30224.315 ops/s
[info]                  ·gc.alloc.rate:                   1677.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88124.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30310.920 ±(99.9%) 551.615 ops/s [Average]
[info]   (min, avg, max) = (30164.260, 30310.920, 30504.957), stdev = 143.253
[info]   CI (99.9%): [29759.305, 30862.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1681.906 ±(99.9%) 30.494 MB/sec [Average]
[info]   (min, avg, max) = (1673.732, 1681.906, 1692.611), stdev = 7.919
[info]   CI (99.9%): [1651.412, 1712.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   87328.016 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (87328.014, 87328.016, 87328.019), stdev = 0.002
[info]   CI (99.9%): [87328.007, 87328.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1680.024 ±(99.9%) 42.816 MB/sec [Average]
[info]   (min, avg, max) = (1664.431, 1680.024, 1692.351), stdev = 11.119
[info]   CI (99.9%): [1637.209, 1722.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   87232.563 ±(99.9%) 3119.372 B/op [Average]
[info]   (min, avg, max) = (86123.180, 87232.563, 88124.229), stdev = 810.091
[info]   CI (99.9%): [84113.190, 90351.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.624 ±(99.9%) 8.055 B/op [Average]
[info]   (min, avg, max) = (3.232, 5.624, 8.689), stdev = 2.092
[info]   CI (99.9%): [≈ 0, 13.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.80% complete, ETA 01:19:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23595.930 ops/s
[info] # Warmup Iteration   2: 30301.222 ops/s
[info] # Warmup Iteration   3: 29684.916 ops/s
[info] Iteration   1: 29571.151 ops/s
[info]                  ·gc.alloc.rate:                   1583.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70833.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30348.892 ops/s
[info]                  ·gc.alloc.rate:                   1624.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86690.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.398 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30161.702 ops/s
[info]                  ·gc.alloc.rate:                   1614.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87647.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.086 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30129.022 ops/s
[info]                  ·gc.alloc.rate:                   1612.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88091.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.525 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 29817.246 ops/s
[info]                  ·gc.alloc.rate:                   1596.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71414.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.296 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30005.603 ±(99.9%) 1189.459 ops/s [Average]
[info]   (min, avg, max) = (29571.151, 30005.603, 30348.892), stdev = 308.899
[info]   CI (99.9%): [28816.144, 31195.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1606.438 ±(99.9%) 62.966 MB/sec [Average]
[info]   (min, avg, max) = (1583.297, 1606.438, 1624.778), stdev = 16.352
[info]   CI (99.9%): [1543.472, 1669.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   84248.015 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (84248.014, 84248.015, 84248.020), stdev = 0.003
[info]   CI (99.9%): [84248.006, 84248.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1544.539 ±(99.9%) 711.488 MB/sec [Average]
[info]   (min, avg, max) = (1331.202, 1544.539, 1686.337), stdev = 184.771
[info]   CI (99.9%): [833.051, 2256.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   80935.737 ±(99.9%) 34552.676 B/op [Average]
[info]   (min, avg, max) = (70833.920, 80935.737, 88091.798), stdev = 8973.220
[info]   CI (99.9%): [46383.061, 115488.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4.369 ±(99.9%) 8.393 B/op [Average]
[info]   (min, avg, max) = (1.086, 4.369, 6.525), stdev = 2.180
[info]   CI (99.9%): [≈ 0, 12.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.05% complete, ETA 01:18:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5137.423 ops/s
[info] # Warmup Iteration   2: 8161.770 ops/s
[info] # Warmup Iteration   3: 8373.853 ops/s
[info] Iteration   1: 8412.721 ops/s
[info]                  ·gc.alloc.rate:                   1190.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246254.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.578 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8300.091 ops/s
[info]                  ·gc.alloc.rate:                   1173.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250587.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.735 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8419.366 ops/s
[info]                  ·gc.alloc.rate:                   1190.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186218.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8435.169 ops/s
[info]                  ·gc.alloc.rate:                   1192.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248876.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.652 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8342.944 ops/s
[info]                  ·gc.alloc.rate:                   1179.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189507.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8382.058 ±(99.9%) 222.883 ops/s [Average]
[info]   (min, avg, max) = (8300.091, 8382.058, 8435.169), stdev = 57.882
[info]   CI (99.9%): [8159.175, 8604.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1185.359 ±(99.9%) 31.855 MB/sec [Average]
[info]   (min, avg, max) = (1173.703, 1185.359, 1192.796), stdev = 8.273
[info]   CI (99.9%): [1153.505, 1217.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   222544.232 ±(99.9%) 1.548 B/op [Average]
[info]   (min, avg, max) = (222544.051, 222544.232, 222544.951), stdev = 0.402
[info]   CI (99.9%): [222542.685, 222545.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1194.633 ±(99.9%) 683.297 MB/sec [Average]
[info]   (min, avg, max) = (996.277, 1194.633, 1333.935), stdev = 177.450
[info]   CI (99.9%): [511.337, 1877.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   224288.948 ±(99.9%) 128258.023 B/op [Average]
[info]   (min, avg, max) = (186218.431, 224288.948, 250587.182), stdev = 33308.201
[info]   CI (99.9%): [96030.925, 352546.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.098 ±(99.9%) 25.455 B/op [Average]
[info]   (min, avg, max) = (3.891, 14.098, 19.735), stdev = 6.611
[info]   CI (99.9%): [≈ 0, 39.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9.29% complete, ETA 01:18:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13615.391 ops/s
[info] # Warmup Iteration   2: 18049.519 ops/s
[info] # Warmup Iteration   3: 18306.618 ops/s
[info] Iteration   1: 17764.058 ops/s
[info]                  ·gc.alloc.rate:                   1531.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              135725.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147368.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.689 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18072.651 ops/s
[info]                  ·gc.alloc.rate:                   1559.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116482.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17675.255 ops/s
[info]                  ·gc.alloc.rate:                   1524.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149533.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.414 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17914.572 ops/s
[info]                  ·gc.alloc.rate:                   1544.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              135735.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118452.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.658 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18175.769 ops/s
[info]                  ·gc.alloc.rate:                   1567.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146343.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.605 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17920.461 ±(99.9%) 800.726 ops/s [Average]
[info]   (min, avg, max) = (17675.255, 17920.461, 18175.769), stdev = 207.946
[info]   CI (99.9%): [17119.735, 18721.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1545.728 ±(99.9%) 69.173 MB/sec [Average]
[info]   (min, avg, max) = (1524.831, 1545.728, 1567.575), stdev = 17.964
[info]   CI (99.9%): [1476.555, 1614.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   135733.779 ±(99.9%) 17.452 B/op [Average]
[info]   (min, avg, max) = (135725.703, 135733.779, 135736.033), stdev = 4.532
[info]   CI (99.9%): [135716.328, 135751.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1543.933 ±(99.9%) 706.654 MB/sec [Average]
[info]   (min, avg, max) = (1338.164, 1543.933, 1690.081), stdev = 183.516
[info]   CI (99.9%): [837.279, 2250.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   135636.295 ±(99.9%) 64075.099 B/op [Average]
[info]   (min, avg, max) = (116482.663, 135636.295, 149533.889), stdev = 16640.100
[info]   CI (99.9%): [71561.196, 199711.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.211 ±(99.9%) 15.293 B/op [Average]
[info]   (min, avg, max) = (3.605, 6.211, 12.690), stdev = 3.971
[info]   CI (99.9%): [≈ 0, 21.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.54% complete, ETA 01:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27642.119 ops/s
[info] # Warmup Iteration   2: 41188.451 ops/s
[info] # Warmup Iteration   3: 41188.565 ops/s
[info] Iteration   1: 41796.894 ops/s
[info]                  ·gc.alloc.rate:                   1154.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49317.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41801.322 ops/s
[info]                  ·gc.alloc.rate:                   1154.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37170.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.919 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 40887.703 ops/s
[info]                  ·gc.alloc.rate:                   1128.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50923.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.603 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41606.888 ops/s
[info]                  ·gc.alloc.rate:                   1148.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37721.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41666.218 ops/s
[info]                  ·gc.alloc.rate:                   1150.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50500.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.573 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   41551.805 ±(99.9%) 1465.628 ops/s [Average]
[info]   (min, avg, max) = (40887.703, 41551.805, 41801.322), stdev = 380.619
[info]   CI (99.9%): [40086.177, 43017.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1147.247 ±(99.9%) 41.037 MB/sec [Average]
[info]   (min, avg, max) = (1128.722, 1147.247, 1154.468), stdev = 10.657
[info]   CI (99.9%): [1106.209, 1188.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43448.131 ±(99.9%) 1.040 B/op [Average]
[info]   (min, avg, max) = (43448.010, 43448.131, 43448.615), stdev = 0.270
[info]   CI (99.9%): [43447.091, 43449.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.970 ±(99.9%) 698.912 MB/sec [Average]
[info]   (min, avg, max) = (987.668, 1190.970, 1336.954), stdev = 181.505
[info]   CI (99.9%): [492.058, 1889.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45126.637 ±(99.9%) 27103.276 B/op [Average]
[info]   (min, avg, max) = (37170.561, 45126.637, 50923.655), stdev = 7038.635
[info]   CI (99.9%): [18023.361, 72229.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.361 ±(99.9%) 4.237 B/op [Average]
[info]   (min, avg, max) = (1.573, 2.361, 3.919), stdev = 1.100
[info]   CI (99.9%): [≈ 0, 6.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.78% complete, ETA 01:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56418.041 ops/s
[info] # Warmup Iteration   2: 60404.341 ops/s
[info] # Warmup Iteration   3: 61214.143 ops/s
[info] Iteration   1: 61066.622 ops/s
[info]                  ·gc.alloc.rate:                   789.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17134.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 60371.439 ops/s
[info]                  ·gc.alloc.rate:                   780.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25997.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.171 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59966.169 ops/s
[info]                  ·gc.alloc.rate:               775.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17466.068 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 59741.529 ops/s
[info]                  ·gc.alloc.rate:               772.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17558.164 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 60349.746 ops/s
[info]                  ·gc.alloc.rate:                   780.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26119.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.800 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   60299.101 ±(99.9%) 1943.161 ops/s [Average]
[info]   (min, avg, max) = (59741.529, 60299.101, 61066.622), stdev = 504.633
[info]   CI (99.9%): [58355.940, 62242.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   779.302 ±(99.9%) 24.910 MB/sec [Average]
[info]   (min, avg, max) = (772.062, 779.302, 789.117), stdev = 6.469
[info]   CI (99.9%): [754.392, 804.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.290 ±(99.9%) 704.182 MB/sec [Average]
[info]   (min, avg, max) = (664.890, 799.290, 1001.959), stdev = 182.874
[info]   CI (99.9%): [95.108, 1503.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20855.089 ±(99.9%) 18300.842 B/op [Average]
[info]   (min, avg, max) = (17134.605, 20855.089, 26119.287), stdev = 4752.671
[info]   CI (99.9%): [2554.246, 39155.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.409 ±(99.9%) 6.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.409, 3.800), stdev = 1.611
[info]   CI (99.9%): [≈ 0, 7.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10.02% complete, ETA 01:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14407.992 ops/s
[info] # Warmup Iteration   2: 30340.771 ops/s
[info] # Warmup Iteration   3: 30706.921 ops/s
[info] Iteration   1: 30510.273 ops/s
[info]                  ·gc.alloc.rate:                   2069.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102263.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.295 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 30576.941 ops/s
[info]                  ·gc.alloc.rate:                   2073.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102999.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.500 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 30947.569 ops/s
[info]                  ·gc.alloc.rate:                   2099.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102523.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.117 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30363.033 ops/s
[info]                  ·gc.alloc.rate:                   2059.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122543.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.316 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 30281.587 ops/s
[info]                  ·gc.alloc.rate:                   2053.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105667.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.328 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   30535.881 ±(99.9%) 993.680 ops/s [Average]
[info]   (min, avg, max) = (30281.587, 30535.881, 30947.569), stdev = 258.055
[info]   CI (99.9%): [29542.201, 31529.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2071.049 ±(99.9%) 67.421 MB/sec [Average]
[info]   (min, avg, max) = (2053.827, 2071.049, 2099.004), stdev = 17.509
[info]   CI (99.9%): [2003.628, 2138.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   106744.016 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (106744.014, 106744.016, 106744.020), stdev = 0.003
[info]   CI (99.9%): [106744.005, 106744.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2079.346 ±(99.9%) 617.178 MB/sec [Average]
[info]   (min, avg, max) = (1982.469, 2079.346, 2364.109), stdev = 160.279
[info]   CI (99.9%): [1462.168, 2696.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107199.429 ±(99.9%) 33439.300 B/op [Average]
[info]   (min, avg, max) = (102263.221, 107199.429, 122543.342), stdev = 8684.080
[info]   CI (99.9%): [73760.129, 140638.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.511 ±(99.9%) 7.403 B/op [Average]
[info]   (min, avg, max) = (2.117, 4.511, 7.500), stdev = 1.923
[info]   CI (99.9%): [≈ 0, 11.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.27% complete, ETA 01:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15161.112 ops/s
[info] # Warmup Iteration   2: 27643.903 ops/s
[info] # Warmup Iteration   3: 27785.747 ops/s
[info] Iteration   1: 27835.680 ops/s
[info]                  ·gc.alloc.rate:                   1676.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92936.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.708 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27698.813 ops/s
[info]                  ·gc.alloc.rate:                   1668.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94150.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.731 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28053.025 ops/s
[info]                  ·gc.alloc.rate:                   1689.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93687.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.336 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28258.164 ops/s
[info]                  ·gc.alloc.rate:                   1702.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93530.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.797 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28190.244 ops/s
[info]                  ·gc.alloc.rate:                   1698.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94221.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.811 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   28007.185 ±(99.9%) 909.417 ops/s [Average]
[info]   (min, avg, max) = (27698.813, 28007.185, 28258.164), stdev = 236.173
[info]   CI (99.9%): [27097.769, 28916.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1687.243 ±(99.9%) 54.857 MB/sec [Average]
[info]   (min, avg, max) = (1668.782, 1687.243, 1702.625), stdev = 14.246
[info]   CI (99.9%): [1632.386, 1742.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   94808.017 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (94808.015, 94808.017, 94808.023), stdev = 0.003
[info]   CI (99.9%): [94808.005, 94808.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1667.624 ±(99.9%) 67.551 MB/sec [Average]
[info]   (min, avg, max) = (1643.694, 1667.624, 1687.594), stdev = 17.543
[info]   CI (99.9%): [1600.074, 1735.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   93705.289 ±(99.9%) 2005.752 B/op [Average]
[info]   (min, avg, max) = (92936.828, 93705.289, 94221.220), stdev = 520.887
[info]   CI (99.9%): [91699.537, 95711.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.677 ±(99.9%) 5.454 B/op [Average]
[info]   (min, avg, max) = (2.336, 4.677, 5.811), stdev = 1.417
[info]   CI (99.9%): [≈ 0, 10.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.51% complete, ETA 01:17:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32133.168 ops/s
[info] # Warmup Iteration   2: 37462.352 ops/s
[info] # Warmup Iteration   3: 37464.213 ops/s
[info] Iteration   1: 37565.352 ops/s
[info]                  ·gc.alloc.rate:                   1608.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69729.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.489 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 37614.660 ops/s
[info]                  ·gc.alloc.rate:                   1610.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70070.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.355 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37540.323 ops/s
[info]                  ·gc.alloc.rate:                   1607.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56398.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.618 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37719.396 ops/s
[info]                  ·gc.alloc.rate:                   1615.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70389.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.869 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37736.106 ops/s
[info]                  ·gc.alloc.rate:                   1616.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70568.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.473 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   37635.168 ±(99.9%) 342.108 ops/s [Average]
[info]   (min, avg, max) = (37540.323, 37635.168, 37736.106), stdev = 88.844
[info]   CI (99.9%): [37293.059, 37977.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1611.955 ±(99.9%) 14.905 MB/sec [Average]
[info]   (min, avg, max) = (1607.845, 1611.955, 1616.222), stdev = 3.871
[info]   CI (99.9%): [1597.050, 1626.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   67408.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67408.011, 67408.012, 67408.012), stdev = 0.001
[info]   CI (99.9%): [67408.010, 67408.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.689 ±(99.9%) 577.207 MB/sec [Average]
[info]   (min, avg, max) = (1345.244, 1612.689, 1691.992), stdev = 149.899
[info]   CI (99.9%): [1035.482, 2189.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   67431.215 ±(99.9%) 23780.412 B/op [Average]
[info]   (min, avg, max) = (56398.627, 67431.215, 70568.148), stdev = 6175.697
[info]   CI (99.9%): [43650.804, 91211.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.961 ±(99.9%) 5.086 B/op [Average]
[info]   (min, avg, max) = (0.869, 2.961, 4.355), stdev = 1.321
[info]   CI (99.9%): [≈ 0, 8.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.76% complete, ETA 01:17:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31846.234 ops/s
[info] # Warmup Iteration   2: 36694.371 ops/s
[info] # Warmup Iteration   3: 37124.819 ops/s
[info] Iteration   1: 37224.796 ops/s
[info]                  ·gc.alloc.rate:                   1650.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70410.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.521 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 37024.160 ops/s
[info]                  ·gc.alloc.rate:                   1641.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71190.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.425 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 37050.609 ops/s
[info]                  ·gc.alloc.rate:                   1642.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71452.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.769 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36709.847 ops/s
[info]                  ·gc.alloc.rate:                   1628.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72399.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.785 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37023.523 ops/s
[info]                  ·gc.alloc.rate:                   1641.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71983.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   37006.587 ±(99.9%) 715.752 ops/s [Average]
[info]   (min, avg, max) = (36709.847, 37006.587, 37224.796), stdev = 185.879
[info]   CI (99.9%): [36290.834, 37722.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1641.061 ±(99.9%) 30.755 MB/sec [Average]
[info]   (min, avg, max) = (1628.373, 1641.061, 1650.552), stdev = 7.987
[info]   CI (99.9%): [1610.306, 1671.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   69784.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69784.012, 69784.012, 69784.012), stdev = 0.001
[info]   CI (99.9%): [69784.011, 69784.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1681.051 ±(99.9%) 43.716 MB/sec [Average]
[info]   (min, avg, max) = (1665.361, 1681.051, 1693.663), stdev = 11.353
[info]   CI (99.9%): [1637.335, 1724.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   71487.146 ±(99.9%) 2937.317 B/op [Average]
[info]   (min, avg, max) = (70410.142, 71487.146, 72399.296), stdev = 762.812
[info]   CI (99.9%): [68549.829, 74424.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   3.008 ±(99.9%) 4.550 B/op [Average]
[info]   (min, avg, max) = (1.769, 3.008, 4.425), stdev = 1.182
[info]   CI (99.9%): [≈ 0, 7.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.00% complete, ETA 01:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269591.923 ops/s
[info] # Warmup Iteration   2: 321116.229 ops/s
[info] # Warmup Iteration   3: 326192.532 ops/s
[info] Iteration   1: 325751.736 ops/s
[info]                  ·gc.alloc.rate:                   1789.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9674.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 322579.368 ops/s
[info]                  ·gc.alloc.rate:                   1772.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8187.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 318925.561 ops/s
[info]                  ·gc.alloc.rate:               1753.023 MB/sec
[info]                  ·gc.alloc.rate.norm:          8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1685.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8317.153 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 315484.841 ops/s
[info]                  ·gc.alloc.rate:                   1734.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8434.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 322492.755 ops/s
[info]                  ·gc.alloc.rate:                   1772.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8270.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.610 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   321046.852 ±(99.9%) 15161.348 ops/s [Average]
[info]   (min, avg, max) = (315484.841, 321046.852, 325751.736), stdev = 3937.354
[info]   CI (99.9%): [305885.505, 336208.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1764.348 ±(99.9%) 82.126 MB/sec [Average]
[info]   (min, avg, max) = (1734.163, 1764.348, 1789.891), stdev = 21.328
[info]   CI (99.9%): [1682.222, 1846.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8648.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8648.001, 8648.001, 8648.001), stdev = 0.001
[info]   CI (99.9%): [8648.001, 8648.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1750.505 ±(99.9%) 542.680 MB/sec [Average]
[info]   (min, avg, max) = (1678.194, 1750.505, 2002.366), stdev = 140.932
[info]   CI (99.9%): [1207.825, 2293.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8576.783 ±(99.9%) 2388.014 B/op [Average]
[info]   (min, avg, max) = (8187.252, 8576.783, 9674.588), stdev = 620.160
[info]   CI (99.9%): [6188.769, 10964.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.386 ±(99.9%) 0.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 0.610), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 11.25% complete, ETA 01:17:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9144.637 ops/s
[info] # Warmup Iteration   2: 1370195.031 ops/s
[info] # Warmup Iteration   3: 1362760.082 ops/s
[info] Iteration   1: 1375858.510 ops/s
[info]                  ·gc.alloc.rate:                   433.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     585.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1423953.873 ops/s
[info]                  ·gc.alloc.rate:               448.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      322.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 356.727 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1420686.136 ops/s
[info]                  ·gc.alloc.rate:                   447.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1420702.363 ops/s
[info]                  ·gc.alloc.rate:               447.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 359.018 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1406029.647 ops/s
[info]                  ·gc.alloc.rate:               443.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 364.258 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1409446.106 ±(99.9%) 77092.635 ops/s [Average]
[info]   (min, avg, max) = (1375858.510, 1409446.106, 1423953.873), stdev = 20020.713
[info]   CI (99.9%): [1332353.471, 1486538.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   444.229 ±(99.9%) 24.406 MB/sec [Average]
[info]   (min, avg, max) = (433.611, 444.229, 448.839), stdev = 6.338
[info]   CI (99.9%): [419.823, 468.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   426.174 ±(99.9%) 568.749 MB/sec [Average]
[info]   (min, avg, max) = (322.808, 426.174, 646.889), stdev = 147.702
[info]   CI (99.9%): [≈ 0, 994.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   476.358 ±(99.9%) 639.126 B/op [Average]
[info]   (min, avg, max) = (356.727, 476.358, 716.558), stdev = 165.979
[info]   CI (99.9%): [≈ 0, 1115.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.49% complete, ETA 01:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472730.577 ops/s
[info] # Warmup Iteration   2: 668831.847 ops/s
[info] # Warmup Iteration   3: 677434.730 ops/s
[info] Iteration   1: 695037.656 ops/s
[info]                  ·gc.alloc.rate:                   575.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     739.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.719 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 686118.989 ops/s
[info]                  ·gc.alloc.rate:                   568.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1499.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 690863.513 ops/s
[info]                  ·gc.alloc.rate:                   572.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1490.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 679443.673 ops/s
[info]                  ·gc.alloc.rate:               563.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1516.880 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 696060.678 ops/s
[info]                  ·gc.alloc.rate:               576.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 741.059 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   689504.902 ±(99.9%) 26407.679 ops/s [Average]
[info]   (min, avg, max) = (679443.673, 689504.902, 696060.678), stdev = 6857.990
[info]   CI (99.9%): [663097.222, 715912.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   571.356 ±(99.9%) 21.483 MB/sec [Average]
[info]   (min, avg, max) = (563.148, 571.356, 576.705), stdev = 5.579
[info]   CI (99.9%): [549.873, 592.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.554 ±(99.9%) 690.081 MB/sec [Average]
[info]   (min, avg, max) = (326.738, 523.554, 655.083), stdev = 179.212
[info]   CI (99.9%): [≈ 0, 1213.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1197.572 ±(99.9%) 1607.179 B/op [Average]
[info]   (min, avg, max) = (739.891, 1197.572, 1516.880), stdev = 417.379
[info]   CI (99.9%): [≈ 0, 2804.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.438 ±(99.9%) 3.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.084), stdev = 0.921
[info]   CI (99.9%): [≈ 0, 3.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.991 ±(99.9%) 8.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.991, 4.719), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 9.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.74% complete, ETA 01:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1661946.044 ops/s
[info] # Warmup Iteration   2: 1732090.057 ops/s
[info] # Warmup Iteration   3: 1740876.849 ops/s
[info] Iteration   1: 1737740.573 ops/s
[info]                  ·gc.alloc.rate:                   335.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1735154.253 ops/s
[info]                  ·gc.alloc.rate:               335.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232.030 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1727666.208 ops/s
[info]                  ·gc.alloc.rate:                   333.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.434 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1739236.433 ops/s
[info]                  ·gc.alloc.rate:                   336.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1737914.032 ops/s
[info]                  ·gc.alloc.rate:               335.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 301.032 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1735542.300 ±(99.9%) 17884.526 ops/s [Average]
[info]   (min, avg, max) = (1727666.208, 1735542.300, 1739236.433), stdev = 4644.555
[info]   CI (99.9%): [1717657.774, 1753426.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   335.238 ±(99.9%) 3.491 MB/sec [Average]
[info]   (min, avg, max) = (333.712, 335.238, 336.011), stdev = 0.907
[info]   CI (99.9%): [331.747, 338.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   301.778 ±(99.9%) 161.639 MB/sec [Average]
[info]   (min, avg, max) = (255.784, 301.778, 332.484), stdev = 41.977
[info]   CI (99.9%): [140.140, 463.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   273.673 ±(99.9%) 147.031 B/op [Average]
[info]   (min, avg, max) = (231.678, 273.673, 302.816), stdev = 38.184
[info]   CI (99.9%): [126.642, 420.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.332 ±(99.9%) 2.674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.574), stdev = 0.695
[info]   CI (99.9%): [≈ 0, 3.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.303 ±(99.9%) 2.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.303, 1.434), stdev = 0.633
[info]   CI (99.9%): [≈ 0, 2.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.98% complete, ETA 01:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66145.321 ops/s
[info] # Warmup Iteration   2: 105470.838 ops/s
[info] # Warmup Iteration   3: 106270.291 ops/s
[info] Iteration   1: 106118.814 ops/s
[info]                  ·gc.alloc.rate:                   3854.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3716.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55128.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.544 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 106349.863 ops/s
[info]                  ·gc.alloc.rate:                   3864.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3735.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55265.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.156 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 106046.776 ops/s
[info]                  ·gc.alloc.rate:                   3852.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60603.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.927 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 106856.410 ops/s
[info]                  ·gc.alloc.rate:                   3881.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55151.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.840 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 106336.120 ops/s
[info]                  ·gc.alloc.rate:                   3863.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55422.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.541 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   106341.596 ±(99.9%) 1220.240 ops/s [Average]
[info]   (min, avg, max) = (106046.776, 106341.596, 106856.410), stdev = 316.892
[info]   CI (99.9%): [105121.357, 107561.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3863.407 ±(99.9%) 44.318 MB/sec [Average]
[info]   (min, avg, max) = (3852.611, 3863.407, 3881.828), stdev = 11.509
[info]   CI (99.9%): [3819.089, 3907.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3804.956 ±(99.9%) 601.263 MB/sec [Average]
[info]   (min, avg, max) = (3716.847, 3804.956, 4083.549), stdev = 156.146
[info]   CI (99.9%): [3203.693, 4406.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56314.005 ±(99.9%) 9243.967 B/op [Average]
[info]   (min, avg, max) = (55128.413, 56314.005, 60603.329), stdev = 2400.629
[info]   CI (99.9%): [47070.038, 65557.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.601 ±(99.9%) 1.751 B/op [Average]
[info]   (min, avg, max) = (0.927, 1.601, 2.156), stdev = 0.455
[info]   CI (99.9%): [≈ 0, 3.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.22% complete, ETA 01:16:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232785.179 ops/s
[info] # Warmup Iteration   2: 312087.370 ops/s
[info] # Warmup Iteration   3: 322528.534 ops/s
[info] Iteration   1: 320768.811 ops/s
[info]                  ·gc.alloc.rate:                   1095.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              5376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4852.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 319853.968 ops/s
[info]                  ·gc.alloc.rate:                   1092.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              5376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6509.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.512 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 321402.481 ops/s
[info]                  ·gc.alloc.rate:                   1097.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              5376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4878.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 321031.976 ops/s
[info]                  ·gc.alloc.rate:                   1096.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              5376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4906.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 322980.062 ops/s
[info]                  ·gc.alloc.rate:                   1103.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              5376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6524.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   321207.460 ±(99.9%) 4405.286 ops/s [Average]
[info]   (min, avg, max) = (319853.968, 321207.460, 322980.062), stdev = 1144.039
[info]   CI (99.9%): [316802.173, 325612.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1097.203 ±(99.9%) 15.266 MB/sec [Average]
[info]   (min, avg, max) = (1092.542, 1097.203, 1103.362), stdev = 3.965
[info]   CI (99.9%): [1081.937, 1112.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5376.001, 5376.001, 5376.001), stdev = 0.001
[info]   CI (99.9%): [5376.001, 5376.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1129.613 ±(99.9%) 708.540 MB/sec [Average]
[info]   (min, avg, max) = (988.870, 1129.613, 1339.096), stdev = 184.006
[info]   CI (99.9%): [421.072, 1838.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5534.334 ±(99.9%) 3455.791 B/op [Average]
[info]   (min, avg, max) = (4852.007, 5534.334, 6524.588), stdev = 897.458
[info]   CI (99.9%): [2078.544, 8990.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.104), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.347 ±(99.9%) 0.356 B/op [Average]
[info]   (min, avg, max) = (0.304, 0.347, 0.512), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54479.614 ops/s
[info] # Warmup Iteration   2: 1465204.731 ops/s
[info] # Warmup Iteration   3: 1510076.195 ops/s
[info] Iteration   1: 1506739.466 ops/s
[info]                  ·gc.alloc.rate:                   696.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1495369.083 ops/s
[info]                  ·gc.alloc.rate:               691.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 682.217 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1477083.880 ops/s
[info]                  ·gc.alloc.rate:               683.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 693.480 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1506817.549 ops/s
[info]                  ·gc.alloc.rate:                   697.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1024.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1488828.504 ops/s
[info]                  ·gc.alloc.rate:                   688.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1494967.696 ±(99.9%) 48580.541 ops/s [Average]
[info]   (min, avg, max) = (1477083.880, 1494967.696, 1506817.549), stdev = 12616.212
[info]   CI (99.9%): [1446387.155, 1543548.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   691.529 ±(99.9%) 22.549 MB/sec [Average]
[info]   (min, avg, max) = (683.206, 691.529, 697.065), stdev = 5.856
[info]   CI (99.9%): [668.980, 714.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   716.468 ±(99.9%) 570.274 MB/sec [Average]
[info]   (min, avg, max) = (645.500, 716.468, 981.295), stdev = 148.098
[info]   CI (99.9%): [146.193, 1286.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   753.755 ±(99.9%) 584.398 B/op [Average]
[info]   (min, avg, max) = (674.276, 753.755, 1024.843), stdev = 151.766
[info]   CI (99.9%): [169.357, 1338.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.478 ±(99.9%) 3.979 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.478, 2.327), stdev = 1.033
[info]   CI (99.9%): [≈ 0, 4.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.505 ±(99.9%) 4.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.505, 2.459), stdev = 1.092
[info]   CI (99.9%): [≈ 0, 4.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:15:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 660793.683 ops/s
[info] # Warmup Iteration   2: 927990.912 ops/s
[info] # Warmup Iteration   3: 934798.517 ops/s
[info] Iteration   1: 937164.970 ops/s
[info]                  ·gc.alloc.rate:                   662.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1097.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 923263.755 ops/s
[info]                  ·gc.alloc.rate:                   652.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1115.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 910221.295 ops/s
[info]                  ·gc.alloc.rate:                   643.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1132.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 910739.747 ops/s
[info]                  ·gc.alloc.rate:               643.556 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1133.960 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 908045.001 ops/s
[info]                  ·gc.alloc.rate:                   641.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1139.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   917886.954 ±(99.9%) 47445.060 ops/s [Average]
[info]   (min, avg, max) = (908045.001, 917886.954, 937164.970), stdev = 12321.331
[info]   CI (99.9%): [870441.894, 965332.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   648.586 ±(99.9%) 33.305 MB/sec [Average]
[info]   (min, avg, max) = (641.744, 648.586, 662.110), stdev = 8.649
[info]   CI (99.9%): [615.281, 681.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.001), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.299 ±(99.9%) 6.508 MB/sec [Average]
[info]   (min, avg, max) = (653.444, 655.299, 657.692), stdev = 1.690
[info]   CI (99.9%): [648.791, 661.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1123.692 ±(99.9%) 66.560 B/op [Average]
[info]   (min, avg, max) = (1097.446, 1123.692, 1139.635), stdev = 17.285
[info]   CI (99.9%): [1057.132, 1190.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.469 ±(99.9%) 3.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.469, 2.136), stdev = 0.932
[info]   CI (99.9%): [≈ 0, 4.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.789 ±(99.9%) 6.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.789, 3.587), stdev = 1.565
[info]   CI (99.9%): [≈ 0, 6.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.96% complete, ETA 01:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1999869.475 ops/s
[info] # Warmup Iteration   2: 2174061.303 ops/s
[info] # Warmup Iteration   3: 2537471.346 ops/s
[info] Iteration   1: 2551060.772 ops/s
[info]                  ·gc.alloc.rate:                   1179.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     818.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2610675.863 ops/s
[info]                  ·gc.alloc.rate:                   1207.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2579806.740 ops/s
[info]                  ·gc.alloc.rate:                   1193.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     610.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2611026.298 ops/s
[info]                  ·gc.alloc.rate:                   1207.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     807.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2617046.498 ops/s
[info]                  ·gc.alloc.rate:                   1210.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     606.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2593923.234 ±(99.9%) 107960.904 ops/s [Average]
[info]   (min, avg, max) = (2551060.772, 2593923.234, 2617046.498), stdev = 28037.104
[info]   CI (99.9%): [2485962.330, 2701884.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1199.976 ±(99.9%) 49.965 MB/sec [Average]
[info]   (min, avg, max) = (1179.948, 1199.976, 1210.490), stdev = 12.976
[info]   CI (99.9%): [1150.011, 1249.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1201.323 ±(99.9%) 690.257 MB/sec [Average]
[info]   (min, avg, max) = (1001.584, 1201.323, 1340.512), stdev = 179.258
[info]   CI (99.9%): [511.066, 1891.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   729.009 ±(99.9%) 423.677 B/op [Average]
[info]   (min, avg, max) = (606.542, 729.009, 818.252), stdev = 110.028
[info]   CI (99.9%): [305.332, 1152.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.045, 0.088), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13.20% complete, ETA 01:15:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2044837.296 ops/s
[info] # Warmup Iteration   2: 2244454.308 ops/s
[info] # Warmup Iteration   3: 2261235.820 ops/s
[info] Iteration   1: 2262782.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2261191.302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2262961.185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2263752.906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2258454.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2261828.466 ±(99.9%) 8096.568 ops/s [Average]
[info]   (min, avg, max) = (2258454.685, 2261828.466, 2263752.906), stdev = 2102.653
[info]   CI (99.9%): [2253731.897, 2269925.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.45% complete, ETA 01:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388001.656 ops/s
[info] # Warmup Iteration   2: 499340.195 ops/s
[info] # Warmup Iteration   3: 489931.106 ops/s
[info] Iteration   1: 495297.181 ops/s
[info]                  ·gc.alloc.rate:                   579.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2089.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 497539.030 ops/s
[info]                  ·gc.alloc.rate:               581.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1038.853 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 501142.797 ops/s
[info]                  ·gc.alloc.rate:                   585.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2062.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 466725.347 ops/s
[info]                  ·gc.alloc.rate:                   545.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2217.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 476183.653 ops/s
[info]                  ·gc.alloc.rate:                   556.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2178.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   487377.602 ±(99.9%) 57992.637 ops/s [Average]
[info]   (min, avg, max) = (466725.347, 487377.602, 501142.797), stdev = 15060.504
[info]   CI (99.9%): [429384.965, 545370.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   569.784 ±(99.9%) 67.786 MB/sec [Average]
[info]   (min, avg, max) = (545.642, 569.784, 585.882), stdev = 17.604
[info]   CI (99.9%): [501.997, 637.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   591.849 ±(99.9%) 567.093 MB/sec [Average]
[info]   (min, avg, max) = (328.404, 591.849, 659.147), stdev = 147.272
[info]   CI (99.9%): [24.755, 1158.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1917.279 ±(99.9%) 1906.451 B/op [Average]
[info]   (min, avg, max) = (1038.853, 1917.279, 2217.091), stdev = 495.099
[info]   CI (99.9%): [10.828, 3823.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.438 ±(99.9%) 3.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.042), stdev = 0.897
[info]   CI (99.9%): [≈ 0, 3.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.392 ±(99.9%) 10.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.392, 6.489), stdev = 2.851
[info]   CI (99.9%): [≈ 0, 12.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.69% complete, ETA 01:14:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140132.198 ops/s
[info] # Warmup Iteration   2: 167748.181 ops/s
[info] # Warmup Iteration   3: 173199.260 ops/s
[info] Iteration   1: 170964.693 ops/s
[info]                  ·gc.alloc.rate:                   2101.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18488.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 169186.678 ops/s
[info]                  ·gc.alloc.rate:                   2079.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18791.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.775 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 171828.881 ops/s
[info]                  ·gc.alloc.rate:                   2112.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21676.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.953 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 174292.810 ops/s
[info]                  ·gc.alloc.rate:                   2142.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18371.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 171690.966 ops/s
[info]                  ·gc.alloc.rate:                   2110.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18686.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.572 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   171592.806 ±(99.9%) 7084.392 ops/s [Average]
[info]   (min, avg, max) = (169186.678, 171592.806, 174292.810), stdev = 1839.794
[info]   CI (99.9%): [164508.413, 178677.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2109.232 ±(99.9%) 87.303 MB/sec [Average]
[info]   (min, avg, max) = (2079.468, 2109.232, 2142.283), stdev = 22.672
[info]   CI (99.9%): [2021.930, 2196.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19344.002, 19344.003, 19344.003), stdev = 0.001
[info]   CI (99.9%): [19344.002, 19344.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2093.848 ±(99.9%) 591.221 MB/sec [Average]
[info]   (min, avg, max) = (2008.367, 2093.848, 2367.668), stdev = 153.538
[info]   CI (99.9%): [1502.628, 2685.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19203.014 ±(99.9%) 5362.044 B/op [Average]
[info]   (min, avg, max) = (18371.691, 19203.014, 21676.644), stdev = 1392.506
[info]   CI (99.9%): [13840.970, 24565.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.725 ±(99.9%) 0.945 B/op [Average]
[info]   (min, avg, max) = (0.383, 0.725, 0.953), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.94% complete, ETA 01:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270466.134 ops/s
[info] # Warmup Iteration   2: 415004.243 ops/s
[info] # Warmup Iteration   3: 421411.359 ops/s
[info] Iteration   1: 406817.758 ops/s
[info]                  ·gc.alloc.rate:                   337.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1979.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 422054.550 ops/s
[info]                  ·gc.alloc.rate:               349.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 953.892 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 421992.800 ops/s
[info]                  ·gc.alloc.rate:                   349.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1218.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 422904.843 ops/s
[info]                  ·gc.alloc.rate:                   350.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1216.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 422632.919 ops/s
[info]                  ·gc.alloc.rate:                   350.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1218.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   419280.574 ±(99.9%) 26868.172 ops/s [Average]
[info]   (min, avg, max) = (406817.758, 419280.574, 422904.843), stdev = 6977.579
[info]   CI (99.9%): [392412.402, 446148.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   347.390 ±(99.9%) 22.304 MB/sec [Average]
[info]   (min, avg, max) = (337.043, 347.390, 350.382), stdev = 5.792
[info]   CI (99.9%): [325.086, 369.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.593 ±(99.9%) 368.258 MB/sec [Average]
[info]   (min, avg, max) = (255.797, 349.593, 511.572), stdev = 95.635
[info]   CI (99.9%): [≈ 0, 717.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1317.157 ±(99.9%) 1491.456 B/op [Average]
[info]   (min, avg, max) = (953.892, 1317.157, 1979.243), stdev = 387.326
[info]   CI (99.9%): [≈ 0, 2808.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.439 ±(99.9%) 3.632 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.439, 2.126), stdev = 0.943
[info]   CI (99.9%): [≈ 0, 4.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.637 ±(99.9%) 13.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.637, 7.927), stdev = 3.517
[info]   CI (99.9%): [≈ 0, 15.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.18% complete, ETA 01:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 912984.410 ops/s
[info] # Warmup Iteration   2: 959984.090 ops/s
[info] # Warmup Iteration   3: 971340.187 ops/s
[info] Iteration   1: 970525.202 ops/s
[info]                  ·gc.alloc.rate:                   187.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 970243.735 ops/s
[info]                  ·gc.alloc.rate:      187.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 936382.112 ops/s
[info]                  ·gc.alloc.rate:               180.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 429.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 968043.371 ops/s
[info]                  ·gc.alloc.rate:               186.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 415.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 970395.864 ops/s
[info]                  ·gc.alloc.rate:      187.441 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   963118.057 ±(99.9%) 57685.071 ops/s [Average]
[info]   (min, avg, max) = (936382.112, 963118.057, 970525.202), stdev = 14980.630
[info]   CI (99.9%): [905432.986, 1020803.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   186.051 ±(99.9%) 11.020 MB/sec [Average]
[info]   (min, avg, max) = (180.944, 186.051, 187.480), stdev = 2.862
[info]   CI (99.9%): [175.030, 197.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   153.509 ±(99.9%) 539.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.509, 255.914), stdev = 140.134
[info]   CI (99.9%): [≈ 0, 693.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   252.136 ±(99.9%) 886.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 252.136, 429.957), stdev = 230.245
[info]   CI (99.9%): [≈ 0, 1138.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.43% complete, ETA 01:14:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49552.648 ops/s
[info] # Warmup Iteration   2: 81360.225 ops/s
[info] # Warmup Iteration   3: 81555.872 ops/s
[info] Iteration   1: 82390.401 ops/s
[info]                  ·gc.alloc.rate:                   3400.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64337.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.591 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 81915.845 ops/s
[info]                  ·gc.alloc.rate:                   3380.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65096.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.000 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 82214.382 ops/s
[info]                  ·gc.alloc.rate:                   3392.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65034.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.992 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 82219.758 ops/s
[info]                  ·gc.alloc.rate:                   3393.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65158.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.789 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 81351.560 ops/s
[info]                  ·gc.alloc.rate:                   3357.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59269.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.014 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   82018.390 ±(99.9%) 1578.919 ops/s [Average]
[info]   (min, avg, max) = (81351.560, 82018.390, 82390.401), stdev = 410.040
[info]   CI (99.9%): [80439.471, 83597.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3384.937 ±(99.9%) 64.444 MB/sec [Average]
[info]   (min, avg, max) = (3357.850, 3384.937, 3400.242), stdev = 16.736
[info]   CI (99.9%): [3320.493, 3449.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.006), stdev = 0.001
[info]   CI (99.9%): [64952.005, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3324.266 ±(99.9%) 562.489 MB/sec [Average]
[info]   (min, avg, max) = (3064.078, 3324.266, 3403.939), stdev = 146.077
[info]   CI (99.9%): [2761.778, 3886.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63779.181 ±(99.9%) 9791.056 B/op [Average]
[info]   (min, avg, max) = (59269.468, 63779.181, 65158.248), stdev = 2542.706
[info]   CI (99.9%): [53988.125, 73570.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.208), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.477 ±(99.9%) 3.679 B/op [Average]
[info]   (min, avg, max) = (1.591, 2.477, 4.000), stdev = 0.955
[info]   CI (99.9%): [≈ 0, 6.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.67% complete, ETA 01:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206045.104 ops/s
[info] # Warmup Iteration   2: 269361.211 ops/s
[info] # Warmup Iteration   3: 277884.190 ops/s
[info] Iteration   1: 275260.398 ops/s
[info]                  ·gc.alloc.rate:                   1518.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7571.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 274686.479 ops/s
[info]                  ·gc.alloc.rate:                   1514.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9544.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 272818.931 ops/s
[info]                  ·gc.alloc.rate:                   1504.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7726.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 276359.004 ops/s
[info]                  ·gc.alloc.rate:                   1524.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9579.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 278759.061 ops/s
[info]                  ·gc.alloc.rate:                   1537.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7623.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   275576.775 ±(99.9%) 8444.518 ops/s [Average]
[info]   (min, avg, max) = (272818.931, 275576.775, 278759.061), stdev = 2193.014
[info]   CI (99.9%): [267132.257, 284021.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1519.995 ±(99.9%) 47.288 MB/sec [Average]
[info]   (min, avg, max) = (1504.668, 1519.995, 1537.916), stdev = 12.280
[info]   CI (99.9%): [1472.707, 1567.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.002, 8680.002, 8680.002), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1472.494 ±(99.9%) 709.619 MB/sec [Average]
[info]   (min, avg, max) = (1324.348, 1472.494, 1682.211), stdev = 184.286
[info]   CI (99.9%): [762.875, 2182.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8409.111 ±(99.9%) 4057.767 B/op [Average]
[info]   (min, avg, max) = (7571.963, 8409.111, 9579.311), stdev = 1053.789
[info]   CI (99.9%): [4351.344, 12466.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.451 ±(99.9%) 0.586 B/op [Average]
[info]   (min, avg, max) = (0.240, 0.451, 0.593), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 1.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.91% complete, ETA 01:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1063199.925 ops/s
[info] # Warmup Iteration   2: 1609048.013 ops/s
[info] # Warmup Iteration   3: 1616954.847 ops/s
[info] Iteration   1: 1638309.848 ops/s
[info]                  ·gc.alloc.rate:                   841.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     628.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1640254.637 ops/s
[info]                  ·gc.alloc.rate:                   842.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1647066.115 ops/s
[info]                  ·gc.alloc.rate:                   845.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1641765.161 ops/s
[info]                  ·gc.alloc.rate:                   842.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     947.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1641617.225 ops/s
[info]                  ·gc.alloc.rate:                   843.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1641802.597 ±(99.9%) 12527.303 ops/s [Average]
[info]   (min, avg, max) = (1638309.848, 1641802.597, 1647066.115), stdev = 3253.301
[info]   CI (99.9%): [1629275.294, 1654329.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   843.108 ±(99.9%) 6.337 MB/sec [Average]
[info]   (min, avg, max) = (841.351, 843.108, 845.796), stdev = 1.646
[info]   CI (99.9%): [836.771, 849.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   855.488 ±(99.9%) 702.558 MB/sec [Average]
[info]   (min, avg, max) = (654.360, 855.488, 993.957), stdev = 182.452
[info]   CI (99.9%): [152.930, 1558.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   819.935 ±(99.9%) 674.735 B/op [Average]
[info]   (min, avg, max) = (627.617, 819.935, 952.555), stdev = 175.227
[info]   CI (99.9%): [145.200, 1494.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.068, 0.080), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.16% complete, ETA 01:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1814874.092 ops/s
[info] # Warmup Iteration   2: 1990521.023 ops/s
[info] # Warmup Iteration   3: 1952668.178 ops/s
[info] Iteration   1: 1952648.749 ops/s
[info]                  ·gc.alloc.rate:                   526.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.386 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1941699.417 ops/s
[info]                  ·gc.alloc.rate:                   523.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     537.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2003520.294 ops/s
[info]                  ·gc.alloc.rate:                   539.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     519.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2009973.052 ops/s
[info]                  ·gc.alloc.rate:               541.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 259.506 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 2008963.415 ops/s
[info]                  ·gc.alloc.rate:                   541.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     519.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1983360.985 ±(99.9%) 128420.736 ops/s [Average]
[info]   (min, avg, max) = (1941699.417, 1983360.985, 2009973.052), stdev = 33350.457
[info]   CI (99.9%): [1854940.250, 2111781.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   534.405 ±(99.9%) 34.739 MB/sec [Average]
[info]   (min, avg, max) = (523.182, 534.405, 541.679), stdev = 9.022
[info]   CI (99.9%): [499.667, 569.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.363 ±(99.9%) 698.551 MB/sec [Average]
[info]   (min, avg, max) = (331.530, 530.363, 663.509), stdev = 181.411
[info]   CI (99.9%): [≈ 0, 1228.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   420.784 ±(99.9%) 553.832 B/op [Average]
[info]   (min, avg, max) = (259.506, 420.784, 537.268), stdev = 143.828
[info]   CI (99.9%): [≈ 0, 974.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.720), stdev = 0.749
[info]   CI (99.9%): [≈ 0, 3.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.307 ±(99.9%) 2.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.307, 1.386), stdev = 0.604
[info]   CI (99.9%): [≈ 0, 2.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15.40% complete, ETA 01:13:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1807332.526 ops/s
[info] # Warmup Iteration   2: 1950887.944 ops/s
[info] # Warmup Iteration   3: 1983351.130 ops/s
[info] Iteration   1: 1981542.320 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1987598.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1953483.542 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1949187.474 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1951223.725 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1964607.138 ±(99.9%) 70898.535 ops/s [Average]
[info]   (min, avg, max) = (1949187.474, 1964607.138, 1987598.631), stdev = 18412.124
[info]   CI (99.9%): [1893708.603, 2035505.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.65% complete, ETA 01:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27038.431 ops/s
[info] # Warmup Iteration   2: 38136.887 ops/s
[info] # Warmup Iteration   3: 37993.081 ops/s
[info] Iteration   1: 38561.609 ops/s
[info]                  ·gc.alloc.rate:                   1682.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              68659.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67547.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.248 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38220.308 ops/s
[info]                  ·gc.alloc.rate:                   1667.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68630.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.286 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38494.097 ops/s
[info]                  ·gc.alloc.rate:                   1679.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68525.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.404 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38046.189 ops/s
[info]                  ·gc.alloc.rate:                   1659.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69691.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.722 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38496.718 ops/s
[info]                  ·gc.alloc.rate:                   1679.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69120.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.404 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38363.784 ±(99.9%) 850.721 ops/s [Average]
[info]   (min, avg, max) = (38046.189, 38363.784, 38561.609), stdev = 220.930
[info]   CI (99.9%): [37513.063, 39214.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1673.634 ±(99.9%) 37.725 MB/sec [Average]
[info]   (min, avg, max) = (1659.595, 1673.634, 1682.529), stdev = 9.797
[info]   CI (99.9%): [1635.909, 1711.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68656.626 ±(99.9%) 5.290 B/op [Average]
[info]   (min, avg, max) = (68656.011, 68656.626, 68659.083), stdev = 1.374
[info]   CI (99.9%): [68651.336, 68661.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.706 ±(99.9%) 54.490 MB/sec [Average]
[info]   (min, avg, max) = (1655.298, 1674.706, 1690.764), stdev = 14.151
[info]   CI (99.9%): [1620.216, 1729.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68703.233 ±(99.9%) 3058.599 B/op [Average]
[info]   (min, avg, max) = (67547.891, 68703.233, 69691.958), stdev = 794.308
[info]   CI (99.9%): [65644.634, 71761.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.413 ±(99.9%) 4.001 B/op [Average]
[info]   (min, avg, max) = (1.722, 3.413, 4.286), stdev = 1.039
[info]   CI (99.9%): [≈ 0, 7.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.89% complete, ETA 01:13:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196241.739 ops/s
[info] # Warmup Iteration   2: 230669.243 ops/s
[info] # Warmup Iteration   3: 232316.872 ops/s
[info] Iteration   1: 230490.141 ops/s
[info]                  ·gc.alloc.rate:                   2447.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              16712.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2351.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16056.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.995 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 230537.676 ops/s
[info]                  ·gc.alloc.rate:                   2448.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              16712.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18450.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.853 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 232896.056 ops/s
[info]                  ·gc.alloc.rate:                   2472.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              16712.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16034.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 232889.876 ops/s
[info]                  ·gc.alloc.rate:                   2472.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              16712.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16071.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 233065.404 ops/s
[info]                  ·gc.alloc.rate:                   2475.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              16712.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18374.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.843 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   231975.830 ±(99.9%) 5146.421 ops/s [Average]
[info]   (min, avg, max) = (230490.141, 231975.830, 233065.404), stdev = 1336.509
[info]   CI (99.9%): [226829.409, 237122.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2463.364 ±(99.9%) 54.095 MB/sec [Average]
[info]   (min, avg, max) = (2447.594, 2463.364, 2475.007), stdev = 14.048
[info]   CI (99.9%): [2409.269, 2517.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16712.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16712.002, 16712.002, 16712.002), stdev = 0.001
[info]   CI (99.9%): [16712.002, 16712.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2505.342 ±(99.9%) 728.342 MB/sec [Average]
[info]   (min, avg, max) = (2351.642, 2505.342, 2721.223), stdev = 189.148
[info]   CI (99.9%): [1777.000, 3233.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16997.514 ±(99.9%) 4974.505 B/op [Average]
[info]   (min, avg, max) = (16034.842, 16997.514, 18450.084), stdev = 1291.863
[info]   CI (99.9%): [12023.009, 21972.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.707 ±(99.9%) 1.028 B/op [Average]
[info]   (min, avg, max) = (0.422, 0.707, 0.995), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.14% complete, ETA 01:12:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202023.260 ops/s
[info] # Warmup Iteration   2: 312905.720 ops/s
[info] # Warmup Iteration   3: 252533.857 ops/s
[info] Iteration   1: 317690.848 ops/s
[info]                  ·gc.alloc.rate:                   1591.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8148.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 308661.613 ops/s
[info]                  ·gc.alloc.rate:                   1545.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6759.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 306946.429 ops/s
[info]                  ·gc.alloc.rate:                   1536.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8551.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.534 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 311220.282 ops/s
[info]                  ·gc.alloc.rate:                   1558.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8483.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 313063.223 ops/s
[info]                  ·gc.alloc.rate:                   1567.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6775.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.628 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   311516.479 ±(99.9%) 16066.763 ops/s [Average]
[info]   (min, avg, max) = (306946.429, 311516.479, 317690.848), stdev = 4172.487
[info]   CI (99.9%): [295449.716, 327583.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1559.776 ±(99.9%) 81.292 MB/sec [Average]
[info]   (min, avg, max) = (1536.775, 1559.776, 1591.143), stdev = 21.111
[info]   CI (99.9%): [1478.485, 1641.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7880.001, 7880.001, 7880.002), stdev = 0.001
[info]   CI (99.9%): [7880.001, 7880.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1532.761 ±(99.9%) 691.603 MB/sec [Average]
[info]   (min, avg, max) = (1325.590, 1532.761, 1677.634), stdev = 179.607
[info]   CI (99.9%): [841.158, 2224.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7743.547 ±(99.9%) 3481.740 B/op [Average]
[info]   (min, avg, max) = (6759.506, 7743.547, 8551.042), stdev = 904.197
[info]   CI (99.9%): [4261.807, 11225.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.442 ±(99.9%) 0.534 B/op [Average]
[info]   (min, avg, max) = (0.309, 0.442, 0.628), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.38% complete, ETA 01:12:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1075676.955 ops/s
[info] # Warmup Iteration   2: 1107338.404 ops/s
[info] # Warmup Iteration   3: 1153270.740 ops/s
[info] Iteration   1: 1146738.331 ops/s
[info]                  ·gc.alloc.rate:               396.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 702.159 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1147825.197 ops/s
[info]                  ·gc.alloc.rate:                   396.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     455.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1153085.455 ops/s
[info]                  ·gc.alloc.rate:                   398.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1152657.660 ops/s
[info]                  ·gc.alloc.rate:               398.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 453.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1152723.217 ops/s
[info]                  ·gc.alloc.rate:               398.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 453.862 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1150605.972 ±(99.9%) 11795.068 ops/s [Average]
[info]   (min, avg, max) = (1146738.331, 1150605.972, 1153085.455), stdev = 3063.142
[info]   CI (99.9%): [1138810.904, 1162401.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   397.734 ±(99.9%) 4.243 MB/sec [Average]
[info]   (min, avg, max) = (396.350, 397.734, 398.673), stdev = 1.102
[info]   CI (99.9%): [393.491, 401.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   368.274 ±(99.9%) 308.481 MB/sec [Average]
[info]   (min, avg, max) = (332.397, 368.274, 511.582), stdev = 80.111
[info]   CI (99.9%): [59.794, 676.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   503.881 ±(99.9%) 426.821 B/op [Average]
[info]   (min, avg, max) = (453.707, 503.881, 702.159), stdev = 110.844
[info]   CI (99.9%): [77.060, 930.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.325 ±(99.9%) 2.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.543), stdev = 0.682
[info]   CI (99.9%): [≈ 0, 2.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.446 ±(99.9%) 3.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.446, 2.115), stdev = 0.935
[info]   CI (99.9%): [≈ 0, 4.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.63% complete, ETA 01:12:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35851.832 ops/s
[info] # Warmup Iteration   2: 77756.670 ops/s
[info] # Warmup Iteration   3: 76492.742 ops/s
[info] Iteration   1: 78180.128 ops/s
[info]                  ·gc.alloc.rate:                   3183.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              64064.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3015.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60700.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.095 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 76730.386 ops/s
[info]                  ·gc.alloc.rate:                   3123.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              64064.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3041.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62367.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.989 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 78568.479 ops/s
[info]                  ·gc.alloc.rate:                   3199.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              64064.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67969.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.919 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 77908.199 ops/s
[info]                  ·gc.alloc.rate:                   3171.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              64064.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61809.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.841 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 77790.748 ops/s
[info]                  ·gc.alloc.rate:                   3166.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              64064.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61983.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.685 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   77835.588 ±(99.9%) 2643.090 ops/s [Average]
[info]   (min, avg, max) = (76730.386, 77835.588, 78568.479), stdev = 686.402
[info]   CI (99.9%): [75192.498, 80478.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3168.858 ±(99.9%) 108.385 MB/sec [Average]
[info]   (min, avg, max) = (3123.889, 3168.858, 3199.423), stdev = 28.147
[info]   CI (99.9%): [3060.473, 3277.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64064.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64064.005, 64064.006, 64064.006), stdev = 0.001
[info]   CI (99.9%): [64064.005, 64064.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3115.017 ±(99.9%) 605.946 MB/sec [Average]
[info]   (min, avg, max) = (3015.918, 3115.017, 3394.477), stdev = 157.362
[info]   CI (99.9%): [2509.071, 3720.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62966.244 ±(99.9%) 11031.401 B/op [Average]
[info]   (min, avg, max) = (60700.821, 62966.244, 67969.684), stdev = 2864.820
[info]   CI (99.9%): [51934.843, 73997.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.106 ±(99.9%) 3.454 B/op [Average]
[info]   (min, avg, max) = (0.841, 2.106, 2.989), stdev = 0.897
[info]   CI (99.9%): [≈ 0, 5.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 11.000), stdev = 1.140
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.87% complete, ETA 01:12:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159732.704 ops/s
[info] # Warmup Iteration   2: 211609.856 ops/s
[info] # Warmup Iteration   3: 209851.956 ops/s
[info] Iteration   1: 211405.389 ops/s
[info]                  ·gc.alloc.rate:                   2081.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2334.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17380.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 212866.564 ops/s
[info]                  ·gc.alloc.rate:                   2096.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14904.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.385 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 212538.034 ops/s
[info]                  ·gc.alloc.rate:                   2093.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14998.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 211011.023 ops/s
[info]                  ·gc.alloc.rate:                   2078.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15159.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.932 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 212854.386 ops/s
[info]                  ·gc.alloc.rate:                   2095.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15057.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.077 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   212135.079 ±(99.9%) 3340.751 ops/s [Average]
[info]   (min, avg, max) = (211011.023, 212135.079, 212866.564), stdev = 867.582
[info]   CI (99.9%): [208794.329, 215475.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2089.011 ±(99.9%) 32.348 MB/sec [Average]
[info]   (min, avg, max) = (2078.512, 2089.011, 2096.214), stdev = 8.401
[info]   CI (99.9%): [2056.663, 2121.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15496.002, 15496.002, 15496.002), stdev = 0.001
[info]   CI (99.9%): [15496.002, 15496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2089.280 ±(99.9%) 528.919 MB/sec [Average]
[info]   (min, avg, max) = (2016.143, 2089.280, 2334.594), stdev = 137.359
[info]   CI (99.9%): [1560.361, 2618.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15499.911 ±(99.9%) 4064.034 B/op [Average]
[info]   (min, avg, max) = (14904.088, 15499.911, 17380.631), stdev = 1055.417
[info]   CI (99.9%): [11435.876, 19563.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.187), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.926 ±(99.9%) 1.321 B/op [Average]
[info]   (min, avg, max) = (0.465, 0.926, 1.385), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 2.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.11% complete, ETA 01:12:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 827042.108 ops/s
[info] # Warmup Iteration   2: 1132875.691 ops/s
[info] # Warmup Iteration   3: 1139999.133 ops/s
[info] Iteration   1: 1133637.459 ops/s
[info]                  ·gc.alloc.rate:                   662.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     907.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1166655.766 ops/s
[info]                  ·gc.alloc.rate:                   681.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     882.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1159603.781 ops/s
[info]                  ·gc.alloc.rate:                   677.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     889.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1165658.342 ops/s
[info]                  ·gc.alloc.rate:                   681.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     886.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1170373.161 ops/s
[info]                  ·gc.alloc.rate:               684.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 885.982 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1159185.702 ±(99.9%) 56975.988 ops/s [Average]
[info]   (min, avg, max) = (1133637.459, 1159185.702, 1170373.161), stdev = 14796.483
[info]   CI (99.9%): [1102209.714, 1216161.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   677.612 ±(99.9%) 33.252 MB/sec [Average]
[info]   (min, avg, max) = (662.707, 677.612, 684.168), stdev = 8.635
[info]   CI (99.9%): [644.361, 710.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.904 ±(99.9%) 7.702 MB/sec [Average]
[info]   (min, avg, max) = (653.879, 655.904, 658.870), stdev = 2.000
[info]   CI (99.9%): [648.203, 663.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   890.626 ±(99.9%) 37.980 B/op [Average]
[info]   (min, avg, max) = (882.930, 890.626, 907.744), stdev = 9.863
[info]   CI (99.9%): [852.646, 928.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.202), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.36% complete, ETA 01:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2443230.733 ops/s
[info] # Warmup Iteration   2: 2608745.474 ops/s
[info] # Warmup Iteration   3: 2887368.208 ops/s
[info] Iteration   1: 2876072.695 ops/s
[info]                  ·gc.alloc.rate:                   979.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2827453.792 ops/s
[info]                  ·gc.alloc.rate:                   962.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2816417.918 ops/s
[info]                  ·gc.alloc.rate:                   959.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2886922.670 ops/s
[info]                  ·gc.alloc.rate:                   983.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2856975.819 ops/s
[info]                  ·gc.alloc.rate:                   973.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2852768.579 ±(99.9%) 116946.370 ops/s [Average]
[info]   (min, avg, max) = (2816417.918, 2852768.579, 2886922.670), stdev = 30370.601
[info]   CI (99.9%): [2735822.209, 2969714.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   971.623 ±(99.9%) 40.041 MB/sec [Average]
[info]   (min, avg, max) = (959.186, 971.623, 983.183), stdev = 10.399
[info]   CI (99.9%): [931.582, 1011.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.162 ±(99.9%) 15.171 MB/sec [Average]
[info]   (min, avg, max) = (995.544, 999.162, 1004.581), stdev = 3.940
[info]   CI (99.9%): [983.991, 1014.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   551.237 ±(99.9%) 21.488 B/op [Average]
[info]   (min, avg, max) = (544.614, 551.237, 557.637), stdev = 5.580
[info]   CI (99.9%): [529.748, 572.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.041, 0.070), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 17.60% complete, ETA 01:11:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2397965.488 ops/s
[info] # Warmup Iteration   2: 2583240.913 ops/s
[info] # Warmup Iteration   3: 2534042.751 ops/s
[info] Iteration   1: 2540694.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2539623.594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2539385.974 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2546843.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2544867.733 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2542282.934 ±(99.9%) 12981.892 ops/s [Average]
[info]   (min, avg, max) = (2539385.974, 2542282.934, 2546843.063), stdev = 3371.356
[info]   CI (99.9%): [2529301.042, 2555264.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.85% complete, ETA 01:11:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160578.638 ops/s
[info] # Warmup Iteration   2: 271862.298 ops/s
[info] # Warmup Iteration   3: 273468.916 ops/s
[info] Iteration   1: 274729.563 ops/s
[info]                  ·gc.alloc.rate:                   2248.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11403.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 276833.081 ops/s
[info]                  ·gc.alloc.rate:                   2265.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2343.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13321.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.065 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 277131.080 ops/s
[info]                  ·gc.alloc.rate:                   2268.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13405.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.355 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 274779.216 ops/s
[info]                  ·gc.alloc.rate:                   2248.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13577.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.715 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 275779.850 ops/s
[info]                  ·gc.alloc.rate:                   2257.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11625.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.832 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   275850.558 ±(99.9%) 4311.385 ops/s [Average]
[info]   (min, avg, max) = (274729.563, 275850.558, 277131.080), stdev = 1119.653
[info]   CI (99.9%): [271539.173, 280161.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2258.002 ±(99.9%) 36.317 MB/sec [Average]
[info]   (min, avg, max) = (2248.538, 2258.002, 2268.847), stdev = 9.432
[info]   CI (99.9%): [2221.685, 2294.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12880.002, 12880.002, 12880.002), stdev = 0.001
[info]   CI (99.9%): [12880.001, 12880.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2220.866 ±(99.9%) 729.722 MB/sec [Average]
[info]   (min, avg, max) = (1990.696, 2220.866, 2370.625), stdev = 189.506
[info]   CI (99.9%): [1491.144, 2950.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12666.673 ±(99.9%) 4077.279 B/op [Average]
[info]   (min, avg, max) = (11403.041, 12666.673, 13577.905), stdev = 1058.856
[info]   CI (99.9%): [8589.394, 16743.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.187), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.760 ±(99.9%) 1.001 B/op [Average]
[info]   (min, avg, max) = (0.355, 0.760, 1.065), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.09% complete, ETA 01:11:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19747.244 ops/s
[info] # Warmup Iteration   2: 25345.060 ops/s
[info] # Warmup Iteration   3: 25389.326 ops/s
[info] Iteration   1: 24618.228 ops/s
[info]                  ·gc.alloc.rate:                   1550.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106420.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.985 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25207.464 ops/s
[info]                  ·gc.alloc.rate:                   1587.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              99113.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104433.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.599 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25474.183 ops/s
[info]                  ·gc.alloc.rate:                   1604.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103874.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.858 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25301.121 ops/s
[info]                  ·gc.alloc.rate:                   1593.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83949.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.590 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25485.907 ops/s
[info]                  ·gc.alloc.rate:                   1604.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104446.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.428 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25217.381 ±(99.9%) 1367.044 ops/s [Average]
[info]   (min, avg, max) = (24618.228, 25217.381, 25485.907), stdev = 355.017
[info]   CI (99.9%): [23850.336, 26584.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1588.098 ±(99.9%) 85.071 MB/sec [Average]
[info]   (min, avg, max) = (1550.837, 1588.098, 1604.862), stdev = 22.093
[info]   CI (99.9%): [1503.027, 1673.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   99109.053 ±(99.9%) 28.130 B/op [Average]
[info]   (min, avg, max) = (99104.017, 99109.053, 99120.019), stdev = 7.305
[info]   CI (99.9%): [99080.923, 99137.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1612.001 ±(99.9%) 566.116 MB/sec [Average]
[info]   (min, avg, max) = (1349.593, 1612.001, 1691.372), stdev = 147.019
[info]   CI (99.9%): [1045.885, 2178.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   100624.632 ±(99.9%) 36088.159 B/op [Average]
[info]   (min, avg, max) = (83949.063, 100624.632, 106420.478), stdev = 9371.980
[info]   CI (99.9%): [64536.472, 136712.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.692 ±(99.9%) 9.303 B/op [Average]
[info]   (min, avg, max) = (2.590, 4.692, 7.985), stdev = 2.416
[info]   CI (99.9%): [≈ 0, 13.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 18.34% complete, ETA 01:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.998 ops/s
[info] # Warmup Iteration   2: 83677.919 ops/s
[info] # Warmup Iteration   3: 90334.093 ops/s
[info] Iteration   1: 90970.856 ops/s
[info]                  ·gc.alloc.rate:               857.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          14840.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11201.898 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 89595.786 ops/s
[info]                  ·gc.alloc.rate:                   844.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17136.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 88163.533 ops/s
[info]                  ·gc.alloc.rate:                   831.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17516.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 87980.172 ops/s
[info]                  ·gc.alloc.rate:                   829.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11744.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 89550.729 ops/s
[info]                  ·gc.alloc.rate:               844.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          14840.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      985.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17320.950 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   89252.215 ±(99.9%) 4701.966 ops/s [Average]
[info]   (min, avg, max) = (87980.172, 89252.215, 90970.856), stdev = 1221.086
[info]   CI (99.9%): [84550.249, 93954.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   841.612 ±(99.9%) 44.446 MB/sec [Average]
[info]   (min, avg, max) = (829.534, 841.612, 857.782), stdev = 11.542
[info]   CI (99.9%): [797.167, 886.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14840.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14840.005, 14840.005, 14840.005), stdev = 0.001
[info]   CI (99.9%): [14840.004, 14840.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   849.325 ±(99.9%) 693.910 MB/sec [Average]
[info]   (min, avg, max) = (647.492, 849.325, 985.643), stdev = 180.206
[info]   CI (99.9%): [155.415, 1543.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14984.134 ±(99.9%) 12374.862 B/op [Average]
[info]   (min, avg, max) = (11201.898, 14984.134, 17516.898), stdev = 3213.712
[info]   CI (99.9%): [2609.271, 27358.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.483 ±(99.9%) 3.950 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 2.317), stdev = 1.026
[info]   CI (99.9%): [≈ 0, 4.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   8.635 ±(99.9%) 70.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.635, 41.454), stdev = 18.353
[info]   CI (99.9%): [≈ 0, 79.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.58% complete, ETA 01:10:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37309.064 ops/s
[info] # Warmup Iteration   2: 57099.264 ops/s
[info] # Warmup Iteration   3: 57238.734 ops/s
[info] Iteration   1: 56442.012 ops/s
[info]                  ·gc.alloc.rate:                   989.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27360.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 56308.063 ops/s
[info]                  ·gc.alloc.rate:                   987.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27509.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.327 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 57566.387 ops/s
[info]                  ·gc.alloc.rate:                   1009.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27018.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.707 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57110.477 ops/s
[info]                  ·gc.alloc.rate:                   1000.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27370.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 57507.133 ops/s
[info]                  ·gc.alloc.rate:                   1008.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27292.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.709 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   56986.814 ±(99.9%) 2261.283 ops/s [Average]
[info]   (min, avg, max) = (56308.063, 56986.814, 57566.387), stdev = 587.248
[info]   CI (99.9%): [54725.531, 59248.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   999.014 ±(99.9%) 39.762 MB/sec [Average]
[info]   (min, avg, max) = (987.270, 999.014, 1009.383), stdev = 10.326
[info]   CI (99.9%): [959.252, 1038.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27584.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27584.008, 27584.008, 27584.008), stdev = 0.001
[info]   CI (99.9%): [27584.007, 27584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   989.055 ±(99.9%) 24.968 MB/sec [Average]
[info]   (min, avg, max) = (981.310, 989.055, 997.467), stdev = 6.484
[info]   CI (99.9%): [964.087, 1014.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27310.214 ±(99.9%) 698.308 B/op [Average]
[info]   (min, avg, max) = (27018.020, 27310.214, 27509.341), stdev = 181.348
[info]   CI (99.9%): [26611.906, 28008.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.956 ±(99.9%) 1.250 B/op [Average]
[info]   (min, avg, max) = (1.707, 1.956, 2.327), stdev = 0.325
[info]   CI (99.9%): [0.706, 3.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.83% complete, ETA 01:10:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107252.278 ops/s
[info] # Warmup Iteration   2: 114646.284 ops/s
[info] # Warmup Iteration   3: 118921.260 ops/s
[info] Iteration   1: 117935.946 ops/s
[info]                  ·gc.alloc.rate:                   793.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8871.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 118828.246 ops/s
[info]                  ·gc.alloc.rate:                   799.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13208.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 118866.637 ops/s
[info]                  ·gc.alloc.rate:                   799.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8811.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 116466.285 ops/s
[info]                  ·gc.alloc.rate:               783.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9006.622 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 117664.057 ops/s
[info]                  ·gc.alloc.rate:                   791.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13396.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   117952.234 ±(99.9%) 3799.713 ops/s [Average]
[info]   (min, avg, max) = (116466.285, 117952.234, 118866.637), stdev = 986.773
[info]   CI (99.9%): [114152.521, 121751.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   793.265 ±(99.9%) 25.808 MB/sec [Average]
[info]   (min, avg, max) = (783.209, 793.265, 799.409), stdev = 6.702
[info]   CI (99.9%): [767.457, 819.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10584.004, 10584.004, 10584.004), stdev = 0.001
[info]   CI (99.9%): [10584.003, 10584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.186 ±(99.9%) 704.481 MB/sec [Average]
[info]   (min, avg, max) = (664.805, 799.186, 1001.568), stdev = 182.952
[info]   CI (99.9%): [94.704, 1503.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10658.987 ±(99.9%) 9300.075 B/op [Average]
[info]   (min, avg, max) = (8811.341, 10658.987, 13396.902), stdev = 2415.200
[info]   CI (99.9%): [1358.912, 19959.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.886 ±(99.9%) 2.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.886, 1.392), stdev = 0.568
[info]   CI (99.9%): [≈ 0, 3.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.07% complete, ETA 01:10:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19104.807 ops/s
[info] # Warmup Iteration   2: 33781.573 ops/s
[info] # Warmup Iteration   3: 34077.137 ops/s
[info] Iteration   1: 33500.594 ops/s
[info]                  ·gc.alloc.rate:                   1714.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77629.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.934 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33713.132 ops/s
[info]                  ·gc.alloc.rate:                   1725.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77730.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.831 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34316.869 ops/s
[info]                  ·gc.alloc.rate:                   1755.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76818.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.819 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33791.776 ops/s
[info]                  ·gc.alloc.rate:                   1729.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78417.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.878 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33277.165 ops/s
[info]                  ·gc.alloc.rate:                   1702.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79909.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.938 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33719.907 ±(99.9%) 1498.407 ops/s [Average]
[info]   (min, avg, max) = (33277.165, 33719.907, 34316.869), stdev = 389.132
[info]   CI (99.9%): [32221.500, 35218.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1725.490 ±(99.9%) 76.538 MB/sec [Average]
[info]   (min, avg, max) = (1702.910, 1725.490, 1755.997), stdev = 19.877
[info]   CI (99.9%): [1648.952, 1802.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80536.014 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (80536.013, 80536.014, 80536.019), stdev = 0.003
[info]   CI (99.9%): [80536.004, 80536.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1673.142 ±(99.9%) 57.215 MB/sec [Average]
[info]   (min, avg, max) = (1652.399, 1673.142, 1689.666), stdev = 14.859
[info]   CI (99.9%): [1615.927, 1730.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78101.236 ±(99.9%) 4463.733 B/op [Average]
[info]   (min, avg, max) = (76818.587, 78101.236, 79909.657), stdev = 1159.217
[info]   CI (99.9%): [73637.504, 82564.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.080 ±(99.9%) 4.088 B/op [Average]
[info]   (min, avg, max) = (2.934, 4.080, 5.831), stdev = 1.062
[info]   CI (99.9%): [≈ 0, 8.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.32% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27437.131 ops/s
[info] # Warmup Iteration   2: 38991.757 ops/s
[info] # Warmup Iteration   3: 39523.968 ops/s
[info] Iteration   1: 38504.564 ops/s
[info]                  ·gc.alloc.rate:                   607.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              24827.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26928.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39155.121 ops/s
[info]                  ·gc.alloc.rate:                   617.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26454.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39449.703 ops/s
[info]                  ·gc.alloc.rate:                   622.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26282.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39179.076 ops/s
[info]                  ·gc.alloc.rate:                   617.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26519.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39863.272 ops/s
[info]                  ·gc.alloc.rate:               628.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      330.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13057.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39230.347 ±(99.9%) 1909.624 ops/s [Average]
[info]   (min, avg, max) = (38504.564, 39230.347, 39863.272), stdev = 495.923
[info]   CI (99.9%): [37320.723, 41139.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   618.794 ±(99.9%) 29.982 MB/sec [Average]
[info]   (min, avg, max) = (607.434, 618.794, 628.759), stdev = 7.786
[info]   CI (99.9%): [588.813, 648.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24824.759 ±(99.9%) 6.436 B/op [Average]
[info]   (min, avg, max) = (24824.011, 24824.759, 24827.748), stdev = 1.671
[info]   CI (99.9%): [24818.323, 24831.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   593.335 ±(99.9%) 565.264 MB/sec [Average]
[info]   (min, avg, max) = (330.739, 593.335, 660.150), stdev = 146.797
[info]   CI (99.9%): [28.070, 1158.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23848.538 ±(99.9%) 23245.628 B/op [Average]
[info]   (min, avg, max) = (13057.888, 23848.538, 26928.453), stdev = 6036.816
[info]   CI (99.9%): [602.910, 47094.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.406 ±(99.9%) 3.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.406, 1.845), stdev = 0.805
[info]   CI (99.9%): [≈ 0, 3.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.582 ±(99.9%) 126.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.582, 75.393), stdev = 32.900
[info]   CI (99.9%): [≈ 0, 143.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.56% complete, ETA 01:09:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27879.318 ops/s
[info] # Warmup Iteration   2: 41824.427 ops/s
[info] # Warmup Iteration   3: 41671.034 ops/s
[info] Iteration   1: 41678.480 ops/s
[info]                  ·gc.alloc.rate:               419.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19318.853 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 41687.185 ops/s
[info]                  ·gc.alloc.rate:                   419.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12336.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.499 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41937.970 ops/s
[info]                  ·gc.alloc.rate:                   421.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12262.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.344 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41826.174 ops/s
[info]                  ·gc.alloc.rate:                   420.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24615.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41846.750 ops/s
[info]                  ·gc.alloc.rate:               420.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12313.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41795.312 ±(99.9%) 427.450 ops/s [Average]
[info]   (min, avg, max) = (41678.480, 41795.312, 41937.970), stdev = 111.008
[info]   CI (99.9%): [41367.861, 42222.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   420.218 ±(99.9%) 4.260 MB/sec [Average]
[info]   (min, avg, max) = (419.028, 420.218, 421.636), stdev = 1.106
[info]   CI (99.9%): [415.959, 424.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15824.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (15824.010, 15824.011, 15824.011), stdev = 0.001
[info]   CI (99.9%): [15824.009, 15824.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.327 ±(99.9%) 573.542 MB/sec [Average]
[info]   (min, avg, max) = (326.731, 429.327, 654.151), stdev = 148.947
[info]   CI (99.9%): [≈ 0, 1002.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16169.243 ±(99.9%) 21618.146 B/op [Average]
[info]   (min, avg, max) = (12262.219, 16169.243, 24615.166), stdev = 5614.164
[info]   CI (99.9%): [≈ 0, 37787.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.053), stdev = 0.907
[info]   CI (99.9%): [≈ 0, 3.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.282 ±(99.9%) 131.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.282, 77.499), stdev = 34.236
[info]   CI (99.9%): [≈ 0, 148.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.80% complete, ETA 01:09:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37583.546 ops/s
[info] # Warmup Iteration   2: 44164.024 ops/s
[info] # Warmup Iteration   3: 43629.953 ops/s
[info] Iteration   1: 44075.331 ops/s
[info]                  ·gc.alloc.rate:                   432.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18267.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43490.419 ops/s
[info]                  ·gc.alloc.rate:                   426.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12005.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.231 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43907.734 ops/s
[info]                  ·gc.alloc.rate:                   430.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23758.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 44030.555 ops/s
[info]                  ·gc.alloc.rate:                   431.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11834.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 44427.187 ops/s
[info]                  ·gc.alloc.rate:               435.951 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11728.457 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   43986.245 ±(99.9%) 1300.608 ops/s [Average]
[info]   (min, avg, max) = (43490.419, 43986.245, 44427.187), stdev = 337.764
[info]   CI (99.9%): [42685.637, 45286.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   431.590 ±(99.9%) 12.651 MB/sec [Average]
[info]   (min, avg, max) = (426.812, 431.590, 435.951), stdev = 3.286
[info]   CI (99.9%): [418.938, 444.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   15440.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (15440.010, 15440.010, 15440.011), stdev = 0.001
[info]   CI (99.9%): [15440.008, 15440.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   433.724 ±(99.9%) 577.726 MB/sec [Average]
[info]   (min, avg, max) = (331.073, 433.724, 662.952), stdev = 150.034
[info]   CI (99.9%): [≈ 0, 1011.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15518.684 ±(99.9%) 20712.074 B/op [Average]
[info]   (min, avg, max) = (11728.457, 15518.684, 23758.013), stdev = 5378.860
[info]   CI (99.9%): [≈ 0, 36230.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 2.902 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.720), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 3.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.489 ±(99.9%) 105.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.489, 62.231), stdev = 27.270
[info]   CI (99.9%): [≈ 0, 118.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.05% complete, ETA 01:09:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37871.839 ops/s
[info] # Warmup Iteration   2: 44919.580 ops/s
[info] # Warmup Iteration   3: 44082.686 ops/s
[info] Iteration   1: 44317.477 ops/s
[info]                  ·gc.alloc.rate:                   384.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9083.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 42785.576 ops/s
[info]                  ·gc.alloc.rate:                   370.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21612.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 44921.318 ops/s
[info]                  ·gc.alloc.rate:                   389.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11622.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 44725.103 ops/s
[info]                  ·gc.alloc.rate:                   387.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11650.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 44249.550 ops/s
[info]                  ·gc.alloc.rate:               383.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11775.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44199.805 ±(99.9%) 3229.083 ops/s [Average]
[info]   (min, avg, max) = (42785.576, 44199.805, 44921.318), stdev = 838.583
[info]   CI (99.9%): [40970.722, 47428.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   383.082 ±(99.9%) 27.911 MB/sec [Average]
[info]   (min, avg, max) = (370.856, 383.082, 389.319), stdev = 7.248
[info]   CI (99.9%): [355.171, 410.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13640.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13640.010, 13640.010, 13640.010), stdev = 0.001
[info]   CI (99.9%): [13640.009, 13640.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.469 ±(99.9%) 490.339 MB/sec [Average]
[info]   (min, avg, max) = (255.790, 367.469, 587.621), stdev = 127.339
[info]   CI (99.9%): [≈ 0, 857.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   13149.101 ±(99.9%) 18727.872 B/op [Average]
[info]   (min, avg, max) = (9083.905, 13149.101, 21612.545), stdev = 4863.569
[info]   CI (99.9%): [≈ 0, 31876.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 3.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.814), stdev = 0.801
[info]   CI (99.9%): [≈ 0, 3.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   14.000 ±(99.9%) 113.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.000, 66.703), stdev = 29.473
[info]   CI (99.9%): [≈ 0, 127.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.29% complete, ETA 01:09:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10844.920 ops/s
[info] # Warmup Iteration   2: 14556.141 ops/s
[info] # Warmup Iteration   3: 14747.264 ops/s
[info] Iteration   1: 14785.313 ops/s
[info]                  ·gc.alloc.rate:                   1055.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              112336.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105793.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14968.828 ops/s
[info]                  ·gc.alloc.rate:                   1068.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              112345.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104703.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15016.054 ops/s
[info]                  ·gc.alloc.rate:                   1071.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104690.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.727 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14977.689 ops/s
[info]                  ·gc.alloc.rate:                   1069.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140442.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.686 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14963.037 ops/s
[info]                  ·gc.alloc.rate:                   1068.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              112346.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105866.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   14942.184 ±(99.9%) 346.936 ops/s [Average]
[info]   (min, avg, max) = (14785.313, 14942.184, 15016.054), stdev = 90.098
[info]   CI (99.9%): [14595.248, 15289.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1066.763 ±(99.9%) 24.466 MB/sec [Average]
[info]   (min, avg, max) = (1055.699, 1066.763, 1071.960), stdev = 6.354
[info]   CI (99.9%): [1042.297, 1091.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112346.307 ±(99.9%) 25.292 B/op [Average]
[info]   (min, avg, max) = (112336.031, 112346.307, 112352.029), stdev = 6.568
[info]   CI (99.9%): [112321.016, 112371.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1066.452 ±(99.9%) 581.759 MB/sec [Average]
[info]   (min, avg, max) = (994.215, 1066.452, 1336.583), stdev = 151.081
[info]   CI (99.9%): [484.692, 1648.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112299.213 ±(99.9%) 60619.717 B/op [Average]
[info]   (min, avg, max) = (104690.040, 112299.213, 140442.410), stdev = 15742.748
[info]   CI (99.9%): [51679.497, 172918.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.100, 0.187), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.519 ±(99.9%) 24.820 B/op [Average]
[info]   (min, avg, max) = (2.189, 10.519, 19.686), stdev = 6.446
[info]   CI (99.9%): [≈ 0, 35.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.54% complete, ETA 01:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9885.904 ops/s
[info] # Warmup Iteration   2: 16175.260 ops/s
[info] # Warmup Iteration   3: 15856.526 ops/s
[info] Iteration   1: 15853.162 ops/s
[info]                  ·gc.alloc.rate:                   961.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              95464.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97477.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15830.026 ops/s
[info]                  ·gc.alloc.rate:                   960.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              95488.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97916.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15862.458 ops/s
[info]                  ·gc.alloc.rate:                   962.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98116.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16014.785 ops/s
[info]                  ·gc.alloc.rate:                   971.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97637.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16328.573 ops/s
[info]                  ·gc.alloc.rate:                   990.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              95473.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96151.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15977.801 ±(99.9%) 805.615 ops/s [Average]
[info]   (min, avg, max) = (15830.026, 15977.801, 16328.573), stdev = 209.216
[info]   CI (99.9%): [15172.185, 16783.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   969.426 ±(99.9%) 48.755 MB/sec [Average]
[info]   (min, avg, max) = (960.564, 969.426, 990.625), stdev = 12.662
[info]   CI (99.9%): [920.670, 1018.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   95483.706 ±(99.9%) 55.164 B/op [Average]
[info]   (min, avg, max) = (95464.029, 95483.706, 95496.037), stdev = 14.326
[info]   CI (99.9%): [95428.542, 95538.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   989.412 ±(99.9%) 24.352 MB/sec [Average]
[info]   (min, avg, max) = (981.987, 989.412, 997.655), stdev = 6.324
[info]   CI (99.9%): [965.060, 1013.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   97459.706 ±(99.9%) 2972.915 B/op [Average]
[info]   (min, avg, max) = (96151.035, 97459.706, 98116.046), stdev = 772.057
[info]   CI (99.9%): [94486.791, 100432.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.141 ±(99.9%) 5.308 B/op [Average]
[info]   (min, avg, max) = (4.131, 6.141, 8.026), stdev = 1.379
[info]   CI (99.9%): [0.832, 11.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.78% complete, ETA 01:08:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76513.282 ops/s
[info] # Warmup Iteration   2: 78077.498 ops/s
[info] # Warmup Iteration   3: 78265.356 ops/s
[info] Iteration   1: 78096.116 ops/s
[info]                  ·gc.alloc.rate:                   203.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5155.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 77982.374 ops/s
[info]                  ·gc.alloc.rate:               202.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5162.617 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 78394.243 ops/s
[info]                  ·gc.alloc.rate:      204.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77387.701 ops/s
[info]                  ·gc.alloc.rate:                   201.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5202.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 78073.790 ops/s
[info]                  ·gc.alloc.rate:               203.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5156.601 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   77986.845 ±(99.9%) 1420.656 ops/s [Average]
[info]   (min, avg, max) = (77387.701, 77986.845, 78394.243), stdev = 368.940
[info]   CI (99.9%): [76566.189, 79407.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   202.975 ±(99.9%) 3.634 MB/sec [Average]
[info]   (min, avg, max) = (201.450, 202.975, 204.034), stdev = 0.944
[info]   CI (99.9%): [199.340, 206.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.006, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.655 ±(99.9%) 440.536 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.655, 255.864), stdev = 114.406
[info]   CI (99.9%): [≈ 0, 645.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4135.374 ±(99.9%) 8902.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4135.374, 5202.372), stdev = 2311.825
[info]   CI (99.9%): [≈ 0, 13037.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.126 ±(99.9%) 0.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.419), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.03% complete, ETA 01:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6388.290 ops/s
[info] # Warmup Iteration   2: 12960.235 ops/s
[info] # Warmup Iteration   3: 13029.606 ops/s
[info] Iteration   1: 12990.876 ops/s
[info]                  ·gc.alloc.rate:                   1244.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              150816.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119279.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12866.114 ops/s
[info]                  ·gc.alloc.rate:                   1233.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              150816.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161344.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.639 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12928.004 ops/s
[info]                  ·gc.alloc.rate:                   1239.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              150816.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161543.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.534 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12907.228 ops/s
[info]                  ·gc.alloc.rate:                   1236.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              150816.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162687.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.615 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12986.268 ops/s
[info]                  ·gc.alloc.rate:                   1244.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              150816.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121778.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   12935.698 ±(99.9%) 204.788 ops/s [Average]
[info]   (min, avg, max) = (12866.114, 12935.698, 12990.876), stdev = 53.183
[info]   CI (99.9%): [12730.910, 13140.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1239.654 ±(99.9%) 19.240 MB/sec [Average]
[info]   (min, avg, max) = (1233.183, 1239.654, 1244.835), stdev = 4.997
[info]   CI (99.9%): [1220.414, 1258.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   150816.064 ±(99.9%) 0.253 B/op [Average]
[info]   (min, avg, max) = (150816.033, 150816.064, 150816.181), stdev = 0.066
[info]   CI (99.9%): [150815.811, 150816.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1193.989 ±(99.9%) 701.450 MB/sec [Average]
[info]   (min, avg, max) = (984.530, 1193.989, 1334.187), stdev = 182.164
[info]   CI (99.9%): [492.540, 1895.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   145326.704 ±(99.9%) 87257.091 B/op [Average]
[info]   (min, avg, max) = (119279.253, 145326.704, 162687.663), stdev = 22660.389
[info]   CI (99.9%): [58069.614, 232583.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.584 ±(99.9%) 8.719 B/op [Average]
[info]   (min, avg, max) = (2.534, 6.584, 7.639), stdev = 2.264
[info]   CI (99.9%): [≈ 0, 15.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.27% complete, ETA 01:08:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39373.980 ops/s
[info] # Warmup Iteration   2: 55067.183 ops/s
[info] # Warmup Iteration   3: 55408.440 ops/s
[info] Iteration   1: 56085.626 ops/s
[info]                  ·gc.alloc.rate:                   1390.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46381.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.168 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 55779.542 ops/s
[info]                  ·gc.alloc.rate:                   1383.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37515.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.937 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 55493.825 ops/s
[info]                  ·gc.alloc.rate:                   1375.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37897.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.771 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 56316.725 ops/s
[info]                  ·gc.alloc.rate:                   1396.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37491.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 55977.864 ops/s
[info]                  ·gc.alloc.rate:                   1388.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37869.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.926 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   55930.717 ±(99.9%) 1200.744 ops/s [Average]
[info]   (min, avg, max) = (55493.825, 55930.717, 56316.725), stdev = 311.829
[info]   CI (99.9%): [54729.973, 57131.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1386.749 ±(99.9%) 29.674 MB/sec [Average]
[info]   (min, avg, max) = (1375.693, 1386.749, 1396.088), stdev = 7.706
[info]   CI (99.9%): [1357.075, 1416.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39016.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39016.008, 39016.008, 39016.008), stdev = 0.001
[info]   CI (99.9%): [39016.007, 39016.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1401.662 ±(99.9%) 541.745 MB/sec [Average]
[info]   (min, avg, max) = (1330.125, 1401.662, 1653.078), stdev = 140.690
[info]   CI (99.9%): [859.917, 1943.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39431.274 ±(99.9%) 14978.591 B/op [Average]
[info]   (min, avg, max) = (37491.693, 39431.274, 46381.372), stdev = 3889.893
[info]   CI (99.9%): [24452.683, 54409.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.993 ±(99.9%) 3.433 B/op [Average]
[info]   (min, avg, max) = (1.163, 1.993, 2.937), stdev = 0.892
[info]   CI (99.9%): [≈ 0, 5.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.52% complete, ETA 01:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54428.860 ops/s
[info] # Warmup Iteration   2: 78302.308 ops/s
[info] # Warmup Iteration   3: 80107.236 ops/s
[info] Iteration   1: 80304.387 ops/s
[info]                  ·gc.alloc.rate:                   1216.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25719.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.632 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 78808.119 ops/s
[info]                  ·gc.alloc.rate:                   1193.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19748.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.663 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 79950.948 ops/s
[info]                  ·gc.alloc.rate:                   1210.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26095.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.820 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 80567.663 ops/s
[info]                  ·gc.alloc.rate:                   1220.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19525.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80344.704 ops/s
[info]                  ·gc.alloc.rate:                   1216.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26229.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.631 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   79995.164 ±(99.9%) 2693.101 ops/s [Average]
[info]   (min, avg, max) = (78808.119, 79995.164, 80567.663), stdev = 699.390
[info]   CI (99.9%): [77302.063, 82688.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1211.470 ±(99.9%) 40.563 MB/sec [Average]
[info]   (min, avg, max) = (1193.612, 1211.470, 1220.021), stdev = 10.534
[info]   CI (99.9%): [1170.907, 1252.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23832.005, 23832.006, 23832.006), stdev = 0.001
[info]   CI (99.9%): [23832.005, 23832.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1193.214 ±(99.9%) 700.195 MB/sec [Average]
[info]   (min, avg, max) = (989.089, 1193.214, 1338.994), stdev = 181.838
[info]   CI (99.9%): [493.019, 1893.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23463.626 ±(99.9%) 13474.211 B/op [Average]
[info]   (min, avg, max) = (19525.307, 23463.626, 26229.407), stdev = 3499.210
[info]   CI (99.9%): [9989.415, 36937.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.393 ±(99.9%) 1.422 B/op [Average]
[info]   (min, avg, max) = (0.820, 1.393, 1.663), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 2.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.76% complete, ETA 01:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187335.790 ops/s
[info] # Warmup Iteration   2: 207848.226 ops/s
[info] # Warmup Iteration   3: 214409.711 ops/s
[info] Iteration   1: 213459.749 ops/s
[info]                  ·gc.alloc.rate:               338.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3772.086 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 212115.675 ops/s
[info]                  ·gc.alloc.rate:               336.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1898.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 208451.028 ops/s
[info]                  ·gc.alloc.rate:                   330.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2504.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 214985.917 ops/s
[info]                  ·gc.alloc.rate:                   340.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2428.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 215145.854 ops/s
[info]                  ·gc.alloc.rate:                   341.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2426.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   212831.645 ±(99.9%) 10561.822 ops/s [Average]
[info]   (min, avg, max) = (208451.028, 212831.645, 215145.854), stdev = 2742.872
[info]   CI (99.9%): [202269.822, 223393.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   337.527 ±(99.9%) 16.756 MB/sec [Average]
[info]   (min, avg, max) = (330.579, 337.527, 341.206), stdev = 4.352
[info]   CI (99.9%): [320.771, 354.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   352.519 ±(99.9%) 365.031 MB/sec [Average]
[info]   (min, avg, max) = (255.807, 352.519, 511.571), stdev = 94.797
[info]   CI (99.9%): [≈ 0, 717.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2606.052 ±(99.9%) 2678.062 B/op [Average]
[info]   (min, avg, max) = (1898.054, 2606.052, 3772.086), stdev = 695.484
[info]   CI (99.9%): [≈ 0, 5284.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.367 ±(99.9%) 3.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.772), stdev = 0.786
[info]   CI (99.9%): [≈ 0, 3.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.767 ±(99.9%) 22.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.767, 13.377), stdev = 5.933
[info]   CI (99.9%): [≈ 0, 25.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.00% complete, ETA 01:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205754.253 ops/s
[info] # Warmup Iteration   2: 229513.514 ops/s
[info] # Warmup Iteration   3: 231462.391 ops/s
[info] Iteration   1: 231311.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 231349.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 230760.281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 230821.464 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 230989.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   231046.435 ±(99.9%) 1050.102 ops/s [Average]
[info]   (min, avg, max) = (230760.281, 231046.435, 231349.191), stdev = 272.708
[info]   CI (99.9%): [229996.333, 232096.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.25% complete, ETA 01:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39956.318 ops/s
[info] # Warmup Iteration   2: 53617.370 ops/s
[info] # Warmup Iteration   3: 54054.750 ops/s
[info] Iteration   1: 53428.955 ops/s
[info]                  ·gc.alloc.rate:                   1009.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38782.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.226 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52404.217 ops/s
[info]                  ·gc.alloc.rate:                   989.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29719.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 52765.955 ops/s
[info]                  ·gc.alloc.rate:                   996.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29655.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 53867.560 ops/s
[info]                  ·gc.alloc.rate:                   1016.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29145.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 53120.177 ops/s
[info]                  ·gc.alloc.rate:                   1002.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29685.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   53117.373 ±(99.9%) 2188.404 ops/s [Average]
[info]   (min, avg, max) = (52404.217, 53117.373, 53867.560), stdev = 568.321
[info]   CI (99.9%): [50928.969, 55305.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1002.971 ±(99.9%) 41.147 MB/sec [Average]
[info]   (min, avg, max) = (989.707, 1002.971, 1016.937), stdev = 10.686
[info]   CI (99.9%): [961.824, 1044.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29712.008, 29712.008, 29712.009), stdev = 0.001
[info]   CI (99.9%): [29712.007, 29712.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1060.199 ±(99.9%) 553.573 MB/sec [Average]
[info]   (min, avg, max) = (989.958, 1060.199, 1317.244), stdev = 143.761
[info]   CI (99.9%): [506.626, 1613.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31397.661 ±(99.9%) 15922.756 B/op [Average]
[info]   (min, avg, max) = (29145.493, 31397.661, 38782.733), stdev = 4135.089
[info]   CI (99.9%): [15474.904, 47320.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.976 ±(99.9%) 2.032 B/op [Average]
[info]   (min, avg, max) = (1.226, 1.976, 2.501), stdev = 0.528
[info]   CI (99.9%): [≈ 0, 4.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.49% complete, ETA 01:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17930.610 ops/s
[info] # Warmup Iteration   2: 26182.244 ops/s
[info] # Warmup Iteration   3: 26322.595 ops/s
[info] Iteration   1: 26486.127 ops/s
[info]                  ·gc.alloc.rate:                   588.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39069.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26508.215 ops/s
[info]                  ·gc.alloc.rate:               588.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          34959.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19498.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 26554.236 ops/s
[info]                  ·gc.alloc.rate:                   589.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38969.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 26555.489 ops/s
[info]                  ·gc.alloc.rate:                   589.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39026.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26326.262 ops/s
[info]                  ·gc.alloc.rate:               584.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39426.139 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   26486.066 ±(99.9%) 362.731 ops/s [Average]
[info]   (min, avg, max) = (26326.262, 26486.066, 26555.489), stdev = 94.200
[info]   CI (99.9%): [26123.335, 26848.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   588.358 ±(99.9%) 8.070 MB/sec [Average]
[info]   (min, avg, max) = (584.800, 588.358, 589.875), stdev = 2.096
[info]   CI (99.9%): [580.288, 596.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34959.898 ±(99.9%) 1.019 B/op [Average]
[info]   (min, avg, max) = (34959.425, 34959.898, 34960.017), stdev = 0.265
[info]   CI (99.9%): [34958.879, 34960.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   592.294 ±(99.9%) 567.902 MB/sec [Average]
[info]   (min, avg, max) = (328.473, 592.294, 659.508), stdev = 147.482
[info]   CI (99.9%): [24.392, 1160.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35198.045 ±(99.9%) 33801.151 B/op [Average]
[info]   (min, avg, max) = (19498.641, 35198.045, 39426.139), stdev = 8778.052
[info]   CI (99.9%): [1396.894, 68999.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.392 ±(99.9%) 3.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.392, 1.855), stdev = 0.818
[info]   CI (99.9%): [≈ 0, 3.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.279 ±(99.9%) 187.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.279, 110.224), stdev = 48.630
[info]   CI (99.9%): [≈ 0, 210.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.74% complete, ETA 01:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56913.989 ops/s
[info] # Warmup Iteration   2: 85018.951 ops/s
[info] # Warmup Iteration   3: 87421.806 ops/s
[info] Iteration   1: 88279.321 ops/s
[info]                  ·gc.alloc.rate:                   1216.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17516.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 87598.325 ops/s
[info]                  ·gc.alloc.rate:                   1206.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23649.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.244 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 88451.173 ops/s
[info]                  ·gc.alloc.rate:                   1218.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23575.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.111 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 87990.426 ops/s
[info]                  ·gc.alloc.rate:               1212.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          21680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      999.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17873.048 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 85897.987 ops/s
[info]                  ·gc.alloc.rate:                   1183.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24527.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.144 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   87643.447 ±(99.9%) 3957.845 ops/s [Average]
[info]   (min, avg, max) = (85897.987, 87643.447, 88451.173), stdev = 1027.840
[info]   CI (99.9%): [83685.602, 91601.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1207.412 ±(99.9%) 54.461 MB/sec [Average]
[info]   (min, avg, max) = (1183.450, 1207.412, 1218.415), stdev = 14.143
[info]   CI (99.9%): [1152.951, 1261.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21680.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21680.005, 21680.005, 21680.005), stdev = 0.001
[info]   CI (99.9%): [21680.004, 21680.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.452 ±(99.9%) 708.943 MB/sec [Average]
[info]   (min, avg, max) = (982.906, 1192.452, 1338.906), stdev = 184.110
[info]   CI (99.9%): [483.509, 1901.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21428.693 ±(99.9%) 13212.518 B/op [Average]
[info]   (min, avg, max) = (17516.842, 21428.693, 24527.844), stdev = 3431.249
[info]   CI (99.9%): [8216.175, 34641.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.123 ±(99.9%) 3.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.123, 2.244), stdev = 0.794
[info]   CI (99.9%): [≈ 0, 4.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.98% complete, ETA 01:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109030.950 ops/s
[info] # Warmup Iteration   2: 125123.343 ops/s
[info] # Warmup Iteration   3: 123366.641 ops/s
[info] Iteration   1: 125540.278 ops/s
[info]                  ·gc.alloc.rate:                   490.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7370.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 125985.760 ops/s
[info]                  ·gc.alloc.rate:                   491.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4148.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 125870.917 ops/s
[info]                  ·gc.alloc.rate:                   491.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8296.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 125975.512 ops/s
[info]                  ·gc.alloc.rate:               491.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4144.536 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 120892.729 ops/s
[info]                  ·gc.alloc.rate:                   471.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8642.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   124853.039 ±(99.9%) 8553.162 ops/s [Average]
[info]   (min, avg, max) = (120892.729, 124853.039, 125985.760), stdev = 2221.229
[info]   CI (99.9%): [116299.877, 133406.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   487.390 ±(99.9%) 33.369 MB/sec [Average]
[info]   (min, avg, max) = (471.940, 487.390, 491.802), stdev = 8.666
[info]   CI (99.9%): [454.020, 520.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.793 ±(99.9%) 657.287 MB/sec [Average]
[info]   (min, avg, max) = (331.739, 515.793, 663.820), stdev = 170.695
[info]   CI (99.9%): [≈ 0, 1173.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6520.247 ±(99.9%) 8533.995 B/op [Average]
[info]   (min, avg, max) = (4144.536, 6520.247, 8642.015), stdev = 2216.251
[info]   CI (99.9%): [≈ 0, 15054.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 2.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.584), stdev = 0.689
[info]   CI (99.9%): [≈ 0, 3.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.447 ±(99.9%) 33.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.447, 19.862), stdev = 8.632
[info]   CI (99.9%): [≈ 0, 37.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.23% complete, ETA 01:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10016.266 ops/s
[info] # Warmup Iteration   2: 21644.171 ops/s
[info] # Warmup Iteration   3: 21863.007 ops/s
[info] Iteration   1: 21629.188 ops/s
[info]                  ·gc.alloc.rate:                   1208.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              87928.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94954.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.574 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21947.376 ops/s
[info]                  ·gc.alloc.rate:                   1226.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              87928.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94104.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.971 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 21949.920 ops/s
[info]                  ·gc.alloc.rate:                   1226.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              87928.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71046.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21668.495 ops/s
[info]                  ·gc.alloc.rate:                   1210.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              87928.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96448.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.536 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22011.088 ops/s
[info]                  ·gc.alloc.rate:                   1230.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              87928.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95522.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21841.214 ±(99.9%) 685.403 ops/s [Average]
[info]   (min, avg, max) = (21629.188, 21841.214, 22011.088), stdev = 177.997
[info]   CI (99.9%): [21155.811, 22526.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1220.348 ±(99.9%) 38.637 MB/sec [Average]
[info]   (min, avg, max) = (1208.402, 1220.348, 1230.009), stdev = 10.034
[info]   CI (99.9%): [1181.711, 1258.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87928.055 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (87928.020, 87928.055, 87928.188), stdev = 0.074
[info]   CI (99.9%): [87927.769, 87928.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1254.513 ±(99.9%) 569.465 MB/sec [Average]
[info]   (min, avg, max) = (990.883, 1254.513, 1336.241), stdev = 147.888
[info]   CI (99.9%): [685.048, 1823.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   90415.464 ±(99.9%) 41822.109 B/op [Average]
[info]   (min, avg, max) = (71046.588, 90415.464, 96448.865), stdev = 10861.069
[info]   CI (99.9%): [48593.355, 132237.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.809 ±(99.9%) 8.654 B/op [Average]
[info]   (min, avg, max) = (1.488, 4.809, 7.574), stdev = 2.247
[info]   CI (99.9%): [≈ 0, 13.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.47% complete, ETA 01:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128643.685 ops/s
[info] # Warmup Iteration   2: 166407.050 ops/s
[info] # Warmup Iteration   3: 169971.973 ops/s
[info] Iteration   1: 169680.977 ops/s
[info]                  ·gc.alloc.rate:                   1110.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12227.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.772 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 169391.686 ops/s
[info]                  ·gc.alloc.rate:                   1108.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9225.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.967 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 169581.871 ops/s
[info]                  ·gc.alloc.rate:                   1109.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9245.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.773 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 166870.766 ops/s
[info]                  ·gc.alloc.rate:                   1091.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12583.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 167776.539 ops/s
[info]                  ·gc.alloc.rate:                   1097.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9426.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   168660.368 ±(99.9%) 4874.322 ops/s [Average]
[info]   (min, avg, max) = (166870.766, 168660.368, 169680.977), stdev = 1265.846
[info]   CI (99.9%): [163786.045, 173534.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1103.448 ±(99.9%) 31.830 MB/sec [Average]
[info]   (min, avg, max) = (1091.823, 1103.448, 1110.142), stdev = 8.266
[info]   CI (99.9%): [1071.618, 1135.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1129.398 ±(99.9%) 693.140 MB/sec [Average]
[info]   (min, avg, max) = (993.065, 1129.398, 1334.436), stdev = 180.006
[info]   CI (99.9%): [436.258, 1822.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10541.763 ±(99.9%) 6577.158 B/op [Average]
[info]   (min, avg, max) = (9225.127, 10541.763, 12583.867), stdev = 1708.067
[info]   CI (99.9%): [3964.606, 17118.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.698 ±(99.9%) 0.838 B/op [Average]
[info]   (min, avg, max) = (0.393, 0.698, 0.967), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 1.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.72% complete, ETA 01:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 383371.866 ops/s
[info] # Warmup Iteration   2: 545738.160 ops/s
[info] # Warmup Iteration   3: 542298.708 ops/s
[info] Iteration   1: 552417.130 ops/s
[info]                  ·gc.alloc.rate:                   558.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 552848.954 ops/s
[info]                  ·gc.alloc.rate:                   559.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1861.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 549922.328 ops/s
[info]                  ·gc.alloc.rate:                   556.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1872.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 553519.553 ops/s
[info]                  ·gc.alloc.rate:               559.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 929.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 551135.251 ops/s
[info]                  ·gc.alloc.rate:                   557.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1871.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   551968.643 ±(99.9%) 5534.541 ops/s [Average]
[info]   (min, avg, max) = (549922.328, 551968.643, 553519.553), stdev = 1437.303
[info]   CI (99.9%): [546434.102, 557503.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   558.393 ±(99.9%) 5.492 MB/sec [Average]
[info]   (min, avg, max) = (556.263, 558.393, 559.897), stdev = 1.426
[info]   CI (99.9%): [552.900, 563.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.528 ±(99.9%) 691.217 MB/sec [Average]
[info]   (min, avg, max) = (326.720, 523.528, 655.805), stdev = 179.507
[info]   CI (99.9%): [≈ 0, 1214.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1493.235 ±(99.9%) 1978.432 B/op [Average]
[info]   (min, avg, max) = (929.956, 1493.235, 1872.161), stdev = 513.792
[info]   CI (99.9%): [≈ 0, 3471.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 2.105), stdev = 0.925
[info]   CI (99.9%): [≈ 0, 4.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.283 ±(99.9%) 10.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.283, 5.996), stdev = 2.637
[info]   CI (99.9%): [≈ 0, 11.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.96% complete, ETA 01:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 528246.386 ops/s
[info] # Warmup Iteration   2: 584375.750 ops/s
[info] # Warmup Iteration   3: 581202.187 ops/s
[info] Iteration   1: 588762.338 ops/s
[info]                  ·gc.alloc.rate:                   451.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     683.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 588343.209 ops/s
[info]                  ·gc.alloc.rate:                   451.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1773.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 590302.933 ops/s
[info]                  ·gc.alloc.rate:                   453.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     882.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 590557.396 ops/s
[info]                  ·gc.alloc.rate:                   453.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     882.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 588507.856 ops/s
[info]                  ·gc.alloc.rate:                   451.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1770.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   589294.747 ±(99.9%) 4047.209 ops/s [Average]
[info]   (min, avg, max) = (588343.209, 589294.747, 590557.396), stdev = 1051.047
[info]   CI (99.9%): [585247.538, 593341.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   452.313 ±(99.9%) 3.189 MB/sec [Average]
[info]   (min, avg, max) = (451.574, 452.313, 453.349), stdev = 0.828
[info]   CI (99.9%): [449.124, 455.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.595 ±(99.9%) 761.127 MB/sec [Average]
[info]   (min, avg, max) = (255.799, 448.595, 662.820), stdev = 197.662
[info]   CI (99.9%): [≈ 0, 1209.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1198.567 ±(99.9%) 2039.682 B/op [Average]
[info]   (min, avg, max) = (683.814, 1198.567, 1773.104), stdev = 529.699
[info]   CI (99.9%): [≈ 0, 3238.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.386 ±(99.9%) 2.894 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.386, 1.730), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.034 ±(99.9%) 7.741 B/op [Average]
[info]   (min, avg, max) = (0.056, 1.034, 4.628), stdev = 2.010
[info]   CI (99.9%): [≈ 0, 8.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 24.21% complete, ETA 01:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548816.682 ops/s
[info] # Warmup Iteration   2: 601519.991 ops/s
[info] # Warmup Iteration   3: 605076.806 ops/s
[info] Iteration   1: 604854.663 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 605122.786 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 605124.193 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 604842.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 604912.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   604971.325 ±(99.9%) 544.685 ops/s [Average]
[info]   (min, avg, max) = (604842.089, 604971.325, 605124.193), stdev = 141.453
[info]   CI (99.9%): [604426.639, 605516.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.45% complete, ETA 01:05:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192959.127 ops/s
[info] # Warmup Iteration   2: 322279.494 ops/s
[info] # Warmup Iteration   3: 324280.772 ops/s
[info] Iteration   1: 334395.290 ops/s
[info]                  ·gc.alloc.rate:                   924.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4601.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 335300.009 ops/s
[info]                  ·gc.alloc.rate:                   927.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4598.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.489 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 330594.079 ops/s
[info]                  ·gc.alloc.rate:                   914.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4688.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 334433.405 ops/s
[info]                  ·gc.alloc.rate:                   924.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3100.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 331276.360 ops/s
[info]                  ·gc.alloc.rate:                   916.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4717.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   333199.828 ±(99.9%) 8134.630 ops/s [Average]
[info]   (min, avg, max) = (330594.079, 333199.828, 335300.009), stdev = 2112.538
[info]   CI (99.9%): [325065.198, 341334.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   921.409 ±(99.9%) 22.736 MB/sec [Average]
[info]   (min, avg, max) = (914.133, 921.409, 927.309), stdev = 5.905
[info]   CI (99.9%): [898.673, 944.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   918.828 ±(99.9%) 560.143 MB/sec [Average]
[info]   (min, avg, max) = (658.820, 918.828, 992.935), stdev = 145.467
[info]   CI (99.9%): [358.685, 1478.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4341.176 ±(99.9%) 2678.391 B/op [Average]
[info]   (min, avg, max) = (3100.487, 4341.176, 4717.356), stdev = 695.570
[info]   CI (99.9%): [1662.785, 7019.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.353 ±(99.9%) 0.424 B/op [Average]
[info]   (min, avg, max) = (0.198, 0.353, 0.489), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.69% complete, ETA 01:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29025.623 ops/s
[info] # Warmup Iteration   2: 35142.803 ops/s
[info] # Warmup Iteration   3: 35361.912 ops/s
[info] Iteration   1: 35168.819 ops/s
[info]                  ·gc.alloc.rate:                   1657.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74557.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.863 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 35991.928 ops/s
[info]                  ·gc.alloc.rate:                   1696.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73227.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.461 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35995.005 ops/s
[info]                  ·gc.alloc.rate:                   1696.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73541.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.820 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36085.733 ops/s
[info]                  ·gc.alloc.rate:                   1701.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73649.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.724 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35912.250 ops/s
[info]                  ·gc.alloc.rate:                   1692.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74210.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.562 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   35830.747 ±(99.9%) 1444.337 ops/s [Average]
[info]   (min, avg, max) = (35168.819, 35830.747, 36085.733), stdev = 375.090
[info]   CI (99.9%): [34386.410, 37275.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1688.660 ±(99.9%) 68.954 MB/sec [Average]
[info]   (min, avg, max) = (1657.138, 1688.660, 1701.157), stdev = 17.907
[info]   CI (99.9%): [1619.706, 1757.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74160.013 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (74160.012, 74160.013, 74160.018), stdev = 0.003
[info]   CI (99.9%): [74160.004, 74160.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1681.228 ±(99.9%) 42.605 MB/sec [Average]
[info]   (min, avg, max) = (1666.022, 1681.228, 1693.330), stdev = 11.064
[info]   CI (99.9%): [1638.623, 1723.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   73837.242 ±(99.9%) 2066.748 B/op [Average]
[info]   (min, avg, max) = (73227.591, 73837.242, 74557.587), stdev = 536.728
[info]   CI (99.9%): [71770.495, 75903.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.286 ±(99.9%) 6.341 B/op [Average]
[info]   (min, avg, max) = (1.820, 3.286, 5.461), stdev = 1.647
[info]   CI (99.9%): [≈ 0, 9.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 752.697 ops/s
[info] # Warmup Iteration   2: 288793.584 ops/s
[info] # Warmup Iteration   3: 288344.770 ops/s
[info] Iteration   1: 289059.886 ops/s
[info]                  ·gc.alloc.rate:               299.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1392.786 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 286822.370 ops/s
[info]                  ·gc.alloc.rate:               297.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1403.638 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 290867.723 ops/s
[info]                  ·gc.alloc.rate:                   301.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1384.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 291038.025 ops/s
[info]                  ·gc.alloc.rate:               301.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      322.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1745.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 289708.156 ops/s
[info]                  ·gc.alloc.rate:               300.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      322.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1753.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   289499.232 ±(99.9%) 6569.529 ops/s [Average]
[info]   (min, avg, max) = (286822.370, 289499.232, 291038.025), stdev = 1706.086
[info]   CI (99.9%): [282929.702, 296068.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   300.231 ±(99.9%) 6.659 MB/sec [Average]
[info]   (min, avg, max) = (297.523, 300.231, 301.793), stdev = 1.729
[info]   CI (99.9%): [293.573, 306.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.002, 1632.002), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   282.612 ±(99.9%) 141.102 MB/sec [Average]
[info]   (min, avg, max) = (255.813, 282.612, 322.755), stdev = 36.644
[info]   CI (99.9%): [141.511, 423.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1535.846 ±(99.9%) 751.063 B/op [Average]
[info]   (min, avg, max) = (1384.097, 1535.846, 1753.351), stdev = 195.049
[info]   CI (99.9%): [784.783, 2286.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62407.704 ops/s
[info] # Warmup Iteration   2: 91473.245 ops/s
[info] # Warmup Iteration   3: 93908.413 ops/s
[info] Iteration   1: 92330.692 ops/s
[info]                  ·gc.alloc.rate:                   1077.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16737.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 94273.732 ops/s
[info]                  ·gc.alloc.rate:                   1100.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21945.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 95220.483 ops/s
[info]                  ·gc.alloc.rate:                   1111.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16384.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.688 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 93656.994 ops/s
[info]                  ·gc.alloc.rate:                   1093.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16741.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 92037.532 ops/s
[info]                  ·gc.alloc.rate:                   1074.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17103.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   93503.887 ±(99.9%) 5126.345 ops/s [Average]
[info]   (min, avg, max) = (92037.532, 93503.887, 95220.483), stdev = 1331.295
[info]   CI (99.9%): [88377.542, 98630.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1091.295 ±(99.9%) 59.972 MB/sec [Average]
[info]   (min, avg, max) = (1074.162, 1091.295, 1111.328), stdev = 15.575
[info]   CI (99.9%): [1031.323, 1151.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18368.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18368.005, 18368.005, 18368.005), stdev = 0.001
[info]   CI (99.9%): [18368.004, 18368.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1056.870 ±(99.9%) 555.626 MB/sec [Average]
[info]   (min, avg, max) = (981.865, 1056.870, 1314.699), stdev = 144.294
[info]   CI (99.9%): [501.244, 1612.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17782.337 ±(99.9%) 9014.128 B/op [Average]
[info]   (min, avg, max) = (16384.344, 17782.337, 21945.156), stdev = 2340.941
[info]   CI (99.9%): [8768.209, 26796.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.773 ±(99.9%) 1.162 B/op [Average]
[info]   (min, avg, max) = (0.350, 0.773, 1.068), stdev = 0.302
[info]   CI (99.9%): [≈ 0, 1.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.43% complete, ETA 01:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359441.834 ops/s
[info] # Warmup Iteration   2: 390094.616 ops/s
[info] # Warmup Iteration   3: 388954.882 ops/s
[info] Iteration   1: 389244.505 ops/s
[info]                  ·gc.alloc.rate:               253.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1034.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 391941.258 ops/s
[info]                  ·gc.alloc.rate:               255.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1027.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 387019.628 ops/s
[info]                  ·gc.alloc.rate:                   251.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 359386.620 ops/s
[info]                  ·gc.alloc.rate:      233.824 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 379954.449 ops/s
[info]                  ·gc.alloc.rate:                   247.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1376.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.433 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   381509.292 ±(99.9%) 50605.336 ops/s [Average]
[info]   (min, avg, max) = (359386.620, 381509.292, 391941.258), stdev = 13142.045
[info]   CI (99.9%): [330903.956, 432114.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   248.226 ±(99.9%) 32.949 MB/sec [Average]
[info]   (min, avg, max) = (233.824, 248.226, 255.045), stdev = 8.557
[info]   CI (99.9%): [215.277, 281.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   219.967 ±(99.9%) 490.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.967, 332.420), stdev = 127.362
[info]   CI (99.9%): [≈ 0, 710.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   895.722 ±(99.9%) 2011.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 895.722, 1376.902), stdev = 522.307
[info]   CI (99.9%): [≈ 0, 2906.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.320 ±(99.9%) 2.656 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.320, 1.553), stdev = 0.690
[info]   CI (99.9%): [≈ 0, 2.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.324 ±(99.9%) 11.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.324, 6.433), stdev = 2.857
[info]   CI (99.9%): [≈ 0, 12.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25.67% complete, ETA 01:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22120.847 ops/s
[info] # Warmup Iteration   2: 37822.800 ops/s
[info] # Warmup Iteration   3: 38417.871 ops/s
[info] Iteration   1: 38407.487 ops/s
[info]                  ·gc.alloc.rate:                   2013.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81551.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.412 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38294.643 ops/s
[info]                  ·gc.alloc.rate:                   2007.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82462.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.422 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 38808.590 ops/s
[info]                  ·gc.alloc.rate:                   2034.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              82509.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81897.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.688 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38991.794 ops/s
[info]                  ·gc.alloc.rate:                   2043.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81862.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.361 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 38510.858 ops/s
[info]                  ·gc.alloc.rate:                   2018.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83127.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.403 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38602.674 ±(99.9%) 1114.738 ops/s [Average]
[info]   (min, avg, max) = (38294.643, 38602.674, 38991.794), stdev = 289.494
[info]   CI (99.9%): [37487.936, 39717.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2023.755 ±(99.9%) 58.004 MB/sec [Average]
[info]   (min, avg, max) = (2007.896, 2023.755, 2043.875), stdev = 15.064
[info]   CI (99.9%): [1965.751, 2081.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82505.094 ±(99.9%) 9.313 B/op [Average]
[info]   (min, avg, max) = (82504.011, 82505.094, 82509.421), stdev = 2.419
[info]   CI (99.9%): [82495.781, 82514.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.755 ±(99.9%) 67.593 MB/sec [Average]
[info]   (min, avg, max) = (1990.191, 2015.755, 2034.077), stdev = 17.554
[info]   CI (99.9%): [1948.163, 2083.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82180.152 ±(99.9%) 2400.210 B/op [Average]
[info]   (min, avg, max) = (81551.058, 82180.152, 83127.627), stdev = 623.327
[info]   CI (99.9%): [79779.942, 84580.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.083), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.057 ±(99.9%) 2.948 B/op [Average]
[info]   (min, avg, max) = (1.688, 3.057, 3.422), stdev = 0.766
[info]   CI (99.9%): [0.109, 6.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.92% complete, ETA 01:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62465.508 ops/s
[info] # Warmup Iteration   2: 84719.138 ops/s
[info] # Warmup Iteration   3: 85472.816 ops/s
[info] Iteration   1: 86303.199 ops/s
[info]                  ·gc.alloc.rate:                   689.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12008.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 86249.318 ops/s
[info]                  ·gc.alloc.rate:                   689.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12016.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 86216.456 ops/s
[info]                  ·gc.alloc.rate:                   688.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12038.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 84796.849 ops/s
[info]                  ·gc.alloc.rate:                   677.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12265.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 85467.863 ops/s
[info]                  ·gc.alloc.rate:                   682.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12193.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   85806.737 ±(99.9%) 2543.271 ops/s [Average]
[info]   (min, avg, max) = (84796.849, 85806.737, 86303.199), stdev = 660.479
[info]   CI (99.9%): [83263.466, 88350.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   685.709 ±(99.9%) 19.927 MB/sec [Average]
[info]   (min, avg, max) = (677.879, 685.709, 689.630), stdev = 5.175
[info]   CI (99.9%): [665.783, 705.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12576.005, 12576.005, 12576.005), stdev = 0.001
[info]   CI (99.9%): [12576.005, 12576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   659.963 ±(99.9%) 6.202 MB/sec [Average]
[info]   (min, avg, max) = (658.512, 659.963, 662.133), stdev = 1.611
[info]   CI (99.9%): [653.760, 666.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12104.516 ±(99.9%) 451.520 B/op [Average]
[info]   (min, avg, max) = (12008.543, 12104.516, 12265.204), stdev = 117.258
[info]   CI (99.9%): [11652.996, 12556.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.220 ±(99.9%) 1.892 B/op [Average]
[info]   (min, avg, max) = (0.760, 1.220, 1.898), stdev = 0.491
[info]   CI (99.9%): [≈ 0, 3.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 26.16% complete, ETA 01:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3442.680 ops/s
[info] # Warmup Iteration   2: 109015.061 ops/s
[info] # Warmup Iteration   3: 109438.074 ops/s
[info] Iteration   1: 107367.085 ops/s
[info]                  ·gc.alloc.rate:               397.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3749.727 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 111004.239 ops/s
[info]                  ·gc.alloc.rate:                   410.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          578.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8202.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 110450.009 ops/s
[info]                  ·gc.alloc.rate:               408.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      322.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4598.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 110605.263 ops/s
[info]                  ·gc.alloc.rate:               409.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4611.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 108596.891 ops/s
[info]                  ·gc.alloc.rate:                   401.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9412.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   109604.697 ±(99.9%) 5995.449 ops/s [Average]
[info]   (min, avg, max) = (107367.085, 109604.697, 111004.239), stdev = 1556.999
[info]   CI (99.9%): [103609.248, 115600.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   405.627 ±(99.9%) 22.251 MB/sec [Average]
[info]   (min, avg, max) = (397.347, 405.627, 410.778), stdev = 5.779
[info]   CI (99.9%): [383.376, 427.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   5824.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5824.004, 5824.004), stdev = 0.001
[info]   CI (99.9%): [5824.003, 5824.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   426.160 ±(99.9%) 675.782 MB/sec [Average]
[info]   (min, avg, max) = (255.828, 426.160, 649.466), stdev = 175.498
[info]   CI (99.9%): [≈ 0, 1101.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6115.158 ±(99.9%) 9701.306 B/op [Average]
[info]   (min, avg, max) = (3749.727, 6115.158, 9412.884), stdev = 2519.398
[info]   CI (99.9%): [≈ 0, 15816.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.175 ±(99.9%) 1.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.590), stdev = 0.263
[info]   CI (99.9%): [≈ 0, 1.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.41% complete, ETA 01:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70460.359 ops/s
[info] # Warmup Iteration   2: 97803.880 ops/s
[info] # Warmup Iteration   3: 97921.676 ops/s
[info] Iteration   1: 97767.041 ops/s
[info]                  ·gc.alloc.rate:               385.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4117.824 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 97265.917 ops/s
[info]                  ·gc.alloc.rate:                   383.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9426.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.552 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 94925.591 ops/s
[info]                  ·gc.alloc.rate:                   374.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5417.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 97709.476 ops/s
[info]                  ·gc.alloc.rate:                   385.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5268.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 95567.655 ops/s
[info]                  ·gc.alloc.rate:                   376.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5386.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   96647.136 ±(99.9%) 5055.442 ops/s [Average]
[info]   (min, avg, max) = (94925.591, 96647.136, 97767.041), stdev = 1312.882
[info]   CI (99.9%): [91591.694, 101702.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   381.223 ±(99.9%) 19.951 MB/sec [Average]
[info]   (min, avg, max) = (374.427, 381.223, 385.633), stdev = 5.181
[info]   CI (99.9%): [361.272, 401.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6208.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.004, 6208.005, 6208.005), stdev = 0.001
[info]   CI (99.9%): [6208.004, 6208.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.852 ±(99.9%) 485.473 MB/sec [Average]
[info]   (min, avg, max) = (255.794, 363.852, 582.539), stdev = 126.076
[info]   CI (99.9%): [≈ 0, 849.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5923.270 ±(99.9%) 7821.379 B/op [Average]
[info]   (min, avg, max) = (4117.824, 5923.270, 9426.189), stdev = 2031.187
[info]   CI (99.9%): [≈ 0, 13744.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.535 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.074), stdev = 0.918
[info]   CI (99.9%): [≈ 0, 3.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.984 ±(99.9%) 57.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.984, 33.552), stdev = 14.854
[info]   CI (99.9%): [≈ 0, 64.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.65% complete, ETA 01:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100074.309 ops/s
[info] # Warmup Iteration   2: 111730.862 ops/s
[info] # Warmup Iteration   3: 113411.527 ops/s
[info] Iteration   1: 112038.477 ops/s
[info]                  ·gc.alloc.rate:                   414.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7186.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 112990.641 ops/s
[info]                  ·gc.alloc.rate:                   418.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4620.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 113092.776 ops/s
[info]                  ·gc.alloc.rate:                   418.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4616.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 112982.547 ops/s
[info]                  ·gc.alloc.rate:                   418.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9242.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 113230.538 ops/s
[info]                  ·gc.alloc.rate:               419.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4611.079 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   112866.996 ±(99.9%) 1824.716 ops/s [Average]
[info]   (min, avg, max) = (112038.477, 112866.996, 113230.538), stdev = 473.873
[info]   CI (99.9%): [111042.280, 114691.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   417.704 ±(99.9%) 6.878 MB/sec [Average]
[info]   (min, avg, max) = (414.606, 417.704, 419.184), stdev = 1.786
[info]   CI (99.9%): [410.826, 424.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5824.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5824.004, 5824.004), stdev = 0.001
[info]   CI (99.9%): [5824.003, 5824.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.097 ±(99.9%) 577.662 MB/sec [Average]
[info]   (min, avg, max) = (331.746, 434.097, 663.473), stdev = 150.017
[info]   CI (99.9%): [≈ 0, 1011.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6055.520 ±(99.9%) 8088.340 B/op [Average]
[info]   (min, avg, max) = (4611.079, 6055.520, 9242.071), stdev = 2100.516
[info]   CI (99.9%): [≈ 0, 14143.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.371 ±(99.9%) 2.906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.720), stdev = 0.755
[info]   CI (99.9%): [≈ 0, 3.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.168 ±(99.9%) 40.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.168, 23.953), stdev = 10.511
[info]   CI (99.9%): [≈ 0, 45.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26.89% complete, ETA 01:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101162.299 ops/s
[info] # Warmup Iteration   2: 113116.803 ops/s
[info] # Warmup Iteration   3: 112634.525 ops/s
[info] Iteration   1: 111979.700 ops/s
[info]                  ·gc.alloc.rate:                   326.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7190.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 112870.900 ops/s
[info]                  ·gc.alloc.rate:               328.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3566.838 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 112949.750 ops/s
[info]                  ·gc.alloc.rate:                   329.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4622.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.832 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 112854.713 ops/s
[info]                  ·gc.alloc.rate:                   328.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4626.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 113119.448 ops/s
[info]                  ·gc.alloc.rate:               329.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4606.457 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   112754.902 ±(99.9%) 1716.904 ops/s [Average]
[info]   (min, avg, max) = (111979.700, 112754.902, 113119.448), stdev = 445.875
[info]   CI (99.9%): [111037.998, 114471.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   328.478 ±(99.9%) 5.136 MB/sec [Average]
[info]   (min, avg, max) = (326.155, 328.478, 329.521), stdev = 1.334
[info]   CI (99.9%): [323.342, 333.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4584.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4584.004, 4584.004), stdev = 0.001
[info]   CI (99.9%): [4584.004, 4584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   352.454 ±(99.9%) 365.059 MB/sec [Average]
[info]   (min, avg, max) = (255.918, 352.454, 511.594), stdev = 94.805
[info]   CI (99.9%): [≈ 0, 717.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4922.508 ±(99.9%) 5187.042 B/op [Average]
[info]   (min, avg, max) = (3566.838, 4922.508, 7190.300), stdev = 1347.058
[info]   CI (99.9%): [≈ 0, 10109.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 3.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.783), stdev = 0.787
[info]   CI (99.9%): [≈ 0, 3.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.229 ±(99.9%) 42.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.229, 24.832), stdev = 10.964
[info]   CI (99.9%): [≈ 0, 47.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.14% complete, ETA 01:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6197.188 ops/s
[info] # Warmup Iteration   2: 9586.132 ops/s
[info] # Warmup Iteration   3: 9562.310 ops/s
[info] Iteration   1: 9449.945 ops/s
[info]                  ·gc.alloc.rate:                   1569.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              261288.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221430.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9481.947 ops/s
[info]                  ·gc.alloc.rate:                   1575.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              261288.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     277291.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.820 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9624.085 ops/s
[info]                  ·gc.alloc.rate:                   1598.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              261288.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274507.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.404 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9632.635 ops/s
[info]                  ·gc.alloc.rate:                   1599.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              261291.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275339.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.203 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9588.402 ops/s
[info]                  ·gc.alloc.rate:                   1592.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              261304.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221961.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.834 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9555.403 ±(99.9%) 323.821 ops/s [Average]
[info]   (min, avg, max) = (9449.945, 9555.403, 9632.635), stdev = 84.095
[info]   CI (99.9%): [9231.582, 9879.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1586.852 ±(99.9%) 52.764 MB/sec [Average]
[info]   (min, avg, max) = (1569.546, 1586.852, 1599.313), stdev = 13.703
[info]   CI (99.9%): [1534.088, 1639.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   261291.955 ±(99.9%) 26.687 B/op [Average]
[info]   (min, avg, max) = (261288.045, 261291.955, 261304.045), stdev = 6.931
[info]   CI (99.9%): [261265.268, 261318.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1543.682 ±(99.9%) 712.237 MB/sec [Average]
[info]   (min, avg, max) = (1330.121, 1543.682, 1685.298), stdev = 184.966
[info]   CI (99.9%): [831.445, 2255.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   254105.986 ±(99.9%) 113995.264 B/op [Average]
[info]   (min, avg, max) = (221430.141, 254105.986, 277291.081), stdev = 29604.208
[info]   CI (99.9%): [140110.722, 368101.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.932 ±(99.9%) 15.236 B/op [Average]
[info]   (min, avg, max) = (3.404, 8.932, 13.820), stdev = 3.957
[info]   CI (99.9%): [≈ 0, 24.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.38% complete, ETA 01:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5167.998 ops/s
[info] # Warmup Iteration   2: 9796.641 ops/s
[info] # Warmup Iteration   3: 10217.504 ops/s
[info] Iteration   1: 10092.874 ops/s
[info]                  ·gc.alloc.rate:                   1554.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              242456.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256509.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.492 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10097.642 ops/s
[info]                  ·gc.alloc.rate:                   1555.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              242456.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206600.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.222 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10115.555 ops/s
[info]                  ·gc.alloc.rate:                   1558.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              242456.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259449.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.954 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10148.101 ops/s
[info]                  ·gc.alloc.rate:                   1563.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              242469.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260181.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.457 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10049.939 ops/s
[info]                  ·gc.alloc.rate:                   1548.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              242488.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211029.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10100.822 ±(99.9%) 137.694 ops/s [Average]
[info]   (min, avg, max) = (10049.939, 10100.822, 10148.101), stdev = 35.759
[info]   CI (99.9%): [9963.128, 10238.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1556.122 ±(99.9%) 21.147 MB/sec [Average]
[info]   (min, avg, max) = (1548.396, 1556.122, 1563.461), stdev = 5.492
[info]   CI (99.9%): [1534.975, 1577.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242465.096 ±(99.9%) 54.119 B/op [Average]
[info]   (min, avg, max) = (242456.043, 242465.096, 242488.043), stdev = 14.054
[info]   CI (99.9%): [242410.977, 242519.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1532.648 ±(99.9%) 691.575 MB/sec [Average]
[info]   (min, avg, max) = (1325.520, 1532.648, 1677.669), stdev = 179.600
[info]   CI (99.9%): [841.072, 2224.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   238753.968 ±(99.9%) 105544.713 B/op [Average]
[info]   (min, avg, max) = (206600.618, 238753.968, 260181.148), stdev = 27409.627
[info]   CI (99.9%): [133209.256, 344298.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.033 ±(99.9%) 16.807 B/op [Average]
[info]   (min, avg, max) = (6.457, 11.033, 16.222), stdev = 4.365
[info]   CI (99.9%): [≈ 0, 27.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.63% complete, ETA 01:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106100.543 ops/s
[info] # Warmup Iteration   2: 114488.334 ops/s
[info] # Warmup Iteration   3: 113882.767 ops/s
[info] Iteration   1: 112776.291 ops/s
[info]                  ·gc.alloc.rate:               293.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3569.842 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 110711.892 ops/s
[info]                  ·gc.alloc.rate:                   288.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3636.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 114683.908 ops/s
[info]                  ·gc.alloc.rate:               298.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3510.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 114933.446 ops/s
[info]                  ·gc.alloc.rate:                   299.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4556.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 114628.920 ops/s
[info]                  ·gc.alloc.rate:                   298.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4568.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.143 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   113546.891 ±(99.9%) 6946.431 ops/s [Average]
[info]   (min, avg, max) = (110711.892, 113546.891, 114933.446), stdev = 1803.966
[info]   CI (99.9%): [106600.460, 120493.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   295.526 ±(99.9%) 18.172 MB/sec [Average]
[info]   (min, avg, max) = (288.120, 295.526, 299.118), stdev = 4.719
[info]   CI (99.9%): [277.354, 313.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.592 ±(99.9%) 162.221 MB/sec [Average]
[info]   (min, avg, max) = (255.786, 286.592, 332.743), stdev = 42.128
[info]   CI (99.9%): [124.371, 448.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3968.343 ±(99.9%) 2095.524 B/op [Average]
[info]   (min, avg, max) = (3510.551, 3968.343, 4568.530), stdev = 544.201
[info]   CI (99.9%): [1872.819, 6063.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.333 ±(99.9%) 2.647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.561), stdev = 0.687
[info]   CI (99.9%): [≈ 0, 2.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.564 ±(99.9%) 36.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.564, 21.380), stdev = 9.412
[info]   CI (99.9%): [≈ 0, 40.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.87% complete, ETA 01:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2649.478 ops/s
[info] # Warmup Iteration   2: 5380.208 ops/s
[info] # Warmup Iteration   3: 5524.120 ops/s
[info] Iteration   1: 5591.542 ops/s
[info]                  ·gc.alloc.rate:                   1489.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463169.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.576 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5714.468 ops/s
[info]                  ·gc.alloc.rate:                   1521.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364873.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5710.610 ops/s
[info]                  ·gc.alloc.rate:                   1520.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459210.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.210 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5678.293 ops/s
[info]                  ·gc.alloc.rate:                   1512.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371432.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.538 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5599.895 ops/s
[info]                  ·gc.alloc.rate:                   1491.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     472991.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.402 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5658.962 ±(99.9%) 229.077 ops/s [Average]
[info]   (min, avg, max) = (5591.542, 5658.962, 5714.468), stdev = 59.491
[info]   CI (99.9%): [5429.884, 5888.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1506.982 ±(99.9%) 60.758 MB/sec [Average]
[info]   (min, avg, max) = (1489.365, 1506.982, 1521.873), stdev = 15.779
[info]   CI (99.9%): [1446.224, 1567.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   419048.164 ±(99.9%) 0.741 B/op [Average]
[info]   (min, avg, max) = (419048.076, 419048.164, 419048.508), stdev = 0.192
[info]   CI (99.9%): [419047.423, 419048.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1532.163 ±(99.9%) 703.118 MB/sec [Average]
[info]   (min, avg, max) = (1325.125, 1532.163, 1682.962), stdev = 182.598
[info]   CI (99.9%): [829.045, 2235.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   426335.620 ±(99.9%) 205624.790 B/op [Average]
[info]   (min, avg, max) = (364873.629, 426335.620, 472991.834), stdev = 53400.105
[info]   CI (99.9%): [220710.830, 631960.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.385 ±(99.9%) 16.164 B/op [Average]
[info]   (min, avg, max) = (11.538, 17.385, 23.402), stdev = 4.198
[info]   CI (99.9%): [1.220, 33.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.12% complete, ETA 01:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15818.447 ops/s
[info] # Warmup Iteration   2: 23918.113 ops/s
[info] # Warmup Iteration   3: 23979.389 ops/s
[info] Iteration   1: 24133.101 ops/s
[info]                  ·gc.alloc.rate:                   1778.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              115960.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129893.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.430 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 23951.185 ops/s
[info]                  ·gc.alloc.rate:                   1764.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              115954.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109803.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 24079.477 ops/s
[info]                  ·gc.alloc.rate:                   1773.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109873.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.164 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24250.902 ops/s
[info]                  ·gc.alloc.rate:                   1786.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109474.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.403 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24094.287 ops/s
[info]                  ·gc.alloc.rate:                   1774.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132714.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.079 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24101.790 ±(99.9%) 414.954 ops/s [Average]
[info]   (min, avg, max) = (23951.185, 24101.790, 24250.902), stdev = 107.762
[info]   CI (99.9%): [23686.837, 24516.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1775.343 ±(99.9%) 29.936 MB/sec [Average]
[info]   (min, avg, max) = (1764.805, 1775.343, 1786.088), stdev = 7.774
[info]   CI (99.9%): [1745.407, 1805.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115920.419 ±(99.9%) 128.915 B/op [Average]
[info]   (min, avg, max) = (115896.018, 115920.419, 115960.019), stdev = 33.479
[info]   CI (99.9%): [115791.504, 116049.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1812.634 ±(99.9%) 702.901 MB/sec [Average]
[info]   (min, avg, max) = (1671.201, 1812.634, 2031.733), stdev = 182.541
[info]   CI (99.9%): [1109.732, 2515.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   118351.979 ±(99.9%) 45693.970 B/op [Average]
[info]   (min, avg, max) = (109474.326, 118351.979, 132714.615), stdev = 11866.579
[info]   CI (99.9%): [72658.010, 164045.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.257 ±(99.9%) 7.099 B/op [Average]
[info]   (min, avg, max) = (4.079, 6.257, 8.207), stdev = 1.843
[info]   CI (99.9%): [≈ 0, 13.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 14.000), stdev = 4.159
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.36% complete, ETA 01:02:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12596.022 ops/s
[info] # Warmup Iteration   2: 29676.650 ops/s
[info] # Warmup Iteration   3: 29627.708 ops/s
[info] Iteration   1: 29573.215 ops/s
[info]                  ·gc.alloc.rate:                   1771.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              94288.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105293.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.863 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 29754.667 ops/s
[info]                  ·gc.alloc.rate:                   1783.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              94288.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87983.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.506 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 29694.624 ops/s
[info]                  ·gc.alloc.rate:                   1778.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              94288.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106534.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.207 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 29346.533 ops/s
[info]                  ·gc.alloc.rate:                   1758.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              94288.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90328.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.233 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 29012.065 ops/s
[info]                  ·gc.alloc.rate:                   1738.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              94288.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91714.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.646 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   29476.221 ±(99.9%) 1166.210 ops/s [Average]
[info]   (min, avg, max) = (29012.065, 29476.221, 29754.667), stdev = 302.861
[info]   CI (99.9%): [28310.011, 30642.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1766.070 ±(99.9%) 70.330 MB/sec [Average]
[info]   (min, avg, max) = (1738.084, 1766.070, 1783.154), stdev = 18.265
[info]   CI (99.9%): [1695.740, 1836.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   94288.016 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (94288.015, 94288.016, 94288.021), stdev = 0.003
[info]   CI (99.9%): [94288.005, 94288.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1805.543 ±(99.9%) 666.071 MB/sec [Average]
[info]   (min, avg, max) = (1663.920, 1805.543, 2010.033), stdev = 172.977
[info]   CI (99.9%): [1139.472, 2471.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   96370.970 ±(99.9%) 33978.459 B/op [Average]
[info]   (min, avg, max) = (87983.275, 96370.970, 106534.615), stdev = 8824.098
[info]   CI (99.9%): [62392.511, 130349.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.891 ±(99.9%) 10.719 B/op [Average]
[info]   (min, avg, max) = (2.207, 4.891, 8.863), stdev = 2.784
[info]   CI (99.9%): [≈ 0, 15.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.61% complete, ETA 01:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327534.546 ops/s
[info] # Warmup Iteration   2: 345911.259 ops/s
[info] # Warmup Iteration   3: 350682.329 ops/s
[info] Iteration   1: 352318.749 ops/s
[info]                  ·gc.alloc.rate:                   779.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2958.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 351569.458 ops/s
[info]                  ·gc.alloc.rate:                   777.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4449.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 350604.820 ops/s
[info]                  ·gc.alloc.rate:                   775.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2979.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 352967.093 ops/s
[info]                  ·gc.alloc.rate:               780.554 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2964.412 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 352228.250 ops/s
[info]                  ·gc.alloc.rate:                   779.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4466.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   351937.674 ±(99.9%) 3444.895 ops/s [Average]
[info]   (min, avg, max) = (350604.820, 351937.674, 352967.093), stdev = 894.628
[info]   CI (99.9%): [348492.778, 355382.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   778.308 ±(99.9%) 7.680 MB/sec [Average]
[info]   (min, avg, max) = (775.233, 778.308, 780.554), stdev = 1.994
[info]   CI (99.9%): [770.628, 785.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   797.021 ±(99.9%) 703.384 MB/sec [Average]
[info]   (min, avg, max) = (662.158, 797.021, 999.854), stdev = 182.667
[info]   CI (99.9%): [93.637, 1500.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3563.631 ±(99.9%) 3143.782 B/op [Average]
[info]   (min, avg, max) = (2958.019, 3563.631, 4466.326), stdev = 816.430
[info]   CI (99.9%): [419.849, 6707.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 0.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 0.466), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 1.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 28.85% complete, ETA 01:01:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366946.274 ops/s
[info] # Warmup Iteration   2: 394430.223 ops/s
[info] # Warmup Iteration   3: 411473.704 ops/s
[info] Iteration   1: 412788.101 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 412642.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 411385.722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 411557.771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 411699.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   412014.600 ±(99.9%) 2507.092 ops/s [Average]
[info]   (min, avg, max) = (411385.722, 412014.600, 412788.101), stdev = 651.084
[info]   CI (99.9%): [409507.508, 414521.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.10% complete, ETA 01:01:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19275.074 ops/s
[info] # Warmup Iteration   2: 29030.094 ops/s
[info] # Warmup Iteration   3: 29446.701 ops/s
[info] Iteration   1: 29511.707 ops/s
[info]                  ·gc.alloc.rate:                   1935.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              103240.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88509.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.330 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 29138.109 ops/s
[info]                  ·gc.alloc.rate:                   1911.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              103240.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108333.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.243 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 29567.438 ops/s
[info]                  ·gc.alloc.rate:                   1939.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              103240.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107438.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.648 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 29526.263 ops/s
[info]                  ·gc.alloc.rate:                   1936.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              103240.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108120.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.438 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 29244.860 ops/s
[info]                  ·gc.alloc.rate:                   1918.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              103240.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91202.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.602 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   29397.675 ±(99.9%) 743.396 ops/s [Average]
[info]   (min, avg, max) = (29138.109, 29397.675, 29567.438), stdev = 193.057
[info]   CI (99.9%): [28654.280, 30141.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1928.488 ±(99.9%) 48.269 MB/sec [Average]
[info]   (min, avg, max) = (1911.758, 1928.488, 1939.553), stdev = 12.535
[info]   CI (99.9%): [1880.220, 1976.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103240.016 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (103240.015, 103240.016, 103240.020), stdev = 0.002
[info]   CI (99.9%): [103240.007, 103240.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1881.461 ±(99.9%) 720.291 MB/sec [Average]
[info]   (min, avg, max) = (1659.648, 1881.461, 2028.425), stdev = 187.057
[info]   CI (99.9%): [1161.170, 2601.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   100720.897 ±(99.9%) 38389.049 B/op [Average]
[info]   (min, avg, max) = (88509.235, 100720.897, 108333.185), stdev = 9969.514
[info]   CI (99.9%): [62331.849, 139109.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.208), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.252 ±(99.9%) 11.762 B/op [Average]
[info]   (min, avg, max) = (3.330, 6.252, 11.243), stdev = 3.054
[info]   CI (99.9%): [≈ 0, 18.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.34% complete, ETA 01:01:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108344.067 ops/s
[info] # Warmup Iteration   2: 130437.967 ops/s
[info] # Warmup Iteration   3: 130470.439 ops/s
[info] Iteration   1: 130007.745 ops/s
[info]                  ·gc.alloc.rate:                   2238.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2346.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28410.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.260 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 129861.932 ops/s
[info]                  ·gc.alloc.rate:                   2236.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2360.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28603.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.766 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 131269.830 ops/s
[info]                  ·gc.alloc.rate:                   2260.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24359.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.248 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 128263.667 ops/s
[info]                  ·gc.alloc.rate:                   2208.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29148.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 127404.309 ops/s
[info]                  ·gc.alloc.rate:                   2194.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25180.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   129361.496 ±(99.9%) 5885.827 ops/s [Average]
[info]   (min, avg, max) = (127404.309, 129361.496, 131269.830), stdev = 1528.531
[info]   CI (99.9%): [123475.669, 135247.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2227.800 ±(99.9%) 101.284 MB/sec [Average]
[info]   (min, avg, max) = (2194.081, 2227.800, 2260.534), stdev = 26.303
[info]   CI (99.9%): [2126.517, 2329.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27104.003, 27104.003, 27104.004), stdev = 0.001
[info]   CI (99.9%): [27104.003, 27104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2230.553 ±(99.9%) 688.458 MB/sec [Average]
[info]   (min, avg, max) = (2031.666, 2230.553, 2375.524), stdev = 178.790
[info]   CI (99.9%): [1542.094, 2919.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27140.716 ±(99.9%) 8471.258 B/op [Average]
[info]   (min, avg, max) = (24359.856, 27140.716, 29148.909), stdev = 2199.959
[info]   CI (99.9%): [18669.458, 35611.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.162 ±(99.9%) 1.600 B/op [Average]
[info]   (min, avg, max) = (0.766, 1.162, 1.766), stdev = 0.416
[info]   CI (99.9%): [≈ 0, 2.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.58% complete, ETA 01:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7175.063 ops/s
[info] # Warmup Iteration   2: 426780.121 ops/s
[info] # Warmup Iteration   3: 425779.763 ops/s
[info] Iteration   1: 424079.328 ops/s
[info]                  ·gc.alloc.rate:                   439.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1898.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 428722.815 ops/s
[info]                  ·gc.alloc.rate:               444.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      322.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1184.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 428212.795 ops/s
[info]                  ·gc.alloc.rate:                   444.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2377.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 429195.273 ops/s
[info]                  ·gc.alloc.rate:               445.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1188.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 429708.334 ops/s
[info]                  ·gc.alloc.rate:               445.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1191.860 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   427983.709 ±(99.9%) 8671.469 ops/s [Average]
[info]   (min, avg, max) = (424079.328, 427983.709, 429708.334), stdev = 2251.953
[info]   CI (99.9%): [419312.241, 436655.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   443.828 ±(99.9%) 9.109 MB/sec [Average]
[info]   (min, avg, max) = (439.719, 443.828, 445.650), stdev = 2.365
[info]   CI (99.9%): [434.719, 452.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   426.171 ±(99.9%) 568.835 MB/sec [Average]
[info]   (min, avg, max) = (322.794, 426.171, 646.946), stdev = 147.725
[info]   CI (99.9%): [≈ 0, 995.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1568.237 ±(99.9%) 2106.299 B/op [Average]
[info]   (min, avg, max) = (1184.858, 1568.237, 2377.362), stdev = 546.999
[info]   CI (99.9%): [≈ 0, 3674.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.046 ±(99.9%) 0.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.153), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.414
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.83% complete, ETA 01:01:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197079.949 ops/s
[info] # Warmup Iteration   2: 303494.560 ops/s
[info] # Warmup Iteration   3: 300579.329 ops/s
[info] Iteration   1: 299788.463 ops/s
[info]                  ·gc.alloc.rate:                   423.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2685.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 299050.022 ops/s
[info]                  ·gc.alloc.rate:                   422.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1719.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 307561.389 ops/s
[info]                  ·gc.alloc.rate:                   434.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1672.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 305827.142 ops/s
[info]                  ·gc.alloc.rate:                   432.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3366.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 304359.384 ops/s
[info]                  ·gc.alloc.rate:               430.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1691.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   303317.280 ±(99.9%) 14415.492 ops/s [Average]
[info]   (min, avg, max) = (299050.022, 303317.280, 307561.389), stdev = 3743.658
[info]   CI (99.9%): [288901.788, 317732.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   428.604 ±(99.9%) 20.404 MB/sec [Average]
[info]   (min, avg, max) = (422.574, 428.604, 434.606), stdev = 5.299
[info]   CI (99.9%): [408.199, 449.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.252 ±(99.9%) 573.730 MB/sec [Average]
[info]   (min, avg, max) = (326.741, 429.252, 654.130), stdev = 148.996
[info]   CI (99.9%): [≈ 0, 1002.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2227.048 ±(99.9%) 2958.383 B/op [Average]
[info]   (min, avg, max) = (1672.025, 2227.048, 3366.369), stdev = 768.283
[info]   CI (99.9%): [≈ 0, 5185.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.448 ±(99.9%) 3.524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.448, 2.084), stdev = 0.915
[info]   CI (99.9%): [≈ 0, 3.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.354 ±(99.9%) 18.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.354, 10.968), stdev = 4.819
[info]   CI (99.9%): [≈ 0, 20.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.07% complete, ETA 01:00:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 661226.330 ops/s
[info] # Warmup Iteration   2: 700668.525 ops/s
[info] # Warmup Iteration   3: 702002.735 ops/s
[info] Iteration   1: 703890.561 ops/s
[info]                  ·gc.alloc.rate:                   457.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     571.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 701691.039 ops/s
[info]                  ·gc.alloc.rate:                   456.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1491.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 705495.482 ops/s
[info]                  ·gc.alloc.rate:                   459.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 701904.402 ops/s
[info]                  ·gc.alloc.rate:                   456.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1490.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 684765.085 ops/s
[info]                  ·gc.alloc.rate:               445.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 764.034 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   699549.314 ±(99.9%) 32383.789 ops/s [Average]
[info]   (min, avg, max) = (684765.085, 699549.314, 705495.482), stdev = 8409.967
[info]   CI (99.9%): [667165.525, 731933.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   455.204 ±(99.9%) 21.137 MB/sec [Average]
[info]   (min, avg, max) = (445.531, 455.204, 459.015), stdev = 5.489
[info]   CI (99.9%): [434.067, 476.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.142 ±(99.9%) 764.976 MB/sec [Average]
[info]   (min, avg, max) = (255.784, 450.142, 665.145), stdev = 198.662
[info]   CI (99.9%): [≈ 0, 1215.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1011.888 ±(99.9%) 1708.091 B/op [Average]
[info]   (min, avg, max) = (571.944, 1011.888, 1491.197), stdev = 443.586
[info]   CI (99.9%): [≈ 0, 2719.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.342 ±(99.9%) 2.731 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.342, 1.610), stdev = 0.709
[info]   CI (99.9%): [≈ 0, 3.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.767 ±(99.9%) 6.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 3.611), stdev = 1.591
[info]   CI (99.9%): [≈ 0, 6.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.32% complete, ETA 01:00:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42691.027 ops/s
[info] # Warmup Iteration   2: 70075.465 ops/s
[info] # Warmup Iteration   3: 70790.572 ops/s
[info] Iteration   1: 71061.483 ops/s
[info]                  ·gc.alloc.rate:                   3018.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3021.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66932.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.766 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 71091.141 ops/s
[info]                  ·gc.alloc.rate:                   3020.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3043.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67367.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.304 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 71019.432 ops/s
[info]                  ·gc.alloc.rate:                   3016.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60173.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.384 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 69514.284 ops/s
[info]                  ·gc.alloc.rate:                   2952.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69257.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.771 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 70569.247 ops/s
[info]                  ·gc.alloc.rate:                   2998.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68325.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.321 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70651.118 ±(99.9%) 2580.771 ops/s [Average]
[info]   (min, avg, max) = (69514.284, 70651.118, 71091.141), stdev = 670.218
[info]   CI (99.9%): [68070.347, 73231.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3001.340 ±(99.9%) 109.598 MB/sec [Average]
[info]   (min, avg, max) = (2952.908, 3001.340, 3020.178), stdev = 28.462
[info]   CI (99.9%): [2891.742, 3110.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66856.006, 66856.007), stdev = 0.001
[info]   CI (99.9%): [66856.005, 66856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.731 ±(99.9%) 574.839 MB/sec [Average]
[info]   (min, avg, max) = (2715.323, 2980.731, 3064.273), stdev = 149.284
[info]   CI (99.9%): [2405.892, 3555.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66411.168 ±(99.9%) 13865.197 B/op [Average]
[info]   (min, avg, max) = (60173.393, 66411.168, 69257.537), stdev = 3600.748
[info]   CI (99.9%): [52545.970, 80276.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.509 ±(99.9%) 3.335 B/op [Average]
[info]   (min, avg, max) = (1.384, 2.509, 3.771), stdev = 0.866
[info]   CI (99.9%): [≈ 0, 5.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.56% complete, ETA 01:00:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158470.611 ops/s
[info] # Warmup Iteration   2: 208544.742 ops/s
[info] # Warmup Iteration   3: 211493.431 ops/s
[info] Iteration   1: 210783.096 ops/s
[info]                  ·gc.alloc.rate:                   1716.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12382.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.933 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 208089.930 ops/s
[info]                  ·gc.alloc.rate:                   1694.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12643.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.945 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 209915.138 ops/s
[info]                  ·gc.alloc.rate:                   1709.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12603.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 211981.483 ops/s
[info]                  ·gc.alloc.rate:                   1726.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12524.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.618 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 211187.156 ops/s
[info]                  ·gc.alloc.rate:                   1719.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12614.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.086 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   210391.361 ±(99.9%) 5723.943 ops/s [Average]
[info]   (min, avg, max) = (208089.930, 210391.361, 211981.483), stdev = 1486.490
[info]   CI (99.9%): [204667.418, 216115.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1713.417 ±(99.9%) 46.052 MB/sec [Average]
[info]   (min, avg, max) = (1694.777, 1713.417, 1726.223), stdev = 11.960
[info]   CI (99.9%): [1667.365, 1759.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12816.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12816.002, 12816.002, 12816.002), stdev = 0.001
[info]   CI (99.9%): [12816.002, 12816.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1678.326 ±(99.9%) 52.168 MB/sec [Average]
[info]   (min, avg, max) = (1658.319, 1678.326, 1692.746), stdev = 13.548
[info]   CI (99.9%): [1626.158, 1730.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12553.805 ±(99.9%) 406.004 B/op [Average]
[info]   (min, avg, max) = (12382.445, 12553.805, 12643.613), stdev = 105.438
[info]   CI (99.9%): [12147.801, 12959.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.100, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.748 ±(99.9%) 1.433 B/op [Average]
[info]   (min, avg, max) = (0.156, 0.748, 1.086), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 2.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 30.81% complete, ETA 01:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8657.714 ops/s
[info] # Warmup Iteration   2: 939570.233 ops/s
[info] # Warmup Iteration   3: 936262.003 ops/s
[info] Iteration   1: 936228.641 ops/s
[info]                  ·gc.alloc.rate:               509.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 430.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 886112.921 ops/s
[info]                  ·gc.alloc.rate:                   482.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1146.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 887338.160 ops/s
[info]                  ·gc.alloc.rate:               482.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 574.830 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 927461.050 ops/s
[info]                  ·gc.alloc.rate:                   504.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1102.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 915378.987 ops/s
[info]                  ·gc.alloc.rate:                   497.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1121.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   910503.952 ±(99.9%) 88326.861 ops/s [Average]
[info]   (min, avg, max) = (886112.921, 910503.952, 936228.641), stdev = 22938.205
[info]   CI (99.9%): [822177.091, 998830.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   495.256 ±(99.9%) 47.855 MB/sec [Average]
[info]   (min, avg, max) = (482.009, 495.256, 509.178), stdev = 12.428
[info]   CI (99.9%): [447.401, 543.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   505.466 ±(99.9%) 763.223 MB/sec [Average]
[info]   (min, avg, max) = (255.795, 505.466, 652.297), stdev = 198.206
[info]   CI (99.9%): [≈ 0, 1268.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   874.974 ±(99.9%) 1325.684 B/op [Average]
[info]   (min, avg, max) = (430.027, 874.974, 1146.480), stdev = 344.276
[info]   CI (99.9%): [≈ 0, 2200.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.025), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.045), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.05% complete, ETA 01:00:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604844.555 ops/s
[info] # Warmup Iteration   2: 837263.845 ops/s
[info] # Warmup Iteration   3: 822057.405 ops/s
[info] Iteration   1: 833459.330 ops/s
[info]                  ·gc.alloc.rate:                   656.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.975 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 827888.485 ops/s
[info]                  ·gc.alloc.rate:                   652.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1243.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 816660.578 ops/s
[info]                  ·gc.alloc.rate:                   643.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1261.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 844315.661 ops/s
[info]                  ·gc.alloc.rate:                   665.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1223.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 830052.612 ops/s
[info]                  ·gc.alloc.rate:                   653.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   830475.333 ±(99.9%) 38418.586 ops/s [Average]
[info]   (min, avg, max) = (816660.578, 830475.333, 844315.661), stdev = 9977.185
[info]   CI (99.9%): [792056.748, 868893.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   654.332 ±(99.9%) 30.267 MB/sec [Average]
[info]   (min, avg, max) = (643.415, 654.332, 665.227), stdev = 7.860
[info]   CI (99.9%): [624.065, 684.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.252 ±(99.9%) 6.126 MB/sec [Average]
[info]   (min, avg, max) = (653.473, 655.252, 657.492), stdev = 1.591
[info]   CI (99.9%): [649.125, 661.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1241.881 ±(99.9%) 55.942 B/op [Average]
[info]   (min, avg, max) = (1223.119, 1241.881, 1261.994), stdev = 14.528
[info]   CI (99.9%): [1185.939, 1297.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.463 ±(99.9%) 3.536 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.463, 2.105), stdev = 0.918
[info]   CI (99.9%): [≈ 0, 3.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.874 ±(99.9%) 6.676 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.874, 3.975), stdev = 1.734
[info]   CI (99.9%): [≈ 0, 7.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.30% complete, ETA 00:59:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 924692.439 ops/s
[info] # Warmup Iteration   2: 989712.686 ops/s
[info] # Warmup Iteration   3: 1009415.249 ops/s
[info] Iteration   1: 1006544.920 ops/s
[info]                  ·gc.alloc.rate:                   547.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     518.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1017366.848 ops/s
[info]                  ·gc.alloc.rate:                   553.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1026.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1018022.160 ops/s
[info]                  ·gc.alloc.rate:                   553.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1025.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1000261.627 ops/s
[info]                  ·gc.alloc.rate:               544.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 521.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1016313.121 ops/s
[info]                  ·gc.alloc.rate:                   552.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1027.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1011701.735 ±(99.9%) 30489.160 ops/s [Average]
[info]   (min, avg, max) = (1000261.627, 1011701.735, 1018022.160), stdev = 7917.938
[info]   CI (99.9%): [981212.575, 1042190.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   550.266 ±(99.9%) 16.678 MB/sec [Average]
[info]   (min, avg, max) = (544.030, 550.266, 553.676), stdev = 4.331
[info]   CI (99.9%): [533.588, 566.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.811 ±(99.9%) 699.805 MB/sec [Average]
[info]   (min, avg, max) = (331.720, 530.811, 663.677), stdev = 181.737
[info]   CI (99.9%): [≈ 0, 1230.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   824.063 ±(99.9%) 1067.609 B/op [Average]
[info]   (min, avg, max) = (518.732, 824.063, 1027.497), stdev = 277.255
[info]   CI (99.9%): [≈ 0, 1891.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.389 ±(99.9%) 2.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.714), stdev = 0.742
[info]   CI (99.9%): [≈ 0, 3.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.607 ±(99.9%) 4.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.607, 2.680), stdev = 1.160
[info]   CI (99.9%): [≈ 0, 5.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.54% complete, ETA 00:59:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 925887.125 ops/s
[info] # Warmup Iteration   2: 1003945.103 ops/s
[info] # Warmup Iteration   3: 1007157.318 ops/s
[info] Iteration   1: 1003920.590 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1005698.141 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1005536.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 998435.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 992441.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1001206.411 ±(99.9%) 22019.139 ops/s [Average]
[info]   (min, avg, max) = (992441.363, 1001206.411, 1005698.141), stdev = 5718.300
[info]   CI (99.9%): [979187.272, 1023225.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.78% complete, ETA 00:59:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20931.751 ops/s
[info] # Warmup Iteration   2: 30294.471 ops/s
[info] # Warmup Iteration   3: 30081.491 ops/s
[info] Iteration   1: 30055.719 ops/s
[info]                  ·gc.alloc.rate:                   1653.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              86599.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86660.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.360 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30084.539 ops/s
[info]                  ·gc.alloc.rate:                   1655.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87227.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.267 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 30750.055 ops/s
[info]                  ·gc.alloc.rate:                   1692.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85778.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.131 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30754.816 ops/s
[info]                  ·gc.alloc.rate:                   1692.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86216.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30771.600 ops/s
[info]                  ·gc.alloc.rate:                   1692.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86475.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.453 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30483.346 ±(99.9%) 1453.371 ops/s [Average]
[info]   (min, avg, max) = (30055.719, 30483.346, 30771.600), stdev = 377.436
[info]   CI (99.9%): [29029.974, 31936.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1677.257 ±(99.9%) 80.145 MB/sec [Average]
[info]   (min, avg, max) = (1653.848, 1677.257, 1692.923), stdev = 20.813
[info]   CI (99.9%): [1597.112, 1757.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86587.131 ±(99.9%) 26.839 B/op [Average]
[info]   (min, avg, max) = (86584.014, 86587.131, 86599.600), stdev = 6.970
[info]   CI (99.9%): [86560.292, 86613.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.942 ±(99.9%) 54.690 MB/sec [Average]
[info]   (min, avg, max) = (1655.011, 1674.942, 1690.803), stdev = 14.203
[info]   CI (99.9%): [1620.252, 1729.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86471.792 ±(99.9%) 2066.264 B/op [Average]
[info]   (min, avg, max) = (85778.944, 86471.792, 87227.416), stdev = 536.602
[info]   CI (99.9%): [84405.529, 88538.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.295 ±(99.9%) 7.634 B/op [Average]
[info]   (min, avg, max) = (2.131, 4.295, 7.453), stdev = 1.982
[info]   CI (99.9%): [≈ 0, 11.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.03% complete, ETA 00:59:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93622.032 ops/s
[info] # Warmup Iteration   2: 132343.191 ops/s
[info] # Warmup Iteration   3: 131615.680 ops/s
[info] Iteration   1: 133169.237 ops/s
[info]                  ·gc.alloc.rate:                   1828.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              21616.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19619.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.984 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 133012.664 ops/s
[info]                  ·gc.alloc.rate:                   1826.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              21616.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23736.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.971 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 132973.451 ops/s
[info]                  ·gc.alloc.rate:                   1826.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              21616.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19896.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.493 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 133153.821 ops/s
[info]                  ·gc.alloc.rate:                   1828.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              21616.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23943.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.984 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 133268.987 ops/s
[info]                  ·gc.alloc.rate:                   1830.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              21616.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19997.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   133115.632 ±(99.9%) 466.339 ops/s [Average]
[info]   (min, avg, max) = (132973.451, 133115.632, 133268.987), stdev = 121.107
[info]   CI (99.9%): [132649.294, 133581.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1828.210 ±(99.9%) 6.446 MB/sec [Average]
[info]   (min, avg, max) = (1826.242, 1828.210, 1830.372), stdev = 1.674
[info]   CI (99.9%): [1821.764, 1834.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21616.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21616.003, 21616.003, 21616.003), stdev = 0.001
[info]   CI (99.9%): [21616.003, 21616.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1813.196 ±(99.9%) 714.302 MB/sec [Average]
[info]   (min, avg, max) = (1659.994, 1813.196, 2025.623), stdev = 185.502
[info]   CI (99.9%): [1098.894, 2527.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21438.846 ±(99.9%) 8462.793 B/op [Average]
[info]   (min, avg, max) = (19619.565, 21438.846, 23943.651), stdev = 2197.761
[info]   CI (99.9%): [12976.053, 29901.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.034 ±(99.9%) 2.164 B/op [Average]
[info]   (min, avg, max) = (0.493, 1.034, 1.971), stdev = 0.562
[info]   CI (99.9%): [≈ 0, 3.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.27% complete, ETA 00:58:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119725.487 ops/s
[info] # Warmup Iteration   2: 194130.824 ops/s
[info] # Warmup Iteration   3: 196514.482 ops/s
[info] Iteration   1: 198128.171 ops/s
[info]                  ·gc.alloc.rate:                   1182.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10393.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.661 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 197971.067 ops/s
[info]                  ·gc.alloc.rate:                   1181.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10453.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.655 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 198537.538 ops/s
[info]                  ·gc.alloc.rate:                   1184.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7865.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 197974.188 ops/s
[info]                  ·gc.alloc.rate:                   1181.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10570.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 196206.547 ops/s
[info]                  ·gc.alloc.rate:                   1171.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8039.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   197763.502 ±(99.9%) 3467.555 ops/s [Average]
[info]   (min, avg, max) = (196206.547, 197763.502, 198537.538), stdev = 900.513
[info]   CI (99.9%): [194295.947, 201231.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1180.357 ±(99.9%) 20.191 MB/sec [Average]
[info]   (min, avg, max) = (1171.311, 1180.357, 1184.953), stdev = 5.244
[info]   CI (99.9%): [1160.166, 1200.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9392.002, 9392.002, 9392.002), stdev = 0.001
[info]   CI (99.9%): [9392.002, 9392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1189.673 ±(99.9%) 676.329 MB/sec [Average]
[info]   (min, avg, max) = (992.381, 1189.673, 1329.588), stdev = 175.640
[info]   CI (99.9%): [513.344, 1866.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9464.446 ±(99.9%) 5325.750 B/op [Average]
[info]   (min, avg, max) = (7865.667, 9464.446, 10570.333), stdev = 1383.080
[info]   CI (99.9%): [4138.696, 14790.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.208), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.729 ±(99.9%) 2.044 B/op [Average]
[info]   (min, avg, max) = (0.331, 0.729, 1.655), stdev = 0.531
[info]   CI (99.9%): [≈ 0, 2.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.52% complete, ETA 00:58:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254104.129 ops/s
[info] # Warmup Iteration   2: 266359.288 ops/s
[info] # Warmup Iteration   3: 262720.067 ops/s
[info] Iteration   1: 268993.078 ops/s
[info]                  ·gc.alloc.rate:                   875.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3889.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 267063.860 ops/s
[info]                  ·gc.alloc.rate:                   869.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5876.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 268668.656 ops/s
[info]                  ·gc.alloc.rate:                   873.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5857.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 269025.879 ops/s
[info]                  ·gc.alloc.rate:                   875.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3906.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 268189.037 ops/s
[info]                  ·gc.alloc.rate:                   872.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5889.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   268388.102 ±(99.9%) 3131.067 ops/s [Average]
[info]   (min, avg, max) = (267063.860, 268388.102, 269025.879), stdev = 813.128
[info]   CI (99.9%): [265257.035, 271519.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   873.151 ±(99.9%) 9.564 MB/sec [Average]
[info]   (min, avg, max) = (869.165, 873.151, 875.174), stdev = 2.484
[info]   CI (99.9%): [863.587, 882.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   866.717 ±(99.9%) 704.606 MB/sec [Average]
[info]   (min, avg, max) = (664.770, 866.717, 1003.510), stdev = 182.984
[info]   CI (99.9%): [162.111, 1571.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5084.044 ±(99.9%) 4168.371 B/op [Average]
[info]   (min, avg, max) = (3889.779, 5084.044, 5889.317), stdev = 1082.513
[info]   CI (99.9%): [915.673, 9252.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.367 ±(99.9%) 1.002 B/op [Average]
[info]   (min, avg, max) = (0.122, 0.367, 0.736), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.76% complete, ETA 00:58:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31510.411 ops/s
[info] # Warmup Iteration   2: 64867.262 ops/s
[info] # Warmup Iteration   3: 65849.349 ops/s
[info] Iteration   1: 67032.005 ops/s
[info]                  ·gc.alloc.rate:                   2785.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              65392.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62641.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.933 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 66480.532 ops/s
[info]                  ·gc.alloc.rate:                   2762.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              65392.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63758.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.464 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 66260.615 ops/s
[info]                  ·gc.alloc.rate:                   2753.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              65392.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64300.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.956 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 64707.578 ops/s
[info]                  ·gc.alloc.rate:                   2688.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              65392.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66057.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.570 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 64768.401 ops/s
[info]                  ·gc.alloc.rate:                   2691.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              65392.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66091.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.023 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   65849.826 ±(99.9%) 4056.126 ops/s [Average]
[info]   (min, avg, max) = (64707.578, 65849.826, 67032.005), stdev = 1053.363
[info]   CI (99.9%): [61793.700, 69905.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2736.219 ±(99.9%) 169.737 MB/sec [Average]
[info]   (min, avg, max) = (2688.399, 2736.219, 2785.972), stdev = 44.080
[info]   CI (99.9%): [2566.482, 2905.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65392.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65392.006, 65392.007, 65392.007), stdev = 0.001
[info]   CI (99.9%): [65392.006, 65392.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2701.025 ±(99.9%) 79.543 MB/sec [Average]
[info]   (min, avg, max) = (2668.788, 2701.025, 2719.900), stdev = 20.657
[info]   CI (99.9%): [2621.483, 2780.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64570.038 ±(99.9%) 5768.563 B/op [Average]
[info]   (min, avg, max) = (62641.471, 64570.038, 66091.416), stdev = 1498.078
[info]   CI (99.9%): [58801.475, 70338.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.229), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.389 ±(99.9%) 5.447 B/op [Average]
[info]   (min, avg, max) = (2.023, 3.389, 5.570), stdev = 1.415
[info]   CI (99.9%): [≈ 0, 8.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.600, 10.000), stdev = 1.140
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.01% complete, ETA 00:58:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128100.887 ops/s
[info] # Warmup Iteration   2: 164264.442 ops/s
[info] # Warmup Iteration   3: 167121.442 ops/s
[info] Iteration   1: 167272.798 ops/s
[info]                  ·gc.alloc.rate:                   1094.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9304.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 164040.285 ops/s
[info]                  ·gc.alloc.rate:                   1073.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12692.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 166857.154 ops/s
[info]                  ·gc.alloc.rate:                   1091.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9396.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 164798.533 ops/s
[info]                  ·gc.alloc.rate:                   1078.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9558.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.596 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 167560.719 ops/s
[info]                  ·gc.alloc.rate:                   1096.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12579.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.978 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   166105.898 ±(99.9%) 6094.034 ops/s [Average]
[info]   (min, avg, max) = (164040.285, 166105.898, 167560.719), stdev = 1582.601
[info]   CI (99.9%): [160011.864, 172199.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1086.615 ±(99.9%) 39.886 MB/sec [Average]
[info]   (min, avg, max) = (1073.081, 1086.615, 1096.158), stdev = 10.358
[info]   CI (99.9%): [1046.729, 1126.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1129.623 ±(99.9%) 708.739 MB/sec [Average]
[info]   (min, avg, max) = (988.853, 1129.623, 1339.286), stdev = 184.057
[info]   CI (99.9%): [420.884, 1838.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10706.521 ±(99.9%) 6794.297 B/op [Average]
[info]   (min, avg, max) = (9304.533, 10706.521, 12692.969), stdev = 1764.457
[info]   CI (99.9%): [3912.223, 17500.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.751 ±(99.9%) 1.263 B/op [Average]
[info]   (min, avg, max) = (0.393, 0.751, 1.198), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 2.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.25% complete, ETA 00:58:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 376374.047 ops/s
[info] # Warmup Iteration   2: 564102.877 ops/s
[info] # Warmup Iteration   3: 538331.826 ops/s
[info] Iteration   1: 550391.197 ops/s
[info]                  ·gc.alloc.rate:                   556.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 569805.025 ops/s
[info]                  ·gc.alloc.rate:                   576.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1802.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 569484.848 ops/s
[info]                  ·gc.alloc.rate:                   576.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1805.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 569893.084 ops/s
[info]                  ·gc.alloc.rate:                   576.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1806.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 562300.777 ops/s
[info]                  ·gc.alloc.rate:               568.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 916.408 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   564374.986 ±(99.9%) 32554.122 ops/s [Average]
[info]   (min, avg, max) = (550391.197, 564374.986, 569893.084), stdev = 8454.202
[info]   CI (99.9%): [531820.864, 596929.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   570.880 ±(99.9%) 32.979 MB/sec [Average]
[info]   (min, avg, max) = (556.712, 570.880, 576.416), stdev = 8.565
[info]   CI (99.9%): [537.900, 603.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   522.656 ±(99.9%) 688.708 MB/sec [Average]
[info]   (min, avg, max) = (326.056, 522.656, 654.100), stdev = 178.855
[info]   CI (99.9%): [≈ 0, 1211.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1452.539 ±(99.9%) 1856.592 B/op [Average]
[info]   (min, avg, max) = (916.408, 1452.539, 1806.554), stdev = 482.151
[info]   CI (99.9%): [≈ 0, 3309.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.460 ±(99.9%) 3.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 2.177), stdev = 0.960
[info]   CI (99.9%): [≈ 0, 4.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.314 ±(99.9%) 10.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.314, 6.227), stdev = 2.747
[info]   CI (99.9%): [≈ 0, 11.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.50% complete, ETA 00:57:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520782.410 ops/s
[info] # Warmup Iteration   2: 562783.802 ops/s
[info] # Warmup Iteration   3: 570332.287 ops/s
[info] Iteration   1: 573762.351 ops/s
[info]                  ·gc.alloc.rate:               440.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 701.655 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 573104.403 ops/s
[info]                  ·gc.alloc.rate:                   439.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1819.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 576792.912 ops/s
[info]                  ·gc.alloc.rate:                   442.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     903.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 572659.598 ops/s
[info]                  ·gc.alloc.rate:                   439.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     909.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 572938.691 ops/s
[info]                  ·gc.alloc.rate:                   439.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1817.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   573851.591 ±(99.9%) 6521.090 ops/s [Average]
[info]   (min, avg, max) = (572659.598, 573851.591, 576792.912), stdev = 1693.506
[info]   CI (99.9%): [567330.501, 580372.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   440.501 ±(99.9%) 4.851 MB/sec [Average]
[info]   (min, avg, max) = (439.619, 440.501, 442.701), stdev = 1.260
[info]   CI (99.9%): [435.650, 445.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.470 ±(99.9%) 760.466 MB/sec [Average]
[info]   (min, avg, max) = (255.787, 448.470, 662.597), stdev = 197.491
[info]   CI (99.9%): [≈ 0, 1208.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1230.342 ±(99.9%) 2091.953 B/op [Average]
[info]   (min, avg, max) = (701.655, 1230.342, 1819.413), stdev = 543.274
[info]   CI (99.9%): [≈ 0, 3322.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.385 ±(99.9%) 3.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.802), stdev = 0.792
[info]   CI (99.9%): [≈ 0, 3.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.058 ±(99.9%) 8.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.058, 4.949), stdev = 2.176
[info]   CI (99.9%): [≈ 0, 9.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.74% complete, ETA 00:57:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 561346.169 ops/s
[info] # Warmup Iteration   2: 610682.618 ops/s
[info] # Warmup Iteration   3: 615051.770 ops/s
[info] Iteration   1: 614564.026 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 614621.008 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 614942.969 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 614802.906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 614717.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   614729.611 ±(99.9%) 578.437 ops/s [Average]
[info]   (min, avg, max) = (614564.026, 614729.611, 614942.969), stdev = 150.218
[info]   CI (99.9%): [614151.174, 615308.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.99% complete, ETA 00:57:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194337.280 ops/s
[info] # Warmup Iteration   2: 312745.365 ops/s
[info] # Warmup Iteration   3: 323433.918 ops/s
[info] Iteration   1: 324571.181 ops/s
[info]                  ·gc.alloc.rate:                   894.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4740.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 319783.019 ops/s
[info]                  ·gc.alloc.rate:                   881.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3213.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 320149.658 ops/s
[info]                  ·gc.alloc.rate:                   882.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4831.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 322586.508 ops/s
[info]                  ·gc.alloc.rate:                   888.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4818.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 322781.699 ops/s
[info]                  ·gc.alloc.rate:                   889.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4841.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   321974.413 ±(99.9%) 7677.548 ops/s [Average]
[info]   (min, avg, max) = (319783.019, 321974.413, 324571.181), stdev = 1993.835
[info]   CI (99.9%): [314296.865, 329651.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   887.121 ±(99.9%) 20.735 MB/sec [Average]
[info]   (min, avg, max) = (881.397, 887.121, 894.199), stdev = 5.385
[info]   CI (99.9%): [866.385, 907.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   918.813 ±(99.9%) 572.324 MB/sec [Average]
[info]   (min, avg, max) = (653.126, 918.813, 992.892), stdev = 148.631
[info]   CI (99.9%): [346.489, 1491.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4488.962 ±(99.9%) 2750.813 B/op [Average]
[info]   (min, avg, max) = (3213.031, 4488.962, 4841.271), stdev = 714.377
[info]   CI (99.9%): [1738.148, 7239.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.285 ±(99.9%) 0.330 B/op [Average]
[info]   (min, avg, max) = (0.203, 0.285, 0.410), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.23% complete, ETA 00:57:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6648.980 ops/s
[info] # Warmup Iteration   2: 8893.011 ops/s
[info] # Warmup Iteration   3: 9300.602 ops/s
[info] Iteration   1: 9108.562 ops/s
[info]                  ·gc.alloc.rate:                   1193.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171827.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9321.166 ops/s
[info]                  ·gc.alloc.rate:                   1221.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224494.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9191.733 ops/s
[info]                  ·gc.alloc.rate:                   1203.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228556.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.256 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9279.168 ops/s
[info]                  ·gc.alloc.rate:                   1215.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170601.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9303.149 ops/s
[info]                  ·gc.alloc.rate:                   1218.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              206160.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227463.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.043 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9240.756 ±(99.9%) 342.862 ops/s [Average]
[info]   (min, avg, max) = (9108.562, 9240.756, 9321.166), stdev = 89.040
[info]   CI (99.9%): [8897.893, 9583.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1210.510 ±(99.9%) 45.459 MB/sec [Average]
[info]   (min, avg, max) = (1193.063, 1210.510, 1221.460), stdev = 11.806
[info]   CI (99.9%): [1165.051, 1255.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206147.378 ±(99.9%) 27.499 B/op [Average]
[info]   (min, avg, max) = (206144.047, 206147.378, 206160.146), stdev = 7.141
[info]   CI (99.9%): [206119.880, 206174.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.987 ±(99.9%) 709.911 MB/sec [Average]
[info]   (min, avg, max) = (994.458, 1201.987, 1344.575), stdev = 184.362
[info]   CI (99.9%): [492.077, 1911.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204588.636 ±(99.9%) 117466.039 B/op [Average]
[info]   (min, avg, max) = (170601.202, 204588.636, 228556.265), stdev = 30505.557
[info]   CI (99.9%): [87122.596, 322054.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.899 ±(99.9%) 20.243 B/op [Average]
[info]   (min, avg, max) = (7.043, 14.899, 21.088), stdev = 5.257
[info]   CI (99.9%): [≈ 0, 35.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.47% complete, ETA 00:57:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5754.468 ops/s
[info] # Warmup Iteration   2: 9572.832 ops/s
[info] # Warmup Iteration   3: 9722.536 ops/s
[info] Iteration   1: 9460.795 ops/s
[info]                  ·gc.alloc.rate:                   1133.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217825.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.850 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9590.487 ops/s
[info]                  ·gc.alloc.rate:                   1149.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162008.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9695.412 ops/s
[info]                  ·gc.alloc.rate:                   1161.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214808.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9731.988 ops/s
[info]                  ·gc.alloc.rate:                   1166.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              188599.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161315.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9764.616 ops/s
[info]                  ·gc.alloc.rate:                   1170.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215469.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9648.660 ±(99.9%) 476.502 ops/s [Average]
[info]   (min, avg, max) = (9460.795, 9648.660, 9764.616), stdev = 123.746
[info]   CI (99.9%): [9172.157, 10125.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1156.245 ±(99.9%) 57.224 MB/sec [Average]
[info]   (min, avg, max) = (1133.728, 1156.245, 1170.257), stdev = 14.861
[info]   CI (99.9%): [1099.021, 1213.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   188599.878 ±(99.9%) 53.378 B/op [Average]
[info]   (min, avg, max) = (188592.045, 188599.878, 188624.048), stdev = 13.862
[info]   CI (99.9%): [188546.500, 188653.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.864 ±(99.9%) 698.870 MB/sec [Average]
[info]   (min, avg, max) = (987.223, 1190.864, 1336.811), stdev = 181.494
[info]   CI (99.9%): [491.994, 1889.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   194285.523 ±(99.9%) 114761.142 B/op [Average]
[info]   (min, avg, max) = (161315.241, 194285.523, 217825.488), stdev = 29803.104
[info]   CI (99.9%): [79524.381, 309046.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.840 ±(99.9%) 15.177 B/op [Average]
[info]   (min, avg, max) = (3.416, 8.840, 13.850), stdev = 3.941
[info]   CI (99.9%): [≈ 0, 24.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.72% complete, ETA 00:56:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144202.966 ops/s
[info] # Warmup Iteration   2: 151932.953 ops/s
[info] # Warmup Iteration   3: 155244.888 ops/s
[info] Iteration   1: 153473.208 ops/s
[info]                  ·gc.alloc.rate:                   998.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10230.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 151749.385 ops/s
[info]                  ·gc.alloc.rate:                   987.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10360.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.432 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 151709.356 ops/s
[info]                  ·gc.alloc.rate:                   987.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10393.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 157198.145 ops/s
[info]                  ·gc.alloc.rate:                   1022.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10057.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 151201.174 ops/s
[info]                  ·gc.alloc.rate:                   983.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10487.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   153066.254 ±(99.9%) 9489.313 ops/s [Average]
[info]   (min, avg, max) = (151201.174, 153066.254, 157198.145), stdev = 2464.344
[info]   CI (99.9%): [143576.941, 162555.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   995.945 ±(99.9%) 61.572 MB/sec [Average]
[info]   (min, avg, max) = (983.876, 995.945, 1022.761), stdev = 15.990
[info]   CI (99.9%): [934.373, 1057.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1002.156 ±(99.9%) 15.720 MB/sec [Average]
[info]   (min, avg, max) = (997.610, 1002.156, 1007.695), stdev = 4.083
[info]   CI (99.9%): [986.436, 1017.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10305.937 ±(99.9%) 642.095 B/op [Average]
[info]   (min, avg, max) = (10057.579, 10305.937, 10487.910), stdev = 166.750
[info]   CI (99.9%): [9663.842, 10948.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.472 ±(99.9%) 1.370 B/op [Average]
[info]   (min, avg, max) = (0.213, 0.472, 1.080), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.96% complete, ETA 00:56:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4371.811 ops/s
[info] # Warmup Iteration   2: 7564.695 ops/s
[info] # Warmup Iteration   3: 7727.372 ops/s
[info] Iteration   1: 7626.441 ops/s
[info]                  ·gc.alloc.rate:                   1420.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     339605.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.887 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7837.877 ops/s
[info]                  ·gc.alloc.rate:                   1460.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266056.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.901 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7697.348 ops/s
[info]                  ·gc.alloc.rate:                   1433.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272392.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.512 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7884.197 ops/s
[info]                  ·gc.alloc.rate:                   1468.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     334211.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.310 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7694.748 ops/s
[info]                  ·gc.alloc.rate:                   1433.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275188.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.514 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7748.122 ±(99.9%) 416.535 ops/s [Average]
[info]   (min, avg, max) = (7626.441, 7748.122, 7884.197), stdev = 108.173
[info]   CI (99.9%): [7331.587, 8164.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1443.149 ±(99.9%) 77.763 MB/sec [Average]
[info]   (min, avg, max) = (1420.582, 1443.149, 1468.296), stdev = 20.195
[info]   CI (99.9%): [1365.386, 1520.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.057 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (293096.055, 293096.057, 293096.059), stdev = 0.002
[info]   CI (99.9%): [293096.050, 293096.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.721 ±(99.9%) 688.541 MB/sec [Average]
[info]   (min, avg, max) = (1325.592, 1464.721, 1674.271), stdev = 178.812
[info]   CI (99.9%): [776.179, 2153.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   297490.914 ±(99.9%) 139336.373 B/op [Average]
[info]   (min, avg, max) = (266056.597, 297490.914, 339605.009), stdev = 36185.213
[info]   CI (99.9%): [158154.541, 436827.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.825 ±(99.9%) 20.895 B/op [Average]
[info]   (min, avg, max) = (8.310, 11.825, 20.901), stdev = 5.426
[info]   CI (99.9%): [≈ 0, 32.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.21% complete, ETA 00:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13785.303 ops/s
[info] # Warmup Iteration   2: 19785.439 ops/s
[info] # Warmup Iteration   3: 20057.161 ops/s
[info] Iteration   1: 19528.274 ops/s
[info]                  ·gc.alloc.rate:                   1037.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              83614.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79699.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.033 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19585.478 ops/s
[info]                  ·gc.alloc.rate:                   1040.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              83640.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79681.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19834.864 ops/s
[info]                  ·gc.alloc.rate:                   1054.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              83630.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78964.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.955 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19932.328 ops/s
[info]                  ·gc.alloc.rate:                   1058.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78899.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20177.814 ops/s
[info]                  ·gc.alloc.rate:                   1071.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104327.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   19811.752 ±(99.9%) 1019.937 ops/s [Average]
[info]   (min, avg, max) = (19528.274, 19811.752, 20177.814), stdev = 264.874
[info]   CI (99.9%): [18791.815, 20831.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1052.588 ±(99.9%) 52.670 MB/sec [Average]
[info]   (min, avg, max) = (1037.926, 1052.588, 1071.518), stdev = 13.678
[info]   CI (99.9%): [999.918, 1105.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83607.360 ±(99.9%) 115.620 B/op [Average]
[info]   (min, avg, max) = (83576.021, 83607.360, 83640.022), stdev = 30.026
[info]   CI (99.9%): [83491.741, 83722.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1062.619 ±(99.9%) 592.037 MB/sec [Average]
[info]   (min, avg, max) = (989.328, 1062.619, 1337.572), stdev = 153.750
[info]   CI (99.9%): [470.583, 1654.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   84314.556 ±(99.9%) 43104.542 B/op [Average]
[info]   (min, avg, max) = (78899.624, 84314.556, 104327.649), stdev = 11194.113
[info]   CI (99.9%): [41210.014, 127419.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.960 ±(99.9%) 5.844 B/op [Average]
[info]   (min, avg, max) = (4.871, 5.960, 8.364), stdev = 1.518
[info]   CI (99.9%): [0.116, 11.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.45% complete, ETA 00:56:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14717.007 ops/s
[info] # Warmup Iteration   2: 21944.681 ops/s
[info] # Warmup Iteration   3: 22729.619 ops/s
[info] Iteration   1: 22723.758 ops/s
[info]                  ·gc.alloc.rate:                   962.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68007.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22686.337 ops/s
[info]                  ·gc.alloc.rate:                   961.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68323.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.888 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22756.202 ops/s
[info]                  ·gc.alloc.rate:                   964.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68343.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22755.237 ops/s
[info]                  ·gc.alloc.rate:                   964.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45750.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22701.861 ops/s
[info]                  ·gc.alloc.rate:                   962.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69109.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   22724.679 ±(99.9%) 120.530 ops/s [Average]
[info]   (min, avg, max) = (22686.337, 22724.679, 22756.202), stdev = 31.301
[info]   CI (99.9%): [22604.149, 22845.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   963.118 ±(99.9%) 5.211 MB/sec [Average]
[info]   (min, avg, max) = (961.586, 963.118, 964.657), stdev = 1.353
[info]   CI (99.9%): [957.907, 968.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (66696.019, 66696.021, 66696.027), stdev = 0.004
[info]   CI (99.9%): [66696.007, 66696.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   922.754 ±(99.9%) 562.802 MB/sec [Average]
[info]   (min, avg, max) = (661.491, 922.754, 996.878), stdev = 146.158
[info]   CI (99.9%): [359.952, 1485.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63906.687 ±(99.9%) 39113.721 B/op [Average]
[info]   (min, avg, max) = (45750.515, 63906.687, 69109.222), stdev = 10157.709
[info]   CI (99.9%): [24792.966, 103020.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.460 ±(99.9%) 3.032 B/op [Average]
[info]   (min, avg, max) = (2.880, 3.460, 4.325), stdev = 0.787
[info]   CI (99.9%): [0.428, 6.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.70% complete, ETA 00:56:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 621967.825 ops/s
[info] # Warmup Iteration   2: 709863.883 ops/s
[info] # Warmup Iteration   3: 714396.704 ops/s
[info] Iteration   1: 713389.438 ops/s
[info]                  ·gc.alloc.rate:                   1287.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2930.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 715912.518 ops/s
[info]                  ·gc.alloc.rate:                   1291.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2930.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 709918.836 ops/s
[info]                  ·gc.alloc.rate:                   1281.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2968.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 700244.578 ops/s
[info]                  ·gc.alloc.rate:                   1263.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3020.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 716722.637 ops/s
[info]                  ·gc.alloc.rate:                   1293.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2219.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   711237.602 ±(99.9%) 25770.315 ops/s [Average]
[info]   (min, avg, max) = (700244.578, 711237.602, 716722.637), stdev = 6692.469
[info]   CI (99.9%): [685467.286, 737007.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1283.396 ±(99.9%) 46.338 MB/sec [Average]
[info]   (min, avg, max) = (1263.637, 1283.396, 1293.267), stdev = 12.034
[info]   CI (99.9%): [1237.058, 1329.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1270.979 ±(99.9%) 560.434 MB/sec [Average]
[info]   (min, avg, max) = (1010.845, 1270.979, 1344.053), stdev = 145.543
[info]   CI (99.9%): [710.544, 1831.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2813.908 ±(99.9%) 1286.783 B/op [Average]
[info]   (min, avg, max) = (2219.805, 2813.908, 3020.733), stdev = 334.173
[info]   CI (99.9%): [1527.126, 4100.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.212 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.212, 0.366), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 35.94% complete, ETA 00:55:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 691051.436 ops/s
[info] # Warmup Iteration   2: 773181.960 ops/s
[info] # Warmup Iteration   3: 775287.793 ops/s
[info] Iteration   1: 775372.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 773324.199 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 774021.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 775078.048 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 777574.245 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   775074.090 ±(99.9%) 6241.683 ops/s [Average]
[info]   (min, avg, max) = (773324.199, 775074.090, 777574.245), stdev = 1620.945
[info]   CI (99.9%): [768832.407, 781315.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.19% complete, ETA 00:55:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15812.737 ops/s
[info] # Warmup Iteration   2: 20959.460 ops/s
[info] # Warmup Iteration   3: 20961.479 ops/s
[info] Iteration   1: 21123.605 ops/s
[info]                  ·gc.alloc.rate:                   974.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73455.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.653 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21067.365 ops/s
[info]                  ·gc.alloc.rate:                   971.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73824.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 20765.090 ops/s
[info]                  ·gc.alloc.rate:                   957.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              72568.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75150.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 20232.062 ops/s
[info]                  ·gc.alloc.rate:                   932.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77492.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.858 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20045.134 ops/s
[info]                  ·gc.alloc.rate:                   924.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78481.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   20646.651 ±(99.9%) 1878.763 ops/s [Average]
[info]   (min, avg, max) = (20045.134, 20646.651, 21123.605), stdev = 487.909
[info]   CI (99.9%): [18767.888, 22525.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   952.078 ±(99.9%) 87.299 MB/sec [Average]
[info]   (min, avg, max) = (924.173, 952.078, 974.044), stdev = 22.671
[info]   CI (99.9%): [864.779, 1039.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72568.064 ±(99.9%) 30.808 B/op [Average]
[info]   (min, avg, max) = (72560.021, 72568.064, 72576.022), stdev = 8.001
[info]   CI (99.9%): [72537.255, 72598.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   992.364 ±(99.9%) 21.433 MB/sec [Average]
[info]   (min, avg, max) = (985.846, 992.364, 999.588), stdev = 5.566
[info]   CI (99.9%): [970.930, 1013.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75680.971 ±(99.9%) 8567.801 B/op [Average]
[info]   (min, avg, max) = (73455.412, 75680.971, 78481.060), stdev = 2225.031
[info]   CI (99.9%): [67113.171, 84248.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.036 ±(99.9%) 7.985 B/op [Average]
[info]   (min, avg, max) = (4.653, 6.036, 9.466), stdev = 2.074
[info]   CI (99.9%): [≈ 0, 14.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.702
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.43% complete, ETA 00:55:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18530.846 ops/s
[info] # Warmup Iteration   2: 25316.878 ops/s
[info] # Warmup Iteration   3: 25321.938 ops/s
[info] Iteration   1: 25643.767 ops/s
[info]                  ·gc.alloc.rate:                   1436.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81545.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.666 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25238.467 ops/s
[info]                  ·gc.alloc.rate:                   1413.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              88137.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83182.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.192 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25058.810 ops/s
[info]                  ·gc.alloc.rate:                   1403.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84180.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.922 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25809.083 ops/s
[info]                  ·gc.alloc.rate:                   1445.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102570.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.617 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25597.043 ops/s
[info]                  ·gc.alloc.rate:                   1433.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82981.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.280 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   25469.434 ±(99.9%) 1193.070 ops/s [Average]
[info]   (min, avg, max) = (25058.810, 25469.434, 25809.083), stdev = 309.837
[info]   CI (99.9%): [24276.364, 26662.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1426.250 ±(99.9%) 66.808 MB/sec [Average]
[info]   (min, avg, max) = (1403.010, 1426.250, 1445.154), stdev = 17.350
[info]   CI (99.9%): [1359.442, 1493.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   88133.087 ±(99.9%) 28.224 B/op [Average]
[info]   (min, avg, max) = (88128.017, 88133.087, 88144.018), stdev = 7.330
[info]   CI (99.9%): [88104.863, 88161.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1406.910 ±(99.9%) 592.886 MB/sec [Average]
[info]   (min, avg, max) = (1328.600, 1406.910, 1681.988), stdev = 153.971
[info]   CI (99.9%): [814.024, 1999.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   86892.068 ±(99.9%) 33943.112 B/op [Average]
[info]   (min, avg, max) = (81545.008, 86892.068, 102570.581), stdev = 8814.918
[info]   CI (99.9%): [52948.956, 120835.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.135 ±(99.9%) 10.350 B/op [Average]
[info]   (min, avg, max) = (1.280, 5.135, 7.666), stdev = 2.688
[info]   CI (99.9%): [≈ 0, 15.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.67% complete, ETA 00:55:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15721.093 ops/s
[info] # Warmup Iteration   2: 24983.953 ops/s
[info] # Warmup Iteration   3: 25268.274 ops/s
[info] Iteration   1: 25327.136 ops/s
[info]                  ·gc.alloc.rate:                   1173.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              72912.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81465.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.174 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25054.621 ops/s
[info]                  ·gc.alloc.rate:                   1160.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              72904.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62015.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25182.375 ops/s
[info]                  ·gc.alloc.rate:                   1166.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82701.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.903 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25824.480 ops/s
[info]                  ·gc.alloc.rate:                   1195.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81129.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.537 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25874.466 ops/s
[info]                  ·gc.alloc.rate:                   1198.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61018.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.532 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   25452.616 ±(99.9%) 1445.167 ops/s [Average]
[info]   (min, avg, max) = (25054.621, 25452.616, 25874.466), stdev = 375.305
[info]   CI (99.9%): [24007.449, 26897.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1178.942 ±(99.9%) 66.164 MB/sec [Average]
[info]   (min, avg, max) = (1160.654, 1178.942, 1198.192), stdev = 17.183
[info]   CI (99.9%): [1112.777, 1245.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72891.282 ±(99.9%) 60.310 B/op [Average]
[info]   (min, avg, max) = (72880.017, 72891.282, 72912.018), stdev = 15.662
[info]   CI (99.9%): [72830.972, 72951.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.313 ±(99.9%) 690.089 MB/sec [Average]
[info]   (min, avg, max) = (987.305, 1191.313, 1331.254), stdev = 179.214
[info]   CI (99.9%): [501.224, 1881.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   73666.057 ±(99.9%) 42786.475 B/op [Average]
[info]   (min, avg, max) = (61018.372, 73666.057, 82701.244), stdev = 11111.512
[info]   CI (99.9%): [30879.583, 116452.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.137 ±(99.9%) 6.678 B/op [Average]
[info]   (min, avg, max) = (2.532, 4.137, 6.538), stdev = 1.734
[info]   CI (99.9%): [≈ 0, 10.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.92% complete, ETA 00:54:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253378.868 ops/s
[info] # Warmup Iteration   2: 264666.247 ops/s
[info] # Warmup Iteration   3: 271377.359 ops/s
[info] Iteration   1: 271501.135 ops/s
[info]                  ·gc.alloc.rate:                   706.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3855.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 271816.530 ops/s
[info]                  ·gc.alloc.rate:                   707.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3849.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 272326.413 ops/s
[info]                  ·gc.alloc.rate:                   708.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5767.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 270503.556 ops/s
[info]                  ·gc.alloc.rate:                   703.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3875.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 270946.093 ops/s
[info]                  ·gc.alloc.rate:                   705.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3877.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   271418.746 ±(99.9%) 2756.543 ops/s [Average]
[info]   (min, avg, max) = (270503.556, 271418.746, 272326.413), stdev = 715.865
[info]   CI (99.9%): [268662.203, 274175.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   706.369 ±(99.9%) 7.097 MB/sec [Average]
[info]   (min, avg, max) = (703.980, 706.369, 708.711), stdev = 1.843
[info]   CI (99.9%): [699.272, 713.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.290 ±(99.9%) 571.666 MB/sec [Average]
[info]   (min, avg, max) = (664.800, 732.290, 997.856), stdev = 148.460
[info]   CI (99.9%): [160.624, 1303.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4245.060 ±(99.9%) 3276.680 B/op [Average]
[info]   (min, avg, max) = (3849.387, 4245.060, 5767.118), stdev = 850.943
[info]   CI (99.9%): [968.381, 7521.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.386 ±(99.9%) 1.246 B/op [Average]
[info]   (min, avg, max) = (0.120, 0.386, 0.845), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.16% complete, ETA 00:54:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9199.335 ops/s
[info] # Warmup Iteration   2: 16215.301 ops/s
[info] # Warmup Iteration   3: 16527.190 ops/s
[info] Iteration   1: 16211.972 ops/s
[info]                  ·gc.alloc.rate:                   1659.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160212.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.063 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16379.888 ops/s
[info]                  ·gc.alloc.rate:                   1675.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159657.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.000 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16017.144 ops/s
[info]                  ·gc.alloc.rate:                   1638.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164410.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.227 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 16309.001 ops/s
[info]                  ·gc.alloc.rate:                   1668.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162303.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16164.728 ops/s
[info]                  ·gc.alloc.rate:                   1654.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164417.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.107 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   16216.546 ±(99.9%) 536.664 ops/s [Average]
[info]   (min, avg, max) = (16017.144, 16216.546, 16379.888), stdev = 139.370
[info]   CI (99.9%): [15679.883, 16753.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1659.137 ±(99.9%) 54.845 MB/sec [Average]
[info]   (min, avg, max) = (1638.430, 1659.137, 1675.460), stdev = 14.243
[info]   CI (99.9%): [1604.293, 1713.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160984.029 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (160984.026, 160984.029, 160984.036), stdev = 0.004
[info]   CI (99.9%): [160984.014, 160984.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1671.552 ±(99.9%) 59.378 MB/sec [Average]
[info]   (min, avg, max) = (1651.124, 1671.552, 1689.350), stdev = 15.420
[info]   CI (99.9%): [1612.174, 1730.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   162200.393 ±(99.9%) 8659.345 B/op [Average]
[info]   (min, avg, max) = (159657.745, 162200.393, 164417.651), stdev = 2248.804
[info]   CI (99.9%): [153541.048, 170859.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.685 ±(99.9%) 6.703 B/op [Average]
[info]   (min, avg, max) = (6.026, 7.685, 10.227), stdev = 1.741
[info]   CI (99.9%): [0.981, 14.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 00:54:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31700.706 ops/s
[info] # Warmup Iteration   2: 44096.463 ops/s
[info] # Warmup Iteration   3: 43929.803 ops/s
[info] Iteration   1: 44297.699 ops/s
[info]                  ·gc.alloc.rate:                   1408.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47005.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.740 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 44242.072 ops/s
[info]                  ·gc.alloc.rate:                   1406.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47300.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.443 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 44491.956 ops/s
[info]                  ·gc.alloc.rate:                   1414.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47268.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 44556.620 ops/s
[info]                  ·gc.alloc.rate:                   1417.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59258.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.471 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43460.171 ops/s
[info]                  ·gc.alloc.rate:                   1381.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48825.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   44209.704 ±(99.9%) 1690.129 ops/s [Average]
[info]   (min, avg, max) = (43460.171, 44209.704, 44556.620), stdev = 438.921
[info]   CI (99.9%): [42519.575, 45899.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1405.759 ±(99.9%) 54.285 MB/sec [Average]
[info]   (min, avg, max) = (1381.726, 1405.759, 1417.208), stdev = 14.098
[info]   CI (99.9%): [1351.475, 1460.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (50040.010, 50040.010, 50040.010), stdev = 0.001
[info]   CI (99.9%): [50040.009, 50040.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.112 ±(99.9%) 593.397 MB/sec [Average]
[info]   (min, avg, max) = (1322.995, 1403.112, 1678.279), stdev = 154.103
[info]   CI (99.9%): [809.715, 1996.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49931.662 ±(99.9%) 20264.884 B/op [Average]
[info]   (min, avg, max) = (47005.213, 49931.662, 59258.132), stdev = 5262.726
[info]   CI (99.9%): [29666.778, 70196.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.376 ±(99.9%) 5.516 B/op [Average]
[info]   (min, avg, max) = (0.740, 2.376, 4.443), stdev = 1.432
[info]   CI (99.9%): [≈ 0, 7.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 00:54:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89290.902 ops/s
[info] # Warmup Iteration   2: 135445.673 ops/s
[info] # Warmup Iteration   3: 139422.601 ops/s
[info] Iteration   1: 139469.399 ops/s
[info]                  ·gc.alloc.rate:                   1091.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11091.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 134095.225 ops/s
[info]                  ·gc.alloc.rate:                   1048.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15441.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.977 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 134863.011 ops/s
[info]                  ·gc.alloc.rate:                   1055.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11571.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 139020.495 ops/s
[info]                  ·gc.alloc.rate:                   1087.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11285.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 138958.819 ops/s
[info]                  ·gc.alloc.rate:                   1087.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11328.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.472 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   137281.390 ±(99.9%) 9934.706 ops/s [Average]
[info]   (min, avg, max) = (134095.225, 137281.390, 139469.399), stdev = 2580.012
[info]   CI (99.9%): [127346.684, 147216.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1074.005 ±(99.9%) 77.762 MB/sec [Average]
[info]   (min, avg, max) = (1048.980, 1074.005, 1091.152), stdev = 20.195
[info]   CI (99.9%): [996.242, 1151.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12312.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12312.003, 12312.003, 12312.003), stdev = 0.001
[info]   CI (99.9%): [12312.003, 12312.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1057.517 ±(99.9%) 556.138 MB/sec [Average]
[info]   (min, avg, max) = (983.012, 1057.517, 1315.613), stdev = 144.427
[info]   CI (99.9%): [501.378, 1613.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12143.872 ±(99.9%) 7128.738 B/op [Average]
[info]   (min, avg, max) = (11091.806, 12143.872, 15441.506), stdev = 1851.310
[info]   CI (99.9%): [5015.134, 19272.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.622 ±(99.9%) 0.854 B/op [Average]
[info]   (min, avg, max) = (0.471, 0.622, 0.977), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 1.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.90% complete, ETA 00:54:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002907.273 ops/s
[info] # Warmup Iteration   2: 1129171.987 ops/s
[info] # Warmup Iteration   3: 1143853.638 ops/s
[info] Iteration   1: 1151821.639 ops/s
[info]                  ·gc.alloc.rate:                   1235.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1360.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1140641.634 ops/s
[info]                  ·gc.alloc.rate:                   1223.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1838.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1143776.445 ops/s
[info]                  ·gc.alloc.rate:                   1226.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1840.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1158215.327 ops/s
[info]                  ·gc.alloc.rate:                   1242.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1367.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1169086.455 ops/s
[info]                  ·gc.alloc.rate:                   1254.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1812.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1152708.300 ±(99.9%) 44103.741 ops/s [Average]
[info]   (min, avg, max) = (1140641.634, 1152708.300, 1169086.455), stdev = 11453.601
[info]   CI (99.9%): [1108604.559, 1196812.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1236.363 ±(99.9%) 47.573 MB/sec [Average]
[info]   (min, avg, max) = (1223.463, 1236.363, 1254.171), stdev = 12.355
[info]   CI (99.9%): [1188.790, 1283.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1203.816 ±(99.9%) 712.758 MB/sec [Average]
[info]   (min, avg, max) = (995.816, 1203.816, 1346.648), stdev = 185.101
[info]   CI (99.9%): [491.058, 1916.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1643.999 ±(99.9%) 984.201 B/op [Average]
[info]   (min, avg, max) = (1360.781, 1643.999, 1840.602), stdev = 255.594
[info]   CI (99.9%): [659.798, 2628.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.085, 0.115), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.14% complete, ETA 00:53:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1038153.049 ops/s
[info] # Warmup Iteration   2: 1169267.994 ops/s
[info] # Warmup Iteration   3: 1169228.704 ops/s
[info] Iteration   1: 1168745.041 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1168981.873 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1169272.671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1168999.856 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1167675.642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1168735.016 ±(99.9%) 2391.220 ops/s [Average]
[info]   (min, avg, max) = (1167675.642, 1168735.016, 1169272.671), stdev = 620.992
[info]   CI (99.9%): [1166343.797, 1171126.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.39% complete, ETA 00:53:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38744.251 ops/s
[info] # Warmup Iteration   2: 52018.456 ops/s
[info] # Warmup Iteration   3: 52273.758 ops/s
[info] Iteration   1: 52389.706 ops/s
[info]                  ·gc.alloc.rate:                   1388.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39665.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.251 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52420.212 ops/s
[info]                  ·gc.alloc.rate:                   1389.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39841.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.875 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 52324.444 ops/s
[info]                  ·gc.alloc.rate:                   1386.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40124.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.878 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 52388.847 ops/s
[info]                  ·gc.alloc.rate:                   1388.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40264.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.127 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 52349.095 ops/s
[info]                  ·gc.alloc.rate:                   1387.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40455.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.878 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   52374.461 ±(99.9%) 145.073 ops/s [Average]
[info]   (min, avg, max) = (52324.444, 52374.461, 52420.212), stdev = 37.675
[info]   CI (99.9%): [52229.388, 52519.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1387.991 ±(99.9%) 3.721 MB/sec [Average]
[info]   (min, avg, max) = (1386.829, 1387.991, 1389.041), stdev = 0.966
[info]   CI (99.9%): [1384.270, 1391.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41704.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41704.008, 41704.008, 41704.009), stdev = 0.001
[info]   CI (99.9%): [41704.007, 41704.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1333.610 ±(99.9%) 38.582 MB/sec [Average]
[info]   (min, avg, max) = (1320.692, 1333.610, 1345.580), stdev = 10.020
[info]   CI (99.9%): [1295.028, 1372.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40070.169 ±(99.9%) 1225.411 B/op [Average]
[info]   (min, avg, max) = (39665.572, 40070.169, 40455.403), stdev = 318.235
[info]   CI (99.9%): [38844.759, 41295.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.002 ±(99.9%) 2.637 B/op [Average]
[info]   (min, avg, max) = (1.251, 2.002, 3.127), stdev = 0.685
[info]   CI (99.9%): [≈ 0, 4.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.63% complete, ETA 00:53:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11591.121 ops/s
[info] # Warmup Iteration   2: 15495.487 ops/s
[info] # Warmup Iteration   3: 15815.253 ops/s
[info] Iteration   1: 15533.223 ops/s
[info]                  ·gc.alloc.rate:               1340.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          135760.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134514.159 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15491.700 ops/s
[info]                  ·gc.alloc.rate:                   1336.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              135760.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135343.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15464.744 ops/s
[info]                  ·gc.alloc.rate:                   1334.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              135760.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136257.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.355 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15564.168 ops/s
[info]                  ·gc.alloc.rate:                   1342.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              135760.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135921.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.524 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15633.955 ops/s
[info]                  ·gc.alloc.rate:                   1349.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              135760.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135724.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.287 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   15537.558 ±(99.9%) 254.144 ops/s [Average]
[info]   (min, avg, max) = (15464.744, 15537.558, 15633.955), stdev = 66.000
[info]   CI (99.9%): [15283.415, 15791.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1340.532 ±(99.9%) 22.332 MB/sec [Average]
[info]   (min, avg, max) = (1334.278, 1340.532, 1349.138), stdev = 5.800
[info]   CI (99.9%): [1318.200, 1362.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   135760.031 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (135760.028, 135760.031, 135760.038), stdev = 0.004
[info]   CI (99.9%): [135760.014, 135760.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1338.480 ±(99.9%) 32.705 MB/sec [Average]
[info]   (min, avg, max) = (1327.935, 1338.480, 1348.781), stdev = 8.493
[info]   CI (99.9%): [1305.775, 1371.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   135552.303 ±(99.9%) 2572.294 B/op [Average]
[info]   (min, avg, max) = (134514.159, 135552.303, 136257.936), stdev = 668.017
[info]   CI (99.9%): [132980.010, 138124.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.171 ±(99.9%) 18.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.171, 12.688), stdev = 4.862
[info]   CI (99.9%): [≈ 0, 25.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.88% complete, ETA 00:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9224.009 ops/s
[info] # Warmup Iteration   2: 15524.241 ops/s
[info] # Warmup Iteration   3: 15452.943 ops/s
[info] Iteration   1: 15678.957 ops/s
[info]                  ·gc.alloc.rate:                   1276.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              128176.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131723.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15230.777 ops/s
[info]                  ·gc.alloc.rate:                   1240.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              128196.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136285.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.453 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15579.200 ops/s
[info]                  ·gc.alloc.rate:                   1269.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134108.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15425.862 ops/s
[info]                  ·gc.alloc.rate:                   1257.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102050.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15519.372 ops/s
[info]                  ·gc.alloc.rate:                   1264.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              128191.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135919.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.333 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15486.833 ±(99.9%) 655.130 ops/s [Average]
[info]   (min, avg, max) = (15230.777, 15486.833, 15678.957), stdev = 170.135
[info]   CI (99.9%): [14831.703, 16141.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1261.640 ±(99.9%) 53.151 MB/sec [Average]
[info]   (min, avg, max) = (1240.639, 1261.640, 1276.926), stdev = 13.803
[info]   CI (99.9%): [1208.490, 1314.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   128196.078 ±(99.9%) 51.330 B/op [Average]
[info]   (min, avg, max) = (128176.028, 128196.078, 128208.040), stdev = 13.330
[info]   CI (99.9%): [128144.748, 128247.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1259.994 ±(99.9%) 559.748 MB/sec [Average]
[info]   (min, avg, max) = (1000.636, 1259.994, 1340.268), stdev = 145.365
[info]   CI (99.9%): [700.246, 1819.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   128017.596 ±(99.9%) 56327.367 B/op [Average]
[info]   (min, avg, max) = (102050.613, 128017.596, 136285.971), stdev = 14628.038
[info]   CI (99.9%): [71690.229, 184344.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.758 ±(99.9%) 8.694 B/op [Average]
[info]   (min, avg, max) = (4.248, 6.758, 10.448), stdev = 2.258
[info]   CI (99.9%): [≈ 0, 15.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.12% complete, ETA 00:53:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251201.998 ops/s
[info] # Warmup Iteration   2: 264621.055 ops/s
[info] # Warmup Iteration   3: 271456.824 ops/s
[info] Iteration   1: 272798.524 ops/s
[info]                  ·gc.alloc.rate:                   709.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3837.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 271813.483 ops/s
[info]                  ·gc.alloc.rate:                   707.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3849.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 260359.477 ops/s
[info]                  ·gc.alloc.rate:                   677.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4020.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 270822.357 ops/s
[info]                  ·gc.alloc.rate:                   704.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5805.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 268241.160 ops/s
[info]                  ·gc.alloc.rate:                   698.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3916.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   268807.000 ±(99.9%) 19321.801 ops/s [Average]
[info]   (min, avg, max) = (260359.477, 268807.000, 272798.524), stdev = 5017.810
[info]   CI (99.9%): [249485.199, 288128.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   699.649 ±(99.9%) 49.874 MB/sec [Average]
[info]   (min, avg, max) = (677.874, 699.649, 709.912), stdev = 12.952
[info]   CI (99.9%): [649.774, 749.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.379 ±(99.9%) 573.818 MB/sec [Average]
[info]   (min, avg, max) = (664.930, 732.379, 998.945), stdev = 149.019
[info]   CI (99.9%): [158.561, 1306.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4285.848 ±(99.9%) 3282.388 B/op [Average]
[info]   (min, avg, max) = (3837.453, 4285.848, 5805.140), stdev = 852.426
[info]   CI (99.9%): [1003.461, 7568.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.412 ±(99.9%) 0.897 B/op [Average]
[info]   (min, avg, max) = (0.126, 0.412, 0.721), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.36% complete, ETA 00:52:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6320.401 ops/s
[info] # Warmup Iteration   2: 11008.753 ops/s
[info] # Warmup Iteration   3: 11301.948 ops/s
[info] Iteration   1: 11212.132 ops/s
[info]                  ·gc.alloc.rate:                   1540.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231240.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.688 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11080.821 ops/s
[info]                  ·gc.alloc.rate:                   1522.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188482.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.784 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11275.897 ops/s
[info]                  ·gc.alloc.rate:                   1549.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232949.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.905 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11180.016 ops/s
[info]                  ·gc.alloc.rate:                   1536.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236356.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.930 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11346.221 ops/s
[info]                  ·gc.alloc.rate:                   1559.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187021.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11219.017 ±(99.9%) 385.462 ops/s [Average]
[info]   (min, avg, max) = (11080.821, 11219.017, 11346.221), stdev = 100.103
[info]   CI (99.9%): [10833.556, 11604.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1541.832 ±(99.9%) 52.976 MB/sec [Average]
[info]   (min, avg, max) = (1522.658, 1541.832, 1559.238), stdev = 13.758
[info]   CI (99.9%): [1488.856, 1594.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216280.040 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (216280.038, 216280.040, 216280.041), stdev = 0.002
[info]   CI (99.9%): [216280.033, 216280.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1534.240 ±(99.9%) 693.189 MB/sec [Average]
[info]   (min, avg, max) = (1326.957, 1534.240, 1679.637), stdev = 180.019
[info]   CI (99.9%): [841.051, 2227.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   215210.025 ±(99.9%) 96799.719 B/op [Average]
[info]   (min, avg, max) = (187021.310, 215210.025, 236356.270), stdev = 25138.580
[info]   CI (99.9%): [118410.306, 312009.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.194 ±(99.9%) 20.333 B/op [Average]
[info]   (min, avg, max) = (2.905, 8.194, 14.784), stdev = 5.281
[info]   CI (99.9%): [≈ 0, 28.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.61% complete, ETA 00:52:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24358.239 ops/s
[info] # Warmup Iteration   2: 34004.853 ops/s
[info] # Warmup Iteration   3: 34150.966 ops/s
[info] Iteration   1: 33698.292 ops/s
[info]                  ·gc.alloc.rate:                   1280.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              59800.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61726.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.945 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33326.445 ops/s
[info]                  ·gc.alloc.rate:                   1265.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46999.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34217.869 ops/s
[info]                  ·gc.alloc.rate:                   1299.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61324.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.915 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34196.346 ops/s
[info]                  ·gc.alloc.rate:                   1299.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61623.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.832 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33801.179 ops/s
[info]                  ·gc.alloc.rate:                   1283.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62622.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.816 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   33848.026 ±(99.9%) 1434.039 ops/s [Average]
[info]   (min, avg, max) = (33326.445, 33848.026, 34217.869), stdev = 372.415
[info]   CI (99.9%): [32413.987, 35282.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1285.610 ±(99.9%) 54.657 MB/sec [Average]
[info]   (min, avg, max) = (1265.585, 1285.610, 1299.408), stdev = 14.194
[info]   CI (99.9%): [1230.953, 1340.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59774.485 ±(99.9%) 55.720 B/op [Average]
[info]   (min, avg, max) = (59768.013, 59774.485, 59800.370), stdev = 14.470
[info]   CI (99.9%): [59718.765, 59830.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1266.877 ±(99.9%) 585.756 MB/sec [Average]
[info]   (min, avg, max) = (995.203, 1266.877, 1344.934), stdev = 152.119
[info]   CI (99.9%): [681.121, 1852.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   58859.270 ±(99.9%) 25597.881 B/op [Average]
[info]   (min, avg, max) = (46999.056, 58859.270, 62622.384), stdev = 6647.688
[info]   CI (99.9%): [33261.389, 84457.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.881 ±(99.9%) 7.563 B/op [Average]
[info]   (min, avg, max) = (1.915, 3.881, 5.898), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 11.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.85% complete, ETA 00:52:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31397.241 ops/s
[info] # Warmup Iteration   2: 46885.584 ops/s
[info] # Warmup Iteration   3: 47049.217 ops/s
[info] Iteration   1: 47732.974 ops/s
[info]                  ·gc.alloc.rate:                   1421.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54196.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.746 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 48390.638 ops/s
[info]                  ·gc.alloc.rate:                   1441.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43048.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.385 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 48549.881 ops/s
[info]                  ·gc.alloc.rate:                   1445.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43154.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 48214.351 ops/s
[info]                  ·gc.alloc.rate:                   1436.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54644.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.680 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 48364.704 ops/s
[info]                  ·gc.alloc.rate:                   1440.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43786.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.710 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   48250.510 ±(99.9%) 1204.596 ops/s [Average]
[info]   (min, avg, max) = (47732.974, 48250.510, 48549.881), stdev = 312.830
[info]   CI (99.9%): [47045.914, 49455.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1437.249 ±(99.9%) 36.404 MB/sec [Average]
[info]   (min, avg, max) = (1421.452, 1437.249, 1445.936), stdev = 9.454
[info]   CI (99.9%): [1400.845, 1473.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46872.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (46872.009, 46872.009, 46872.010), stdev = 0.001
[info]   CI (99.9%): [46872.008, 46872.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1463.892 ±(99.9%) 688.203 MB/sec [Average]
[info]   (min, avg, max) = (1324.137, 1463.892, 1674.645), stdev = 178.724
[info]   CI (99.9%): [775.689, 2152.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47766.237 ±(99.9%) 23424.709 B/op [Average]
[info]   (min, avg, max) = (43048.834, 47766.237, 54644.591), stdev = 6083.323
[info]   CI (99.9%): [24341.528, 71190.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.309 ±(99.9%) 3.967 B/op [Average]
[info]   (min, avg, max) = (0.680, 2.309, 3.385), stdev = 1.030
[info]   CI (99.9%): [≈ 0, 6.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.10% complete, ETA 00:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1136282.756 ops/s
[info] # Warmup Iteration   2: 1260481.621 ops/s
[info] # Warmup Iteration   3: 1292169.074 ops/s
[info] Iteration   1: 1289984.761 ops/s
[info]                  ·gc.alloc.rate:                   1173.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1619.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1287704.472 ops/s
[info]                  ·gc.alloc.rate:                   1172.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1219.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1288837.474 ops/s
[info]                  ·gc.alloc.rate:                   1172.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1631.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1289576.364 ops/s
[info]                  ·gc.alloc.rate:                   1173.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1227.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1269939.934 ops/s
[info]                  ·gc.alloc.rate:                   1155.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1667.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1285208.601 ±(99.9%) 33035.930 ops/s [Average]
[info]   (min, avg, max) = (1269939.934, 1285208.601, 1289984.761), stdev = 8579.326
[info]   CI (99.9%): [1252172.671, 1318244.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1169.564 ±(99.9%) 30.410 MB/sec [Average]
[info]   (min, avg, max) = (1155.484, 1169.564, 1173.725), stdev = 7.897
[info]   CI (99.9%): [1139.154, 1199.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1202.782 ±(99.9%) 705.739 MB/sec [Average]
[info]   (min, avg, max) = (998.265, 1202.782, 1345.302), stdev = 183.278
[info]   CI (99.9%): [497.043, 1908.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1473.218 ±(99.9%) 879.995 B/op [Average]
[info]   (min, avg, max) = (1219.642, 1473.218, 1667.243), stdev = 228.532
[info]   CI (99.9%): [593.223, 2353.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.132 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.087, 0.127), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.34% complete, ETA 00:51:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1170872.551 ops/s
[info] # Warmup Iteration   2: 1271843.535 ops/s
[info] # Warmup Iteration   3: 1268718.247 ops/s
[info] Iteration   1: 1264344.612 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1264372.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1265217.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1260096.022 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1261692.514 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1263144.558 ±(99.9%) 8313.754 ops/s [Average]
[info]   (min, avg, max) = (1260096.022, 1263144.558, 1265217.443), stdev = 2159.055
[info]   CI (99.9%): [1254830.804, 1271458.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.59% complete, ETA 00:51:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2673.782 ops/s
[info] # Warmup Iteration   2: 3413.413 ops/s
[info] # Warmup Iteration   3: 3500.659 ops/s
[info] Iteration   1: 3570.586 ops/s
[info]                  ·gc.alloc.rate:                   486.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112724.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3540.575 ops/s
[info]                  ·gc.alloc.rate:                   482.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292192.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 898.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3550.064 ops/s
[info]                  ·gc.alloc.rate:                   483.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145578.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.456 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3562.108 ops/s
[info]                  ·gc.alloc.rate:                   485.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290322.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3544.121 ops/s
[info]                  ·gc.alloc.rate:               483.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          214544.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145972.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3553.491 ±(99.9%) 48.435 ops/s [Average]
[info]   (min, avg, max) = (3540.575, 3553.491, 3570.586), stdev = 12.578
[info]   CI (99.9%): [3505.056, 3601.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   484.481 ±(99.9%) 6.799 MB/sec [Average]
[info]   (min, avg, max) = (482.666, 484.481, 486.967), stdev = 1.766
[info]   CI (99.9%): [477.682, 491.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214544.123 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (214544.121, 214544.123, 214544.131), stdev = 0.004
[info]   CI (99.9%): [214544.107, 214544.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   445.494 ±(99.9%) 752.961 MB/sec [Average]
[info]   (min, avg, max) = (255.860, 445.494, 657.353), stdev = 195.541
[info]   CI (99.9%): [≈ 0, 1198.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   197358.074 ±(99.9%) 334143.887 B/op [Average]
[info]   (min, avg, max) = (112724.856, 197358.074, 292192.126), stdev = 86776.106
[info]   CI (99.9%): [≈ 0, 531501.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.021), stdev = 0.889
[info]   CI (99.9%): [≈ 0, 3.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   191.640 ±(99.9%) 1522.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 191.640, 898.367), stdev = 395.332
[info]   CI (99.9%): [≈ 0, 1713.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.83% complete, ETA 00:51:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95538.533 ops/s
[info] # Warmup Iteration   2: 118184.668 ops/s
[info] # Warmup Iteration   3: 116283.507 ops/s
[info] Iteration   1: 118859.172 ops/s
[info]                  ·gc.alloc.rate:                   2208.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26620.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.205 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 118172.160 ops/s
[info]                  ·gc.alloc.rate:                   2196.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31416.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.773 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 117976.499 ops/s
[info]                  ·gc.alloc.rate:                   2191.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27072.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.833 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 118342.803 ops/s
[info]                  ·gc.alloc.rate:                   2198.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31578.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.384 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 118918.445 ops/s
[info]                  ·gc.alloc.rate:                   2209.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26977.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.551 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   118453.816 ±(99.9%) 1610.471 ops/s [Average]
[info]   (min, avg, max) = (117976.499, 118453.816, 118918.445), stdev = 418.234
[info]   CI (99.9%): [116843.345, 120064.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2201.012 ±(99.9%) 30.435 MB/sec [Average]
[info]   (min, avg, max) = (2191.816, 2201.012, 2209.579), stdev = 7.904
[info]   CI (99.9%): [2170.577, 2231.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29240.004, 29240.004, 29240.004), stdev = 0.001
[info]   CI (99.9%): [29240.003, 29240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.606 ±(99.9%) 719.899 MB/sec [Average]
[info]   (min, avg, max) = (2011.008, 2162.606, 2374.480), stdev = 186.955
[info]   CI (99.9%): [1442.707, 2882.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28733.088 ±(99.9%) 9741.491 B/op [Average]
[info]   (min, avg, max) = (26620.365, 28733.088, 31578.384), stdev = 2529.834
[info]   CI (99.9%): [18991.597, 38474.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.270 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.208), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.549 ±(99.9%) 3.583 B/op [Average]
[info]   (min, avg, max) = (0.551, 1.549, 2.773), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 5.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 41.08% complete, ETA 00:51:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9919.161 ops/s
[info] # Warmup Iteration   2: 329505.735 ops/s
[info] # Warmup Iteration   3: 329332.636 ops/s
[info] Iteration   1: 331546.003 ops/s
[info]                  ·gc.alloc.rate:                   663.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3064.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 332153.370 ops/s
[info]                  ·gc.alloc.rate:                   665.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3074.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 332357.508 ops/s
[info]                  ·gc.alloc.rate:                   665.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3081.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 331944.364 ops/s
[info]                  ·gc.alloc.rate:                   664.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3098.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 331858.162 ops/s
[info]                  ·gc.alloc.rate:                   664.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3108.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   331971.881 ±(99.9%) 1181.695 ops/s [Average]
[info]   (min, avg, max) = (331546.003, 331971.881, 332357.508), stdev = 306.883
[info]   CI (99.9%): [330790.186, 333153.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   664.901 ±(99.9%) 2.467 MB/sec [Average]
[info]   (min, avg, max) = (663.974, 664.901, 665.616), stdev = 0.641
[info]   CI (99.9%): [662.434, 667.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   650.869 ±(99.9%) 15.146 MB/sec [Average]
[info]   (min, avg, max) = (645.457, 650.869, 655.476), stdev = 3.933
[info]   CI (99.9%): [635.723, 666.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3085.480 ±(99.9%) 69.268 B/op [Average]
[info]   (min, avg, max) = (3064.098, 3085.480, 3108.633), stdev = 17.989
[info]   CI (99.9%): [3016.212, 3154.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.021, 0.046), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.100 ±(99.9%) 0.271 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.100, 0.219), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.32% complete, ETA 00:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167963.324 ops/s
[info] # Warmup Iteration   2: 245428.705 ops/s
[info] # Warmup Iteration   3: 244151.188 ops/s
[info] Iteration   1: 245848.923 ops/s
[info]                  ·gc.alloc.rate:                   539.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3729.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 246831.724 ops/s
[info]                  ·gc.alloc.rate:                   542.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4168.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 247176.997 ops/s
[info]                  ·gc.alloc.rate:               542.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2082.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 246404.333 ops/s
[info]                  ·gc.alloc.rate:                   541.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4178.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 247613.408 ops/s
[info]                  ·gc.alloc.rate:               543.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4166.477 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   246775.077 ±(99.9%) 2627.737 ops/s [Average]
[info]   (min, avg, max) = (245848.923, 246775.077, 247613.408), stdev = 682.415
[info]   CI (99.9%): [244147.340, 249402.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   541.920 ±(99.9%) 5.724 MB/sec [Average]
[info]   (min, avg, max) = (539.828, 541.920, 543.736), stdev = 1.487
[info]   CI (99.9%): [536.195, 547.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.002, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   574.660 ±(99.9%) 546.334 MB/sec [Average]
[info]   (min, avg, max) = (327.068, 574.660, 655.516), stdev = 141.881
[info]   CI (99.9%): [28.326, 1120.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3665.110 ±(99.9%) 3485.333 B/op [Average]
[info]   (min, avg, max) = (2082.570, 3665.110, 4178.272), stdev = 905.130
[info]   CI (99.9%): [179.778, 7150.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.448 ±(99.9%) 3.591 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.448, 2.115), stdev = 0.933
[info]   CI (99.9%): [≈ 0, 4.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.868 ±(99.9%) 22.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.868, 13.541), stdev = 5.971
[info]   CI (99.9%): [≈ 0, 25.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.56% complete, ETA 00:50:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458045.207 ops/s
[info] # Warmup Iteration   2: 486430.348 ops/s
[info] # Warmup Iteration   3: 488282.914 ops/s
[info] Iteration   1: 491477.313 ops/s
[info]                  ·gc.alloc.rate:                   619.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2128.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 490845.839 ops/s
[info]                  ·gc.alloc.rate:                   618.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2131.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 487610.264 ops/s
[info]                  ·gc.alloc.rate:                   614.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2145.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 487712.760 ops/s
[info]                  ·gc.alloc.rate:               614.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2145.382 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 491026.313 ops/s
[info]                  ·gc.alloc.rate:                   618.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2135.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   489734.498 ±(99.9%) 7341.781 ops/s [Average]
[info]   (min, avg, max) = (487610.264, 489734.498, 491477.313), stdev = 1906.637
[info]   CI (99.9%): [482392.717, 497076.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   617.402 ±(99.9%) 9.469 MB/sec [Average]
[info]   (min, avg, max) = (614.673, 617.402, 619.705), stdev = 2.459
[info]   CI (99.9%): [607.933, 626.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.130 ±(99.9%) 2.225 MB/sec [Average]
[info]   (min, avg, max) = (664.799, 665.130, 666.156), stdev = 0.578
[info]   CI (99.9%): [662.906, 667.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2137.399 ±(99.9%) 30.126 B/op [Average]
[info]   (min, avg, max) = (2128.932, 2137.399, 2145.857), stdev = 7.824
[info]   CI (99.9%): [2107.273, 2167.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.348 ±(99.9%) 2.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.574), stdev = 0.686
[info]   CI (99.9%): [≈ 0, 2.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.115 ±(99.9%) 8.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.115, 5.040), stdev = 2.197
[info]   CI (99.9%): [≈ 0, 9.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.81% complete, ETA 00:50:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40919.978 ops/s
[info] # Warmup Iteration   2: 68097.811 ops/s
[info] # Warmup Iteration   3: 68576.920 ops/s
[info] Iteration   1: 68897.189 ops/s
[info]                  ·gc.alloc.rate:                   2984.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3018.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68956.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.378 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 67830.082 ops/s
[info]                  ·gc.alloc.rate:                   2938.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3041.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70550.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.830 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 68931.967 ops/s
[info]                  ·gc.alloc.rate:                   2985.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3053.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69720.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.376 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 68551.902 ops/s
[info]                  ·gc.alloc.rate:                   2969.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70231.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.302 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 67951.815 ops/s
[info]                  ·gc.alloc.rate:                   2943.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63071.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.446 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68432.591 ±(99.9%) 1994.940 ops/s [Average]
[info]   (min, avg, max) = (67830.082, 68432.591, 68931.967), stdev = 518.080
[info]   CI (99.9%): [66437.651, 70427.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2964.204 ±(99.9%) 84.946 MB/sec [Average]
[info]   (min, avg, max) = (2938.652, 2964.204, 2985.627), stdev = 22.060
[info]   CI (99.9%): [2879.258, 3049.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68168.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68168.006, 68168.007), stdev = 0.001
[info]   CI (99.9%): [68168.006, 68168.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2979.200 ±(99.9%) 553.387 MB/sec [Average]
[info]   (min, avg, max) = (2723.629, 2979.200, 3058.880), stdev = 143.713
[info]   CI (99.9%): [2425.812, 3532.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68505.968 ±(99.9%) 11926.238 B/op [Average]
[info]   (min, avg, max) = (63071.313, 68505.968, 70550.628), stdev = 3097.206
[info]   CI (99.9%): [56579.730, 80432.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.208), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.066 ±(99.9%) 5.517 B/op [Average]
[info]   (min, avg, max) = (1.446, 3.066, 4.830), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 8.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.05% complete, ETA 00:50:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136451.693 ops/s
[info] # Warmup Iteration   2: 176729.170 ops/s
[info] # Warmup Iteration   3: 182211.506 ops/s
[info] Iteration   1: 181699.625 ops/s
[info]                  ·gc.alloc.rate:                   1853.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17276.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 182151.535 ops/s
[info]                  ·gc.alloc.rate:                   1858.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14458.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 180735.616 ops/s
[info]                  ·gc.alloc.rate:                   1843.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17584.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 180007.337 ops/s
[info]                  ·gc.alloc.rate:                   1836.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14773.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.546 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 179520.455 ops/s
[info]                  ·gc.alloc.rate:                   1832.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17824.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.913 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   180822.914 ±(99.9%) 4263.205 ops/s [Average]
[info]   (min, avg, max) = (179520.455, 180822.914, 182151.535), stdev = 1107.141
[info]   CI (99.9%): [176559.709, 185086.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1844.892 ±(99.9%) 42.956 MB/sec [Average]
[info]   (min, avg, max) = (1832.176, 1844.892, 1858.506), stdev = 11.156
[info]   CI (99.9%): [1801.936, 1887.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   16056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16056.002, 16056.002, 16056.003), stdev = 0.001
[info]   CI (99.9%): [16056.002, 16056.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1882.234 ±(99.9%) 707.479 MB/sec [Average]
[info]   (min, avg, max) = (1673.621, 1882.234, 2034.010), stdev = 183.730
[info]   CI (99.9%): [1174.755, 2589.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16383.614 ±(99.9%) 6272.088 B/op [Average]
[info]   (min, avg, max) = (14458.751, 16383.614, 17824.741), stdev = 1628.841
[info]   CI (99.9%): [10111.526, 22655.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.761 ±(99.9%) 0.901 B/op [Average]
[info]   (min, avg, max) = (0.544, 0.761, 1.079), stdev = 0.234
[info]   CI (99.9%): [≈ 0, 1.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 42.30% complete, ETA 00:50:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8482.651 ops/s
[info] # Warmup Iteration   2: 760630.408 ops/s
[info] # Warmup Iteration   3: 767483.164 ops/s
[info] Iteration   1: 745369.425 ops/s
[info]                  ·gc.alloc.rate:                   583.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          578.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1221.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 758452.122 ops/s
[info]                  ·gc.alloc.rate:                   593.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1342.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 761276.790 ops/s
[info]                  ·gc.alloc.rate:               595.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      649.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1342.619 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 760869.627 ops/s
[info]                  ·gc.alloc.rate:                   595.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1348.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 759896.633 ops/s
[info]                  ·gc.alloc.rate:                   594.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1355.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   757172.920 ±(99.9%) 25750.765 ops/s [Average]
[info]   (min, avg, max) = (745369.425, 757172.920, 761276.790), stdev = 6687.392
[info]   CI (99.9%): [731422.154, 782923.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   592.786 ±(99.9%) 19.796 MB/sec [Average]
[info]   (min, avg, max) = (583.726, 592.786, 595.938), stdev = 5.141
[info]   CI (99.9%): [572.990, 612.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   636.369 ±(99.9%) 124.427 MB/sec [Average]
[info]   (min, avg, max) = (578.799, 636.369, 654.512), stdev = 32.313
[info]   CI (99.9%): [511.943, 760.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1322.196 ±(99.9%) 217.554 B/op [Average]
[info]   (min, avg, max) = (1221.602, 1322.196, 1355.593), stdev = 56.498
[info]   CI (99.9%): [1104.643, 1539.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.027 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.129), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.54% complete, ETA 00:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343750.442 ops/s
[info] # Warmup Iteration   2: 484724.592 ops/s
[info] # Warmup Iteration   3: 469360.716 ops/s
[info] Iteration   1: 477697.477 ops/s
[info]                  ·gc.alloc.rate:                   490.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1919.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 486076.071 ops/s
[info]                  ·gc.alloc.rate:                   499.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1057.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 484086.704 ops/s
[info]                  ·gc.alloc.rate:                   497.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2126.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 488154.924 ops/s
[info]                  ·gc.alloc.rate:                   501.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1055.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 483608.633 ops/s
[info]                  ·gc.alloc.rate:                   496.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2133.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   483924.762 ±(99.9%) 15089.863 ops/s [Average]
[info]   (min, avg, max) = (477697.477, 483924.762, 488154.924), stdev = 3918.789
[info]   CI (99.9%): [468834.899, 499014.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   496.908 ±(99.9%) 15.489 MB/sec [Average]
[info]   (min, avg, max) = (490.464, 496.908, 501.202), stdev = 4.022
[info]   CI (99.9%): [481.419, 512.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.318 ±(99.9%) 650.670 MB/sec [Average]
[info]   (min, avg, max) = (326.744, 509.318, 655.780), stdev = 168.977
[info]   CI (99.9%): [≈ 0, 1159.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1658.607 ±(99.9%) 2141.228 B/op [Average]
[info]   (min, avg, max) = (1055.631, 1658.607, 2133.323), stdev = 556.070
[info]   CI (99.9%): [≈ 0, 3799.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.435 ±(99.9%) 3.526 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.435, 2.073), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.434 ±(99.9%) 11.619 B/op [Average]
[info]   (min, avg, max) = (0.067, 1.434, 6.831), stdev = 3.018
[info]   CI (99.9%): [≈ 0, 13.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.817
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.79% complete, ETA 00:49:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 574672.211 ops/s
[info] # Warmup Iteration   2: 660538.405 ops/s
[info] # Warmup Iteration   3: 614757.756 ops/s
[info] Iteration   1: 613779.287 ops/s
[info]                  ·gc.alloc.rate:                   480.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1506.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 619188.684 ops/s
[info]                  ·gc.alloc.rate:                   484.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 618402.001 ops/s
[info]                  ·gc.alloc.rate:                   484.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1685.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 619849.990 ops/s
[info]                  ·gc.alloc.rate:                   485.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     840.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 614724.913 ops/s
[info]                  ·gc.alloc.rate:                   481.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1696.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   617188.975 ±(99.9%) 10589.069 ops/s [Average]
[info]   (min, avg, max) = (613779.287, 617188.975, 619849.990), stdev = 2749.947
[info]   CI (99.9%): [606599.907, 627778.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   483.113 ±(99.9%) 8.300 MB/sec [Average]
[info]   (min, avg, max) = (480.426, 483.113, 485.205), stdev = 2.156
[info]   CI (99.9%): [474.812, 491.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.052 ±(99.9%) 656.228 MB/sec [Average]
[info]   (min, avg, max) = (331.066, 515.052, 662.817), stdev = 170.420
[info]   CI (99.9%): [≈ 0, 1171.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1314.535 ±(99.9%) 1686.470 B/op [Average]
[info]   (min, avg, max) = (840.621, 1314.535, 1696.990), stdev = 437.971
[info]   CI (99.9%): [≈ 0, 3001.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.890 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.388, 1.730), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.993 ±(99.9%) 7.413 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.993, 4.436), stdev = 1.925
[info]   CI (99.9%): [≈ 0, 8.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.03% complete, ETA 00:49:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 623258.096 ops/s
[info] # Warmup Iteration   2: 679539.455 ops/s
[info] # Warmup Iteration   3: 696772.499 ops/s
[info] Iteration   1: 696687.350 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 696564.629 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 696544.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 696139.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 694194.783 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   696026.149 ±(99.9%) 4021.419 ops/s [Average]
[info]   (min, avg, max) = (694194.783, 696026.149, 696687.350), stdev = 1044.350
[info]   CI (99.9%): [692004.730, 700047.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.28% complete, ETA 00:49:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19271.345 ops/s
[info] # Warmup Iteration   2: 26919.323 ops/s
[info] # Warmup Iteration   3: 27574.142 ops/s
[info] Iteration   1: 27215.756 ops/s
[info]                  ·gc.alloc.rate:                   1496.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              86528.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95477.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.223 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27274.809 ops/s
[info]                  ·gc.alloc.rate:                   1500.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              86517.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76682.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.805 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27372.015 ops/s
[info]                  ·gc.alloc.rate:                   1504.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96063.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.591 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27742.784 ops/s
[info]                  ·gc.alloc.rate:                   1525.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76185.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.724 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27710.053 ops/s
[info]                  ·gc.alloc.rate:                   1523.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95761.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.912 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27463.083 ±(99.9%) 951.308 ops/s [Average]
[info]   (min, avg, max) = (27215.756, 27463.083, 27742.784), stdev = 247.052
[info]   CI (99.9%): [26511.776, 28414.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1509.876 ±(99.9%) 51.723 MB/sec [Average]
[info]   (min, avg, max) = (1496.141, 1509.876, 1525.147), stdev = 13.432
[info]   CI (99.9%): [1458.153, 1561.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86516.343 ±(99.9%) 26.826 B/op [Average]
[info]   (min, avg, max) = (86512.016, 86516.343, 86528.016), stdev = 6.967
[info]   CI (99.9%): [86489.517, 86543.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1536.116 ±(99.9%) 704.272 MB/sec [Average]
[info]   (min, avg, max) = (1329.493, 1536.116, 1686.062), stdev = 182.897
[info]   CI (99.9%): [831.843, 2240.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88034.278 ±(99.9%) 40788.706 B/op [Average]
[info]   (min, avg, max) = (76185.866, 88034.278, 96063.289), stdev = 10592.697
[info]   CI (99.9%): [47245.572, 128822.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.251 ±(99.9%) 5.293 B/op [Average]
[info]   (min, avg, max) = (3.591, 5.251, 7.223), stdev = 1.375
[info]   CI (99.9%): [≈ 0, 10.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.52% complete, ETA 00:49:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5164.460 ops/s
[info] # Warmup Iteration   2: 7035.552 ops/s
[info] # Warmup Iteration   3: 7290.655 ops/s
[info] Iteration   1: 7258.115 ops/s
[info]                  ·gc.alloc.rate:                   1147.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287419.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7245.700 ops/s
[info]                  ·gc.alloc.rate:                   1146.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216530.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7127.073 ops/s
[info]                  ·gc.alloc.rate:                   1126.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294507.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7172.817 ops/s
[info]                  ·gc.alloc.rate:                   1134.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220310.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7061.062 ops/s
[info]                  ·gc.alloc.rate:                   1116.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224546.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7172.954 ±(99.9%) 317.353 ops/s [Average]
[info]   (min, avg, max) = (7061.062, 7172.954, 7258.115), stdev = 82.416
[info]   CI (99.9%): [6855.601, 7490.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1134.311 ±(99.9%) 50.446 MB/sec [Average]
[info]   (min, avg, max) = (1116.609, 1134.311, 1147.781), stdev = 13.101
[info]   CI (99.9%): [1083.865, 1184.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248864.061 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (248864.060, 248864.061, 248864.064), stdev = 0.002
[info]   CI (99.9%): [248864.055, 248864.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1133.583 ±(99.9%) 689.263 MB/sec [Average]
[info]   (min, avg, max) = (997.118, 1133.583, 1333.598), stdev = 179.000
[info]   CI (99.9%): [444.320, 1822.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   248662.832 ±(99.9%) 149405.218 B/op [Average]
[info]   (min, avg, max) = (216530.148, 248662.832, 294507.457), stdev = 38800.061
[info]   CI (99.9%): [99257.614, 398068.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.200 ±(99.9%) 19.057 B/op [Average]
[info]   (min, avg, max) = (4.522, 8.200, 13.701), stdev = 4.949
[info]   CI (99.9%): [≈ 0, 27.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.77% complete, ETA 00:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4071.271 ops/s
[info] # Warmup Iteration   2: 7223.084 ops/s
[info] # Warmup Iteration   3: 7489.912 ops/s
[info] Iteration   1: 7289.065 ops/s
[info]                  ·gc.alloc.rate:                   1064.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282602.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.966 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7529.880 ops/s
[info]                  ·gc.alloc.rate:                   1100.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205900.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7544.956 ops/s
[info]                  ·gc.alloc.rate:                   1101.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206533.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7472.881 ops/s
[info]                  ·gc.alloc.rate:                   1091.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279433.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.535 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7509.474 ops/s
[info]                  ·gc.alloc.rate:                   1096.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209617.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   7469.251 ±(99.9%) 401.581 ops/s [Average]
[info]   (min, avg, max) = (7289.065, 7469.251, 7544.956), stdev = 104.289
[info]   CI (99.9%): [7067.670, 7870.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1090.926 ±(99.9%) 58.894 MB/sec [Average]
[info]   (min, avg, max) = (1064.519, 1090.926, 1101.896), stdev = 15.295
[info]   CI (99.9%): [1032.032, 1149.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   229848.060 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (229848.057, 229848.060, 229848.064), stdev = 0.003
[info]   CI (99.9%): [229848.049, 229848.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1122.298 ±(99.9%) 688.149 MB/sec [Average]
[info]   (min, avg, max) = (985.518, 1122.298, 1326.866), stdev = 178.710
[info]   CI (99.9%): [434.149, 1810.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   236817.392 ±(99.9%) 155524.331 B/op [Average]
[info]   (min, avg, max) = (205900.678, 236817.392, 282602.090), stdev = 40389.175
[info]   CI (99.9%): [81293.061, 392341.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.606 ±(99.9%) 21.898 B/op [Average]
[info]   (min, avg, max) = (13.026, 17.606, 26.966), stdev = 5.687
[info]   CI (99.9%): [≈ 0, 39.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.01% complete, ETA 00:48:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93880.527 ops/s
[info] # Warmup Iteration   2: 103367.992 ops/s
[info] # Warmup Iteration   3: 106093.136 ops/s
[info] Iteration   1: 105900.499 ops/s
[info]                  ·gc.alloc.rate:                   1025.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14825.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 104093.134 ops/s
[info]                  ·gc.alloc.rate:                   1008.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15102.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 105275.527 ops/s
[info]                  ·gc.alloc.rate:                   1020.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14977.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101427.094 ops/s
[info]                  ·gc.alloc.rate:                   983.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15587.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 103905.699 ops/s
[info]                  ·gc.alloc.rate:                   1006.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15261.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   104120.391 ±(99.9%) 6614.765 ops/s [Average]
[info]   (min, avg, max) = (101427.094, 104120.391, 105900.499), stdev = 1717.833
[info]   CI (99.9%): [97505.626, 110735.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1008.879 ±(99.9%) 63.502 MB/sec [Average]
[info]   (min, avg, max) = (983.096, 1008.879, 1025.926), stdev = 16.491
[info]   CI (99.9%): [945.377, 1072.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1002.214 ±(99.9%) 16.095 MB/sec [Average]
[info]   (min, avg, max) = (997.489, 1002.214, 1007.593), stdev = 4.180
[info]   CI (99.9%): [986.119, 1018.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15151.040 ±(99.9%) 1124.779 B/op [Average]
[info]   (min, avg, max) = (14825.357, 15151.040, 15587.597), stdev = 292.101
[info]   CI (99.9%): [14026.261, 16275.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.129 ±(99.9%) 2.021 B/op [Average]
[info]   (min, avg, max) = (0.323, 1.129, 1.577), stdev = 0.525
[info]   CI (99.9%): [≈ 0, 3.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.25% complete, ETA 00:48:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3490.475 ops/s
[info] # Warmup Iteration   2: 6983.875 ops/s
[info] # Warmup Iteration   3: 7173.613 ops/s
[info] Iteration   1: 7126.049 ops/s
[info]                  ·gc.alloc.rate:                   1300.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290208.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.793 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7020.079 ops/s
[info]                  ·gc.alloc.rate:                   1281.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     296115.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.999 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7189.706 ops/s
[info]                  ·gc.alloc.rate:                   1312.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290833.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.227 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7198.055 ops/s
[info]                  ·gc.alloc.rate:                   1313.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292072.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7196.518 ops/s
[info]                  ·gc.alloc.rate:                   1313.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293391.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.657 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7146.081 ±(99.9%) 294.682 ops/s [Average]
[info]   (min, avg, max) = (7020.079, 7146.081, 7198.055), stdev = 76.528
[info]   CI (99.9%): [6851.399, 7440.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1304.353 ±(99.9%) 54.079 MB/sec [Average]
[info]   (min, avg, max) = (1281.281, 1304.353, 1313.902), stdev = 14.044
[info]   CI (99.9%): [1250.275, 1358.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   287248.062 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (287248.060, 287248.062, 287248.066), stdev = 0.003
[info]   CI (99.9%): [287248.051, 287248.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1328.254 ±(99.9%) 43.316 MB/sec [Average]
[info]   (min, avg, max) = (1313.971, 1328.254, 1342.003), stdev = 11.249
[info]   CI (99.9%): [1284.938, 1371.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   292524.349 ±(99.9%) 9046.466 B/op [Average]
[info]   (min, avg, max) = (290208.525, 292524.349, 296115.951), stdev = 2349.339
[info]   CI (99.9%): [283477.883, 301570.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.666 ±(99.9%) 7.685 B/op [Average]
[info]   (min, avg, max) = (13.653, 14.666, 18.227), stdev = 1.996
[info]   CI (99.9%): [6.981, 22.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.50% complete, ETA 00:48:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11950.677 ops/s
[info] # Warmup Iteration   2: 16202.891 ops/s
[info] # Warmup Iteration   3: 16919.352 ops/s
[info] Iteration   1: 16637.328 ops/s
[info]                  ·gc.alloc.rate:                   981.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              92809.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93451.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16612.766 ops/s
[info]                  ·gc.alloc.rate:                   980.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93870.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16975.784 ops/s
[info]                  ·gc.alloc.rate:                   1001.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92116.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.720 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16679.222 ops/s
[info]                  ·gc.alloc.rate:                   984.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              92862.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94185.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16856.622 ops/s
[info]                  ·gc.alloc.rate:                   994.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93507.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.831 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   16752.344 ±(99.9%) 605.351 ops/s [Average]
[info]   (min, avg, max) = (16612.766, 16752.344, 16975.784), stdev = 157.208
[info]   CI (99.9%): [16146.994, 17357.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   988.374 ±(99.9%) 35.993 MB/sec [Average]
[info]   (min, avg, max) = (980.579, 988.374, 1001.978), stdev = 9.347
[info]   CI (99.9%): [952.381, 1024.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92844.780 ±(99.9%) 128.154 B/op [Average]
[info]   (min, avg, max) = (92808.028, 92844.780, 92872.028), stdev = 33.281
[info]   CI (99.9%): [92716.627, 92972.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   994.513 ±(99.9%) 21.030 MB/sec [Average]
[info]   (min, avg, max) = (987.871, 994.513, 1001.574), stdev = 5.461
[info]   CI (99.9%): [973.483, 1015.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   93426.289 ±(99.9%) 3042.174 B/op [Average]
[info]   (min, avg, max) = (92116.333, 93426.289, 94185.167), stdev = 790.043
[info]   CI (99.9%): [90384.115, 96468.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.862 ±(99.9%) 9.175 B/op [Average]
[info]   (min, avg, max) = (1.964, 5.862, 7.877), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 15.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.74% complete, ETA 00:48:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12183.323 ops/s
[info] # Warmup Iteration   2: 18263.584 ops/s
[info] # Warmup Iteration   3: 18492.977 ops/s
[info] Iteration   1: 18880.843 ops/s
[info]                  ·gc.alloc.rate:                   885.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81791.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.147 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19005.210 ops/s
[info]                  ·gc.alloc.rate:                   891.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54227.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18965.349 ops/s
[info]                  ·gc.alloc.rate:                   889.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81756.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18972.886 ops/s
[info]                  ·gc.alloc.rate:                   889.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82141.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18623.272 ops/s
[info]                  ·gc.alloc.rate:               873.664 MB/sec
[info]                  ·gc.alloc.rate.norm:          73808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55983.724 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   18889.512 ±(99.9%) 599.785 ops/s [Average]
[info]   (min, avg, max) = (18623.272, 18889.512, 19005.210), stdev = 155.762
[info]   CI (99.9%): [18289.727, 19489.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   885.989 ±(99.9%) 27.888 MB/sec [Average]
[info]   (min, avg, max) = (873.664, 885.989, 891.396), stdev = 7.242
[info]   CI (99.9%): [858.102, 913.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   73808.026 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (73808.023, 73808.026, 73808.031), stdev = 0.003
[info]   CI (99.9%): [73808.013, 73808.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   854.905 ±(99.9%) 689.540 MB/sec [Average]
[info]   (min, avg, max) = (654.914, 854.905, 990.207), stdev = 179.071
[info]   CI (99.9%): [165.364, 1544.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   71180.057 ±(99.9%) 56558.044 B/op [Average]
[info]   (min, avg, max) = (54227.178, 71180.057, 82141.032), stdev = 14687.945
[info]   CI (99.9%): [14622.012, 127738.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.191 ±(99.9%) 17.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.191, 12.147), stdev = 4.426
[info]   CI (99.9%): [≈ 0, 22.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.99% complete, ETA 00:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 428930.033 ops/s
[info] # Warmup Iteration   2: 484410.238 ops/s
[info] # Warmup Iteration   3: 490222.630 ops/s
[info] Iteration   1: 484544.701 ops/s
[info]                  ·gc.alloc.rate:                   1098.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3231.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 481798.190 ops/s
[info]                  ·gc.alloc.rate:                   1092.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3256.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 488686.243 ops/s
[info]                  ·gc.alloc.rate:                   1107.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4295.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 489626.948 ops/s
[info]                  ·gc.alloc.rate:                   1109.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3227.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 484230.309 ops/s
[info]                  ·gc.alloc.rate:                   1097.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3274.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   485777.278 ±(99.9%) 12629.222 ops/s [Average]
[info]   (min, avg, max) = (481798.190, 485777.278, 489626.948), stdev = 3279.769
[info]   CI (99.9%): [473148.056, 498406.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1101.336 ±(99.9%) 28.205 MB/sec [Average]
[info]   (min, avg, max) = (1092.622, 1101.336, 1109.985), stdev = 7.325
[info]   CI (99.9%): [1073.131, 1129.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1067.489 ±(99.9%) 573.229 MB/sec [Average]
[info]   (min, avg, max) = (994.871, 1067.489, 1333.631), stdev = 148.866
[info]   CI (99.9%): [494.260, 1640.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3457.157 ±(99.9%) 1805.187 B/op [Average]
[info]   (min, avg, max) = (3227.867, 3457.157, 4295.077), stdev = 468.801
[info]   CI (99.9%): [1651.970, 5262.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 0.284 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.189, 0.268), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.23% complete, ETA 00:47:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471128.463 ops/s
[info] # Warmup Iteration   2: 525410.944 ops/s
[info] # Warmup Iteration   3: 523272.040 ops/s
[info] Iteration   1: 523848.783 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 522757.021 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 522574.134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 522501.700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 520560.468 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   522448.421 ±(99.9%) 4572.084 ops/s [Average]
[info]   (min, avg, max) = (520560.468, 522448.421, 523848.783), stdev = 1187.356
[info]   CI (99.9%): [517876.337, 527020.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.48% complete, ETA 00:47:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13312.071 ops/s
[info] # Warmup Iteration   2: 17901.220 ops/s
[info] # Warmup Iteration   3: 17864.299 ops/s
[info] Iteration   1: 18349.027 ops/s
[info]                  ·gc.alloc.rate:                   929.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56365.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18397.509 ops/s
[info]                  ·gc.alloc.rate:                   931.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84427.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18424.465 ops/s
[info]                  ·gc.alloc.rate:                   932.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84640.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18390.287 ops/s
[info]                  ·gc.alloc.rate:                   931.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              79677.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85077.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18151.983 ops/s
[info]                  ·gc.alloc.rate:                   918.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              79672.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86601.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18342.654 ±(99.9%) 423.426 ops/s [Average]
[info]   (min, avg, max) = (18151.983, 18342.654, 18424.465), stdev = 109.962
[info]   CI (99.9%): [17919.228, 18766.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   928.734 ±(99.9%) 21.820 MB/sec [Average]
[info]   (min, avg, max) = (918.901, 928.734, 932.869), stdev = 5.667
[info]   CI (99.9%): [906.914, 950.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79682.727 ±(99.9%) 28.937 B/op [Average]
[info]   (min, avg, max) = (79672.024, 79682.727, 79688.032), stdev = 7.515
[info]   CI (99.9%): [79653.790, 79711.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   925.637 ±(99.9%) 578.201 MB/sec [Average]
[info]   (min, avg, max) = (657.141, 925.637, 998.824), stdev = 150.157
[info]   CI (99.9%): [347.436, 1503.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79422.539 ±(99.9%) 49739.706 B/op [Average]
[info]   (min, avg, max) = (56365.531, 79422.539, 86601.659), stdev = 12917.244
[info]   CI (99.9%): [29682.833, 129162.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.781 ±(99.9%) 12.241 B/op [Average]
[info]   (min, avg, max) = (3.556, 6.781, 10.685), stdev = 3.179
[info]   CI (99.9%): [≈ 0, 19.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.72% complete, ETA 00:47:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8492.235 ops/s
[info] # Warmup Iteration   2: 11456.221 ops/s
[info] # Warmup Iteration   3: 11831.132 ops/s
[info] Iteration   1: 11868.068 ops/s
[info]                  ·gc.alloc.rate:                   1223.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175793.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11698.845 ops/s
[info]                  ·gc.alloc.rate:                   1206.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134163.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11786.716 ops/s
[info]                  ·gc.alloc.rate:                   1215.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              162255.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178246.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.898 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11717.872 ops/s
[info]                  ·gc.alloc.rate:                   1208.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180026.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11910.483 ops/s
[info]                  ·gc.alloc.rate:                   1228.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133316.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.253 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11796.397 ±(99.9%) 354.639 ops/s [Average]
[info]   (min, avg, max) = (11698.845, 11796.397, 11910.483), stdev = 92.099
[info]   CI (99.9%): [11441.758, 12151.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1216.489 ±(99.9%) 36.312 MB/sec [Average]
[info]   (min, avg, max) = (1206.655, 1216.489, 1228.268), stdev = 9.430
[info]   CI (99.9%): [1180.177, 1252.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   162255.985 ±(99.9%) 30.808 B/op [Average]
[info]   (min, avg, max) = (162248.037, 162255.985, 162264.040), stdev = 8.001
[info]   CI (99.9%): [162225.177, 162286.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.737 ±(99.9%) 697.405 MB/sec [Average]
[info]   (min, avg, max) = (997.791, 1201.737, 1340.451), stdev = 181.114
[info]   CI (99.9%): [504.332, 1899.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   160309.430 ±(99.9%) 93580.445 B/op [Average]
[info]   (min, avg, max) = (133316.685, 160309.430, 180026.872), stdev = 24302.544
[info]   CI (99.9%): [66728.985, 253889.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.766 ±(99.9%) 15.816 B/op [Average]
[info]   (min, avg, max) = (2.796, 7.766, 13.898), stdev = 4.107
[info]   CI (99.9%): [≈ 0, 23.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.97% complete, ETA 00:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7186.970 ops/s
[info] # Warmup Iteration   2: 11700.815 ops/s
[info] # Warmup Iteration   3: 12150.411 ops/s
[info] Iteration   1: 11971.322 ops/s
[info]                  ·gc.alloc.rate:                   1110.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129079.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12147.054 ops/s
[info]                  ·gc.alloc.rate:                   1127.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170332.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12112.948 ops/s
[info]                  ·gc.alloc.rate:                   1124.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              146063.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128745.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12185.990 ops/s
[info]                  ·gc.alloc.rate:                   1131.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128663.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12175.729 ops/s
[info]                  ·gc.alloc.rate:                   1130.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172552.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.763 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12118.609 ±(99.9%) 335.346 ops/s [Average]
[info]   (min, avg, max) = (11971.322, 12118.609, 12185.990), stdev = 87.088
[info]   CI (99.9%): [11783.263, 12453.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1124.839 ±(99.9%) 31.832 MB/sec [Average]
[info]   (min, avg, max) = (1110.906, 1124.839, 1131.107), stdev = 8.267
[info]   CI (99.9%): [1093.007, 1156.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   146063.957 ±(99.9%) 61.613 B/op [Average]
[info]   (min, avg, max) = (146048.036, 146063.957, 146080.035), stdev = 16.001
[info]   CI (99.9%): [146002.343, 146125.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.867 ±(99.9%) 708.510 MB/sec [Average]
[info]   (min, avg, max) = (981.837, 1123.867, 1335.396), stdev = 183.998
[info]   CI (99.9%): [415.357, 1832.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   145874.701 ±(99.9%) 89926.839 B/op [Average]
[info]   (min, avg, max) = (128663.063, 145874.701, 172552.661), stdev = 23353.714
[info]   CI (99.9%): [55947.862, 235801.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.651 ±(99.9%) 19.957 B/op [Average]
[info]   (min, avg, max) = (2.689, 8.651, 16.183), stdev = 5.183
[info]   CI (99.9%): [≈ 0, 28.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.21% complete, ETA 00:46:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153188.221 ops/s
[info] # Warmup Iteration   2: 169326.946 ops/s
[info] # Warmup Iteration   3: 165417.765 ops/s
[info] Iteration   1: 165741.862 ops/s
[info]                  ·gc.alloc.rate:                   958.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6312.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 171039.697 ops/s
[info]                  ·gc.alloc.rate:                   989.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9182.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 168628.439 ops/s
[info]                  ·gc.alloc.rate:                   975.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9332.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 163695.565 ops/s
[info]                  ·gc.alloc.rate:               947.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1003.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9642.439 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 166272.674 ops/s
[info]                  ·gc.alloc.rate:                   962.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9517.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   167075.647 ±(99.9%) 10886.765 ops/s [Average]
[info]   (min, avg, max) = (163695.565, 167075.647, 171039.697), stdev = 2827.258
[info]   CI (99.9%): [156188.882, 177962.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   966.588 ±(99.9%) 62.776 MB/sec [Average]
[info]   (min, avg, max) = (947.254, 966.588, 989.563), stdev = 16.303
[info]   CI (99.9%): [903.812, 1029.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.003, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   934.346 ±(99.9%) 580.402 MB/sec [Average]
[info]   (min, avg, max) = (664.767, 934.346, 1005.757), stdev = 150.729
[info]   CI (99.9%): [353.944, 1514.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8797.507 ±(99.9%) 5390.746 B/op [Average]
[info]   (min, avg, max) = (6312.950, 8797.507, 9642.439), stdev = 1399.960
[info]   CI (99.9%): [3406.761, 14188.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.584 ±(99.9%) 1.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.584, 1.360), stdev = 0.495
[info]   CI (99.9%): [≈ 0, 2.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.45% complete, ETA 00:46:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4746.142 ops/s
[info] # Warmup Iteration   2: 10850.126 ops/s
[info] # Warmup Iteration   3: 11105.802 ops/s
[info] Iteration   1: 10953.115 ops/s
[info]                  ·gc.alloc.rate:                   1371.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              196928.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234471.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.974 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11134.975 ops/s
[info]                  ·gc.alloc.rate:                   1393.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              196928.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186233.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.711 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10833.724 ops/s
[info]                  ·gc.alloc.rate:                   1355.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              196928.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192567.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.096 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10975.782 ops/s
[info]                  ·gc.alloc.rate:                   1373.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              196928.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191318.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.955 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11162.053 ops/s
[info]                  ·gc.alloc.rate:                   1397.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              196928.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189070.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   11011.930 ±(99.9%) 524.452 ops/s [Average]
[info]   (min, avg, max) = (10833.724, 11011.930, 11162.053), stdev = 136.198
[info]   CI (99.9%): [10487.478, 11536.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1378.141 ±(99.9%) 65.987 MB/sec [Average]
[info]   (min, avg, max) = (1355.501, 1378.141, 1397.206), stdev = 17.137
[info]   CI (99.9%): [1312.154, 1444.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   196928.074 ±(99.9%) 0.290 B/op [Average]
[info]   (min, avg, max) = (196928.039, 196928.074, 196928.208), stdev = 0.075
[info]   CI (99.9%): [196927.783, 196928.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1390.321 ±(99.9%) 523.090 MB/sec [Average]
[info]   (min, avg, max) = (1317.627, 1390.321, 1632.796), stdev = 135.845
[info]   CI (99.9%): [867.230, 1913.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   198732.554 ±(99.9%) 77489.062 B/op [Average]
[info]   (min, avg, max) = (186233.575, 198732.554, 234471.917), stdev = 20123.663
[info]   CI (99.9%): [121243.491, 276221.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.282 ±(99.9%) 14.603 B/op [Average]
[info]   (min, avg, max) = (5.974, 11.282, 14.711), stdev = 3.792
[info]   CI (99.9%): [≈ 0, 25.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.70% complete, ETA 00:46:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19132.455 ops/s
[info] # Warmup Iteration   2: 26759.955 ops/s
[info] # Warmup Iteration   3: 26621.483 ops/s
[info] Iteration   1: 26626.839 ops/s
[info]                  ·gc.alloc.rate:                   1169.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              69120.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58433.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26686.273 ops/s
[info]                  ·gc.alloc.rate:                   1171.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              69080.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78066.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27229.869 ops/s
[info]                  ·gc.alloc.rate:                   1194.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57640.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26980.338 ops/s
[info]                  ·gc.alloc.rate:                   1184.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77929.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.857 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26957.009 ops/s
[info]                  ·gc.alloc.rate:                   1182.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58707.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   26896.065 ±(99.9%) 940.727 ops/s [Average]
[info]   (min, avg, max) = (26626.839, 26896.065, 27229.869), stdev = 244.304
[info]   CI (99.9%): [25955.339, 27836.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1180.656 ±(99.9%) 39.486 MB/sec [Average]
[info]   (min, avg, max) = (1169.392, 1180.656, 1194.761), stdev = 10.254
[info]   CI (99.9%): [1141.170, 1220.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   69073.811 ±(99.9%) 107.825 B/op [Average]
[info]   (min, avg, max) = (69056.016, 69073.811, 69120.016), stdev = 28.002
[info]   CI (99.9%): [68965.985, 69181.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.469 ±(99.9%) 703.516 MB/sec [Average]
[info]   (min, avg, max) = (988.597, 1130.469, 1336.529), stdev = 182.701
[info]   CI (99.9%): [426.953, 1833.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   66155.539 ±(99.9%) 41655.403 B/op [Average]
[info]   (min, avg, max) = (57640.299, 66155.539, 78066.638), stdev = 10817.776
[info]   CI (99.9%): [24500.135, 107810.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.187), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.103 ±(99.9%) 11.166 B/op [Average]
[info]   (min, avg, max) = (3.610, 6.103, 11.050), stdev = 2.900
[info]   CI (99.9%): [≈ 0, 17.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.94% complete, ETA 00:46:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52714.300 ops/s
[info] # Warmup Iteration   2: 81544.841 ops/s
[info] # Warmup Iteration   3: 81233.094 ops/s
[info] Iteration   1: 80937.015 ops/s
[info]                  ·gc.alloc.rate:                   1654.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32079.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.619 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 80785.071 ops/s
[info]                  ·gc.alloc.rate:                   1651.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25904.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.217 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81487.518 ops/s
[info]                  ·gc.alloc.rate:                   1665.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32300.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.010 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 80725.026 ops/s
[info]                  ·gc.alloc.rate:                   1650.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32773.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.218 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 83206.884 ops/s
[info]                  ·gc.alloc.rate:                   1700.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31941.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.969 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   81428.303 ±(99.9%) 4000.116 ops/s [Average]
[info]   (min, avg, max) = (80725.026, 81428.303, 83206.884), stdev = 1038.817
[info]   CI (99.9%): [77428.187, 85428.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1664.399 ±(99.9%) 81.534 MB/sec [Average]
[info]   (min, avg, max) = (1650.476, 1664.399, 1700.700), stdev = 21.174
[info]   CI (99.9%): [1582.864, 1745.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   32168.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32168.005, 32168.005, 32168.006), stdev = 0.001
[info]   CI (99.9%): [32168.004, 32168.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1604.381 ±(99.9%) 594.290 MB/sec [Average]
[info]   (min, avg, max) = (1329.544, 1604.381, 1688.705), stdev = 154.335
[info]   CI (99.9%): [1010.090, 2198.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30999.837 ±(99.9%) 11035.197 B/op [Average]
[info]   (min, avg, max) = (25904.545, 30999.837, 32773.682), stdev = 2865.806
[info]   CI (99.9%): [19964.640, 42035.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.607 ±(99.9%) 1.488 B/op [Average]
[info]   (min, avg, max) = (1.217, 1.607, 2.010), stdev = 0.387
[info]   CI (99.9%): [0.118, 3.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.19% complete, ETA 00:46:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 623460.676 ops/s
[info] # Warmup Iteration   2: 670306.432 ops/s
[info] # Warmup Iteration   3: 678739.676 ops/s
[info] Iteration   1: 679116.392 ops/s
[info]                  ·gc.alloc.rate:                   932.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2301.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 674387.629 ops/s
[info]                  ·gc.alloc.rate:                   925.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2323.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 678536.393 ops/s
[info]                  ·gc.alloc.rate:                   931.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2313.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 684357.642 ops/s
[info]                  ·gc.alloc.rate:                   939.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1533.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 696095.778 ops/s
[info]                  ·gc.alloc.rate:                   955.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2268.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   682498.767 ±(99.9%) 32289.524 ops/s [Average]
[info]   (min, avg, max) = (674387.629, 682498.767, 696095.778), stdev = 8385.487
[info]   CI (99.9%): [650209.243, 714788.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   936.938 ±(99.9%) 44.017 MB/sec [Average]
[info]   (min, avg, max) = (925.901, 936.938, 955.548), stdev = 11.431
[info]   CI (99.9%): [892.920, 980.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   931.550 ±(99.9%) 570.001 MB/sec [Average]
[info]   (min, avg, max) = (666.831, 931.550, 1003.439), stdev = 148.028
[info]   CI (99.9%): [361.549, 1501.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2148.158 ±(99.9%) 1325.506 B/op [Average]
[info]   (min, avg, max) = (1533.510, 2148.158, 2323.384), stdev = 344.230
[info]   CI (99.9%): [822.652, 3473.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.144, 0.194), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.43% complete, ETA 00:45:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 686822.025 ops/s
[info] # Warmup Iteration   2: 764449.158 ops/s
[info] # Warmup Iteration   3: 766078.683 ops/s
[info] Iteration   1: 759815.592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 758479.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 758436.739 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 759365.996 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 760324.935 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   759284.582 ±(99.9%) 3185.631 ops/s [Average]
[info]   (min, avg, max) = (758436.739, 759284.582, 760324.935), stdev = 827.298
[info]   CI (99.9%): [756098.951, 762470.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.68% complete, ETA 00:45:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42721.740 ops/s
[info] # Warmup Iteration   2: 73231.475 ops/s
[info] # Warmup Iteration   3: 74472.215 ops/s
[info] Iteration   1: 74470.672 ops/s
[info]                  ·gc.alloc.rate:                   1796.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              37960.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41785.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.760 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 74139.848 ops/s
[info]                  ·gc.alloc.rate:                   1788.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              37960.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35290.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.326 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 73418.621 ops/s
[info]                  ·gc.alloc.rate:                   1770.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              37960.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35884.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.892 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 74658.736 ops/s
[info]                  ·gc.alloc.rate:                   1800.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              37960.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42592.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.633 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 73409.635 ops/s
[info]                  ·gc.alloc.rate:                   1770.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              37960.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36245.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.446 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   74019.502 ±(99.9%) 2245.005 ops/s [Average]
[info]   (min, avg, max) = (73409.635, 74019.502, 74658.736), stdev = 583.021
[info]   CI (99.9%): [71774.497, 76264.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1785.302 ±(99.9%) 53.763 MB/sec [Average]
[info]   (min, avg, max) = (1770.770, 1785.302, 1800.674), stdev = 13.962
[info]   CI (99.9%): [1731.539, 1839.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37960.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (37960.006, 37960.006, 37960.006), stdev = 0.001
[info]   CI (99.9%): [37960.005, 37960.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1804.935 ±(99.9%) 684.947 MB/sec [Average]
[info]   (min, avg, max) = (1662.376, 1804.935, 2020.443), stdev = 177.879
[info]   CI (99.9%): [1119.988, 2489.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   38359.567 ±(99.9%) 13570.098 B/op [Average]
[info]   (min, avg, max) = (35290.043, 38359.567, 42592.958), stdev = 3524.111
[info]   CI (99.9%): [24789.469, 51929.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.411 ±(99.9%) 3.234 B/op [Average]
[info]   (min, avg, max) = (0.446, 1.411, 2.633), stdev = 0.840
[info]   CI (99.9%): [≈ 0, 4.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.92% complete, ETA 00:45:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4409.050 ops/s
[info] # Warmup Iteration   2: 14286.586 ops/s
[info] # Warmup Iteration   3: 14396.871 ops/s
[info] Iteration   1: 14404.430 ops/s
[info]                  ·gc.alloc.rate:                   759.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              82984.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108591.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14443.459 ops/s
[info]                  ·gc.alloc.rate:                   761.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              82984.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72150.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14357.301 ops/s
[info]                  ·gc.alloc.rate:                   757.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              83000.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72655.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14426.340 ops/s
[info]                  ·gc.alloc.rate:                   761.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              83000.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108515.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14349.944 ops/s
[info]                  ·gc.alloc.rate:                   756.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              83000.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72983.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   14396.295 ±(99.9%) 159.493 ops/s [Average]
[info]   (min, avg, max) = (14349.944, 14396.295, 14443.459), stdev = 41.420
[info]   CI (99.9%): [14236.802, 14555.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   759.277 ±(99.9%) 8.204 MB/sec [Average]
[info]   (min, avg, max) = (756.819, 759.277, 761.560), stdev = 2.130
[info]   CI (99.9%): [751.073, 767.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   82993.745 ±(99.9%) 33.172 B/op [Average]
[info]   (min, avg, max) = (82984.030, 82993.745, 83000.041), stdev = 8.615
[info]   CI (99.9%): [82960.573, 83026.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   795.914 ±(99.9%) 697.982 MB/sec [Average]
[info]   (min, avg, max) = (662.134, 795.914, 995.085), stdev = 181.264
[info]   CI (99.9%): [97.931, 1493.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   86979.267 ±(99.9%) 75845.609 B/op [Average]
[info]   (min, avg, max) = (72150.391, 86979.267, 108591.337), stdev = 19696.864
[info]   CI (99.9%): [11133.658, 162824.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.787 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.381, 1.676), stdev = 0.724
[info]   CI (99.9%): [≈ 0, 3.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   41.627 ±(99.9%) 304.553 B/op [Average]
[info]   (min, avg, max) = (4.537, 41.627, 183.099), stdev = 79.091
[info]   CI (99.9%): [≈ 0, 346.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.17% complete, ETA 00:45:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3686.884 ops/s
[info] # Warmup Iteration   2: 16494.461 ops/s
[info] # Warmup Iteration   3: 16678.933 ops/s
[info] Iteration   1: 16737.200 ops/s
[info]                  ·gc.alloc.rate:                   713.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              67120.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61448.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16481.186 ops/s
[info]                  ·gc.alloc.rate:                   703.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              67136.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62462.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 17062.331 ops/s
[info]                  ·gc.alloc.rate:                   728.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              67152.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60339.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17094.277 ops/s
[info]                  ·gc.alloc.rate:                   729.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              67152.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90616.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16947.828 ops/s
[info]                  ·gc.alloc.rate:               722.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          67131.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61151.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   16864.565 ±(99.9%) 985.519 ops/s [Average]
[info]   (min, avg, max) = (16481.186, 16864.565, 17094.277), stdev = 255.936
[info]   CI (99.9%): [15879.045, 17850.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   719.564 ±(99.9%) 42.536 MB/sec [Average]
[info]   (min, avg, max) = (703.224, 719.564, 729.667), stdev = 11.046
[info]   CI (99.9%): [677.028, 762.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   67138.503 ±(99.9%) 53.059 B/op [Average]
[info]   (min, avg, max) = (67120.028, 67138.503, 67152.035), stdev = 13.779
[info]   CI (99.9%): [67085.444, 67191.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.049 ±(99.9%) 567.429 MB/sec [Average]
[info]   (min, avg, max) = (653.487, 721.049, 984.630), stdev = 147.359
[info]   CI (99.9%): [153.620, 1288.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   67203.947 ±(99.9%) 50482.186 B/op [Average]
[info]   (min, avg, max) = (60339.973, 67203.947, 90616.543), stdev = 13110.063
[info]   CI (99.9%): [16721.761, 117686.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 2.146), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42.299 ±(99.9%) 343.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.299, 201.829), stdev = 89.205
[info]   CI (99.9%): [≈ 0, 385.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.41% complete, ETA 00:44:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96689.420 ops/s
[info] # Warmup Iteration   2: 100450.710 ops/s
[info] # Warmup Iteration   3: 102201.507 ops/s
[info] Iteration   1: 99817.476 ops/s
[info]                  ·gc.alloc.rate:                   250.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4033.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 99482.544 ops/s
[info]                  ·gc.alloc.rate:               249.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4046.766 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 102114.611 ops/s
[info]                  ·gc.alloc.rate:                   256.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3942.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 102399.290 ops/s
[info]                  ·gc.alloc.rate:      257.132 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 102207.410 ops/s
[info]                  ·gc.alloc.rate:                   256.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5123.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   101204.266 ±(99.9%) 5496.658 ops/s [Average]
[info]   (min, avg, max) = (99482.544, 101204.266, 102399.290), stdev = 1427.465
[info]   CI (99.9%): [95707.608, 106700.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   254.146 ±(99.9%) 13.817 MB/sec [Average]
[info]   (min, avg, max) = (249.836, 254.146, 257.132), stdev = 3.588
[info]   CI (99.9%): [240.329, 267.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.005), stdev = 0.001
[info]   CI (99.9%): [3952.004, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   220.049 ±(99.9%) 490.772 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.049, 332.827), stdev = 127.452
[info]   CI (99.9%): [≈ 0, 710.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3429.265 ±(99.9%) 7614.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3429.265, 5123.736), stdev = 1977.416
[info]   CI (99.9%): [≈ 0, 11043.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.308 ±(99.9%) 2.587 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 1.510), stdev = 0.672
[info]   CI (99.9%): [≈ 0, 2.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.744 ±(99.9%) 39.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.744, 23.241), stdev = 10.342
[info]   CI (99.9%): [≈ 0, 44.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.66% complete, ETA 00:44:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2126.887 ops/s
[info] # Warmup Iteration   2: 11167.163 ops/s
[info] # Warmup Iteration   3: 11905.151 ops/s
[info] Iteration   1: 12240.835 ops/s
[info]                  ·gc.alloc.rate:                   952.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              122456.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126372.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.706 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12174.821 ops/s
[info]                  ·gc.alloc.rate:                   947.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              122456.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127186.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.146 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12256.842 ops/s
[info]                  ·gc.alloc.rate:               953.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          122456.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      987.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126763.164 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 12249.902 ops/s
[info]                  ·gc.alloc.rate:                   953.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              122456.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127391.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12252.126 ops/s
[info]                  ·gc.alloc.rate:                   953.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              122456.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127884.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   12234.905 ±(99.9%) 131.260 ops/s [Average]
[info]   (min, avg, max) = (12174.821, 12234.905, 12256.842), stdev = 34.088
[info]   CI (99.9%): [12103.645, 12366.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   952.160 ±(99.9%) 9.727 MB/sec [Average]
[info]   (min, avg, max) = (947.701, 952.160, 953.859), stdev = 2.526
[info]   CI (99.9%): [942.433, 961.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122456.036 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (122456.035, 122456.036, 122456.038), stdev = 0.001
[info]   CI (99.9%): [122456.031, 122456.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   988.422 ±(99.9%) 19.930 MB/sec [Average]
[info]   (min, avg, max) = (983.190, 988.422, 995.626), stdev = 5.176
[info]   CI (99.9%): [968.492, 1008.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   127119.584 ±(99.9%) 2236.560 B/op [Average]
[info]   (min, avg, max) = (126372.122, 127119.584, 127884.514), stdev = 580.827
[info]   CI (99.9%): [124883.024, 129356.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.510 ±(99.9%) 23.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.510, 16.146), stdev = 6.135
[info]   CI (99.9%): [≈ 0, 31.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.90% complete, ETA 00:44:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37196.932 ops/s
[info] # Warmup Iteration   2: 51290.405 ops/s
[info] # Warmup Iteration   3: 50766.509 ops/s
[info] Iteration   1: 51767.747 ops/s
[info]                  ·gc.alloc.rate:                   1551.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40261.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.532 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 51497.393 ops/s
[info]                  ·gc.alloc.rate:                   1543.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50905.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.181 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 51877.926 ops/s
[info]                  ·gc.alloc.rate:                   1554.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50815.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.526 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 51016.333 ops/s
[info]                  ·gc.alloc.rate:                   1529.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41528.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 51903.796 ops/s
[info]                  ·gc.alloc.rate:                   1555.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51205.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.894 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   51612.639 ±(99.9%) 1425.351 ops/s [Average]
[info]   (min, avg, max) = (51016.333, 51612.639, 51903.796), stdev = 370.159
[info]   CI (99.9%): [50187.288, 53037.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1547.208 ±(99.9%) 41.564 MB/sec [Average]
[info]   (min, avg, max) = (1529.857, 1547.208, 1555.790), stdev = 10.794
[info]   CI (99.9%): [1505.644, 1588.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   47176.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (47176.008, 47176.009, 47176.009), stdev = 0.001
[info]   CI (99.9%): [47176.007, 47176.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1540.077 ±(99.9%) 720.575 MB/sec [Average]
[info]   (min, avg, max) = (1324.204, 1540.077, 1688.684), stdev = 187.131
[info]   CI (99.9%): [819.502, 2260.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   46943.384 ±(99.9%) 21337.951 B/op [Average]
[info]   (min, avg, max) = (40261.300, 46943.384, 51205.721), stdev = 5541.398
[info]   CI (99.9%): [25605.434, 68281.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.283 ±(99.9%) 2.774 B/op [Average]
[info]   (min, avg, max) = (1.284, 2.283, 3.181), stdev = 0.720
[info]   CI (99.9%): [≈ 0, 5.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.14% complete, ETA 00:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49096.938 ops/s
[info] # Warmup Iteration   2: 74063.859 ops/s
[info] # Warmup Iteration   3: 74000.403 ops/s
[info] Iteration   1: 74379.465 ops/s
[info]                  ·gc.alloc.rate:                   1534.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34821.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.762 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 73938.470 ops/s
[info]                  ·gc.alloc.rate:                   1525.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35299.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.329 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 74176.833 ops/s
[info]                  ·gc.alloc.rate:                   1530.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28337.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.767 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72998.664 ops/s
[info]                  ·gc.alloc.rate:                   1506.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36170.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.346 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 72929.677 ops/s
[info]                  ·gc.alloc.rate:                   1504.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29097.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   73684.622 ±(99.9%) 2604.526 ops/s [Average]
[info]   (min, avg, max) = (72929.677, 73684.622, 74379.465), stdev = 676.387
[info]   CI (99.9%): [71080.096, 76289.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1520.189 ±(99.9%) 53.110 MB/sec [Average]
[info]   (min, avg, max) = (1504.540, 1520.189, 1534.299), stdev = 13.793
[info]   CI (99.9%): [1467.079, 1573.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   32464.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32464.006, 32464.006, 32464.006), stdev = 0.001
[info]   CI (99.9%): [32464.005, 32464.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1533.429 ±(99.9%) 674.431 MB/sec [Average]
[info]   (min, avg, max) = (1335.583, 1533.429, 1678.398), stdev = 175.148
[info]   CI (99.9%): [858.998, 2207.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32745.486 ±(99.9%) 14317.947 B/op [Average]
[info]   (min, avg, max) = (28337.600, 32745.486, 36170.422), stdev = 3718.325
[info]   CI (99.9%): [18427.539, 47063.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.510 ±(99.9%) 0.893 B/op [Average]
[info]   (min, avg, max) = (1.329, 1.510, 1.767), stdev = 0.232
[info]   CI (99.9%): [0.618, 2.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.39% complete, ETA 00:44:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248563.786 ops/s
[info] # Warmup Iteration   2: 267989.513 ops/s
[info] # Warmup Iteration   3: 273011.580 ops/s
[info] Iteration   1: 262930.512 ops/s
[info]                  ·gc.alloc.rate:                   504.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1985.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.294 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 275990.099 ops/s
[info]                  ·gc.alloc.rate:                   528.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3779.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 276420.646 ops/s
[info]                  ·gc.alloc.rate:                   529.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1885.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 265926.268 ops/s
[info]                  ·gc.alloc.rate:                   509.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3922.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 273678.862 ops/s
[info]                  ·gc.alloc.rate:               524.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1907.749 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   270989.277 ±(99.9%) 23761.906 ops/s [Average]
[info]   (min, avg, max) = (262930.512, 270989.277, 276420.646), stdev = 6170.891
[info]   CI (99.9%): [247227.371, 294751.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519.352 ±(99.9%) 45.369 MB/sec [Average]
[info]   (min, avg, max) = (504.055, 519.352, 529.799), stdev = 11.782
[info]   CI (99.9%): [473.983, 564.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.001, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   464.074 ±(99.9%) 698.585 MB/sec [Average]
[info]   (min, avg, max) = (331.130, 464.074, 662.814), stdev = 181.420
[info]   CI (99.9%): [≈ 0, 1162.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2696.257 ±(99.9%) 4067.546 B/op [Average]
[info]   (min, avg, max) = (1885.034, 2696.257, 3922.924), stdev = 1056.329
[info]   CI (99.9%): [≈ 0, 6763.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 2.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.720), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.251 ±(99.9%) 17.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.251, 10.294), stdev = 4.498
[info]   CI (99.9%): [≈ 0, 19.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.63% complete, ETA 00:43:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244324.576 ops/s
[info] # Warmup Iteration   2: 266909.807 ops/s
[info] # Warmup Iteration   3: 274688.242 ops/s
[info] Iteration   1: 273575.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 273968.252 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 273809.786 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 273599.543 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 273968.127 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   273784.301 ±(99.9%) 735.384 ops/s [Average]
[info]   (min, avg, max) = (273575.797, 273784.301, 273968.252), stdev = 190.977
[info]   CI (99.9%): [273048.917, 274519.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:43:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49193.477 ops/s
[info] # Warmup Iteration   2: 67808.615 ops/s
[info] # Warmup Iteration   3: 67545.005 ops/s
[info] Iteration   1: 67621.377 ops/s
[info]                  ·gc.alloc.rate:                   1515.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              35272.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30760.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.423 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 66408.646 ops/s
[info]                  ·gc.alloc.rate:                   1488.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              35272.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39419.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.467 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 66939.806 ops/s
[info]                  ·gc.alloc.rate:                   1500.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              35272.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31447.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.958 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 65793.088 ops/s
[info]                  ·gc.alloc.rate:                   1474.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              35272.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40188.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.992 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 66356.040 ops/s
[info]                  ·gc.alloc.rate:                   1487.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              35272.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32011.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.975 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   66623.792 ±(99.9%) 2656.030 ops/s [Average]
[info]   (min, avg, max) = (65793.088, 66623.792, 67621.377), stdev = 689.762
[info]   CI (99.9%): [63967.762, 69279.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1493.193 ±(99.9%) 59.553 MB/sec [Average]
[info]   (min, avg, max) = (1474.508, 1493.193, 1515.393), stdev = 15.466
[info]   CI (99.9%): [1433.639, 1552.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35272.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35272.007, 35272.007, 35272.007), stdev = 0.001
[info]   CI (99.9%): [35272.006, 35272.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.494 ±(99.9%) 708.670 MB/sec [Average]
[info]   (min, avg, max) = (1321.552, 1470.494, 1680.052), stdev = 184.039
[info]   CI (99.9%): [761.824, 2179.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34765.364 ±(99.9%) 17824.230 B/op [Average]
[info]   (min, avg, max) = (30760.214, 34765.364, 40188.880), stdev = 4628.896
[info]   CI (99.9%): [16941.134, 52589.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.163 ±(99.9%) 0.994 B/op [Average]
[info]   (min, avg, max) = (1.958, 2.163, 2.467), stdev = 0.258
[info]   CI (99.9%): [1.169, 3.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:43:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122862.279 ops/s
[info] # Warmup Iteration   2: 150268.161 ops/s
[info] # Warmup Iteration   3: 149350.975 ops/s
[info] Iteration   1: 150290.584 ops/s
[info]                  ·gc.alloc.rate:                   2247.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              23536.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2346.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24576.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 151186.374 ops/s
[info]                  ·gc.alloc.rate:                   2261.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              23536.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21060.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.950 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 150591.899 ops/s
[info]                  ·gc.alloc.rate:                   2251.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              23536.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24764.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.088 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 149491.725 ops/s
[info]                  ·gc.alloc.rate:                   2235.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              23536.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25009.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 152211.342 ops/s
[info]                  ·gc.alloc.rate:                   2276.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              23536.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21076.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.861 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   150754.385 ±(99.9%) 3919.891 ops/s [Average]
[info]   (min, avg, max) = (149491.725, 150754.385, 152211.342), stdev = 1017.983
[info]   CI (99.9%): [146834.493, 154674.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2254.638 ±(99.9%) 59.554 MB/sec [Average]
[info]   (min, avg, max) = (2235.414, 2254.638, 2276.435), stdev = 15.466
[info]   CI (99.9%): [2195.085, 2314.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   23536.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23536.003, 23536.003, 23536.003), stdev = 0.001
[info]   CI (99.9%): [23536.003, 23536.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2230.862 ±(99.9%) 702.974 MB/sec [Average]
[info]   (min, avg, max) = (2024.008, 2230.862, 2375.397), stdev = 182.560
[info]   CI (99.9%): [1527.888, 2933.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23297.631 ±(99.9%) 7857.682 B/op [Average]
[info]   (min, avg, max) = (21060.282, 23297.631, 25009.846), stdev = 2040.615
[info]   CI (99.9%): [15439.949, 31155.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.187), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.998 ±(99.9%) 2.250 B/op [Average]
[info]   (min, avg, max) = (0.438, 0.998, 1.950), stdev = 0.584
[info]   CI (99.9%): [≈ 0, 3.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 50.37% complete, ETA 00:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13543.691 ops/s
[info] # Warmup Iteration   2: 548123.216 ops/s
[info] # Warmup Iteration   3: 552144.387 ops/s
[info] Iteration   1: 557145.574 ops/s
[info]                  ·gc.alloc.rate:                   308.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 549911.852 ops/s
[info]                  ·gc.alloc.rate:               304.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1464.215 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 558176.926 ops/s
[info]                  ·gc.alloc.rate:      309.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 540637.877 ops/s
[info]                  ·gc.alloc.rate:                   299.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          322.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     939.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 539698.489 ops/s
[info]                  ·gc.alloc.rate:               299.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      322.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 941.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   549114.143 ±(99.9%) 33776.968 ops/s [Average]
[info]   (min, avg, max) = (539698.489, 549114.143, 558176.926), stdev = 8771.771
[info]   CI (99.9%): [515337.175, 582891.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   304.271 ±(99.9%) 18.729 MB/sec [Average]
[info]   (min, avg, max) = (299.037, 304.271, 309.258), stdev = 4.864
[info]   CI (99.9%): [285.542, 323.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   282.633 ±(99.9%) 710.913 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 282.633, 511.805), stdev = 184.622
[info]   CI (99.9%): [≈ 0, 993.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   813.524 ±(99.9%) 2042.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 813.524, 1464.215), stdev = 530.490
[info]   CI (99.9%): [≈ 0, 2856.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.169), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.61% complete, ETA 00:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255674.137 ops/s
[info] # Warmup Iteration   2: 376463.872 ops/s
[info] # Warmup Iteration   3: 380723.630 ops/s
[info] Iteration   1: 380228.584 ops/s
[info]                  ·gc.alloc.rate:               388.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1058.820 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 391082.894 ops/s
[info]                  ·gc.alloc.rate:                   399.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2344.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 388524.978 ops/s
[info]                  ·gc.alloc.rate:                   397.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1323.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 393819.799 ops/s
[info]                  ·gc.alloc.rate:               402.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1307.169 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 375771.177 ops/s
[info]                  ·gc.alloc.rate:               383.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1369.944 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   385885.486 ±(99.9%) 29277.120 ops/s [Average]
[info]   (min, avg, max) = (375771.177, 385885.486, 393819.799), stdev = 7603.175
[info]   CI (99.9%): [356608.367, 415162.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   394.294 ±(99.9%) 30.019 MB/sec [Average]
[info]   (min, avg, max) = (383.933, 394.294, 402.359), stdev = 7.796
[info]   CI (99.9%): [364.276, 424.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.906 ±(99.9%) 485.807 MB/sec [Average]
[info]   (min, avg, max) = (255.787, 363.906, 582.747), stdev = 126.163
[info]   CI (99.9%): [≈ 0, 849.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1480.802 ±(99.9%) 1916.732 B/op [Average]
[info]   (min, avg, max) = (1058.820, 1480.802, 2344.449), stdev = 497.769
[info]   CI (99.9%): [≈ 0, 3397.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.436 ±(99.9%) 3.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.436, 2.116), stdev = 0.940
[info]   CI (99.9%): [≈ 0, 4.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.753 ±(99.9%) 14.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.753, 8.513), stdev = 3.780
[info]   CI (99.9%): [≈ 0, 16.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.86% complete, ETA 00:42:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 862501.538 ops/s
[info] # Warmup Iteration   2: 931352.422 ops/s
[info] # Warmup Iteration   3: 939740.329 ops/s
[info] Iteration   1: 933129.956 ops/s
[info]                  ·gc.alloc.rate:                   322.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     862.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 913675.303 ops/s
[info]                  ·gc.alloc.rate:               315.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 440.634 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 929219.437 ops/s
[info]                  ·gc.alloc.rate:                   321.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     563.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.726 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 925465.006 ops/s
[info]                  ·gc.alloc.rate:                   319.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     565.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 925893.897 ops/s
[info]                  ·gc.alloc.rate:                   320.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     565.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   925476.720 ±(99.9%) 28034.933 ops/s [Average]
[info]   (min, avg, max) = (913675.303, 925476.720, 933129.956), stdev = 7280.583
[info]   CI (99.9%): [897441.787, 953511.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   319.953 ±(99.9%) 9.769 MB/sec [Average]
[info]   (min, avg, max) = (315.842, 319.953, 322.654), stdev = 2.537
[info]   CI (99.9%): [310.184, 329.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   353.007 ±(99.9%) 364.908 MB/sec [Average]
[info]   (min, avg, max) = (255.829, 353.007, 511.794), stdev = 94.765
[info]   CI (99.9%): [≈ 0, 717.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   599.380 ±(99.9%) 603.649 B/op [Average]
[info]   (min, avg, max) = (440.634, 599.380, 862.894), stdev = 156.766
[info]   CI (99.9%): [≈ 0, 1203.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.341 ±(99.9%) 2.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.341, 1.610), stdev = 0.710
[info]   CI (99.9%): [≈ 0, 3.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.577 ±(99.9%) 4.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.577, 2.726), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.10% complete, ETA 00:42:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43591.056 ops/s
[info] # Warmup Iteration   2: 75300.757 ops/s
[info] # Warmup Iteration   3: 74177.933 ops/s
[info] Iteration   1: 74711.644 ops/s
[info]                  ·gc.alloc.rate:                   3104.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70753.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.631 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 73939.469 ops/s
[info]                  ·gc.alloc.rate:                   3074.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3046.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64808.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.431 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 76149.898 ops/s
[info]                  ·gc.alloc.rate:                   3164.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63140.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.303 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 75156.168 ops/s
[info]                  ·gc.alloc.rate:                   3123.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64071.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.180 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 75281.994 ops/s
[info]                  ·gc.alloc.rate:                   3129.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64049.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.046 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   75047.835 ±(99.9%) 3117.957 ops/s [Average]
[info]   (min, avg, max) = (73939.469, 75047.835, 76149.898), stdev = 809.723
[info]   CI (99.9%): [71929.878, 78165.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3119.276 ±(99.9%) 127.870 MB/sec [Average]
[info]   (min, avg, max) = (3074.282, 3119.276, 3164.730), stdev = 33.207
[info]   CI (99.9%): [2991.407, 3247.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65408.006, 65408.006, 65408.006), stdev = 0.001
[info]   CI (99.9%): [65408.005, 65408.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3116.680 ±(99.9%) 521.496 MB/sec [Average]
[info]   (min, avg, max) = (3046.099, 3116.680, 3358.653), stdev = 135.431
[info]   CI (99.9%): [2595.185, 3638.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65364.587 ±(99.9%) 11821.610 B/op [Average]
[info]   (min, avg, max) = (63140.356, 65364.587, 70753.586), stdev = 3070.035
[info]   CI (99.9%): [53542.977, 77186.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.158, 0.208), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.318 ±(99.9%) 3.875 B/op [Average]
[info]   (min, avg, max) = (2.180, 3.318, 4.431), stdev = 1.006
[info]   CI (99.9%): [≈ 0, 7.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.34% complete, ETA 00:42:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183718.430 ops/s
[info] # Warmup Iteration   2: 243665.499 ops/s
[info] # Warmup Iteration   3: 246366.406 ops/s
[info] Iteration   1: 249851.342 ops/s
[info]                  ·gc.alloc.rate:                   1648.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8352.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 247644.461 ops/s
[info]                  ·gc.alloc.rate:                   1633.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10596.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.926 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 249002.386 ops/s
[info]                  ·gc.alloc.rate:                   1642.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10601.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 249969.050 ops/s
[info]                  ·gc.alloc.rate:                   1649.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10606.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 249938.963 ops/s
[info]                  ·gc.alloc.rate:                   1649.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10646.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   249281.240 ±(99.9%) 3844.624 ops/s [Average]
[info]   (min, avg, max) = (247644.461, 249281.240, 249969.050), stdev = 998.437
[info]   CI (99.9%): [245436.616, 253125.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1644.900 ±(99.9%) 26.133 MB/sec [Average]
[info]   (min, avg, max) = (1633.866, 1644.900, 1649.683), stdev = 6.787
[info]   CI (99.9%): [1618.767, 1671.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10384.002, 10384.002, 10384.002), stdev = 0.001
[info]   CI (99.9%): [10384.002, 10384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.414 ±(99.9%) 610.953 MB/sec [Average]
[info]   (min, avg, max) = (1326.041, 1609.414, 1691.265), stdev = 158.663
[info]   CI (99.9%): [998.461, 2220.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10160.933 ±(99.9%) 3892.782 B/op [Average]
[info]   (min, avg, max) = (8352.838, 10160.933, 10646.080), stdev = 1010.943
[info]   CI (99.9%): [6268.151, 14053.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.605 ±(99.9%) 0.778 B/op [Average]
[info]   (min, avg, max) = (0.393, 0.605, 0.926), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 1.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 51.59% complete, ETA 00:42:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56550.795 ops/s
[info] # Warmup Iteration   2: 1369440.862 ops/s
[info] # Warmup Iteration   3: 1343925.261 ops/s
[info] Iteration   1: 1373546.579 ops/s
[info]                  ·gc.alloc.rate:               467.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 586.191 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1395262.588 ops/s
[info]                  ·gc.alloc.rate:                   475.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1408542.489 ops/s
[info]                  ·gc.alloc.rate:                   479.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1403201.766 ops/s
[info]                  ·gc.alloc.rate:                   477.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1392417.544 ops/s
[info]                  ·gc.alloc.rate:                   474.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1394594.193 ±(99.9%) 51548.024 ops/s [Average]
[info]   (min, avg, max) = (1373546.579, 1394594.193, 1408542.489), stdev = 13386.858
[info]   CI (99.9%): [1343046.169, 1446142.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   474.973 ±(99.9%) 17.578 MB/sec [Average]
[info]   (min, avg, max) = (467.761, 474.973, 479.690), stdev = 4.565
[info]   CI (99.9%): [457.395, 492.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   491.254 ±(99.9%) 623.151 MB/sec [Average]
[info]   (min, avg, max) = (324.084, 491.254, 649.463), stdev = 161.830
[info]   CI (99.9%): [≈ 0, 1114.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   554.551 ±(99.9%) 702.879 B/op [Average]
[info]   (min, avg, max) = (362.127, 554.551, 728.476), stdev = 182.536
[info]   CI (99.9%): [≈ 0, 1257.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.83% complete, ETA 00:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 982084.557 ops/s
[info] # Warmup Iteration   2: 1290734.595 ops/s
[info] # Warmup Iteration   3: 1273933.380 ops/s
[info] Iteration   1: 1273119.561 ops/s
[info]                  ·gc.alloc.rate:                   744.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1212.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1313115.168 ops/s
[info]                  ·gc.alloc.rate:                   767.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     784.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1280681.647 ops/s
[info]                  ·gc.alloc.rate:                   748.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     806.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1267716.814 ops/s
[info]                  ·gc.alloc.rate:                   741.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     816.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1262458.196 ops/s
[info]                  ·gc.alloc.rate:                   737.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1235.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1279418.277 ±(99.9%) 77044.615 ops/s [Average]
[info]   (min, avg, max) = (1262458.196, 1279418.277, 1313115.168), stdev = 20008.242
[info]   CI (99.9%): [1202373.662, 1356462.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   747.867 ±(99.9%) 44.995 MB/sec [Average]
[info]   (min, avg, max) = (737.967, 747.867, 767.546), stdev = 11.685
[info]   CI (99.9%): [702.871, 792.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.017 ±(99.9%) 695.565 MB/sec [Average]
[info]   (min, avg, max) = (654.793, 788.017, 990.856), stdev = 180.636
[info]   CI (99.9%): [92.452, 1483.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   971.059 ±(99.9%) 890.492 B/op [Average]
[info]   (min, avg, max) = (784.852, 971.059, 1235.269), stdev = 231.258
[info]   CI (99.9%): [80.568, 1861.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.097, 0.180), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.08% complete, ETA 00:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1226883.590 ops/s
[info] # Warmup Iteration   2: 1332296.659 ops/s
[info] # Warmup Iteration   3: 1336483.162 ops/s
[info] Iteration   1: 1382173.929 ops/s
[info]                  ·gc.alloc.rate:               470.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 291.271 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1380964.791 ops/s
[info]                  ·gc.alloc.rate:                   470.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1383785.426 ops/s
[info]                  ·gc.alloc.rate:               471.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 376.561 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 1379729.268 ops/s
[info]                  ·gc.alloc.rate:                   469.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1383327.392 ops/s
[info]                  ·gc.alloc.rate:               471.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 376.682 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1381996.161 ±(99.9%) 6445.595 ops/s [Average]
[info]   (min, avg, max) = (1379729.268, 1381996.161, 1383785.426), stdev = 1673.900
[info]   CI (99.9%): [1375550.567, 1388441.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   470.683 ±(99.9%) 2.281 MB/sec [Average]
[info]   (min, avg, max) = (469.878, 470.683, 471.242), stdev = 0.592
[info]   CI (99.9%): [468.402, 472.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.735 ±(99.9%) 761.780 MB/sec [Average]
[info]   (min, avg, max) = (255.814, 448.735, 663.489), stdev = 197.832
[info]   CI (99.9%): [≈ 0, 1210.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   511.199 ±(99.9%) 870.009 B/op [Average]
[info]   (min, avg, max) = (291.271, 511.199, 756.162), stdev = 225.939
[info]   CI (99.9%): [≈ 0, 1381.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 3.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.834), stdev = 0.814
[info]   CI (99.9%): [≈ 0, 3.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.432 ±(99.9%) 3.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.432, 2.090), stdev = 0.927
[info]   CI (99.9%): [≈ 0, 4.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.32% complete, ETA 00:41:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1299796.447 ops/s
[info] # Warmup Iteration   2: 1415585.810 ops/s
[info] # Warmup Iteration   3: 1424505.499 ops/s
[info] Iteration   1: 1422093.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1423767.680 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1423639.136 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1422154.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1424055.404 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1423142.010 ±(99.9%) 3626.438 ops/s [Average]
[info]   (min, avg, max) = (1422093.648, 1423142.010, 1424055.404), stdev = 941.774
[info]   CI (99.9%): [1419515.572, 1426768.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.57% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24508.711 ops/s
[info] # Warmup Iteration   2: 34158.321 ops/s
[info] # Warmup Iteration   3: 34626.607 ops/s
[info] Iteration   1: 34562.235 ops/s
[info]                  ·gc.alloc.rate:                   1661.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              75664.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75364.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.896 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 34736.074 ops/s
[info]                  ·gc.alloc.rate:                   1669.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              75656.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75514.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.659 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34752.318 ops/s
[info]                  ·gc.alloc.rate:                   1670.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              75656.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75904.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.828 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34746.390 ops/s
[info]                  ·gc.alloc.rate:                   1670.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              75656.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76297.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.829 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34752.268 ops/s
[info]                  ·gc.alloc.rate:                   1671.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              75656.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76553.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.714 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   34709.857 ±(99.9%) 318.790 ops/s [Average]
[info]   (min, avg, max) = (34562.235, 34709.857, 34752.318), stdev = 82.789
[info]   CI (99.9%): [34391.067, 35028.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1668.686 ±(99.9%) 15.429 MB/sec [Average]
[info]   (min, avg, max) = (1661.580, 1668.686, 1671.187), stdev = 4.007
[info]   CI (99.9%): [1653.257, 1684.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75657.614 ±(99.9%) 13.786 B/op [Average]
[info]   (min, avg, max) = (75656.012, 75657.614, 75664.018), stdev = 3.580
[info]   CI (99.9%): [75643.828, 75671.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.639 ±(99.9%) 55.042 MB/sec [Average]
[info]   (min, avg, max) = (1654.994, 1674.639, 1691.007), stdev = 14.294
[info]   CI (99.9%): [1619.597, 1729.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75926.795 ±(99.9%) 1941.015 B/op [Average]
[info]   (min, avg, max) = (75364.125, 75926.795, 76553.258), stdev = 504.075
[info]   CI (99.9%): [73985.780, 77867.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.585 ±(99.9%) 5.957 B/op [Average]
[info]   (min, avg, max) = (1.896, 3.585, 5.659), stdev = 1.547
[info]   CI (99.9%): [≈ 0, 9.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.81% complete, ETA 00:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14532.865 ops/s
[info] # Warmup Iteration   2: 17615.599 ops/s
[info] # Warmup Iteration   3: 17596.434 ops/s
[info] Iteration   1: 17622.568 ops/s
[info]                  ·gc.alloc.rate:                   1856.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              165761.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149091.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.718 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17686.548 ops/s
[info]                  ·gc.alloc.rate:                   1856.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179257.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.557 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17801.737 ops/s
[info]                  ·gc.alloc.rate:                   1868.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149056.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.681 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17817.255 ops/s
[info]                  ·gc.alloc.rate:                   1869.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              165166.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179312.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.677 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17642.735 ops/s
[info]                  ·gc.alloc.rate:                   1851.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              165160.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151210.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.285 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17714.169 ±(99.9%) 347.366 ops/s [Average]
[info]   (min, avg, max) = (17622.568, 17714.169, 17817.255), stdev = 90.210
[info]   CI (99.9%): [17366.803, 18061.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1860.453 ±(99.9%) 30.869 MB/sec [Average]
[info]   (min, avg, max) = (1851.887, 1860.453, 1869.721), stdev = 8.016
[info]   CI (99.9%): [1829.585, 1891.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165287.979 ±(99.9%) 1020.221 B/op [Average]
[info]   (min, avg, max) = (165160.024, 165287.979, 165761.775), stdev = 264.948
[info]   CI (99.9%): [164267.758, 166308.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1819.049 ±(99.9%) 715.198 MB/sec [Average]
[info]   (min, avg, max) = (1669.480, 1819.049, 2029.867), stdev = 185.735
[info]   CI (99.9%): [1103.851, 2534.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   161585.656 ±(99.9%) 62307.832 B/op [Average]
[info]   (min, avg, max) = (149056.212, 161585.656, 179312.909), stdev = 16181.146
[info]   CI (99.9%): [99277.824, 223893.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.184 ±(99.9%) 9.361 B/op [Average]
[info]   (min, avg, max) = (3.677, 5.184, 9.285), stdev = 2.431
[info]   CI (99.9%): [≈ 0, 14.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.06% complete, ETA 00:40:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66646.585 ops/s
[info] # Warmup Iteration   2: 95122.135 ops/s
[info] # Warmup Iteration   3: 95541.173 ops/s
[info] Iteration   1: 96429.744 ops/s
[info]                  ·gc.alloc.rate:                   1265.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21402.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 99114.065 ops/s
[info]                  ·gc.alloc.rate:                   1300.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20933.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.322 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 98313.787 ops/s
[info]                  ·gc.alloc.rate:                   1290.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21243.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.667 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 95223.407 ops/s
[info]                  ·gc.alloc.rate:                   1249.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22064.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 97379.791 ops/s
[info]                  ·gc.alloc.rate:                   1278.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21683.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.682 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97292.159 ±(99.9%) 5901.117 ops/s [Average]
[info]   (min, avg, max) = (95223.407, 97292.159, 99114.065), stdev = 1532.501
[info]   CI (99.9%): [91391.042, 103193.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1276.983 ±(99.9%) 77.668 MB/sec [Average]
[info]   (min, avg, max) = (1249.777, 1276.983, 1300.909), stdev = 20.170
[info]   CI (99.9%): [1199.315, 1354.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.005, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1326.730 ±(99.9%) 47.015 MB/sec [Average]
[info]   (min, avg, max) = (1311.357, 1326.730, 1341.615), stdev = 12.210
[info]   CI (99.9%): [1279.715, 1373.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21465.574 ±(99.9%) 1659.747 B/op [Average]
[info]   (min, avg, max) = (20933.651, 21465.574, 22064.853), stdev = 431.031
[info]   CI (99.9%): [19805.827, 23125.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.145 ±(99.9%) 1.463 B/op [Average]
[info]   (min, avg, max) = (0.667, 1.145, 1.682), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 2.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.30% complete, ETA 00:40:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264203.866 ops/s
[info] # Warmup Iteration   2: 276806.865 ops/s
[info] # Warmup Iteration   3: 275170.551 ops/s
[info] Iteration   1: 275048.545 ops/s
[info]                  ·gc.alloc.rate:                   894.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5706.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 282312.756 ops/s
[info]                  ·gc.alloc.rate:                   918.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3706.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 277315.966 ops/s
[info]                  ·gc.alloc.rate:               902.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      999.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5672.771 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 282358.369 ops/s
[info]                  ·gc.alloc.rate:                   918.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5582.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 280310.627 ops/s
[info]                  ·gc.alloc.rate:                   911.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5642.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   279469.253 ±(99.9%) 12376.049 ops/s [Average]
[info]   (min, avg, max) = (275048.545, 279469.253, 282358.369), stdev = 3214.021
[info]   CI (99.9%): [267093.203, 291845.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   909.202 ±(99.9%) 40.524 MB/sec [Average]
[info]   (min, avg, max) = (894.738, 909.202, 918.742), stdev = 10.524
[info]   CI (99.9%): [868.678, 949.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   933.663 ±(99.9%) 578.771 MB/sec [Average]
[info]   (min, avg, max) = (664.839, 933.663, 1005.025), stdev = 150.305
[info]   CI (99.9%): [354.892, 1512.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5262.050 ±(99.9%) 3353.332 B/op [Average]
[info]   (min, avg, max) = (3706.357, 5262.050, 5706.282), stdev = 870.850
[info]   CI (99.9%): [1908.718, 8615.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.375 ±(99.9%) 0.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 0.584), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.55% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9892.188 ops/s
[info] # Warmup Iteration   2: 16458.577 ops/s
[info] # Warmup Iteration   3: 16216.346 ops/s
[info] Iteration   1: 16597.417 ops/s
[info]                  ·gc.alloc.rate:                   2115.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188984.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.817 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16475.109 ops/s
[info]                  ·gc.alloc.rate:                   2100.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191922.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.954 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16556.689 ops/s
[info]                  ·gc.alloc.rate:                   2110.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192112.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.957 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16455.760 ops/s
[info]                  ·gc.alloc.rate:                   2098.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226483.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.982 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 16523.855 ops/s
[info]                  ·gc.alloc.rate:                   2106.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193891.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.948 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16521.766 ±(99.9%) 223.543 ops/s [Average]
[info]   (min, avg, max) = (16455.760, 16521.766, 16597.417), stdev = 58.053
[info]   CI (99.9%): [16298.223, 16745.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2106.438 ±(99.9%) 27.444 MB/sec [Average]
[info]   (min, avg, max) = (2098.845, 2106.438, 2115.886), stdev = 7.127
[info]   CI (99.9%): [2078.994, 2133.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200640.029 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (200640.026, 200640.029, 200640.036), stdev = 0.004
[info]   CI (99.9%): [200640.013, 200640.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2085.562 ±(99.9%) 613.493 MB/sec [Average]
[info]   (min, avg, max) = (1992.975, 2085.562, 2369.185), stdev = 159.322
[info]   CI (99.9%): [1472.069, 2699.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   198679.018 ±(99.9%) 60233.203 B/op [Average]
[info]   (min, avg, max) = (188984.964, 198679.018, 226483.242), stdev = 15642.372
[info]   CI (99.9%): [138445.814, 258912.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.132 ±(99.9%) 15.732 B/op [Average]
[info]   (min, avg, max) = (3.957, 7.132, 13.817), stdev = 4.086
[info]   CI (99.9%): [≈ 0, 22.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.79% complete, ETA 00:40:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14537.544 ops/s
[info] # Warmup Iteration   2: 20481.861 ops/s
[info] # Warmup Iteration   3: 20724.948 ops/s
[info] Iteration   1: 20731.565 ops/s
[info]                  ·gc.alloc.rate:                   1677.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              127381.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125894.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.741 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20687.253 ops/s
[info]                  ·gc.alloc.rate:                   1674.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126973.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.502 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 20527.508 ops/s
[info]                  ·gc.alloc.rate:                   1662.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              127376.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128620.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.980 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 20732.925 ops/s
[info]                  ·gc.alloc.rate:                   1677.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127987.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.321 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 20766.712 ops/s
[info]                  ·gc.alloc.rate:                   1680.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128187.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.733 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   20689.193 ±(99.9%) 364.608 ops/s [Average]
[info]   (min, avg, max) = (20527.508, 20689.193, 20766.712), stdev = 94.688
[info]   CI (99.9%): [20324.584, 21053.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1674.534 ±(99.9%) 27.998 MB/sec [Average]
[info]   (min, avg, max) = (1662.086, 1674.534, 1680.410), stdev = 7.271
[info]   CI (99.9%): [1646.536, 1702.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.658 ±(99.9%) 69.137 B/op [Average]
[info]   (min, avg, max) = (127352.021, 127370.658, 127392.021), stdev = 17.955
[info]   CI (99.9%): [127301.521, 127439.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1676.646 ±(99.9%) 50.985 MB/sec [Average]
[info]   (min, avg, max) = (1658.420, 1676.646, 1691.440), stdev = 13.241
[info]   CI (99.9%): [1625.661, 1727.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127532.834 ±(99.9%) 4224.702 B/op [Average]
[info]   (min, avg, max) = (125894.861, 127532.834, 128620.624), stdev = 1097.142
[info]   CI (99.9%): [123308.132, 131757.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.655 ±(99.9%) 8.015 B/op [Average]
[info]   (min, avg, max) = (4.733, 6.655, 9.502), stdev = 2.081
[info]   CI (99.9%): [≈ 0, 14.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.03% complete, ETA 00:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58192.645 ops/s
[info] # Warmup Iteration   2: 86659.810 ops/s
[info] # Warmup Iteration   3: 88346.670 ops/s
[info] Iteration   1: 88887.081 ops/s
[info]                  ·gc.alloc.rate:                   1217.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23189.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 89116.132 ops/s
[info]                  ·gc.alloc.rate:                   1220.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17429.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 88937.106 ops/s
[info]                  ·gc.alloc.rate:                   1218.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23435.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.474 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 89118.880 ops/s
[info]                  ·gc.alloc.rate:                   1220.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23528.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 89526.887 ops/s
[info]                  ·gc.alloc.rate:                   1226.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17653.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.464 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   89117.217 ±(99.9%) 968.871 ops/s [Average]
[info]   (min, avg, max) = (88887.081, 89117.217, 89526.887), stdev = 251.613
[info]   CI (99.9%): [88148.346, 90086.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1220.827 ±(99.9%) 13.755 MB/sec [Average]
[info]   (min, avg, max) = (1217.657, 1220.827, 1226.689), stdev = 3.572
[info]   CI (99.9%): [1207.072, 1234.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.005 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.005, 21560.027), stdev = 0.016
[info]   CI (99.9%): [21559.944, 21560.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.485 ±(99.9%) 689.485 MB/sec [Average]
[info]   (min, avg, max) = (986.878, 1191.485, 1332.226), stdev = 179.057
[info]   CI (99.9%): [502.000, 1880.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21047.206 ±(99.9%) 12336.252 B/op [Average]
[info]   (min, avg, max) = (17429.208, 21047.206, 23528.609), stdev = 3203.685
[info]   CI (99.9%): [8710.954, 33383.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.250 ±(99.9%) 2.766 B/op [Average]
[info]   (min, avg, max) = (0.368, 1.250, 2.212), stdev = 0.718
[info]   CI (99.9%): [≈ 0, 4.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.28% complete, ETA 00:39:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298139.653 ops/s
[info] # Warmup Iteration   2: 326956.035 ops/s
[info] # Warmup Iteration   3: 317975.217 ops/s
[info] Iteration   1: 314593.888 ops/s
[info]                  ·gc.alloc.rate:                   1002.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4975.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 319512.870 ops/s
[info]                  ·gc.alloc.rate:                   1018.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4908.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 320206.501 ops/s
[info]                  ·gc.alloc.rate:                   1020.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4909.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 318457.375 ops/s
[info]                  ·gc.alloc.rate:                   1014.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4953.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 315098.951 ops/s
[info]                  ·gc.alloc.rate:                   1004.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5024.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   317573.917 ±(99.9%) 9906.817 ops/s [Average]
[info]   (min, avg, max) = (314593.888, 317573.917, 320206.501), stdev = 2572.769
[info]   CI (99.9%): [307667.100, 327480.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1012.138 ±(99.9%) 31.451 MB/sec [Average]
[info]   (min, avg, max) = (1002.605, 1012.138, 1020.501), stdev = 8.168
[info]   CI (99.9%): [980.687, 1043.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.001), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.645 ±(99.9%) 17.530 MB/sec [Average]
[info]   (min, avg, max) = (994.578, 999.645, 1006.005), stdev = 4.552
[info]   CI (99.9%): [982.115, 1017.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4954.366 ±(99.9%) 186.661 B/op [Average]
[info]   (min, avg, max) = (4908.981, 4954.366, 5024.194), stdev = 48.475
[info]   CI (99.9%): [4767.705, 5141.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.351 ±(99.9%) 0.451 B/op [Average]
[info]   (min, avg, max) = (0.206, 0.351, 0.513), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.52% complete, ETA 00:39:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 338452.285 ops/s
[info] # Warmup Iteration   2: 369808.094 ops/s
[info] # Warmup Iteration   3: 381858.092 ops/s
[info] Iteration   1: 381739.893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 378771.801 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 381618.115 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 381851.597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 381816.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   381159.588 ±(99.9%) 5151.444 ops/s [Average]
[info]   (min, avg, max) = (378771.801, 381159.588, 381851.597), stdev = 1337.814
[info]   CI (99.9%): [376008.144, 386311.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.77% complete, ETA 00:39:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18198.184 ops/s
[info] # Warmup Iteration   2: 25174.376 ops/s
[info] # Warmup Iteration   3: 25844.789 ops/s
[info] Iteration   1: 25819.819 ops/s
[info]                  ·gc.alloc.rate:                   1760.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121164.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.344 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25509.681 ops/s
[info]                  ·gc.alloc.rate:                   1738.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102930.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25967.993 ops/s
[info]                  ·gc.alloc.rate:                   1770.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101781.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25777.608 ops/s
[info]                  ·gc.alloc.rate:                   1757.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              107287.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102941.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.542 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25765.017 ops/s
[info]                  ·gc.alloc.rate:                   1756.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124022.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.444 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   25768.024 ±(99.9%) 637.139 ops/s [Average]
[info]   (min, avg, max) = (25509.681, 25768.024, 25967.993), stdev = 165.463
[info]   CI (99.9%): [25130.884, 26405.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1756.583 ±(99.9%) 43.410 MB/sec [Average]
[info]   (min, avg, max) = (1738.973, 1756.583, 1770.191), stdev = 11.273
[info]   CI (99.9%): [1713.173, 1799.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107288.006 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (107287.939, 107288.006, 107288.040), stdev = 0.039
[info]   CI (99.9%): [107287.857, 107288.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1810.370 ±(99.9%) 701.330 MB/sec [Average]
[info]   (min, avg, max) = (1668.337, 1810.370, 2030.376), stdev = 182.133
[info]   CI (99.9%): [1109.040, 2511.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110568.025 ±(99.9%) 42488.646 B/op [Average]
[info]   (min, avg, max) = (101781.153, 110568.025, 124022.493), stdev = 11034.166
[info]   CI (99.9%): [68079.379, 153056.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.187), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.360 ±(99.9%) 12.500 B/op [Average]
[info]   (min, avg, max) = (2.542, 6.360, 11.444), stdev = 3.246
[info]   CI (99.9%): [≈ 0, 18.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 55.01% complete, ETA 00:39:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52253.076 ops/s
[info] # Warmup Iteration   2: 68665.217 ops/s
[info] # Warmup Iteration   3: 68897.463 ops/s
[info] Iteration   1: 70275.556 ops/s
[info]                  ·gc.alloc.rate:                   1603.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              35904.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37035.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.328 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 69343.305 ops/s
[info]                  ·gc.alloc.rate:                   1582.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              35904.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37789.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.417 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 70470.397 ops/s
[info]                  ·gc.alloc.rate:                   1607.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              35904.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37440.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 69672.722 ops/s
[info]                  ·gc.alloc.rate:                   1589.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              35904.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30418.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.470 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 69161.418 ops/s
[info]                  ·gc.alloc.rate:                   1577.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              35904.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38428.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   69784.680 ±(99.9%) 2201.081 ops/s [Average]
[info]   (min, avg, max) = (69161.418, 69784.680, 70470.397), stdev = 571.614
[info]   CI (99.9%): [67583.599, 71985.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1592.189 ±(99.9%) 50.420 MB/sec [Average]
[info]   (min, avg, max) = (1577.738, 1592.189, 1607.619), stdev = 13.094
[info]   CI (99.9%): [1541.770, 1642.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35904.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35904.006, 35904.006, 35904.007), stdev = 0.001
[info]   CI (99.9%): [35904.005, 35904.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.295 ±(99.9%) 561.185 MB/sec [Average]
[info]   (min, avg, max) = (1346.590, 1606.295, 1688.674), stdev = 145.738
[info]   CI (99.9%): [1045.110, 2167.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   36222.464 ±(99.9%) 12647.223 B/op [Average]
[info]   (min, avg, max) = (30418.696, 36222.464, 38428.535), stdev = 3284.444
[info]   CI (99.9%): [23575.242, 48869.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.217 ±(99.9%) 2.993 B/op [Average]
[info]   (min, avg, max) = (0.470, 1.217, 2.328), stdev = 0.777
[info]   CI (99.9%): [≈ 0, 4.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.26% complete, ETA 00:38:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61740.143 ops/s
[info] # Warmup Iteration   2: 88682.971 ops/s
[info] # Warmup Iteration   3: 90841.802 ops/s
[info] Iteration   1: 91000.939 ops/s
[info]                  ·gc.alloc.rate:                   1162.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              20112.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22570.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 90978.337 ops/s
[info]                  ·gc.alloc.rate:                   1162.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              20112.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22702.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 91310.505 ops/s
[info]                  ·gc.alloc.rate:                   1166.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              20112.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17056.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 90821.385 ops/s
[info]                  ·gc.alloc.rate:                   1160.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              20112.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23006.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 89452.366 ops/s
[info]                  ·gc.alloc.rate:                   1143.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              20112.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17609.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   90712.706 ±(99.9%) 2797.533 ops/s [Average]
[info]   (min, avg, max) = (89452.366, 90712.706, 91310.505), stdev = 726.510
[info]   CI (99.9%): [87915.174, 93510.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1159.264 ±(99.9%) 35.507 MB/sec [Average]
[info]   (min, avg, max) = (1143.272, 1159.264, 1166.840), stdev = 9.221
[info]   CI (99.9%): [1123.757, 1194.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20112.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20112.005, 20112.005, 20112.005), stdev = 0.001
[info]   CI (99.9%): [20112.004, 20112.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1187.151 ±(99.9%) 675.263 MB/sec [Average]
[info]   (min, avg, max) = (989.574, 1187.151, 1327.603), stdev = 175.364
[info]   CI (99.9%): [511.888, 1862.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20589.160 ±(99.9%) 11485.902 B/op [Average]
[info]   (min, avg, max) = (17056.597, 20589.160, 23006.176), stdev = 2982.852
[info]   CI (99.9%): [9103.258, 32075.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.085 ±(99.9%) 1.720 B/op [Average]
[info]   (min, avg, max) = (0.359, 1.085, 1.465), stdev = 0.447
[info]   CI (99.9%): [≈ 0, 2.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.50% complete, ETA 00:38:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90531.401 ops/s
[info] # Warmup Iteration   2: 104624.351 ops/s
[info] # Warmup Iteration   3: 105659.950 ops/s
[info] Iteration   1: 104358.127 ops/s
[info]                  ·gc.alloc.rate:               1220.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      993.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14983.963 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 104164.857 ops/s
[info]                  ·gc.alloc.rate:                   1218.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20069.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.573 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 104855.800 ops/s
[info]                  ·gc.alloc.rate:                   1226.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20031.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 105146.083 ops/s
[info]                  ·gc.alloc.rate:                   1229.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15036.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 104997.782 ops/s
[info]                  ·gc.alloc.rate:                   1228.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20150.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   104704.530 ±(99.9%) 1628.111 ops/s [Average]
[info]   (min, avg, max) = (104164.857, 104704.530, 105146.083), stdev = 422.815
[info]   CI (99.9%): [103076.419, 106332.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1224.681 ±(99.9%) 18.812 MB/sec [Average]
[info]   (min, avg, max) = (1218.332, 1224.681, 1229.778), stdev = 4.885
[info]   CI (99.9%): [1205.870, 1243.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18408.004, 18408.004, 18408.004), stdev = 0.001
[info]   CI (99.9%): [18408.004, 18408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1201.087 ±(99.9%) 710.361 MB/sec [Average]
[info]   (min, avg, max) = (993.752, 1201.087, 1344.297), stdev = 184.479
[info]   CI (99.9%): [490.726, 1911.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18054.325 ±(99.9%) 10702.185 B/op [Average]
[info]   (min, avg, max) = (14983.963, 18054.325, 20150.137), stdev = 2779.323
[info]   CI (99.9%): [7352.140, 28756.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.751 ±(99.9%) 2.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 1.573), stdev = 0.571
[info]   CI (99.9%): [≈ 0, 2.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.75% complete, ETA 00:38:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25580.759 ops/s
[info] # Warmup Iteration   2: 43767.398 ops/s
[info] # Warmup Iteration   3: 44266.158 ops/s
[info] Iteration   1: 45379.978 ops/s
[info]                  ·gc.alloc.rate:                   2176.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68894.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.888 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 45075.420 ops/s
[info]                  ·gc.alloc.rate:                   2160.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2339.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81688.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.088 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45254.069 ops/s
[info]                  ·gc.alloc.rate:                   2169.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70251.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.172 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 45577.935 ops/s
[info]                  ·gc.alloc.rate:                   2185.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81720.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.594 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 44870.343 ops/s
[info]                  ·gc.alloc.rate:                   2150.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71383.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.191 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   45231.549 ±(99.9%) 1049.905 ops/s [Average]
[info]   (min, avg, max) = (44870.343, 45231.549, 45577.935), stdev = 272.657
[info]   CI (99.9%): [44181.644, 46281.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2168.547 ±(99.9%) 51.357 MB/sec [Average]
[info]   (min, avg, max) = (2150.932, 2168.547, 2185.340), stdev = 13.337
[info]   CI (99.9%): [2117.189, 2219.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75448.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75448.010, 75448.010, 75448.010), stdev = 0.001
[info]   CI (99.9%): [75448.009, 75448.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.765 ±(99.9%) 719.442 MB/sec [Average]
[info]   (min, avg, max) = (1987.170, 2149.765, 2367.022), stdev = 186.837
[info]   CI (99.9%): [1430.323, 2869.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74787.766 ±(99.9%) 24548.923 B/op [Average]
[info]   (min, avg, max) = (68894.673, 74787.766, 81720.515), stdev = 6375.277
[info]   CI (99.9%): [50238.843, 99336.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.187 ±(99.9%) 4.674 B/op [Average]
[info]   (min, avg, max) = (2.172, 3.187, 5.088), stdev = 1.214
[info]   CI (99.9%): [≈ 0, 7.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 55.99% complete, ETA 00:38:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89194.109 ops/s
[info] # Warmup Iteration   2: 118558.370 ops/s
[info] # Warmup Iteration   3: 121115.612 ops/s
[info] Iteration   1: 120763.163 ops/s
[info]                  ·gc.alloc.rate:                   1133.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17093.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 119177.413 ops/s
[info]                  ·gc.alloc.rate:                   1118.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13041.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 120093.234 ops/s
[info]                  ·gc.alloc.rate:                   1126.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17346.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.364 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 121477.553 ops/s
[info]                  ·gc.alloc.rate:                   1139.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12924.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 120758.251 ops/s
[info]                  ·gc.alloc.rate:                   1133.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17424.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.814 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   120453.923 ±(99.9%) 3332.329 ops/s [Average]
[info]   (min, avg, max) = (119177.413, 120453.923, 121477.553), stdev = 865.395
[info]   CI (99.9%): [117121.593, 123786.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1130.435 ±(99.9%) 30.922 MB/sec [Average]
[info]   (min, avg, max) = (1118.656, 1130.435, 1139.865), stdev = 8.030
[info]   CI (99.9%): [1099.513, 1161.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14768.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14768.004, 14768.004, 14768.004), stdev = 0.001
[info]   CI (99.9%): [14768.003, 14768.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1191.657 ±(99.9%) 700.244 MB/sec [Average]
[info]   (min, avg, max) = (987.888, 1191.657, 1337.328), stdev = 181.851
[info]   CI (99.9%): [491.412, 1891.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15566.296 ±(99.9%) 9094.084 B/op [Average]
[info]   (min, avg, max) = (12924.445, 15566.296, 17424.754), stdev = 2361.705
[info]   CI (99.9%): [6472.212, 24660.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.090 ±(99.9%) 1.687 B/op [Average]
[info]   (min, avg, max) = (0.539, 1.090, 1.649), stdev = 0.438
[info]   CI (99.9%): [≈ 0, 2.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.23% complete, ETA 00:38:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248082.196 ops/s
[info] # Warmup Iteration   2: 341620.931 ops/s
[info] # Warmup Iteration   3: 342775.652 ops/s
[info] Iteration   1: 330965.314 ops/s
[info]                  ·gc.alloc.rate:                   491.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2767.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 334210.296 ops/s
[info]                  ·gc.alloc.rate:                   496.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1535.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 331842.005 ops/s
[info]                  ·gc.alloc.rate:                   492.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3089.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 334199.863 ops/s
[info]                  ·gc.alloc.rate:               496.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1533.996 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 333228.289 ops/s
[info]                  ·gc.alloc.rate:                   494.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3081.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   332889.153 ±(99.9%) 5572.159 ops/s [Average]
[info]   (min, avg, max) = (330965.314, 332889.153, 334210.296), stdev = 1447.072
[info]   CI (99.9%): [327316.994, 338461.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   494.116 ±(99.9%) 8.325 MB/sec [Average]
[info]   (min, avg, max) = (491.268, 494.116, 496.159), stdev = 2.162
[info]   CI (99.9%): [485.790, 502.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2336.001, 2336.001), stdev = 0.001
[info]   CI (99.9%): [2336.001, 2336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507.558 ±(99.9%) 647.833 MB/sec [Average]
[info]   (min, avg, max) = (325.729, 507.558, 652.513), stdev = 168.240
[info]   CI (99.9%): [≈ 0, 1155.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2401.672 ±(99.9%) 3088.106 B/op [Average]
[info]   (min, avg, max) = (1533.996, 2401.672, 3089.808), stdev = 801.971
[info]   CI (99.9%): [≈ 0, 5489.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.543 ±(99.9%) 4.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.543, 2.547), stdev = 1.121
[info]   CI (99.9%): [≈ 0, 4.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.579 ±(99.9%) 20.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.579, 12.109), stdev = 5.330
[info]   CI (99.9%): [≈ 0, 23.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.48% complete, ETA 00:37:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 619745.836 ops/s
[info] # Warmup Iteration   2: 670620.314 ops/s
[info] # Warmup Iteration   3: 656803.767 ops/s
[info] Iteration   1: 658521.323 ops/s
[info]                  ·gc.alloc.rate:                   816.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2369.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 657777.159 ops/s
[info]                  ·gc.alloc.rate:                   815.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1581.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 662622.406 ops/s
[info]                  ·gc.alloc.rate:                   821.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2359.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 663546.811 ops/s
[info]                  ·gc.alloc.rate:                   822.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1575.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 663706.924 ops/s
[info]                  ·gc.alloc.rate:                   823.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2368.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   661234.924 ±(99.9%) 11009.826 ops/s [Average]
[info]   (min, avg, max) = (657777.159, 661234.924, 663706.924), stdev = 2859.217
[info]   CI (99.9%): [650225.099, 672244.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   820.133 ±(99.9%) 13.473 MB/sec [Average]
[info]   (min, avg, max) = (815.994, 820.133, 823.151), stdev = 3.499
[info]   CI (99.9%): [806.660, 833.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   861.828 ±(99.9%) 700.015 MB/sec [Average]
[info]   (min, avg, max) = (661.296, 861.828, 998.900), stdev = 181.792
[info]   CI (99.9%): [161.812, 1561.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2050.994 ±(99.9%) 1660.591 B/op [Average]
[info]   (min, avg, max) = (1575.278, 2050.994, 2369.088), stdev = 431.250
[info]   CI (99.9%): [390.403, 3711.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.218 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (0.197, 0.218, 0.249), stdev = 0.028
[info]   CI (99.9%): [0.110, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.72% complete, ETA 00:37:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 675747.159 ops/s
[info] # Warmup Iteration   2: 708169.045 ops/s
[info] # Warmup Iteration   3: 708435.386 ops/s
[info] Iteration   1: 721969.725 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 713102.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 706710.902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 705228.275 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 708834.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   711169.125 ±(99.9%) 25903.308 ops/s [Average]
[info]   (min, avg, max) = (705228.275, 711169.125, 721969.725), stdev = 6727.007
[info]   CI (99.9%): [685265.817, 737072.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.97% complete, ETA 00:37:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191796.474 ops/s
[info] # Warmup Iteration   2: 258572.089 ops/s
[info] # Warmup Iteration   3: 219381.387 ops/s
[info] Iteration   1: 213354.127 ops/s
[info]                  ·gc.alloc.rate:                   697.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4825.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 215786.112 ops/s
[info]                  ·gc.alloc.rate:                   705.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4771.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 216175.690 ops/s
[info]                  ·gc.alloc.rate:                   706.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4772.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 215981.346 ops/s
[info]                  ·gc.alloc.rate:                   705.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4785.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 214914.997 ops/s
[info]                  ·gc.alloc.rate:                   702.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4824.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.457 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   215242.454 ±(99.9%) 4468.018 ops/s [Average]
[info]   (min, avg, max) = (213354.127, 215242.454, 216175.690), stdev = 1160.330
[info]   CI (99.9%): [210774.436, 219710.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   703.521 ±(99.9%) 14.401 MB/sec [Average]
[info]   (min, avg, max) = (697.451, 703.521, 706.537), stdev = 3.740
[info]   CI (99.9%): [689.120, 717.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   655.896 ±(99.9%) 7.533 MB/sec [Average]
[info]   (min, avg, max) = (654.144, 655.896, 658.830), stdev = 1.956
[info]   CI (99.9%): [648.363, 663.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4795.877 ±(99.9%) 105.237 B/op [Average]
[info]   (min, avg, max) = (4771.135, 4795.877, 4825.512), stdev = 27.330
[info]   CI (99.9%): [4690.640, 4901.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.427 ±(99.9%) 0.880 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.427, 0.768), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 1.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.21% complete, ETA 00:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93887.917 ops/s
[info] # Warmup Iteration   2: 132772.267 ops/s
[info] # Warmup Iteration   3: 132231.930 ops/s
[info] Iteration   1: 133458.690 ops/s
[info]                  ·gc.alloc.rate:                   1828.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19576.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.227 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 131673.592 ops/s
[info]                  ·gc.alloc.rate:                   1804.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23978.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.493 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 134092.387 ops/s
[info]                  ·gc.alloc.rate:                   1836.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19730.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.222 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 131896.787 ops/s
[info]                  ·gc.alloc.rate:                   1806.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24171.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.242 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 132528.743 ops/s
[info]                  ·gc.alloc.rate:                   1815.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20117.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   132730.040 ±(99.9%) 3963.467 ops/s [Average]
[info]   (min, avg, max) = (131673.592, 132730.040, 134092.387), stdev = 1029.300
[info]   CI (99.9%): [128766.573, 136693.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1818.382 ±(99.9%) 53.737 MB/sec [Average]
[info]   (min, avg, max) = (1804.182, 1818.382, 1836.881), stdev = 13.955
[info]   CI (99.9%): [1764.645, 1872.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21560.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21560.003, 21560.003, 21560.003), stdev = 0.001
[info]   CI (99.9%): [21560.003, 21560.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1813.508 ±(99.9%) 714.166 MB/sec [Average]
[info]   (min, avg, max) = (1659.956, 1813.508, 2025.648), stdev = 185.467
[info]   CI (99.9%): [1099.342, 2527.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21514.773 ±(99.9%) 9034.981 B/op [Average]
[info]   (min, avg, max) = (19576.791, 21514.773, 24171.616), stdev = 2346.356
[info]   CI (99.9%): [12479.792, 30549.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.086 ±(99.9%) 1.859 B/op [Average]
[info]   (min, avg, max) = (0.247, 1.086, 1.493), stdev = 0.483
[info]   CI (99.9%): [≈ 0, 2.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.46% complete, ETA 00:37:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126464.781 ops/s
[info] # Warmup Iteration   2: 182915.800 ops/s
[info] # Warmup Iteration   3: 182569.979 ops/s
[info] Iteration   1: 186530.373 ops/s
[info]                  ·gc.alloc.rate:                   1112.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8284.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.527 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 182432.530 ops/s
[info]                  ·gc.alloc.rate:                   1087.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11344.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.718 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 188655.796 ops/s
[info]                  ·gc.alloc.rate:                   1124.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8268.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 188502.762 ops/s
[info]                  ·gc.alloc.rate:                   1124.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8317.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 182157.124 ops/s
[info]                  ·gc.alloc.rate:                   1086.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11534.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.719 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   185655.717 ±(99.9%) 12252.712 ops/s [Average]
[info]   (min, avg, max) = (182157.124, 185655.717, 188655.796), stdev = 3181.990
[info]   CI (99.9%): [173403.005, 197908.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1107.156 ±(99.9%) 73.265 MB/sec [Average]
[info]   (min, avg, max) = (1086.225, 1107.156, 1124.850), stdev = 19.027
[info]   CI (99.9%): [1033.891, 1180.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.002, 9384.002, 9384.003), stdev = 0.001
[info]   CI (99.9%): [9384.002, 9384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1124.033 ±(99.9%) 707.661 MB/sec [Average]
[info]   (min, avg, max) = (982.170, 1124.033, 1335.124), stdev = 183.777
[info]   CI (99.9%): [416.372, 1831.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9549.947 ±(99.9%) 6646.828 B/op [Average]
[info]   (min, avg, max) = (8268.931, 9549.947, 11534.261), stdev = 1726.160
[info]   CI (99.9%): [2903.119, 16196.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.532 ±(99.9%) 0.857 B/op [Average]
[info]   (min, avg, max) = (0.174, 0.532, 0.719), stdev = 0.223
[info]   CI (99.9%): [≈ 0, 1.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.70% complete, ETA 00:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314844.704 ops/s
[info] # Warmup Iteration   2: 324907.602 ops/s
[info] # Warmup Iteration   3: 330065.042 ops/s
[info] Iteration   1: 330916.891 ops/s
[info]                  ·gc.alloc.rate:                   642.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3161.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 330912.286 ops/s
[info]                  ·gc.alloc.rate:                   642.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3160.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 326834.547 ops/s
[info]                  ·gc.alloc.rate:               634.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1599.080 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 321598.259 ops/s
[info]                  ·gc.alloc.rate:                   624.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3253.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 319290.139 ops/s
[info]                  ·gc.alloc.rate:                   619.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3280.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   325910.424 ±(99.9%) 20499.054 ops/s [Average]
[info]   (min, avg, max) = (319290.139, 325910.424, 330916.891), stdev = 5323.539
[info]   CI (99.9%): [305411.370, 346409.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   632.853 ±(99.9%) 39.930 MB/sec [Average]
[info]   (min, avg, max) = (619.974, 632.853, 642.655), stdev = 10.370
[info]   CI (99.9%): [592.923, 672.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   598.353 ±(99.9%) 573.196 MB/sec [Average]
[info]   (min, avg, max) = (332.070, 598.353, 665.479), stdev = 148.857
[info]   CI (99.9%): [25.157, 1171.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2891.003 ±(99.9%) 2788.644 B/op [Average]
[info]   (min, avg, max) = (1599.080, 2891.003, 3280.309), stdev = 724.202
[info]   CI (99.9%): [102.359, 5679.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.361 ±(99.9%) 0.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.361, 0.594), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 1.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.95% complete, ETA 00:36:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29645.967 ops/s
[info] # Warmup Iteration   2: 66681.473 ops/s
[info] # Warmup Iteration   3: 67209.327 ops/s
[info] Iteration   1: 67429.647 ops/s
[info]                  ·gc.alloc.rate:                   2801.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              65384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62268.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.943 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 65873.451 ops/s
[info]                  ·gc.alloc.rate:                   2736.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              65384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64346.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.989 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 67244.906 ops/s
[info]                  ·gc.alloc.rate:                   2793.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              65384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3046.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71311.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.923 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 67847.428 ops/s
[info]                  ·gc.alloc.rate:                   2819.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              65384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63010.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.966 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 66725.207 ops/s
[info]                  ·gc.alloc.rate:                   2771.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              65384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64137.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.437 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   67024.128 ±(99.9%) 2922.701 ops/s [Average]
[info]   (min, avg, max) = (65873.451, 67024.128, 67847.428), stdev = 759.016
[info]   CI (99.9%): [64101.427, 69946.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2784.650 ±(99.9%) 122.555 MB/sec [Average]
[info]   (min, avg, max) = (2736.690, 2784.650, 2819.827), stdev = 31.827
[info]   CI (99.9%): [2662.095, 2907.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65384.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65384.006, 65384.007, 65384.007), stdev = 0.001
[info]   CI (99.9%): [65384.006, 65384.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2768.873 ±(99.9%) 603.506 MB/sec [Average]
[info]   (min, avg, max) = (2667.766, 2768.873, 3046.722), stdev = 156.729
[info]   CI (99.9%): [2165.367, 3372.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65014.804 ±(99.9%) 13940.139 B/op [Average]
[info]   (min, avg, max) = (62268.091, 65014.804, 71311.337), stdev = 3620.210
[info]   CI (99.9%): [51074.664, 78954.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.252 ±(99.9%) 3.690 B/op [Average]
[info]   (min, avg, max) = (0.966, 2.252, 3.437), stdev = 0.958
[info]   CI (99.9%): [≈ 0, 5.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.19% complete, ETA 00:36:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123011.034 ops/s
[info] # Warmup Iteration   2: 167451.534 ops/s
[info] # Warmup Iteration   3: 168981.787 ops/s
[info] Iteration   1: 167301.326 ops/s
[info]                  ·gc.alloc.rate:                   1070.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9302.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.587 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 162721.251 ops/s
[info]                  ·gc.alloc.rate:                   1040.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9590.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 166738.190 ops/s
[info]                  ·gc.alloc.rate:                   1066.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12531.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 166427.745 ops/s
[info]                  ·gc.alloc.rate:                   1064.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9465.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 167289.332 ops/s
[info]                  ·gc.alloc.rate:                   1069.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9441.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   166095.569 ±(99.9%) 7403.919 ops/s [Average]
[info]   (min, avg, max) = (162721.251, 166095.569, 167301.326), stdev = 1922.774
[info]   CI (99.9%): [158691.650, 173499.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1062.195 ±(99.9%) 47.550 MB/sec [Average]
[info]   (min, avg, max) = (1040.540, 1062.195, 1070.125), stdev = 12.348
[info]   CI (99.9%): [1014.645, 1109.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10064.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10064.003, 10064.003, 10064.003), stdev = 0.001
[info]   CI (99.9%): [10064.002, 10064.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1062.601 ±(99.9%) 571.402 MB/sec [Average]
[info]   (min, avg, max) = (989.186, 1062.601, 1327.831), stdev = 148.391
[info]   CI (99.9%): [491.199, 1634.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10066.213 ±(99.9%) 5320.722 B/op [Average]
[info]   (min, avg, max) = (9302.809, 10066.213, 12531.253), stdev = 1381.775
[info]   CI (99.9%): [4745.491, 15386.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.672 ±(99.9%) 0.875 B/op [Average]
[info]   (min, avg, max) = (0.392, 0.672, 0.982), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 1.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.44% complete, ETA 00:36:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371750.020 ops/s
[info] # Warmup Iteration   2: 524430.731 ops/s
[info] # Warmup Iteration   3: 514269.577 ops/s
[info] Iteration   1: 532347.403 ops/s
[info]                  ·gc.alloc.rate:                   524.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1722.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 532137.236 ops/s
[info]                  ·gc.alloc.rate:                   524.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 540758.337 ops/s
[info]                  ·gc.alloc.rate:                   533.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1903.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 538364.719 ops/s
[info]                  ·gc.alloc.rate:                   531.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1912.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 540135.097 ops/s
[info]                  ·gc.alloc.rate:               532.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 954.987 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   536748.559 ±(99.9%) 16199.431 ops/s [Average]
[info]   (min, avg, max) = (532137.236, 536748.559, 540758.337), stdev = 4206.941
[info]   CI (99.9%): [520549.128, 552947.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   529.391 ±(99.9%) 16.151 MB/sec [Average]
[info]   (min, avg, max) = (524.799, 529.391, 533.389), stdev = 4.194
[info]   CI (99.9%): [513.240, 545.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.165 ±(99.9%) 649.218 MB/sec [Average]
[info]   (min, avg, max) = (326.776, 509.165, 654.369), stdev = 168.600
[info]   CI (99.9%): [≈ 0, 1158.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1491.959 ±(99.9%) 1890.307 B/op [Average]
[info]   (min, avg, max) = (954.987, 1491.959, 1912.308), stdev = 490.907
[info]   CI (99.9%): [≈ 0, 3382.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.452 ±(99.9%) 3.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.136), stdev = 0.942
[info]   CI (99.9%): [≈ 0, 4.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.336 ±(99.9%) 10.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.336, 6.315), stdev = 2.784
[info]   CI (99.9%): [≈ 0, 12.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.68% complete, ETA 00:36:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1037362.498 ops/s
[info] # Warmup Iteration   2: 1127124.610 ops/s
[info] # Warmup Iteration   3: 1148298.561 ops/s
[info] Iteration   1: 1150119.616 ops/s
[info]                  ·gc.alloc.rate:                   853.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1361.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1142054.352 ops/s
[info]                  ·gc.alloc.rate:                   847.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1371.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1125568.477 ops/s
[info]                  ·gc.alloc.rate:                   835.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1137718.978 ops/s
[info]                  ·gc.alloc.rate:                   844.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1381.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1152542.603 ops/s
[info]                  ·gc.alloc.rate:                   855.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     911.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1141600.805 ±(99.9%) 41499.639 ops/s [Average]
[info]   (min, avg, max) = (1125568.477, 1141600.805, 1152542.603), stdev = 10777.325
[info]   CI (99.9%): [1100101.166, 1183100.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   847.294 ±(99.9%) 30.826 MB/sec [Average]
[info]   (min, avg, max) = (835.424, 847.294, 855.468), stdev = 8.005
[info]   CI (99.9%): [816.468, 878.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   864.465 ±(99.9%) 696.257 MB/sec [Average]
[info]   (min, avg, max) = (664.887, 864.465, 998.884), stdev = 180.816
[info]   CI (99.9%): [168.208, 1560.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1191.342 ±(99.9%) 951.853 B/op [Average]
[info]   (min, avg, max) = (911.928, 1191.342, 1381.809), stdev = 247.193
[info]   CI (99.9%): [239.489, 2143.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.109 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.109, 0.143), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.92% complete, ETA 00:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1033105.375 ops/s
[info] # Warmup Iteration   2: 1119763.526 ops/s
[info] # Warmup Iteration   3: 1122816.896 ops/s
[info] Iteration   1: 1121745.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1122519.645 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1100601.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1099449.286 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1100071.845 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1108877.586 ±(99.9%) 46632.343 ops/s [Average]
[info]   (min, avg, max) = (1099449.286, 1108877.586, 1122519.645), stdev = 12110.271
[info]   CI (99.9%): [1062245.243, 1155509.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.17% complete, ETA 00:35:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204528.429 ops/s
[info] # Warmup Iteration   2: 333860.517 ops/s
[info] # Warmup Iteration   3: 342069.422 ops/s
[info] Iteration   1: 348929.035 ops/s
[info]                  ·gc.alloc.rate:                   952.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4410.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 348766.003 ops/s
[info]                  ·gc.alloc.rate:                   952.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4422.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 334668.108 ops/s
[info]                  ·gc.alloc.rate:               913.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      984.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4628.807 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 337153.907 ops/s
[info]                  ·gc.alloc.rate:                   920.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4616.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 335931.931 ops/s
[info]                  ·gc.alloc.rate:                   916.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4661.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   341089.797 ±(99.9%) 27479.591 ops/s [Average]
[info]   (min, avg, max) = (334668.108, 341089.797, 348929.035), stdev = 7136.362
[info]   CI (99.9%): [313610.206, 368569.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   931.078 ±(99.9%) 74.879 MB/sec [Average]
[info]   (min, avg, max) = (913.697, 931.078, 952.396), stdev = 19.446
[info]   CI (99.9%): [856.199, 1005.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   985.219 ±(99.9%) 26.437 MB/sec [Average]
[info]   (min, avg, max) = (977.878, 985.219, 994.885), stdev = 6.865
[info]   CI (99.9%): [958.783, 1011.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4547.806 ±(99.9%) 466.144 B/op [Average]
[info]   (min, avg, max) = (4410.945, 4547.806, 4661.135), stdev = 121.056
[info]   CI (99.9%): [4081.662, 5013.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.324 ±(99.9%) 0.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.324, 0.563), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.41% complete, ETA 00:35:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 426.245 ops/s
[info] # Warmup Iteration   2: 672.259 ops/s
[info] # Warmup Iteration   3: 672.525 ops/s
[info] Iteration   1: 662.519 ops/s
[info]                  ·gc.alloc.rate:               1381.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          3281136.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1628.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3867711.324 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 661.197 ops/s
[info]                  ·gc.alloc.rate:                   1378.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              3281136.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3120384.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.495 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 680.007 ops/s
[info]                  ·gc.alloc.rate:                   1418.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              3281136.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3056421.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.235 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 673.514 ops/s
[info]                  ·gc.alloc.rate:                   1404.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              3281136.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3107612.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.234 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 681.191 ops/s
[info]                  ·gc.alloc.rate:                   1421.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              3281136.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3863741.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192.188 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   671.686 ±(99.9%) 36.376 ops/s [Average]
[info]   (min, avg, max) = (661.197, 671.686, 681.191), stdev = 9.447
[info]   CI (99.9%): [635.309, 708.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1400.845 ±(99.9%) 76.592 MB/sec [Average]
[info]   (min, avg, max) = (1378.985, 1400.845, 1421.219), stdev = 19.891
[info]   CI (99.9%): [1324.253, 1477.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3281136.743 ±(99.9%) 0.522 B/op [Average]
[info]   (min, avg, max) = (3281136.641, 3281136.743, 3281136.967), stdev = 0.136
[info]   CI (99.9%): [3281136.221, 3281137.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1452.918 ±(99.9%) 699.466 MB/sec [Average]
[info]   (min, avg, max) = (1311.425, 1452.918, 1673.573), stdev = 181.649
[info]   CI (99.9%): [753.452, 2152.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3403174.271 ±(99.9%) 1628554.509 B/op [Average]
[info]   (min, avg, max) = (3056421.968, 3403174.271, 3867711.324), stdev = 422930.434
[info]   CI (99.9%): [1774619.763, 5031728.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   106.831 ±(99.9%) 276.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.831, 192.188), stdev = 71.831
[info]   CI (99.9%): [≈ 0, 383.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.66% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 379.638 ops/s
[info] # Warmup Iteration   2: 675.225 ops/s
[info] # Warmup Iteration   3: 688.628 ops/s
[info] Iteration   1: 683.391 ops/s
[info]                  ·gc.alloc.rate:                   1417.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263304.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1613.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3715239.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.906 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 688.445 ops/s
[info]                  ·gc.alloc.rate:                   1427.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263333.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2976799.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 687.212 ops/s
[info]                  ·gc.alloc.rate:                   1425.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263304.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3008559.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.512 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 689.162 ops/s
[info]                  ·gc.alloc.rate:                   1429.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263304.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3781712.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.959 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 690.425 ops/s
[info]                  ·gc.alloc.rate:                   1431.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263304.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3042539.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.263 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   687.727 ±(99.9%) 10.354 ops/s [Average]
[info]   (min, avg, max) = (683.391, 687.727, 690.425), stdev = 2.689
[info]   CI (99.9%): [677.373, 698.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1426.416 ±(99.9%) 21.518 MB/sec [Average]
[info]   (min, avg, max) = (1417.349, 1426.416, 1431.834), stdev = 5.588
[info]   CI (99.9%): [1404.898, 1447.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3263310.331 ±(99.9%) 48.832 B/op [Average]
[info]   (min, avg, max) = (3263304.625, 3263310.331, 3263333.016), stdev = 12.681
[info]   CI (99.9%): [3263261.499, 3263359.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1444.392 ±(99.9%) 674.619 MB/sec [Average]
[info]   (min, avg, max) = (1302.548, 1444.392, 1656.683), stdev = 175.196
[info]   CI (99.9%): [769.773, 2119.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3304970.055 ±(99.9%) 1564173.498 B/op [Average]
[info]   (min, avg, max) = (2976799.210, 3304970.055, 3781712.139), stdev = 406210.890
[info]   CI (99.9%): [1740796.556, 4869143.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   142.663 ±(99.9%) 223.747 B/op [Average]
[info]   (min, avg, max) = (47.906, 142.663, 190.512), stdev = 58.106
[info]   CI (99.9%): [≈ 0, 366.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.90% complete, ETA 00:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18902.001 ops/s
[info] # Warmup Iteration   2: 26875.704 ops/s
[info] # Warmup Iteration   3: 26927.786 ops/s
[info] Iteration   1: 27067.506 ops/s
[info]                  ·gc.alloc.rate:               472.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          27488.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14873.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 27025.165 ops/s
[info]                  ·gc.alloc.rate:                   472.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              27488.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38212.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27107.339 ops/s
[info]                  ·gc.alloc.rate:               473.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          27488.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18951.800 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 26982.157 ops/s
[info]                  ·gc.alloc.rate:                   471.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              27488.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38079.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27167.991 ops/s
[info]                  ·gc.alloc.rate:               474.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          27488.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18907.862 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   27070.031 ±(99.9%) 277.201 ops/s [Average]
[info]   (min, avg, max) = (26982.157, 27070.031, 27167.991), stdev = 71.988
[info]   CI (99.9%): [26792.830, 27347.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   472.836 ±(99.9%) 4.848 MB/sec [Average]
[info]   (min, avg, max) = (471.326, 472.836, 474.585), stdev = 1.259
[info]   CI (99.9%): [467.988, 477.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   27488.018 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (27488.016, 27488.018, 27488.022), stdev = 0.002
[info]   CI (99.9%): [27488.008, 27488.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   443.560 ±(99.9%) 749.945 MB/sec [Average]
[info]   (min, avg, max) = (255.842, 443.560, 656.182), stdev = 194.758
[info]   CI (99.9%): [≈ 0, 1193.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25804.963 ±(99.9%) 43846.612 B/op [Average]
[info]   (min, avg, max) = (14873.418, 25804.963, 38212.563), stdev = 11386.826
[info]   CI (99.9%): [≈ 0, 69651.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.728 ±(99.9%) 6.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.728, 3.577), stdev = 1.593
[info]   CI (99.9%): [≈ 0, 6.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42.390 ±(99.9%) 357.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.390, 208.308), stdev = 92.764
[info]   CI (99.9%): [≈ 0, 399.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.15% complete, ETA 00:34:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342.317 ops/s
[info] # Warmup Iteration   2: 637.578 ops/s
[info] # Warmup Iteration   3: 673.265 ops/s
[info] Iteration   1: 672.332 ops/s
[info]                  ·gc.alloc.rate:                   1437.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              3364704.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1290.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3021083.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 668.089 ops/s
[info]                  ·gc.alloc.rate:                   1429.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              3364729.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1628.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3833023.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195.922 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 676.157 ops/s
[info]                  ·gc.alloc.rate:                   1446.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              3364688.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3057443.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.804 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 676.346 ops/s
[info]                  ·gc.alloc.rate:                   1446.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              3364688.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3855878.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.402 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 675.769 ops/s
[info]                  ·gc.alloc.rate:                   1444.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              3364688.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3111602.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.420 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   673.739 ±(99.9%) 13.706 ops/s [Average]
[info]   (min, avg, max) = (668.089, 673.739, 676.346), stdev = 3.559
[info]   CI (99.9%): [660.033, 687.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1440.907 ±(99.9%) 28.165 MB/sec [Average]
[info]   (min, avg, max) = (1429.481, 1440.907, 1446.525), stdev = 7.314
[info]   CI (99.9%): [1412.742, 1469.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3364700.080 ±(99.9%) 69.335 B/op [Average]
[info]   (min, avg, max) = (3364688.638, 3364700.080, 3364729.794), stdev = 18.006
[info]   CI (99.9%): [3364630.745, 3364769.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1445.422 ±(99.9%) 698.597 MB/sec [Average]
[info]   (min, avg, max) = (1290.869, 1445.422, 1657.694), stdev = 181.423
[info]   CI (99.9%): [746.825, 2144.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3375806.211 ±(99.9%) 1652307.946 B/op [Average]
[info]   (min, avg, max) = (3021083.007, 3375806.211, 3855878.806), stdev = 429099.126
[info]   CI (99.9%): [1723498.265, 5028114.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   116.785 ±(99.9%) 215.557 B/op [Average]
[info]   (min, avg, max) = (48.402, 116.785, 195.922), stdev = 55.979
[info]   CI (99.9%): [≈ 0, 332.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.39% complete, ETA 00:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7988.456 ops/s
[info] # Warmup Iteration   2: 13040.393 ops/s
[info] # Warmup Iteration   3: 13103.122 ops/s
[info] Iteration   1: 13060.532 ops/s
[info]                  ·gc.alloc.rate:                   1051.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1293.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155885.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.525 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13059.340 ops/s
[info]                  ·gc.alloc.rate:                   1051.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117293.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13118.881 ops/s
[info]                  ·gc.alloc.rate:                   1056.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              126770.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117347.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13141.982 ops/s
[info]                  ·gc.alloc.rate:                   1059.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117709.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13067.818 ops/s
[info]                  ·gc.alloc.rate:                   1052.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159011.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.757 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13089.711 ±(99.9%) 147.086 ops/s [Average]
[info]   (min, avg, max) = (13059.340, 13089.711, 13141.982), stdev = 38.198
[info]   CI (99.9%): [12942.625, 13236.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1054.368 ±(99.9%) 12.926 MB/sec [Average]
[info]   (min, avg, max) = (1051.498, 1054.368, 1059.070), stdev = 3.357
[info]   CI (99.9%): [1041.441, 1067.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126749.284 ±(99.9%) 131.254 B/op [Average]
[info]   (min, avg, max) = (126712.033, 126749.284, 126776.033), stdev = 34.086
[info]   CI (99.9%): [126618.030, 126880.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1109.822 ±(99.9%) 693.991 MB/sec [Average]
[info]   (min, avg, max) = (973.702, 1109.822, 1320.300), stdev = 180.227
[info]   CI (99.9%): [415.831, 1803.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133449.484 ±(99.9%) 84469.373 B/op [Average]
[info]   (min, avg, max) = (117293.434, 133449.484, 159011.295), stdev = 21936.428
[info]   CI (99.9%): [48980.111, 217918.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.077 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.077, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.250 ±(99.9%) 12.468 B/op [Average]
[info]   (min, avg, max) = (5.018, 9.250, 12.486), stdev = 3.238
[info]   CI (99.9%): [≈ 0, 21.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.64% complete, ETA 00:34:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10471.930 ops/s
[info] # Warmup Iteration   2: 14952.636 ops/s
[info] # Warmup Iteration   3: 15037.190 ops/s
[info] Iteration   1: 14942.734 ops/s
[info]                  ·gc.alloc.rate:                   934.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          965.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101665.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15170.371 ops/s
[info]                  ·gc.alloc.rate:                   948.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              98399.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          967.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100344.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.798 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14967.690 ops/s
[info]                  ·gc.alloc.rate:                   935.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102119.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15008.619 ops/s
[info]                  ·gc.alloc.rate:               938.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          98399.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      652.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68386.910 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 15416.953 ops/s
[info]                  ·gc.alloc.rate:                   964.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100410.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   15101.273 ±(99.9%) 760.423 ops/s [Average]
[info]   (min, avg, max) = (14942.734, 15101.273, 15416.953), stdev = 197.479
[info]   CI (99.9%): [14340.851, 15861.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   944.255 ±(99.9%) 48.062 MB/sec [Average]
[info]   (min, avg, max) = (934.259, 944.255, 964.284), stdev = 12.481
[info]   CI (99.9%): [896.194, 992.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98400.031 ±(99.9%) 0.454 B/op [Average]
[info]   (min, avg, max) = (98399.918, 98400.031, 98400.165), stdev = 0.118
[info]   CI (99.9%): [98399.577, 98400.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   907.978 ±(99.9%) 551.432 MB/sec [Average]
[info]   (min, avg, max) = (652.136, 907.978, 983.980), stdev = 143.205
[info]   CI (99.9%): [356.546, 1459.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94585.206 ±(99.9%) 56472.609 B/op [Average]
[info]   (min, avg, max) = (68386.910, 94585.206, 102119.017), stdev = 14665.757
[info]   CI (99.9%): [38112.597, 151057.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.050 ±(99.9%) 15.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.050, 10.798), stdev = 4.129
[info]   CI (99.9%): [≈ 0, 21.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.88% complete, ETA 00:34:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253906.478 ops/s
[info] # Warmup Iteration   2: 271442.007 ops/s
[info] # Warmup Iteration   3: 273304.436 ops/s
[info] Iteration   1: 270988.035 ops/s
[info]                  ·gc.alloc.rate:                   956.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5687.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 273434.247 ops/s
[info]                  ·gc.alloc.rate:                   964.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3761.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 272668.561 ops/s
[info]                  ·gc.alloc.rate:                   962.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5675.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 272362.950 ops/s
[info]                  ·gc.alloc.rate:                   961.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5706.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 272631.638 ops/s
[info]                  ·gc.alloc.rate:                   961.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5731.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   272417.086 ±(99.9%) 3438.199 ops/s [Average]
[info]   (min, avg, max) = (270988.035, 272417.086, 273434.247), stdev = 892.889
[info]   CI (99.9%): [268978.887, 275855.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   961.194 ±(99.9%) 11.580 MB/sec [Average]
[info]   (min, avg, max) = (956.341, 961.194, 964.552), stdev = 3.007
[info]   CI (99.9%): [949.614, 972.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   919.500 ±(99.9%) 572.952 MB/sec [Average]
[info]   (min, avg, max) = (653.475, 919.500, 992.861), stdev = 148.794
[info]   CI (99.9%): [346.548, 1492.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5312.512 ±(99.9%) 3339.831 B/op [Average]
[info]   (min, avg, max) = (3761.429, 5312.512, 5731.720), stdev = 867.344
[info]   CI (99.9%): [1972.681, 8652.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.433 ±(99.9%) 0.524 B/op [Average]
[info]   (min, avg, max) = (0.241, 0.433, 0.599), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 61.12% complete, ETA 00:33:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285993.148 ops/s
[info] # Warmup Iteration   2: 309053.629 ops/s
[info] # Warmup Iteration   3: 317991.032 ops/s
[info] Iteration   1: 317222.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 317629.634 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 318249.242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 318610.696 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 317806.670 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   317903.824 ±(99.9%) 2080.139 ops/s [Average]
[info]   (min, avg, max) = (317222.878, 317903.824, 318610.696), stdev = 540.205
[info]   CI (99.9%): [315823.685, 319983.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.37% complete, ETA 00:33:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10584.048 ops/s
[info] # Warmup Iteration   2: 15018.680 ops/s
[info] # Warmup Iteration   3: 15212.049 ops/s
[info] Iteration   1: 15233.122 ops/s
[info]                  ·gc.alloc.rate:                   1009.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              104279.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          969.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100136.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15037.758 ops/s
[info]                  ·gc.alloc.rate:                   996.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              104264.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1294.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135525.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.893 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15070.246 ops/s
[info]                  ·gc.alloc.rate:                   998.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              104255.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102088.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15234.100 ops/s
[info]                  ·gc.alloc.rate:               1009.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          104256.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      983.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101540.585 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15232.938 ops/s
[info]                  ·gc.alloc.rate:                   1009.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              104251.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102235.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15161.633 ±(99.9%) 380.917 ops/s [Average]
[info]   (min, avg, max) = (15037.758, 15161.633, 15234.100), stdev = 98.923
[info]   CI (99.9%): [14780.716, 15542.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1004.548 ±(99.9%) 25.658 MB/sec [Average]
[info]   (min, avg, max) = (996.279, 1004.548, 1009.459), stdev = 6.663
[info]   CI (99.9%): [978.891, 1030.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   104261.604 ±(99.9%) 43.594 B/op [Average]
[info]   (min, avg, max) = (104251.412, 104261.604, 104279.918), stdev = 11.321
[info]   CI (99.9%): [104218.010, 104305.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1042.955 ±(99.9%) 543.291 MB/sec [Average]
[info]   (min, avg, max) = (969.207, 1042.955, 1294.980), stdev = 141.091
[info]   CI (99.9%): [499.665, 1586.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108305.263 ±(99.9%) 58679.452 B/op [Average]
[info]   (min, avg, max) = (100136.393, 108305.263, 135525.015), stdev = 15238.867
[info]   CI (99.9%): [49625.811, 166984.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.638 ±(99.9%) 16.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.638, 10.893), stdev = 4.252
[info]   CI (99.9%): [≈ 0, 22.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Run progress: 61.61% complete, ETA 00:33:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 592546.141 ops/s
[info] # Warmup Iteration   2: 670732.554 ops/s
[info] # Warmup Iteration   3: 671945.172 ops/s
[info] Iteration   1: 672579.150 ops/s
[info]                  ·gc.alloc.rate:      44.449 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 671517.034 ops/s
[info]                  ·gc.alloc.rate:      44.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 668245.710 ops/s
[info]                  ·gc.alloc.rate:               44.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 602.496 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 672617.977 ops/s
[info]                  ·gc.alloc.rate:      44.450 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 672564.901 ops/s
[info]                  ·gc.alloc.rate:      44.446 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   671504.954 ±(99.9%) 7239.575 ops/s [Average]
[info]   (min, avg, max) = (668245.710, 671504.954, 672617.977), stdev = 1880.095
[info]   CI (99.9%): [664265.379, 678744.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   44.379 ±(99.9%) 0.453 MB/sec [Average]
[info]   (min, avg, max) = (44.177, 44.379, 44.450), stdev = 0.118
[info]   CI (99.9%): [43.927, 44.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.001, 104.001, 104.001), stdev = 0.001
[info]   CI (99.9%): [104.001, 104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   51.185 ±(99.9%) 440.721 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 51.185, 255.927), stdev = 114.454
[info]   CI (99.9%): [≈ 0, 491.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   120.499 ±(99.9%) 1037.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 120.499, 602.496), stdev = 269.444
[info]   CI (99.9%): [≈ 0, 1158.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Run progress: 61.86% complete, ETA 00:33:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33696.301 ops/s
[info] # Warmup Iteration   2: 69499.766 ops/s
[info] # Warmup Iteration   3: 70161.332 ops/s
[info] Iteration   1: 72068.753 ops/s
[info]                  ·gc.alloc.rate:                   3156.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73129.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.182 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 72023.590 ops/s
[info]                  ·gc.alloc.rate:                   3155.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3039.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66423.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.639 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 71929.204 ops/s
[info]                  ·gc.alloc.rate:                   3150.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3053.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66801.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.188 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 71567.566 ops/s
[info]                  ·gc.alloc.rate:                   3135.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67256.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.831 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 71053.218 ops/s
[info]                  ·gc.alloc.rate:                   3112.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67859.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.689 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   71728.466 ±(99.9%) 1639.396 ops/s [Average]
[info]   (min, avg, max) = (71053.218, 71728.466, 72068.753), stdev = 425.746
[info]   CI (99.9%): [70089.070, 73367.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3142.166 ±(99.9%) 71.971 MB/sec [Average]
[info]   (min, avg, max) = (3112.546, 3142.166, 3156.941), stdev = 18.691
[info]   CI (99.9%): [3070.195, 3214.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68944.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68944.006, 68944.006, 68944.006), stdev = 0.001
[info]   CI (99.9%): [68944.005, 68944.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3112.703 ±(99.9%) 508.919 MB/sec [Average]
[info]   (min, avg, max) = (3039.992, 3112.703, 3348.605), stdev = 132.165
[info]   CI (99.9%): [2603.784, 3621.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68294.111 ±(99.9%) 10611.596 B/op [Average]
[info]   (min, avg, max) = (66423.060, 68294.111, 73129.739), stdev = 2755.798
[info]   CI (99.9%): [57682.515, 78905.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.167), stdev = 0.034
[info]   CI (99.9%): [0.010, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.106 ±(99.9%) 2.896 B/op [Average]
[info]   (min, avg, max) = (1.831, 3.106, 3.689), stdev = 0.752
[info]   CI (99.9%): [0.210, 6.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Run progress: 62.10% complete, ETA 00:33:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1045640.747 ops/s
[info] # Warmup Iteration   2: 1533577.859 ops/s
[info] # Warmup Iteration   3: 1550927.423 ops/s
[info] Iteration   1: 1552123.674 ops/s
[info]                  ·gc.alloc.rate:                   867.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     993.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1589779.050 ops/s
[info]                  ·gc.alloc.rate:                   889.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1596827.365 ops/s
[info]                  ·gc.alloc.rate:                   893.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1557539.951 ops/s
[info]                  ·gc.alloc.rate:                   870.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1574812.964 ops/s
[info]                  ·gc.alloc.rate:                   880.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     661.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1574216.601 ±(99.9%) 75062.874 ops/s [Average]
[info]   (min, avg, max) = (1552123.674, 1574216.601, 1596827.365), stdev = 19493.590
[info]   CI (99.9%): [1499153.727, 1649279.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   880.280 ±(99.9%) 42.528 MB/sec [Average]
[info]   (min, avg, max) = (867.783, 880.280, 893.176), stdev = 11.044
[info]   CI (99.9%): [837.752, 922.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   880.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (880.000, 880.000, 880.000), stdev = 0.001
[info]   CI (99.9%): [880.000, 880.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   853.758 ±(99.9%) 688.173 MB/sec [Average]
[info]   (min, avg, max) = (654.265, 853.758, 989.249), stdev = 178.716
[info]   CI (99.9%): [165.585, 1541.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   854.277 ±(99.9%) 703.767 B/op [Average]
[info]   (min, avg, max) = (647.605, 854.277, 999.614), stdev = 182.766
[info]   CI (99.9%): [150.511, 1558.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.096, 0.148), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Run progress: 62.35% complete, ETA 00:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1206690.535 ops/s
[info] # Warmup Iteration   2: 1345480.456 ops/s
[info] # Warmup Iteration   3: 1340944.776 ops/s
[info] Iteration   1: 1369854.483 ops/s
[info]                  ·gc.alloc.rate:                   382.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1351356.555 ops/s
[info]                  ·gc.alloc.rate:                   377.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     683.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1361543.426 ops/s
[info]                  ·gc.alloc.rate:                   380.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     383.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1367166.530 ops/s
[info]                  ·gc.alloc.rate:                   382.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1366609.922 ops/s
[info]                  ·gc.alloc.rate:               382.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 381.287 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1363306.183 ±(99.9%) 28204.365 ops/s [Average]
[info]   (min, avg, max) = (1351356.555, 1363306.183, 1369854.483), stdev = 7324.584
[info]   CI (99.9%): [1335101.818, 1391510.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   381.195 ±(99.9%) 7.763 MB/sec [Average]
[info]   (min, avg, max) = (377.923, 381.195, 382.997), stdev = 2.016
[info]   CI (99.9%): [373.432, 388.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   367.386 ±(99.9%) 490.053 MB/sec [Average]
[info]   (min, avg, max) = (255.826, 367.386, 587.426), stdev = 127.265
[info]   CI (99.9%): [≈ 0, 857.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   424.663 ±(99.9%) 577.004 B/op [Average]
[info]   (min, avg, max) = (293.902, 424.663, 683.915), stdev = 149.846
[info]   CI (99.9%): [≈ 0, 1001.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.386 ±(99.9%) 3.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 1.793), stdev = 0.787
[info]   CI (99.9%): [≈ 0, 3.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.449 ±(99.9%) 3.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.449, 2.088), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 3.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.59% complete, ETA 00:32:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1229643.002 ops/s
[info] # Warmup Iteration   2: 1382178.154 ops/s
[info] # Warmup Iteration   3: 1419449.723 ops/s
[info] Iteration   1: 1419723.541 ops/s
[info]                  ·gc.alloc.rate:      14.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1417415.051 ops/s
[info]                  ·gc.alloc.rate:      14.410 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1416670.970 ops/s
[info]                  ·gc.alloc.rate:      14.402 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1415034.508 ops/s
[info]                  ·gc.alloc.rate:      14.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1407586.477 ops/s
[info]                  ·gc.alloc.rate:      14.313 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1415286.109 ±(99.9%) 17801.544 ops/s [Average]
[info]   (min, avg, max) = (1407586.477, 1415286.109, 1419723.541), stdev = 4623.004
[info]   CI (99.9%): [1397484.566, 1433087.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   14.389 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (14.313, 14.389, 14.433), stdev = 0.045
[info]   CI (99.9%): [14.214, 14.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Run progress: 62.84% complete, ETA 00:32:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20842.894 ops/s
[info] # Warmup Iteration   2: 36863.932 ops/s
[info] # Warmup Iteration   3: 37835.722 ops/s
[info] Iteration   1: 37593.636 ops/s
[info]                  ·gc.alloc.rate:                   1632.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68788.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.486 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 38051.749 ops/s
[info]                  ·gc.alloc.rate:                   1652.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68508.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37818.377 ops/s
[info]                  ·gc.alloc.rate:                   1642.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69500.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.332 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 37663.416 ops/s
[info]                  ·gc.alloc.rate:                   1635.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56120.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.610 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37445.602 ops/s
[info]                  ·gc.alloc.rate:                   1626.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70862.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   37714.556 ±(99.9%) 890.763 ops/s [Average]
[info]   (min, avg, max) = (37445.602, 37714.556, 38051.749), stdev = 231.328
[info]   CI (99.9%): [36823.793, 38605.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1638.186 ±(99.9%) 38.262 MB/sec [Average]
[info]   (min, avg, max) = (1626.757, 1638.186, 1652.637), stdev = 9.937
[info]   CI (99.9%): [1599.923, 1676.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68360.012 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (68360.011, 68360.012, 68360.016), stdev = 0.002
[info]   CI (99.9%): [68360.005, 68360.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1599.761 ±(99.9%) 556.298 MB/sec [Average]
[info]   (min, avg, max) = (1342.933, 1599.761, 1686.310), stdev = 144.469
[info]   CI (99.9%): [1043.464, 2156.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66755.938 ±(99.9%) 23161.612 B/op [Average]
[info]   (min, avg, max) = (56120.028, 66755.938, 70862.594), stdev = 6014.997
[info]   CI (99.9%): [43594.325, 89917.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.471 ±(99.9%) 3.275 B/op [Average]
[info]   (min, avg, max) = (2.610, 3.471, 4.332), stdev = 0.851
[info]   CI (99.9%): [0.196, 6.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 63.08% complete, ETA 00:32:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431598.521 ops/s
[info] # Warmup Iteration   2: 799388.391 ops/s
[info] # Warmup Iteration   3: 812542.042 ops/s
[info] Iteration   1: 812250.630 ops/s
[info]                  ·gc.alloc.rate:                   2695.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5851.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 815707.355 ops/s
[info]                  ·gc.alloc.rate:                   2708.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5214.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 812720.389 ops/s
[info]                  ·gc.alloc.rate:                   2699.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5249.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 816127.467 ops/s
[info]                  ·gc.alloc.rate:                   2708.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4586.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 809950.417 ops/s
[info]                  ·gc.alloc.rate:                   2689.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5290.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   813351.252 ±(99.9%) 9898.782 ops/s [Average]
[info]   (min, avg, max) = (809950.417, 813351.252, 816127.467), stdev = 2570.682
[info]   CI (99.9%): [803452.470, 823250.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2700.234 ±(99.9%) 32.070 MB/sec [Average]
[info]   (min, avg, max) = (2689.076, 2700.234, 2708.781), stdev = 8.329
[info]   CI (99.9%): [2668.163, 2732.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2707.347 ±(99.9%) 874.552 MB/sec [Average]
[info]   (min, avg, max) = (2378.079, 2707.347, 3019.780), stdev = 227.118
[info]   CI (99.9%): [1832.795, 3581.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5238.428 ±(99.9%) 1727.046 B/op [Average]
[info]   (min, avg, max) = (4586.227, 5238.428, 5851.509), stdev = 448.508
[info]   CI (99.9%): [3511.382, 6965.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.193 ±(99.9%) 0.299 B/op [Average]
[info]   (min, avg, max) = (0.080, 0.193, 0.282), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 63.33% complete, ETA 00:31:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.877 ops/s
[info] # Warmup Iteration   2: 5206138.942 ops/s
[info] # Warmup Iteration   3: 5237710.841 ops/s
[info] Iteration   1: 5367004.192 ops/s
[info]                  ·gc.alloc.rate:               327.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5097193.734 ops/s
[info]                  ·gc.alloc.rate:                   311.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5180703.037 ops/s
[info]                  ·gc.alloc.rate:               316.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      322.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98.045 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5291701.751 ops/s
[info]                  ·gc.alloc.rate:                   322.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          322.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5202724.570 ops/s
[info]                  ·gc.alloc.rate:               317.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98.035 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5227865.457 ±(99.9%) 400939.307 ops/s [Average]
[info]   (min, avg, max) = (5097193.734, 5227865.457, 5367004.192), stdev = 104122.665
[info]   CI (99.9%): [4826926.150, 5628804.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   318.950 ±(99.9%) 24.373 MB/sec [Average]
[info]   (min, avg, max) = (311.005, 318.950, 327.371), stdev = 6.330
[info]   CI (99.9%): [294.577, 343.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   347.472 ±(99.9%) 371.080 MB/sec [Average]
[info]   (min, avg, max) = (255.801, 347.472, 511.745), stdev = 96.368
[info]   CI (99.9%): [≈ 0, 718.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   105.010 ±(99.9%) 119.965 B/op [Average]
[info]   (min, avg, max) = (75.012, 105.010, 157.964), stdev = 31.154
[info]   CI (99.9%): [≈ 0, 224.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.041), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 63.57% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303657.565 ops/s
[info] # Warmup Iteration   2: 966707.551 ops/s
[info] # Warmup Iteration   3: 971551.349 ops/s
[info] Iteration   1: 978153.012 ops/s
[info]                  ·gc.alloc.rate:                   1213.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1575.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 955027.161 ops/s
[info]                  ·gc.alloc.rate:                   1184.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2160.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 961035.672 ops/s
[info]                  ·gc.alloc.rate:                   1191.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2162.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 951722.216 ops/s
[info]                  ·gc.alloc.rate:                   1180.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1646.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 975457.136 ops/s
[info]                  ·gc.alloc.rate:                   1210.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2153.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   964279.040 ±(99.9%) 46015.898 ops/s [Average]
[info]   (min, avg, max) = (951722.216, 964279.040, 978153.012), stdev = 11950.183
[info]   CI (99.9%): [918263.142, 1010294.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1196.159 ±(99.9%) 57.263 MB/sec [Average]
[info]   (min, avg, max) = (1180.364, 1196.159, 1213.157), stdev = 14.871
[info]   CI (99.9%): [1138.896, 1253.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.368 ±(99.9%) 708.226 MB/sec [Average]
[info]   (min, avg, max) = (978.895, 1188.368, 1335.625), stdev = 183.924
[info]   CI (99.9%): [480.142, 1896.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1939.609 ±(99.9%) 1160.266 B/op [Average]
[info]   (min, avg, max) = (1575.066, 1939.609, 2162.199), stdev = 301.317
[info]   CI (99.9%): [779.343, 3099.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.123 ±(99.9%) 0.154 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.123, 0.172), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 63.81% complete, ETA 00:31:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6315993.186 ops/s
[info] # Warmup Iteration   2: 7240194.376 ops/s
[info] # Warmup Iteration   3: 7269020.219 ops/s
[info] Iteration   1: 7551704.394 ops/s
[info]                  ·gc.alloc.rate:                   345.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7565225.210 ops/s
[info]                  ·gc.alloc.rate:               346.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53.219 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7502008.334 ops/s
[info]                  ·gc.alloc.rate:                   343.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7581607.576 ops/s
[info]                  ·gc.alloc.rate:                   346.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7563574.440 ops/s
[info]                  ·gc.alloc.rate:               346.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69.585 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7552823.991 ±(99.9%) 116817.102 ops/s [Average]
[info]   (min, avg, max) = (7502008.334, 7552823.991, 7581607.576), stdev = 30337.030
[info]   CI (99.9%): [7436006.889, 7669641.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   345.550 ±(99.9%) 5.484 MB/sec [Average]
[info]   (min, avg, max) = (343.193, 345.550, 346.973), stdev = 1.424
[info]   CI (99.9%): [340.066, 351.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   354.417 ±(99.9%) 363.104 MB/sec [Average]
[info]   (min, avg, max) = (255.827, 354.417, 511.590), stdev = 94.297
[info]   CI (99.9%): [≈ 0, 717.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   73.856 ±(99.9%) 75.776 B/op [Average]
[info]   (min, avg, max) = (53.219, 73.856, 106.624), stdev = 19.679
[info]   CI (99.9%): [≈ 0, 149.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.321 ±(99.9%) 2.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.321, 1.480), stdev = 0.649
[info]   CI (99.9%): [≈ 0, 2.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.524 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.311), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 64.06% complete, ETA 00:31:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33825.755 ops/s
[info] # Warmup Iteration   2: 277121.355 ops/s
[info] # Warmup Iteration   3: 286074.919 ops/s
[info] Iteration   1: 287073.182 ops/s
[info]                  ·gc.alloc.rate:                   1485.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7159.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 286019.585 ops/s
[info]                  ·gc.alloc.rate:                   1480.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9048.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.802 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 290040.552 ops/s
[info]                  ·gc.alloc.rate:                   1500.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7193.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 290070.492 ops/s
[info]                  ·gc.alloc.rate:                   1500.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9055.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 290342.358 ops/s
[info]                  ·gc.alloc.rate:                   1502.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7277.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.564 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   288709.233 ±(99.9%) 7750.085 ops/s [Average]
[info]   (min, avg, max) = (286019.585, 288709.233, 290342.358), stdev = 2012.673
[info]   CI (99.9%): [280959.148, 296459.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1493.914 ±(99.9%) 40.100 MB/sec [Average]
[info]   (min, avg, max) = (1480.012, 1493.914, 1502.397), stdev = 10.414
[info]   CI (99.9%): [1453.814, 1534.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8144.001, 8144.002, 8144.002), stdev = 0.001
[info]   CI (99.9%): [8144.001, 8144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1457.509 ±(99.9%) 702.685 MB/sec [Average]
[info]   (min, avg, max) = (1305.943, 1457.509, 1669.013), stdev = 182.485
[info]   CI (99.9%): [754.824, 2160.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7947.108 ±(99.9%) 3887.734 B/op [Average]
[info]   (min, avg, max) = (7159.940, 7947.108, 9055.962), stdev = 1009.632
[info]   CI (99.9%): [4059.374, 11834.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.477 ±(99.9%) 0.792 B/op [Average]
[info]   (min, avg, max) = (0.339, 0.477, 0.802), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 1.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 64.30% complete, ETA 00:31:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2219.150 ops/s
[info] # Warmup Iteration   2: 3614.178 ops/s
[info] # Warmup Iteration   3: 3623.022 ops/s
[info] Iteration   1: 3727.756 ops/s
[info]                  ·gc.alloc.rate:                   1849.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     837679.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.172 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3695.692 ops/s
[info]                  ·gc.alloc.rate:                   1833.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709497.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3749.369 ops/s
[info]                  ·gc.alloc.rate:                   1859.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     844732.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.643 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3688.125 ops/s
[info]                  ·gc.alloc.rate:                   1829.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719137.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.178 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3740.131 ops/s
[info]                  ·gc.alloc.rate:                   1855.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     853772.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.110 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   3720.215 ±(99.9%) 104.298 ops/s [Average]
[info]   (min, avg, max) = (3688.125, 3720.215, 3749.369), stdev = 27.086
[info]   CI (99.9%): [3615.916, 3824.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1845.308 ±(99.9%) 51.672 MB/sec [Average]
[info]   (min, avg, max) = (1829.374, 1845.308, 1859.702), stdev = 13.419
[info]   CI (99.9%): [1793.636, 1896.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   780640.118 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (780640.115, 780640.118, 780640.124), stdev = 0.004
[info]   CI (99.9%): [780640.104, 780640.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1875.389 ±(99.9%) 705.182 MB/sec [Average]
[info]   (min, avg, max) = (1666.118, 1875.389, 2029.009), stdev = 183.134
[info]   CI (99.9%): [1170.206, 2580.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   792963.979 ±(99.9%) 277635.111 B/op [Average]
[info]   (min, avg, max) = (709497.664, 792963.979, 853772.386), stdev = 72100.957
[info]   CI (99.9%): [515328.868, 1070599.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.246 ±(99.9%) 0.337 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 0.246, 0.375), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   103.866 ±(99.9%) 142.184 B/op [Average]
[info]   (min, avg, max) = (62.178, 103.866, 158.172), stdev = 36.925
[info]   CI (99.9%): [≈ 0, 246.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 64.55% complete, ETA 00:30:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2254.208 ops/s
[info] # Warmup Iteration   2: 4825.224 ops/s
[info] # Warmup Iteration   3: 5036.874 ops/s
[info] Iteration   1: 5044.140 ops/s
[info]                  ·gc.alloc.rate:                   2112.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     615427.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.476 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5079.944 ops/s
[info]                  ·gc.alloc.rate:                   2127.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2328.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     721166.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.796 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5086.248 ops/s
[info]                  ·gc.alloc.rate:                   2129.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     622798.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.201 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5075.069 ops/s
[info]                  ·gc.alloc.rate:                   2125.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627575.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.366 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 5025.977 ops/s
[info]                  ·gc.alloc.rate:                   2105.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636195.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.074 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5062.276 ±(99.9%) 99.987 ops/s [Average]
[info]   (min, avg, max) = (5025.977, 5062.276, 5086.248), stdev = 25.966
[info]   CI (99.9%): [4962.288, 5162.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2119.953 ±(99.9%) 41.529 MB/sec [Average]
[info]   (min, avg, max) = (2105.052, 2119.953, 2129.865), stdev = 10.785
[info]   CI (99.9%): [2078.425, 2161.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   659032.088 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (659032.085, 659032.088, 659032.092), stdev = 0.004
[info]   CI (99.9%): [659032.074, 659032.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2073.824 ±(99.9%) 554.362 MB/sec [Average]
[info]   (min, avg, max) = (1972.415, 2073.824, 2328.079), stdev = 143.966
[info]   CI (99.9%): [1519.462, 2628.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   644632.868 ±(99.9%) 167284.605 B/op [Average]
[info]   (min, avg, max) = (615427.856, 644632.868, 721166.863), stdev = 43443.281
[info]   CI (99.9%): [477348.262, 811917.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27.183 ±(99.9%) 20.865 B/op [Average]
[info]   (min, avg, max) = (19.366, 27.183, 32.476), stdev = 5.419
[info]   CI (99.9%): [6.317, 48.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 64.79% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39186.280 ops/s
[info] # Warmup Iteration   2: 42057.339 ops/s
[info] # Warmup Iteration   3: 42887.284 ops/s
[info] Iteration   1: 43058.590 ops/s
[info]                  ·gc.alloc.rate:                   716.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24299.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42895.315 ops/s
[info]                  ·gc.alloc.rate:                   713.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36588.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41485.286 ops/s
[info]                  ·gc.alloc.rate:               690.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          26184.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25221.828 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 42155.190 ops/s
[info]                  ·gc.alloc.rate:                   701.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24870.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 42299.606 ops/s
[info]                  ·gc.alloc.rate:                   703.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24809.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   42378.797 ±(99.9%) 2422.803 ops/s [Average]
[info]   (min, avg, max) = (41485.286, 42378.797, 43058.590), stdev = 629.194
[info]   CI (99.9%): [39955.994, 44801.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   705.066 ±(99.9%) 40.203 MB/sec [Average]
[info]   (min, avg, max) = (690.175, 705.066, 716.316), stdev = 10.441
[info]   CI (99.9%): [664.864, 745.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26184.010, 26184.010, 26184.011), stdev = 0.001
[info]   CI (99.9%): [26184.009, 26184.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.969 ±(99.9%) 570.821 MB/sec [Average]
[info]   (min, avg, max) = (664.775, 731.969, 997.144), stdev = 148.240
[info]   CI (99.9%): [161.148, 1302.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27158.032 ±(99.9%) 20339.210 B/op [Average]
[info]   (min, avg, max) = (24299.985, 27158.032, 36588.464), stdev = 5282.028
[info]   CI (99.9%): [6818.822, 47497.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.998 ±(99.9%) 5.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.998, 3.804), stdev = 1.493
[info]   CI (99.9%): [≈ 0, 7.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 65.04% complete, ETA 00:30:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2609.761 ops/s
[info] # Warmup Iteration   2: 3930.594 ops/s
[info] # Warmup Iteration   3: 4000.965 ops/s
[info] Iteration   1: 4075.427 ops/s
[info]                  ·gc.alloc.rate:                   869.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              335712.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379616.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4059.971 ops/s
[info]                  ·gc.alloc.rate:                   866.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              335712.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254333.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3972.351 ops/s
[info]                  ·gc.alloc.rate:                   847.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              335712.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391137.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4055.609 ops/s
[info]                  ·gc.alloc.rate:                   865.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              335712.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256134.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4068.891 ops/s
[info]                  ·gc.alloc.rate:                   867.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              335712.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384778.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4046.450 ±(99.9%) 162.238 ops/s [Average]
[info]   (min, avg, max) = (3972.351, 4046.450, 4075.427), stdev = 42.133
[info]   CI (99.9%): [3884.212, 4208.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   863.213 ±(99.9%) 34.435 MB/sec [Average]
[info]   (min, avg, max) = (847.489, 863.213, 869.386), stdev = 8.943
[info]   CI (99.9%): [828.778, 897.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   335712.110 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (335712.106, 335712.110, 335712.117), stdev = 0.005
[info]   CI (99.9%): [335712.091, 335712.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   856.305 ±(99.9%) 696.916 MB/sec [Average]
[info]   (min, avg, max) = (656.130, 856.305, 994.825), stdev = 180.987
[info]   CI (99.9%): [159.389, 1553.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   333200.197 ±(99.9%) 274523.101 B/op [Average]
[info]   (min, avg, max) = (254333.258, 333200.197, 391137.587), stdev = 71292.778
[info]   CI (99.9%): [58677.097, 607723.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.188 ±(99.9%) 21.897 B/op [Average]
[info]   (min, avg, max) = (8.077, 16.188, 24.153), stdev = 5.687
[info]   CI (99.9%): [≈ 0, 38.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 65.28% complete, ETA 00:30:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2330.160 ops/s
[info] # Warmup Iteration   2: 4569.328 ops/s
[info] # Warmup Iteration   3: 4644.068 ops/s
[info] Iteration   1: 4718.012 ops/s
[info]                  ·gc.alloc.rate:                   603.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              201429.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107745.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 922.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4682.259 ops/s
[info]                  ·gc.alloc.rate:                   599.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              201429.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217147.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4619.716 ops/s
[info]                  ·gc.alloc.rate:                   591.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              201428.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220221.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4706.299 ops/s
[info]                  ·gc.alloc.rate:                   602.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              201430.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216485.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4712.580 ops/s
[info]                  ·gc.alloc.rate:                   603.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              201428.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216877.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.951 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4687.773 ±(99.9%) 155.643 ops/s [Average]
[info]   (min, avg, max) = (4619.716, 4687.773, 4718.012), stdev = 40.420
[info]   CI (99.9%): [4532.130, 4843.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   600.108 ±(99.9%) 19.665 MB/sec [Average]
[info]   (min, avg, max) = (591.545, 600.108, 603.979), stdev = 5.107
[info]   CI (99.9%): [580.443, 619.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   201429.397 ±(99.9%) 2.912 B/op [Average]
[info]   (min, avg, max) = (201428.511, 201429.397, 201430.455), stdev = 0.756
[info]   CI (99.9%): [201426.485, 201432.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   582.577 ±(99.9%) 558.630 MB/sec [Average]
[info]   (min, avg, max) = (323.071, 582.577, 649.572), stdev = 145.074
[info]   CI (99.9%): [23.948, 1141.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   195695.631 ±(99.9%) 189405.259 B/op [Average]
[info]   (min, avg, max) = (107745.627, 195695.631, 220221.382), stdev = 49187.944
[info]   CI (99.9%): [6290.371, 385100.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.582 ±(99.9%) 4.699 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.582, 2.765), stdev = 1.220
[info]   CI (99.9%): [≈ 0, 5.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   194.257 ±(99.9%) 1566.954 B/op [Average]
[info]   (min, avg, max) = (6.951, 194.257, 922.012), stdev = 406.933
[info]   CI (99.9%): [≈ 0, 1761.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 65.53% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5382.109 ops/s
[info] # Warmup Iteration   2: 6181.485 ops/s
[info] # Warmup Iteration   3: 6241.010 ops/s
[info] Iteration   1: 6183.252 ops/s
[info]                  ·gc.alloc.rate:                   199.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              50768.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65101.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.725 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6156.428 ops/s
[info]                  ·gc.alloc.rate:      198.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 50768.070 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6249.466 ops/s
[info]                  ·gc.alloc.rate:               201.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          50768.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64414.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 6246.910 ops/s
[info]                  ·gc.alloc.rate:                   201.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              50768.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64445.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6250.147 ops/s
[info]                  ·gc.alloc.rate:               201.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          50768.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64414.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6217.241 ±(99.9%) 170.638 ops/s [Average]
[info]   (min, avg, max) = (6156.428, 6217.241, 6250.147), stdev = 44.314
[info]   CI (99.9%): [6046.602, 6387.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   200.581 ±(99.9%) 5.502 MB/sec [Average]
[info]   (min, avg, max) = (198.607, 200.581, 201.617), stdev = 1.429
[info]   CI (99.9%): [195.079, 206.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   50768.070 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (50768.069, 50768.070, 50768.074), stdev = 0.002
[info]   CI (99.9%): [50768.062, 50768.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.662 ±(99.9%) 440.551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.662, 255.892), stdev = 114.410
[info]   CI (99.9%): [≈ 0, 645.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   51675.021 ±(99.9%) 111240.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51675.021, 65101.566), stdev = 28888.705
[info]   CI (99.9%): [≈ 0, 162915.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.393 ±(99.9%) 23.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.393, 14.241), stdev = 6.178
[info]   CI (99.9%): [≈ 0, 27.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 65.77% complete, ETA 00:29:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5676.555 ops/s
[info] # Warmup Iteration   2: 6368.941 ops/s
[info] # Warmup Iteration   3: 6398.110 ops/s
[info] Iteration   1: 6381.714 ops/s
[info]                  ·gc.alloc.rate:                   159.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              39264.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63082.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 727.674 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6385.143 ops/s
[info]                  ·gc.alloc.rate:               159.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          39264.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63042.615 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6407.604 ops/s
[info]                  ·gc.alloc.rate:      159.860 MB/sec
[info]                  ·gc.alloc.rate.norm: 39264.067 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6389.585 ops/s
[info]                  ·gc.alloc.rate:                   159.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              39264.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63003.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6361.913 ops/s
[info]                  ·gc.alloc.rate:               158.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          39264.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63280.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6385.192 ±(99.9%) 63.144 ops/s [Average]
[info]   (min, avg, max) = (6361.913, 6385.192, 6407.604), stdev = 16.398
[info]   CI (99.9%): [6322.048, 6448.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   159.307 ±(99.9%) 1.538 MB/sec [Average]
[info]   (min, avg, max) = (158.748, 159.307, 159.860), stdev = 0.399
[info]   CI (99.9%): [157.769, 160.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   39264.071 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (39264.067, 39264.071, 39264.084), stdev = 0.007
[info]   CI (99.9%): [39264.043, 39264.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.642 ±(99.9%) 440.508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.642, 255.848), stdev = 114.398
[info]   CI (99.9%): [≈ 0, 645.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   50481.659 ±(99.9%) 108666.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50481.659, 63280.400), stdev = 28220.307
[info]   CI (99.9%): [≈ 0, 159148.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.592 ±(99.9%) 5.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.592, 2.951), stdev = 1.319
[info]   CI (99.9%): [≈ 0, 5.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   145.947 ±(99.9%) 1252.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.947, 727.674), stdev = 325.197
[info]   CI (99.9%): [≈ 0, 1398.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 66.01% complete, ETA 00:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5258.079 ops/s
[info] # Warmup Iteration   2: 7592.352 ops/s
[info] # Warmup Iteration   3: 7863.362 ops/s
[info] Iteration   1: 7853.460 ops/s
[info]                  ·gc.alloc.rate:                   2021.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              405176.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399873.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.544 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7963.970 ops/s
[info]                  ·gc.alloc.rate:                   2050.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              405176.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     397197.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.227 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8035.012 ops/s
[info]                  ·gc.alloc.rate:                   2069.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              405176.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462054.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.417 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 7997.519 ops/s
[info]                  ·gc.alloc.rate:                   2058.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              405176.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399426.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.108 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8034.072 ops/s
[info]                  ·gc.alloc.rate:                   2068.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              405176.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     398500.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.889 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7976.807 ±(99.9%) 288.640 ops/s [Average]
[info]   (min, avg, max) = (7853.460, 7976.807, 8035.012), stdev = 74.959
[info]   CI (99.9%): [7688.166, 8265.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2053.748 ±(99.9%) 75.039 MB/sec [Average]
[info]   (min, avg, max) = (2021.764, 2053.748, 2069.410), stdev = 19.487
[info]   CI (99.9%): [1978.709, 2128.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405176.055 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (405176.054, 405176.055, 405176.058), stdev = 0.002
[info]   CI (99.9%): [405176.048, 405176.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2085.824 ±(99.9%) 593.067 MB/sec [Average]
[info]   (min, avg, max) = (1995.307, 2085.824, 2359.913), stdev = 154.018
[info]   CI (99.9%): [1492.757, 2678.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   411410.635 ±(99.9%) 109085.953 B/op [Average]
[info]   (min, avg, max) = (397197.851, 411410.635, 462054.486), stdev = 28329.276
[info]   CI (99.9%): [302324.681, 520496.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.107 ±(99.9%) 0.239 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.107, 0.187), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21.237 ±(99.9%) 47.959 B/op [Average]
[info]   (min, avg, max) = (8.227, 21.237, 37.544), stdev = 12.455
[info]   CI (99.9%): [≈ 0, 69.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 66.26% complete, ETA 00:29:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71.968 ops/s
[info] # Warmup Iteration   2: 11633.124 ops/s
[info] # Warmup Iteration   3: 11432.847 ops/s
[info] Iteration   1: 11457.330 ops/s
[info]                  ·gc.alloc.rate:               282.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          38832.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35138.597 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 11394.252 ops/s
[info]                  ·gc.alloc.rate:               281.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          38832.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35332.852 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 11950.103 ops/s
[info]                  ·gc.alloc.rate:                   294.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              38832.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33689.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.199 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11875.973 ops/s
[info]                  ·gc.alloc.rate:                   293.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              38832.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          322.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42682.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11860.455 ops/s
[info]                  ·gc.alloc.rate:                   292.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              38832.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          322.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42740.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11707.622 ±(99.9%) 1002.913 ops/s [Average]
[info]   (min, avg, max) = (11394.252, 11707.622, 11950.103), stdev = 260.453
[info]   CI (99.9%): [10704.709, 12710.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   288.890 ±(99.9%) 24.772 MB/sec [Average]
[info]   (min, avg, max) = (281.145, 288.890, 294.895), stdev = 6.433
[info]   CI (99.9%): [264.118, 313.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   38832.038 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (38832.036, 38832.038, 38832.040), stdev = 0.002
[info]   CI (99.9%): [38832.031, 38832.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   282.336 ±(99.9%) 139.785 MB/sec [Average]
[info]   (min, avg, max) = (255.811, 282.336, 322.112), stdev = 36.302
[info]   CI (99.9%): [142.551, 422.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   37916.769 ±(99.9%) 17031.192 B/op [Average]
[info]   (min, avg, max) = (33689.189, 37916.769, 42740.389), stdev = 4422.946
[info]   CI (99.9%): [20885.577, 54947.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.383 ±(99.9%) 1.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.199), stdev = 0.518
[info]   CI (99.9%): [≈ 0, 2.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 66.50% complete, ETA 00:29:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7391.190 ops/s
[info] # Warmup Iteration   2: 13962.285 ops/s
[info] # Warmup Iteration   3: 14146.540 ops/s
[info] Iteration   1: 14179.900 ops/s
[info]                  ·gc.alloc.rate:               383.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          42544.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28391.848 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13670.552 ops/s
[info]                  ·gc.alloc.rate:               369.691 MB/sec
[info]                  ·gc.alloc.rate.norm:          42544.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29448.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 13823.527 ops/s
[info]                  ·gc.alloc.rate:                   373.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              42544.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36782.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.329 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13656.003 ops/s
[info]                  ·gc.alloc.rate:                   369.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              42544.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74470.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13600.681 ops/s
[info]                  ·gc.alloc.rate:               367.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          42544.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37385.824 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13786.133 ±(99.9%) 905.385 ops/s [Average]
[info]   (min, avg, max) = (13600.681, 13786.133, 14179.900), stdev = 235.126
[info]   CI (99.9%): [12880.747, 14691.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   372.699 ±(99.9%) 24.407 MB/sec [Average]
[info]   (min, avg, max) = (367.635, 372.699, 383.296), stdev = 6.338
[info]   CI (99.9%): [348.292, 397.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42544.035 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (42544.030, 42544.035, 42544.044), stdev = 0.005
[info]   CI (99.9%): [42544.015, 42544.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   360.807 ±(99.9%) 627.740 MB/sec [Average]
[info]   (min, avg, max) = (255.794, 360.807, 646.160), stdev = 163.022
[info]   CI (99.9%): [≈ 0, 988.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   41295.965 ±(99.9%) 73138.987 B/op [Average]
[info]   (min, avg, max) = (28391.848, 41295.965, 74470.546), stdev = 18993.963
[info]   CI (99.9%): [≈ 0, 114434.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.540 ±(99.9%) 4.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.540, 2.638), stdev = 1.173
[info]   CI (99.9%): [≈ 0, 5.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.505 ±(99.9%) 514.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.505, 300.329), stdev = 133.543
[info]   CI (99.9%): [≈ 0, 575.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 66.75% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19414.048 ops/s
[info] # Warmup Iteration   2: 22226.425 ops/s
[info] # Warmup Iteration   3: 22034.506 ops/s
[info] Iteration   1: 22377.396 ops/s
[info]                  ·gc.alloc.rate:               455.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          32048.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17990.849 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 22200.334 ops/s
[info]                  ·gc.alloc.rate:                   452.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              32048.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47082.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22406.707 ops/s
[info]                  ·gc.alloc.rate:                   456.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              32048.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23300.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.924 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22370.955 ops/s
[info]                  ·gc.alloc.rate:                   455.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              32048.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23338.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22911.618 ops/s
[info]                  ·gc.alloc.rate:                   466.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              32048.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45576.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22453.402 ±(99.9%) 1034.600 ops/s [Average]
[info]   (min, avg, max) = (22200.334, 22453.402, 22911.618), stdev = 268.682
[info]   CI (99.9%): [21418.802, 23488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   457.261 ±(99.9%) 21.113 MB/sec [Average]
[info]   (min, avg, max) = (452.202, 457.261, 466.647), stdev = 5.483
[info]   CI (99.9%): [436.148, 478.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   32048.021 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (32048.019, 32048.021, 32048.027), stdev = 0.003
[info]   CI (99.9%): [32048.009, 32048.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.446 ±(99.9%) 763.539 MB/sec [Average]
[info]   (min, avg, max) = (255.793, 449.446, 664.347), stdev = 198.289
[info]   CI (99.9%): [≈ 0, 1212.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   31457.788 ±(99.9%) 52983.298 B/op [Average]
[info]   (min, avg, max) = (17990.849, 31457.788, 47082.970), stdev = 13759.594
[info]   CI (99.9%): [≈ 0, 84441.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.368 ±(99.9%) 2.948 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.737), stdev = 0.766
[info]   CI (99.9%): [≈ 0, 3.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26.083 ±(99.9%) 208.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.083, 123.134), stdev = 54.266
[info]   CI (99.9%): [≈ 0, 235.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 66.99% complete, ETA 00:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 939.433 ops/s
[info] # Warmup Iteration   2: 2344.681 ops/s
[info] # Warmup Iteration   3: 2353.545 ops/s
[info] Iteration   1: 2341.225 ops/s
[info]                  ·gc.alloc.rate:                   1465.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              985216.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1101631.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2353.621 ops/s
[info]                  ·gc.alloc.rate:                   1473.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              985216.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     884652.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.760 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2364.312 ops/s
[info]                  ·gc.alloc.rate:               1480.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          985216.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1666.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1109096.348 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2369.654 ops/s
[info]                  ·gc.alloc.rate:                   1483.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              985216.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     890625.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2342.600 ops/s
[info]                  ·gc.alloc.rate:                   1466.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              985216.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     904917.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.971 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2354.282 ±(99.9%) 48.871 ops/s [Average]
[info]   (min, avg, max) = (2341.225, 2354.282, 2369.654), stdev = 12.692
[info]   CI (99.9%): [2305.412, 2403.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1473.865 ±(99.9%) 30.845 MB/sec [Average]
[info]   (min, avg, max) = (1465.645, 1473.865, 1483.405), stdev = 8.010
[info]   CI (99.9%): [1443.019, 1504.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   985216.199 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (985216.183, 985216.199, 985216.249), stdev = 0.029
[info]   CI (99.9%): [985216.089, 985216.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1463.263 ±(99.9%) 667.826 MB/sec [Average]
[info]   (min, avg, max) = (1322.998, 1463.263, 1666.570), stdev = 173.432
[info]   CI (99.9%): [795.437, 2131.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   978184.690 ±(99.9%) 448066.561 B/op [Average]
[info]   (min, avg, max) = (884652.479, 978184.690, 1109096.348), stdev = 116361.463
[info]   CI (99.9%): [530118.129, 1426251.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.905 ±(99.9%) 85.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.905, 55.966), stdev = 22.115
[info]   CI (99.9%): [≈ 0, 113.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 67.24% complete, ETA 00:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5795.161 ops/s
[info] # Warmup Iteration   2: 8411.124 ops/s
[info] # Warmup Iteration   3: 8544.715 ops/s
[info] Iteration   1: 8678.886 ops/s
[info]                  ·gc.alloc.rate:                   1934.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              350856.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360315.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.024 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8698.364 ops/s
[info]                  ·gc.alloc.rate:                   1939.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              350856.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362662.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.947 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8644.188 ops/s
[info]                  ·gc.alloc.rate:                   1927.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              350856.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367353.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.950 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8680.522 ops/s
[info]                  ·gc.alloc.rate:                   1935.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              350856.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367478.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.468 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8687.665 ops/s
[info]                  ·gc.alloc.rate:                   1936.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              350882.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306850.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.675 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8677.925 ±(99.9%) 78.408 ops/s [Average]
[info]   (min, avg, max) = (8644.188, 8677.925, 8698.364), stdev = 20.362
[info]   CI (99.9%): [8599.518, 8756.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1934.933 ±(99.9%) 16.906 MB/sec [Average]
[info]   (min, avg, max) = (1927.696, 1934.933, 1939.427), stdev = 4.390
[info]   CI (99.9%): [1918.027, 1951.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   350861.256 ±(99.9%) 44.808 B/op [Average]
[info]   (min, avg, max) = (350856.050, 350861.256, 350882.071), stdev = 11.636
[info]   CI (99.9%): [350816.448, 350906.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1946.279 ±(99.9%) 546.635 MB/sec [Average]
[info]   (min, avg, max) = (1693.807, 1946.279, 2027.542), stdev = 141.959
[info]   CI (99.9%): [1399.644, 2492.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   352932.146 ±(99.9%) 99900.136 B/op [Average]
[info]   (min, avg, max) = (306850.261, 352932.146, 367478.610), stdev = 25943.748
[info]   CI (99.9%): [253032.010, 452832.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.155 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.155, 0.193), stdev = 0.039
[info]   CI (99.9%): [0.004, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28.013 ±(99.9%) 27.125 B/op [Average]
[info]   (min, avg, max) = (18.950, 28.013, 35.024), stdev = 7.044
[info]   CI (99.9%): [0.888, 55.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 67.48% complete, ETA 00:28:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305.866 ops/s
[info] # Warmup Iteration   2: 52512.823 ops/s
[info] # Warmup Iteration   3: 53357.075 ops/s
[info] Iteration   1: 53615.205 ops/s
[info]                  ·gc.alloc.rate:                   501.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7509.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 53428.131 ops/s
[info]                  ·gc.alloc.rate:                   499.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          644.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18976.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 53415.678 ops/s
[info]                  ·gc.alloc.rate:               499.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          14712.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9529.476 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 53281.844 ops/s
[info]                  ·gc.alloc.rate:                   498.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19145.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 53695.908 ops/s
[info]                  ·gc.alloc.rate:                   502.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19076.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   53487.353 ±(99.9%) 640.644 ops/s [Average]
[info]   (min, avg, max) = (53281.844, 53487.353, 53695.908), stdev = 166.373
[info]   CI (99.9%): [52846.709, 54127.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   500.070 ±(99.9%) 6.000 MB/sec [Average]
[info]   (min, avg, max) = (498.096, 500.070, 502.037), stdev = 1.558
[info]   CI (99.9%): [494.070, 506.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.008, 14712.008, 14712.009), stdev = 0.001
[info]   CI (99.9%): [14712.007, 14712.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   504.585 ±(99.9%) 761.240 MB/sec [Average]
[info]   (min, avg, max) = (255.813, 504.585, 650.981), stdev = 197.692
[info]   CI (99.9%): [≈ 0, 1265.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14847.329 ±(99.9%) 22414.556 B/op [Average]
[info]   (min, avg, max) = (7509.104, 14847.329, 19145.155), stdev = 5820.989
[info]   CI (99.9%): [≈ 0, 37261.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.022 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.050), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.652 ±(99.9%) 2.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.652, 1.478), stdev = 0.618
[info]   CI (99.9%): [≈ 0, 3.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 67.73% complete, ETA 00:28:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24661.754 ops/s
[info] # Warmup Iteration   2: 40945.622 ops/s
[info] # Warmup Iteration   3: 41565.831 ops/s
[info] Iteration   1: 41110.553 ops/s
[info]                  ·gc.alloc.rate:                   612.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24763.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 42505.947 ops/s
[info]                  ·gc.alloc.rate:               632.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23973.653 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 42454.562 ops/s
[info]                  ·gc.alloc.rate:                   632.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24003.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41253.981 ops/s
[info]                  ·gc.alloc.rate:                   614.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24778.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41058.910 ops/s
[info]                  ·gc.alloc.rate:                   611.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24997.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   41676.791 ±(99.9%) 2838.528 ops/s [Average]
[info]   (min, avg, max) = (41058.910, 41676.791, 42505.947), stdev = 737.157
[info]   CI (99.9%): [38838.263, 44515.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620.522 ±(99.9%) 42.191 MB/sec [Average]
[info]   (min, avg, max) = (611.296, 620.522, 632.857), stdev = 10.957
[info]   CI (99.9%): [578.331, 662.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.857 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (23431.789, 23431.857, 23431.910), stdev = 0.050
[info]   CI (99.9%): [23431.666, 23432.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   648.720 ±(99.9%) 8.452 MB/sec [Average]
[info]   (min, avg, max) = (646.826, 648.720, 652.146), stdev = 2.195
[info]   CI (99.9%): [640.269, 657.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24503.348 ±(99.9%) 1844.723 B/op [Average]
[info]   (min, avg, max) = (23973.653, 24503.348, 24997.709), stdev = 479.069
[info]   CI (99.9%): [22658.626, 26348.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.585 ±(99.9%) 4.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 2.694), stdev = 1.180
[info]   CI (99.9%): [≈ 0, 5.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.353 ±(99.9%) 174.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.353, 103.157), stdev = 45.201
[info]   CI (99.9%): [≈ 0, 196.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 67.97% complete, ETA 00:27:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71461.722 ops/s
[info] # Warmup Iteration   2: 82096.395 ops/s
[info] # Warmup Iteration   3: 83087.265 ops/s
[info] Iteration   1: 83312.894 ops/s
[info]                  ·gc.alloc.rate:                   626.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12521.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 82759.030 ops/s
[info]                  ·gc.alloc.rate:                   622.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12592.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 83035.864 ops/s
[info]                  ·gc.alloc.rate:                   624.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12549.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 82714.762 ops/s
[info]                  ·gc.alloc.rate:                   621.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12599.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 80127.165 ops/s
[info]                  ·gc.alloc.rate:                   602.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13031.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   82389.943 ±(99.9%) 4957.825 ops/s [Average]
[info]   (min, avg, max) = (80127.165, 82389.943, 83312.894), stdev = 1287.531
[info]   CI (99.9%): [77432.118, 87347.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   619.543 ±(99.9%) 37.515 MB/sec [Average]
[info]   (min, avg, max) = (602.446, 619.543, 626.568), stdev = 9.743
[info]   CI (99.9%): [582.028, 657.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.005, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   662.700 ±(99.9%) 2.257 MB/sec [Average]
[info]   (min, avg, max) = (662.125, 662.700, 663.543), stdev = 0.586
[info]   CI (99.9%): [660.442, 664.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12658.858 ±(99.9%) 812.383 B/op [Average]
[info]   (min, avg, max) = (12521.099, 12658.858, 13031.934), stdev = 210.973
[info]   CI (99.9%): [11846.475, 13471.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.418 ±(99.9%) 3.199 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.418, 1.904), stdev = 0.831
[info]   CI (99.9%): [≈ 0, 3.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.907 ±(99.9%) 60.391 B/op [Average]
[info]   (min, avg, max) = (0.396, 7.907, 35.952), stdev = 15.683
[info]   CI (99.9%): [≈ 0, 68.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 68.22% complete, ETA 00:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92932.332 ops/s
[info] # Warmup Iteration   2: 104647.815 ops/s
[info] # Warmup Iteration   3: 104653.923 ops/s
[info] Iteration   1: 102878.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 104672.839 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 104629.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 104554.153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 104614.087 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   104269.933 ±(99.9%) 2999.191 ops/s [Average]
[info]   (min, avg, max) = (102878.709, 104269.933, 104672.839), stdev = 778.880
[info]   CI (99.9%): [101270.741, 107269.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 68.46% complete, ETA 00:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2397.706 ops/s
[info] # Warmup Iteration   2: 4930.476 ops/s
[info] # Warmup Iteration   3: 5066.166 ops/s
[info] Iteration   1: 5060.454 ops/s
[info]                  ·gc.alloc.rate:                   1593.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              495582.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1634.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     508441.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5035.401 ops/s
[info]                  ·gc.alloc.rate:                   1586.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              495585.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     515336.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5006.165 ops/s
[info]                  ·gc.alloc.rate:               1576.460 MB/sec
[info]                  ·gc.alloc.rate.norm:          495582.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 418132.243 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5038.964 ops/s
[info]                  ·gc.alloc.rate:                   1586.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              495584.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     522415.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.001 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5057.026 ops/s
[info]                  ·gc.alloc.rate:                   1592.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              495583.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     523666.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.914 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5039.602 ±(99.9%) 83.358 ops/s [Average]
[info]   (min, avg, max) = (5006.165, 5039.602, 5060.454), stdev = 21.648
[info]   CI (99.9%): [4956.244, 5122.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1587.083 ±(99.9%) 26.150 MB/sec [Average]
[info]   (min, avg, max) = (1576.460, 1587.083, 1593.565), stdev = 6.791
[info]   CI (99.9%): [1560.933, 1613.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   495583.779 ±(99.9%) 5.026 B/op [Average]
[info]   (min, avg, max) = (495582.241, 495583.779, 495585.534), stdev = 1.305
[info]   CI (99.9%): [495578.753, 495588.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1593.951 ±(99.9%) 572.602 MB/sec [Average]
[info]   (min, avg, max) = (1330.087, 1593.951, 1682.668), stdev = 148.703
[info]   CI (99.9%): [1021.349, 2166.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   497598.400 ±(99.9%) 172662.960 B/op [Average]
[info]   (min, avg, max) = (418132.243, 497598.400, 523666.069), stdev = 44840.022
[info]   CI (99.9%): [324935.440, 670261.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22.074 ±(99.9%) 54.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.074, 39.033), stdev = 14.248
[info]   CI (99.9%): [≈ 0, 76.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 68.70% complete, ETA 00:27:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4348758.523 ops/s
[info] # Warmup Iteration   2: 6170614.567 ops/s
[info] # Warmup Iteration   3: 6234822.619 ops/s
[info] Iteration   1: 6270600.160 ops/s
[info]                  ·gc.alloc.rate:                   3888.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1020.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 6295549.139 ops/s
[info]                  ·gc.alloc.rate:                   3904.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3739.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     934.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 6225022.887 ops/s
[info]                  ·gc.alloc.rate:                   3861.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4081.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1031.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 6262140.506 ops/s
[info]                  ·gc.alloc.rate:                   3883.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 6235334.082 ops/s
[info]                  ·gc.alloc.rate:                   3867.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     945.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6257729.355 ±(99.9%) 108686.314 ops/s [Average]
[info]   (min, avg, max) = (6225022.887, 6257729.355, 6295549.139), stdev = 28225.490
[info]   CI (99.9%): [6149043.041, 6366415.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3881.177 ±(99.9%) 64.886 MB/sec [Average]
[info]   (min, avg, max) = (3861.918, 3881.177, 3904.028), stdev = 16.851
[info]   CI (99.9%): [3816.291, 3946.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3874.955 ±(99.9%) 695.944 MB/sec [Average]
[info]   (min, avg, max) = (3739.096, 3874.955, 4081.278), stdev = 180.735
[info]   CI (99.9%): [3179.011, 4570.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   974.505 ±(99.9%) 181.445 B/op [Average]
[info]   (min, avg, max) = (934.768, 974.505, 1031.438), stdev = 47.121
[info]   CI (99.9%): [793.060, 1155.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.187), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.027, 0.047), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   57.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 68.95% complete, ETA 00:27:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.876 ops/s
[info] # Warmup Iteration   2: 37656428.726 ops/s
[info] # Warmup Iteration   3: 37817321.559 ops/s
[info] Iteration   1: 40132283.207 ops/s
[info]                  ·gc.alloc.rate:               407.983 MB/sec
[info]                  ·gc.alloc.rate.norm:          16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10.032 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 39988843.632 ops/s
[info]                  ·gc.alloc.rate:                   406.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          578.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40096276.040 ops/s
[info]                  ·gc.alloc.rate:                   407.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          322.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 40029984.580 ops/s
[info]                  ·gc.alloc.rate:                   406.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 39514728.577 ops/s
[info]                  ·gc.alloc.rate:               401.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12.908 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   39952423.207 ±(99.9%) 966431.196 ops/s [Average]
[info]   (min, avg, max) = (39514728.577, 39952423.207, 40132283.207), stdev = 250979.113
[info]   CI (99.9%): [38985992.011, 40918854.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   406.169 ±(99.9%) 9.817 MB/sec [Average]
[info]   (min, avg, max) = (401.718, 406.169, 407.983), stdev = 2.550
[info]   CI (99.9%): [396.352, 415.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   361.063 ±(99.9%) 481.713 MB/sec [Average]
[info]   (min, avg, max) = (255.802, 361.063, 578.588), stdev = 125.099
[info]   CI (99.9%): [≈ 0, 842.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14.224 ±(99.9%) 18.959 B/op [Average]
[info]   (min, avg, max) = (10.032, 14.224, 22.771), stdev = 4.924
[info]   CI (99.9%): [≈ 0, 33.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 69.19% complete, ETA 00:26:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3847598.481 ops/s
[info] # Warmup Iteration   2: 8401340.635 ops/s
[info] # Warmup Iteration   3: 8520960.550 ops/s
[info] Iteration   1: 8505163.752 ops/s
[info]                  ·gc.alloc.rate:                   3199.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     558.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8428598.675 ops/s
[info]                  ·gc.alloc.rate:                   3170.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     631.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8436312.356 ops/s
[info]                  ·gc.alloc.rate:                   3173.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     570.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8552120.099 ops/s
[info]                  ·gc.alloc.rate:                   3216.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     626.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8500291.666 ops/s
[info]                  ·gc.alloc.rate:                   3197.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   8484497.309 ±(99.9%) 199118.247 ops/s [Average]
[info]   (min, avg, max) = (8428598.675, 8484497.309, 8552120.099), stdev = 51710.376
[info]   CI (99.9%): [8285379.062, 8683615.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3191.344 ±(99.9%) 75.108 MB/sec [Average]
[info]   (min, avg, max) = (3170.324, 3191.344, 3216.901), stdev = 19.505
[info]   CI (99.9%): [3116.236, 3266.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3184.659 ±(99.9%) 732.510 MB/sec [Average]
[info]   (min, avg, max) = (3019.860, 3184.659, 3402.170), stdev = 190.231
[info]   CI (99.9%): [2452.149, 3917.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   590.758 ±(99.9%) 134.924 B/op [Average]
[info]   (min, avg, max) = (558.849, 590.758, 631.538), stdev = 35.039
[info]   CI (99.9%): [455.833, 725.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.019, 0.023), stdev = 0.004
[info]   CI (99.9%): [0.002, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 69.44% complete, ETA 00:26:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43927670.993 ops/s
[info] # Warmup Iteration   2: 47479648.296 ops/s
[info] # Warmup Iteration   3: 49504699.065 ops/s
[info] Iteration   1: 49535382.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 49552786.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 49304760.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49377009.854 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 49376581.526 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   49429304.214 ±(99.9%) 419729.047 ops/s [Average]
[info]   (min, avg, max) = (49304760.568, 49429304.214, 49552786.533), stdev = 109002.301
[info]   CI (99.9%): [49009575.166, 49849033.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 69.68% complete, ETA 00:26:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12859548.541 ops/s
[info] # Warmup Iteration   2: 16727875.638 ops/s
[info] # Warmup Iteration   3: 17177573.525 ops/s
[info] Iteration   1: 17134815.571 ops/s
[info]                  ·gc.alloc.rate:                   1132.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16912733.180 ops/s
[info]                  ·gc.alloc.rate:                   1117.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17177977.843 ops/s
[info]                  ·gc.alloc.rate:                   1135.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16868111.572 ops/s
[info]                  ·gc.alloc.rate:                   1114.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17010988.011 ops/s
[info]                  ·gc.alloc.rate:                   1124.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   17020925.236 ±(99.9%) 519454.631 ops/s [Average]
[info]   (min, avg, max) = (16868111.572, 17020925.236, 17177977.843), stdev = 134900.718
[info]   CI (99.9%): [16501470.604, 17540379.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1124.707 ±(99.9%) 34.271 MB/sec [Average]
[info]   (min, avg, max) = (1114.627, 1124.707, 1135.113), stdev = 8.900
[info]   CI (99.9%): [1090.435, 1158.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1138.822 ±(99.9%) 703.464 MB/sec [Average]
[info]   (min, avg, max) = (1001.866, 1138.822, 1342.952), stdev = 182.687
[info]   CI (99.9%): [435.358, 1842.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   105.326 ±(99.9%) 65.639 B/op [Average]
[info]   (min, avg, max) = (92.038, 105.326, 125.304), stdev = 17.046
[info]   CI (99.9%): [39.687, 170.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.006, 0.010), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 69.93% complete, ETA 00:26:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4200258.511 ops/s
[info] # Warmup Iteration   2: 7343420.722 ops/s
[info] # Warmup Iteration   3: 7490760.184 ops/s
[info] Iteration   1: 7425954.151 ops/s
[info]                  ·gc.alloc.rate:                   3585.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 7467128.969 ops/s
[info]                  ·gc.alloc.rate:                   3607.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3732.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 7450501.726 ops/s
[info]                  ·gc.alloc.rate:                   3598.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3741.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 7325513.816 ops/s
[info]                  ·gc.alloc.rate:                   3537.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7388898.427 ops/s
[info]                  ·gc.alloc.rate:                   3567.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     797.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7411599.418 ±(99.9%) 217220.732 ops/s [Average]
[info]   (min, avg, max) = (7325513.816, 7411599.418, 7467128.969), stdev = 56411.534
[info]   CI (99.9%): [7194378.686, 7628820.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3579.381 ±(99.9%) 107.069 MB/sec [Average]
[info]   (min, avg, max) = (3537.335, 3579.381, 3607.143), stdev = 27.806
[info]   CI (99.9%): [3472.311, 3686.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3598.974 ±(99.9%) 742.228 MB/sec [Average]
[info]   (min, avg, max) = (3372.451, 3598.974, 3744.339), stdev = 192.754
[info]   CI (99.9%): [2856.746, 4341.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   764.059 ±(99.9%) 146.618 B/op [Average]
[info]   (min, avg, max) = (714.807, 764.059, 797.596), stdev = 38.076
[info]   CI (99.9%): [617.442, 910.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.167), stdev = 0.032
[info]   CI (99.9%): [0.012, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.028, 0.035), stdev = 0.007
[info]   CI (99.9%): [0.003, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 13.000), stdev = 2.074
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 70.17% complete, ETA 00:26:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7503977.283 ops/s
[info] # Warmup Iteration   2: 12221113.544 ops/s
[info] # Warmup Iteration   3: 12561742.635 ops/s
[info] Iteration   1: 12502104.363 ops/s
[info]                  ·gc.alloc.rate:                   2414.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 12306814.055 ops/s
[info]                  ·gc.alloc.rate:                   2378.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12361259.899 ops/s
[info]                  ·gc.alloc.rate:                   2387.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12382154.139 ops/s
[info]                  ·gc.alloc.rate:                   2392.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12443186.948 ops/s
[info]                  ·gc.alloc.rate:                   2403.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   12399103.881 ±(99.9%) 290648.945 ops/s [Average]
[info]   (min, avg, max) = (12306814.055, 12399103.881, 12502104.363), stdev = 75480.608
[info]   CI (99.9%): [12108454.935, 12689752.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2395.369 ±(99.9%) 54.841 MB/sec [Average]
[info]   (min, avg, max) = (2378.123, 2395.369, 2414.683), stdev = 14.242
[info]   CI (99.9%): [2340.527, 2450.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2431.155 ±(99.9%) 522.371 MB/sec [Average]
[info]   (min, avg, max) = (2358.536, 2431.155, 2673.405), stdev = 135.658
[info]   CI (99.9%): [1908.784, 2953.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   308.486 ±(99.9%) 60.476 B/op [Average]
[info]   (min, avg, max) = (300.882, 308.486, 336.572), stdev = 15.705
[info]   CI (99.9%): [248.010, 368.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.011, 0.013), stdev = 0.002
[info]   CI (99.9%): [0.003, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 70.42% complete, ETA 00:25:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.862 ops/s
[info] # Warmup Iteration   2: 53757106.871 ops/s
[info] # Warmup Iteration   3: 54942066.130 ops/s
[info] Iteration   1: 59187041.221 ops/s
[info]                  ·gc.alloc.rate:                   1805.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 58358978.083 ops/s
[info]                  ·gc.alloc.rate:               1780.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1972.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53.168 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 59631343.706 ops/s
[info]                  ·gc.alloc.rate:               1818.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1649.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.530 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 59623859.822 ops/s
[info]                  ·gc.alloc.rate:                   1818.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 60052908.960 ops/s
[info]                  ·gc.alloc.rate:                   1831.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   59370826.359 ±(99.9%) 2476674.941 ops/s [Average]
[info]   (min, avg, max) = (58358978.083, 59370826.359, 60052908.960), stdev = 643184.617
[info]   CI (99.9%): [56894151.418, 61847501.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1810.982 ±(99.9%) 74.657 MB/sec [Average]
[info]   (min, avg, max) = (1780.592, 1810.982, 1831.516), stdev = 19.388
[info]   CI (99.9%): [1736.325, 1885.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1785.519 ±(99.9%) 699.029 MB/sec [Average]
[info]   (min, avg, max) = (1637.733, 1785.519, 1995.102), stdev = 181.536
[info]   CI (99.9%): [1086.490, 2484.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   47.349 ±(99.9%) 19.560 B/op [Average]
[info]   (min, avg, max) = (43.530, 47.349, 53.168), stdev = 5.080
[info]   CI (99.9%): [27.789, 66.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.474 ±(99.9%) 3.944 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.474, 2.306), stdev = 1.024
[info]   CI (99.9%): [≈ 0, 4.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 11.000), stdev = 2.280
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 70.66% complete, ETA 00:25:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4794363.916 ops/s
[info] # Warmup Iteration   2: 11922433.042 ops/s
[info] # Warmup Iteration   3: 12004095.760 ops/s
[info] Iteration   1: 11957255.619 ops/s
[info]                  ·gc.alloc.rate:                   2368.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 12049768.325 ops/s
[info]                  ·gc.alloc.rate:                   2388.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2348.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12044407.382 ops/s
[info]                  ·gc.alloc.rate:                   2387.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 11928838.342 ops/s
[info]                  ·gc.alloc.rate:                   2364.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 12010104.240 ops/s
[info]                  ·gc.alloc.rate:                   2381.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11998074.782 ±(99.9%) 205780.162 ops/s [Average]
[info]   (min, avg, max) = (11928838.342, 11998074.782, 12049768.325), stdev = 53440.455
[info]   CI (99.9%): [11792294.620, 12203854.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2378.327 ±(99.9%) 42.441 MB/sec [Average]
[info]   (min, avg, max) = (2364.758, 2378.327, 2388.726), stdev = 11.022
[info]   CI (99.9%): [2335.886, 2420.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2423.286 ±(99.9%) 500.085 MB/sec [Average]
[info]   (min, avg, max) = (2348.571, 2423.286, 2654.724), stdev = 129.870
[info]   CI (99.9%): [1923.201, 2923.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   317.937 ±(99.9%) 68.981 B/op [Average]
[info]   (min, avg, max) = (306.755, 317.937, 349.689), stdev = 17.914
[info]   CI (99.9%): [248.956, 386.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.014, 0.022), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 70.90% complete, ETA 00:25:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29926338.874 ops/s
[info] # Warmup Iteration   2: 44318913.304 ops/s
[info] # Warmup Iteration   3: 43585439.801 ops/s
[info] Iteration   1: 44341747.962 ops/s
[info]                  ·gc.alloc.rate:                   901.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 43604043.902 ops/s
[info]                  ·gc.alloc.rate:                   886.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42606879.238 ops/s
[info]                  ·gc.alloc.rate:                   866.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43249492.217 ops/s
[info]                  ·gc.alloc.rate:                   879.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42793377.677 ops/s
[info]                  ·gc.alloc.rate:                   870.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   43319108.199 ±(99.9%) 2664668.899 ops/s [Average]
[info]   (min, avg, max) = (42606879.238, 43319108.199, 44341747.962), stdev = 692006.051
[info]   CI (99.9%): [40654439.300, 45983777.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   880.914 ±(99.9%) 54.327 MB/sec [Average]
[info]   (min, avg, max) = (866.442, 880.914, 901.770), stdev = 14.108
[info]   CI (99.9%): [826.587, 935.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   864.536 ±(99.9%) 696.411 MB/sec [Average]
[info]   (min, avg, max) = (664.931, 864.536, 998.879), stdev = 180.856
[info]   CI (99.9%): [168.125, 1560.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   31.343 ±(99.9%) 23.886 B/op [Average]
[info]   (min, avg, max) = (24.558, 31.343, 36.350), stdev = 6.203
[info]   CI (99.9%): [7.457, 55.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71.15% complete, ETA 00:25:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39493069.671 ops/s
[info] # Warmup Iteration   2: 57985868.233 ops/s
[info] # Warmup Iteration   3: 59277344.361 ops/s
[info] Iteration   1: 59260857.764 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 59314557.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 59285080.918 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 58743233.846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 59470929.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   59214931.903 ±(99.9%) 1063274.846 ops/s [Average]
[info]   (min, avg, max) = (58743233.846, 59214931.903, 59470929.399), stdev = 276129.101
[info]   CI (99.9%): [58151657.057, 60278206.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 71.39% complete, ETA 00:24:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13102051.808 ops/s
[info] # Warmup Iteration   2: 12930652.004 ops/s
[info] # Warmup Iteration   3: 13439601.871 ops/s
[info] Iteration   1: 13375753.479 ops/s
[info]                  ·gc.alloc.rate:                   2243.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2360.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     277.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13495464.068 ops/s
[info]                  ·gc.alloc.rate:                   2263.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13320282.020 ops/s
[info]                  ·gc.alloc.rate:                   2234.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13309198.718 ops/s
[info]                  ·gc.alloc.rate:                   2233.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13283827.620 ops/s
[info]                  ·gc.alloc.rate:                   2228.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   13356905.181 ±(99.9%) 325096.277 ops/s [Average]
[info]   (min, avg, max) = (13283827.620, 13356905.181, 13495464.068), stdev = 84426.471
[info]   CI (99.9%): [13031808.904, 13682001.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2240.636 ±(99.9%) 54.062 MB/sec [Average]
[info]   (min, avg, max) = (2228.246, 2240.636, 2263.702), stdev = 14.040
[info]   CI (99.9%): [2186.574, 2294.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2236.960 ±(99.9%) 698.483 MB/sec [Average]
[info]   (min, avg, max) = (2035.054, 2236.960, 2379.108), stdev = 181.394
[info]   CI (99.9%): [1538.477, 2935.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   263.511 ±(99.9%) 78.810 B/op [Average]
[info]   (min, avg, max) = (240.466, 263.511, 281.227), stdev = 20.467
[info]   CI (99.9%): [184.701, 342.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.011, 0.017), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 71.64% complete, ETA 00:24:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1538700.532 ops/s
[info] # Warmup Iteration   2: 2233954.631 ops/s
[info] # Warmup Iteration   3: 2266151.937 ops/s
[info] Iteration   1: 2264719.263 ops/s
[info]                  ·gc.alloc.rate:                   1956.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1389.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2240056.102 ops/s
[info]                  ·gc.alloc.rate:                   1936.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1178.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2251462.167 ops/s
[info]                  ·gc.alloc.rate:                   1945.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1413.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2270328.389 ops/s
[info]                  ·gc.alloc.rate:                   1961.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1407.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2284249.215 ops/s
[info]                  ·gc.alloc.rate:                   1974.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2262163.027 ±(99.9%) 65693.602 ops/s [Average]
[info]   (min, avg, max) = (2240056.102, 2262163.027, 2284249.215), stdev = 17060.420
[info]   CI (99.9%): [2196469.426, 2327856.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1954.937 ±(99.9%) 56.000 MB/sec [Average]
[info]   (min, avg, max) = (1936.403, 1954.937, 1974.048), stdev = 14.543
[info]   CI (99.9%): [1898.937, 2010.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1360.000, 1360.000, 1360.000), stdev = 0.001
[info]   CI (99.9%): [1360.000, 1360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1953.096 ±(99.9%) 595.922 MB/sec [Average]
[info]   (min, avg, max) = (1677.328, 1953.096, 2035.998), stdev = 154.759
[info]   CI (99.9%): [1357.173, 2549.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1358.303 ±(99.9%) 389.459 B/op [Average]
[info]   (min, avg, max) = (1178.043, 1358.303, 1413.717), stdev = 101.141
[info]   CI (99.9%): [968.844, 1747.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.043, 0.061, 0.073), stdev = 0.012
[info]   CI (99.9%): [0.014, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 71.88% complete, ETA 00:24:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139969.060 ops/s
[info] # Warmup Iteration   2: 153347.249 ops/s
[info] # Warmup Iteration   3: 152940.395 ops/s
[info] Iteration   1: 154927.119 ops/s
[info]                  ·gc.alloc.rate:                   2841.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27420.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.846 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 153796.261 ops/s
[info]                  ·gc.alloc.rate:                   2821.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27737.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.278 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 154414.399 ops/s
[info]                  ·gc.alloc.rate:                   2832.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31158.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.637 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 151112.923 ops/s
[info]                  ·gc.alloc.rate:                   2772.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28348.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 154570.110 ops/s
[info]                  ·gc.alloc.rate:                   2835.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27727.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.060 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   153764.162 ±(99.9%) 5920.146 ops/s [Average]
[info]   (min, avg, max) = (151112.923, 153764.162, 154927.119), stdev = 1537.443
[info]   CI (99.9%): [147844.016, 159684.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2820.713 ±(99.9%) 108.511 MB/sec [Average]
[info]   (min, avg, max) = (2772.119, 2820.713, 2841.999), stdev = 28.180
[info]   CI (99.9%): [2712.203, 2929.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.002, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2782.307 ±(99.9%) 592.361 MB/sec [Average]
[info]   (min, avg, max) = (2699.101, 2782.307, 3056.942), stdev = 153.834
[info]   CI (99.9%): [2189.946, 3374.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28478.595 ±(99.9%) 5912.407 B/op [Average]
[info]   (min, avg, max) = (27420.298, 28478.595, 31158.393), stdev = 1535.433
[info]   CI (99.9%): [22566.188, 34391.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.894 ±(99.9%) 1.060 B/op [Average]
[info]   (min, avg, max) = (0.637, 0.894, 1.278), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Run progress: 72.13% complete, ETA 00:24:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13018.927 ops/s
[info] # Warmup Iteration   2: 28332.000 ops/s
[info] # Warmup Iteration   3: 28239.225 ops/s
[info] Iteration   1: 28792.964 ops/s
[info]                  ·gc.alloc.rate:                   2206.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              120584.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2314.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126511.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.689 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 28750.354 ops/s
[info]                  ·gc.alloc.rate:                   2202.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              120584.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2339.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128072.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.698 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28924.512 ops/s
[info]                  ·gc.alloc.rate:                   2216.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              120584.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109917.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.133 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 28104.391 ops/s
[info]                  ·gc.alloc.rate:                   2153.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              120584.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2366.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132522.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.994 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 29006.159 ops/s
[info]                  ·gc.alloc.rate:                   2222.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              120584.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110423.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.518 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   28715.676 ±(99.9%) 1373.389 ops/s [Average]
[info]   (min, avg, max) = (28104.391, 28715.676, 29006.159), stdev = 356.665
[info]   CI (99.9%): [27342.287, 30089.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2200.383 ±(99.9%) 105.045 MB/sec [Average]
[info]   (min, avg, max) = (2153.674, 2200.383, 2222.842), stdev = 27.280
[info]   CI (99.9%): [2095.338, 2305.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   120584.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (120584.015, 120584.017, 120584.021), stdev = 0.002
[info]   CI (99.9%): [120584.008, 120584.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2215.415 ±(99.9%) 663.527 MB/sec [Average]
[info]   (min, avg, max) = (2020.101, 2215.415, 2366.894), stdev = 172.316
[info]   CI (99.9%): [1551.888, 2878.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   121489.567 ±(99.9%) 40689.099 B/op [Average]
[info]   (min, avg, max) = (109917.616, 121489.567, 132522.190), stdev = 10566.830
[info]   CI (99.9%): [80800.468, 162178.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.807 ±(99.9%) 8.598 B/op [Average]
[info]   (min, avg, max) = (1.133, 4.807, 6.994), stdev = 2.233
[info]   CI (99.9%): [≈ 0, 13.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 72.37% complete, ETA 00:24:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71579.999 ops/s
[info] # Warmup Iteration   2: 130758.313 ops/s
[info] # Warmup Iteration   3: 133544.009 ops/s
[info] Iteration   1: 131886.203 ops/s
[info]                  ·gc.alloc.rate:                   1277.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15600.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 132221.823 ops/s
[info]                  ·gc.alloc.rate:                   1280.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15656.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.487 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 130378.433 ops/s
[info]                  ·gc.alloc.rate:                   1262.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15978.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 131369.905 ops/s
[info]                  ·gc.alloc.rate:                   1272.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15961.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.247 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 133222.189 ops/s
[info]                  ·gc.alloc.rate:                   1290.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11855.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   131815.711 ±(99.9%) 4044.362 ops/s [Average]
[info]   (min, avg, max) = (130378.433, 131815.711, 133222.189), stdev = 1050.308
[info]   CI (99.9%): [127771.349, 135860.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1276.480 ±(99.9%) 39.533 MB/sec [Average]
[info]   (min, avg, max) = (1262.421, 1276.480, 1290.318), stdev = 10.266
[info]   CI (99.9%): [1236.947, 1316.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15240.003, 15240.003, 15240.004), stdev = 0.001
[info]   CI (99.9%): [15240.003, 15240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1256.488 ±(99.9%) 545.176 MB/sec [Average]
[info]   (min, avg, max) = (1003.782, 1256.488, 1332.544), stdev = 141.581
[info]   CI (99.9%): [711.312, 1801.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15010.476 ±(99.9%) 6823.042 B/op [Average]
[info]   (min, avg, max) = (11855.719, 15010.476, 15978.286), stdev = 1771.922
[info]   CI (99.9%): [8187.435, 21833.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.943 ±(99.9%) 1.703 B/op [Average]
[info]   (min, avg, max) = (0.497, 0.943, 1.487), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 2.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 72.62% complete, ETA 00:23:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453216.152 ops/s
[info] # Warmup Iteration   2: 499630.877 ops/s
[info] # Warmup Iteration   3: 517732.318 ops/s
[info] Iteration   1: 507967.340 ops/s
[info]                  ·gc.alloc.rate:                   1050.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3078.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 496098.440 ops/s
[info]                  ·gc.alloc.rate:                   1026.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3158.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 494604.282 ops/s
[info]                  ·gc.alloc.rate:                   1023.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4239.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 495478.179 ops/s
[info]                  ·gc.alloc.rate:                   1025.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3185.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 498986.263 ops/s
[info]                  ·gc.alloc.rate:                   1032.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3171.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   498626.901 ±(99.9%) 21078.711 ops/s [Average]
[info]   (min, avg, max) = (494604.282, 498626.901, 507967.340), stdev = 5474.074
[info]   CI (99.9%): [477548.190, 519705.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1031.603 ±(99.9%) 43.419 MB/sec [Average]
[info]   (min, avg, max) = (1023.228, 1031.603, 1050.828), stdev = 11.276
[info]   CI (99.9%): [988.184, 1075.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1066.044 ±(99.9%) 573.450 MB/sec [Average]
[info]   (min, avg, max) = (993.526, 1066.044, 1332.298), stdev = 148.923
[info]   CI (99.9%): [492.594, 1639.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3366.791 ±(99.9%) 1885.376 B/op [Average]
[info]   (min, avg, max) = (3078.450, 3366.791, 4239.488), stdev = 489.626
[info]   CI (99.9%): [1481.415, 5252.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.250 ±(99.9%) 0.491 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.250, 0.396), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.86% complete, ETA 00:23:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 486134.727 ops/s
[info] # Warmup Iteration   2: 531024.967 ops/s
[info] # Warmup Iteration   3: 550299.085 ops/s
[info] Iteration   1: 544666.103 ops/s
[info]                  ·gc.alloc.rate:                   531.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     957.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 528683.758 ops/s
[info]                  ·gc.alloc.rate:                   515.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1972.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 530915.499 ops/s
[info]                  ·gc.alloc.rate:                   518.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 524448.312 ops/s
[info]                  ·gc.alloc.rate:                   511.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1987.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 514344.553 ops/s
[info]                  ·gc.alloc.rate:               501.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1014.036 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   528611.645 ±(99.9%) 42354.537 ops/s [Average]
[info]   (min, avg, max) = (514344.553, 528611.645, 544666.103), stdev = 10999.339
[info]   CI (99.9%): [486257.108, 570966.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   515.921 ±(99.9%) 41.336 MB/sec [Average]
[info]   (min, avg, max) = (501.985, 515.921, 531.591), stdev = 10.735
[info]   CI (99.9%): [474.585, 557.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   463.729 ±(99.9%) 698.224 MB/sec [Average]
[info]   (min, avg, max) = (331.092, 463.729, 662.476), stdev = 181.327
[info]   CI (99.9%): [≈ 0, 1161.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1382.484 ±(99.9%) 2100.597 B/op [Average]
[info]   (min, avg, max) = (957.640, 1382.484, 1987.140), stdev = 545.518
[info]   CI (99.9%): [≈ 0, 3483.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 2.955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.751), stdev = 0.767
[info]   CI (99.9%): [≈ 0, 3.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1.099 ±(99.9%) 8.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.099, 5.059), stdev = 2.216
[info]   CI (99.9%): [≈ 0, 9.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Run progress: 73.11% complete, ETA 00:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24754.210 ops/s
[info] # Warmup Iteration   2: 43532.025 ops/s
[info] # Warmup Iteration   3: 43645.228 ops/s
[info] Iteration   1: 44075.284 ops/s
[info]                  ·gc.alloc.rate:                   769.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              27472.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23251.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 43650.332 ops/s
[info]                  ·gc.alloc.rate:                   761.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              27472.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35259.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 43332.344 ops/s
[info]                  ·gc.alloc.rate:                   756.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              27472.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23734.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43512.810 ops/s
[info]                  ·gc.alloc.rate:                   759.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              27472.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23709.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 43536.045 ops/s
[info]                  ·gc.alloc.rate:                   760.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              27472.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35700.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.258 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   43621.363 ±(99.9%) 1071.071 ops/s [Average]
[info]   (min, avg, max) = (43332.344, 43621.363, 44075.284), stdev = 278.154
[info]   CI (99.9%): [42550.292, 44692.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   761.468 ±(99.9%) 18.601 MB/sec [Average]
[info]   (min, avg, max) = (756.381, 761.468, 769.327), stdev = 4.831
[info]   CI (99.9%): [742.867, 780.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   27472.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27472.010, 27472.010, 27472.011), stdev = 0.001
[info]   CI (99.9%): [27472.009, 27472.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   785.187 ±(99.9%) 695.275 MB/sec [Average]
[info]   (min, avg, max) = (651.142, 785.187, 987.959), stdev = 180.561
[info]   CI (99.9%): [89.912, 1480.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28331.206 ±(99.9%) 25148.187 B/op [Average]
[info]   (min, avg, max) = (23251.736, 28331.206, 35700.662), stdev = 6530.904
[info]   CI (99.9%): [3183.018, 53479.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.651 ±(99.9%) 3.767 B/op [Average]
[info]   (min, avg, max) = (0.753, 1.651, 3.002), stdev = 0.978
[info]   CI (99.9%): [≈ 0, 5.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.35% complete, ETA 00:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276796.630 ops/s
[info] # Warmup Iteration   2: 327080.104 ops/s
[info] # Warmup Iteration   3: 327485.131 ops/s
[info] Iteration   1: 334541.574 ops/s
[info]                  ·gc.alloc.rate:                   2423.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              11400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12635.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 334848.017 ops/s
[info]                  ·gc.alloc.rate:                   2425.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              11400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11111.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 334377.545 ops/s
[info]                  ·gc.alloc.rate:                   2422.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              11400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11164.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 328007.079 ops/s
[info]                  ·gc.alloc.rate:                   2376.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              11400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11407.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 330425.521 ops/s
[info]                  ·gc.alloc.rate:                   2394.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              11400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2381.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11339.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   332439.947 ±(99.9%) 11818.113 ops/s [Average]
[info]   (min, avg, max) = (328007.079, 332439.947, 334848.017), stdev = 3069.126
[info]   CI (99.9%): [320621.835, 344258.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2408.409 ±(99.9%) 85.626 MB/sec [Average]
[info]   (min, avg, max) = (2376.014, 2408.409, 2425.587), stdev = 22.237
[info]   CI (99.9%): [2322.783, 2494.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11400.001, 11400.001, 11400.001), stdev = 0.001
[info]   CI (99.9%): [11400.001, 11400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2436.508 ±(99.9%) 537.519 MB/sec [Average]
[info]   (min, avg, max) = (2364.308, 2436.508, 2685.951), stdev = 139.592
[info]   CI (99.9%): [1898.990, 2974.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11532.133 ±(99.9%) 2421.855 B/op [Average]
[info]   (min, avg, max) = (11111.996, 11532.133, 12635.976), stdev = 628.948
[info]   CI (99.9%): [9110.278, 13953.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.473 ±(99.9%) 0.722 B/op [Average]
[info]   (min, avg, max) = (0.294, 0.473, 0.783), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 1.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.59% complete, ETA 00:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179219.288 ops/s
[info] # Warmup Iteration   2: 324253.395 ops/s
[info] # Warmup Iteration   3: 336120.946 ops/s
[info] Iteration   1: 336987.768 ops/s
[info]                  ·gc.alloc.rate:                   892.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4567.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.583 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 336981.624 ops/s
[info]                  ·gc.alloc.rate:                   892.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3050.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 329005.315 ops/s
[info]                  ·gc.alloc.rate:                   871.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4702.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 335770.827 ops/s
[info]                  ·gc.alloc.rate:                   889.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4629.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 336983.946 ops/s
[info]                  ·gc.alloc.rate:                   892.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3089.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   335145.896 ±(99.9%) 13372.063 ops/s [Average]
[info]   (min, avg, max) = (329005.315, 335145.896, 336987.768), stdev = 3472.682
[info]   CI (99.9%): [321773.833, 348517.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   887.688 ±(99.9%) 35.424 MB/sec [Average]
[info]   (min, avg, max) = (871.411, 887.688, 892.742), stdev = 9.200
[info]   CI (99.9%): [852.264, 923.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   852.770 ±(99.9%) 687.166 MB/sec [Average]
[info]   (min, avg, max) = (653.229, 852.770, 987.818), stdev = 178.455
[info]   CI (99.9%): [165.604, 1539.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4007.722 ±(99.9%) 3301.587 B/op [Average]
[info]   (min, avg, max) = (3050.691, 4007.722, 4702.013), stdev = 857.412
[info]   CI (99.9%): [706.135, 7309.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.488 ±(99.9%) 0.694 B/op [Average]
[info]   (min, avg, max) = (0.292, 0.488, 0.681), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 1.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.84% complete, ETA 00:22:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442399.769 ops/s
[info] # Warmup Iteration   2: 450767.246 ops/s
[info] # Warmup Iteration   3: 459440.224 ops/s
[info] Iteration   1: 458982.709 ops/s
[info]                  ·gc.alloc.rate:                   905.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3419.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 459582.881 ops/s
[info]                  ·gc.alloc.rate:                   906.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3417.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 451802.629 ops/s
[info]                  ·gc.alloc.rate:               891.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2321.619 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 460281.002 ops/s
[info]                  ·gc.alloc.rate:                   907.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3424.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 460696.813 ops/s
[info]                  ·gc.alloc.rate:                   908.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3432.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   458269.207 ±(99.9%) 14147.126 ops/s [Average]
[info]   (min, avg, max) = (451802.629, 458269.207, 460696.813), stdev = 3673.964
[info]   CI (99.9%): [444122.080, 472416.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   903.816 ±(99.9%) 27.979 MB/sec [Average]
[info]   (min, avg, max) = (891.036, 903.816, 908.589), stdev = 7.266
[info]   CI (99.9%): [875.837, 931.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   933.610 ±(99.9%) 575.215 MB/sec [Average]
[info]   (min, avg, max) = (666.445, 933.610, 1004.874), stdev = 149.381
[info]   CI (99.9%): [358.395, 1508.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3203.199 ±(99.9%) 1897.807 B/op [Average]
[info]   (min, avg, max) = (2321.619, 3203.199, 3432.936), stdev = 492.855
[info]   CI (99.9%): [1305.391, 5101.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.199 ±(99.9%) 0.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.356), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.08% complete, ETA 00:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73262.798 ops/s
[info] # Warmup Iteration   2: 110207.490 ops/s
[info] # Warmup Iteration   3: 111390.739 ops/s
[info] Iteration   1: 109802.439 ops/s
[info]                  ·gc.alloc.rate:                   3977.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4059.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58167.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.387 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 111503.041 ops/s
[info]                  ·gc.alloc.rate:                   4037.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57533.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.057 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 110862.445 ops/s
[info]                  ·gc.alloc.rate:                   4015.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57988.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.955 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 110966.423 ops/s
[info]                  ·gc.alloc.rate:                   4018.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57933.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.362 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 110971.726 ops/s
[info]                  ·gc.alloc.rate:                   4018.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53105.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.067 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   110821.215 ±(99.9%) 2395.638 ops/s [Average]
[info]   (min, avg, max) = (109802.439, 110821.215, 111503.041), stdev = 622.140
[info]   CI (99.9%): [108425.577, 113216.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4013.319 ±(99.9%) 84.531 MB/sec [Average]
[info]   (min, avg, max) = (3977.144, 4013.319, 4037.050), stdev = 21.952
[info]   CI (99.9%): [3928.788, 4097.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.004), stdev = 0.001
[info]   CI (99.9%): [56984.003, 56984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4010.476 ±(99.9%) 573.148 MB/sec [Average]
[info]   (min, avg, max) = (3744.902, 4010.476, 4086.615), stdev = 148.845
[info]   CI (99.9%): [3437.328, 4583.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56945.762 ±(99.9%) 8315.051 B/op [Average]
[info]   (min, avg, max) = (53105.252, 56945.762, 58167.758), stdev = 2159.392
[info]   CI (99.9%): [48630.711, 65260.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 0.167, 0.208), stdev = 0.026
[info]   CI (99.9%): [0.068, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.366 ±(99.9%) 1.405 B/op [Average]
[info]   (min, avg, max) = (2.057, 2.366, 2.955), stdev = 0.365
[info]   CI (99.9%): [0.960, 3.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   59.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.800, 12.000), stdev = 0.447
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.33% complete, ETA 00:22:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266107.974 ops/s
[info] # Warmup Iteration   2: 363928.631 ops/s
[info] # Warmup Iteration   3: 337221.553 ops/s
[info] Iteration   1: 335958.583 ops/s
[info]                  ·gc.alloc.rate:                   1140.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4635.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 335648.914 ops/s
[info]                  ·gc.alloc.rate:                   1139.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6209.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 330807.906 ops/s
[info]                  ·gc.alloc.rate:                   1123.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4749.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 326017.145 ops/s
[info]                  ·gc.alloc.rate:                   1106.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6451.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 336790.604 ops/s
[info]                  ·gc.alloc.rate:                   1143.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4699.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   333044.630 ±(99.9%) 17613.721 ops/s [Average]
[info]   (min, avg, max) = (326017.145, 333044.630, 336790.604), stdev = 4574.227
[info]   CI (99.9%): [315430.910, 350658.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1130.932 ±(99.9%) 59.932 MB/sec [Average]
[info]   (min, avg, max) = (1106.976, 1130.932, 1143.589), stdev = 15.564
[info]   CI (99.9%): [1071.000, 1190.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5344.001, 5344.001, 5344.001), stdev = 0.001
[info]   CI (99.9%): [5344.001, 5344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.879 ±(99.9%) 701.855 MB/sec [Average]
[info]   (min, avg, max) = (989.674, 1130.879, 1336.341), stdev = 182.270
[info]   CI (99.9%): [429.024, 1832.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5348.977 ±(99.9%) 3469.127 B/op [Average]
[info]   (min, avg, max) = (4635.726, 5348.977, 6451.271), stdev = 900.921
[info]   CI (99.9%): [1879.850, 8818.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.354 ±(99.9%) 0.629 B/op [Average]
[info]   (min, avg, max) = (0.195, 0.354, 0.586), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.57% complete, ETA 00:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477135.735 ops/s
[info] # Warmup Iteration   2: 746074.253 ops/s
[info] # Warmup Iteration   3: 731301.467 ops/s
[info] Iteration   1: 729629.916 ops/s
[info]                  ·gc.alloc.rate:                   534.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 749689.135 ops/s
[info]                  ·gc.alloc.rate:                   548.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1368.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 738466.719 ops/s
[info]                  ·gc.alloc.rate:                   540.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 729865.910 ops/s
[info]                  ·gc.alloc.rate:                   534.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1407.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 727866.386 ops/s
[info]                  ·gc.alloc.rate:                   532.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1413.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   735103.613 ±(99.9%) 35177.075 ops/s [Average]
[info]   (min, avg, max) = (727866.386, 735103.613, 749689.135), stdev = 9135.375
[info]   CI (99.9%): [699926.538, 770280.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   538.128 ±(99.9%) 25.776 MB/sec [Average]
[info]   (min, avg, max) = (532.774, 538.128, 548.731), stdev = 6.694
[info]   CI (99.9%): [512.352, 563.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.001, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   573.203 ±(99.9%) 545.357 MB/sec [Average]
[info]   (min, avg, max) = (325.881, 573.203, 653.516), stdev = 141.628
[info]   CI (99.9%): [27.846, 1118.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1227.722 ±(99.9%) 1174.164 B/op [Average]
[info]   (min, avg, max) = (694.226, 1227.722, 1413.078), stdev = 304.927
[info]   CI (99.9%): [53.558, 2401.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.499 ±(99.9%) 3.937 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.499, 2.328), stdev = 1.022
[info]   CI (99.9%): [≈ 0, 4.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.075 ±(99.9%) 8.495 B/op [Average]
[info]   (min, avg, max) = (0.045, 1.075, 5.021), stdev = 2.206
[info]   CI (99.9%): [≈ 0, 9.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 6.000), stdev = 2.074
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:21:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2255583.593 ops/s
[info] # Warmup Iteration   2: 2510644.736 ops/s
[info] # Warmup Iteration   3: 2024868.006 ops/s
[info] Iteration   1: 2017926.397 ops/s
[info]                  ·gc.alloc.rate:                   933.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2010407.384 ops/s
[info]                  ·gc.alloc.rate:                   929.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     779.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2007123.571 ops/s
[info]                  ·gc.alloc.rate:                   928.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     783.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2054684.872 ops/s
[info]                  ·gc.alloc.rate:                   950.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2079086.878 ops/s
[info]                  ·gc.alloc.rate:                   961.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2033845.820 ±(99.9%) 121735.876 ops/s [Average]
[info]   (min, avg, max) = (2007123.571, 2033845.820, 2079086.878), stdev = 31614.420
[info]   CI (99.9%): [1912109.945, 2155581.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   940.813 ±(99.9%) 56.092 MB/sec [Average]
[info]   (min, avg, max) = (928.649, 940.813, 961.676), stdev = 14.567
[info]   CI (99.9%): [884.721, 996.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.551 ±(99.9%) 17.818 MB/sec [Average]
[info]   (min, avg, max) = (994.578, 999.551, 1005.889), stdev = 4.627
[info]   CI (99.9%): [981.733, 1017.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   773.560 ±(99.9%) 34.269 B/op [Average]
[info]   (min, avg, max) = (761.470, 773.560, 783.287), stdev = 8.900
[info]   CI (99.9%): [739.291, 807.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.113 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.061, 0.098), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2283958.427 ops/s
[info] # Warmup Iteration   2: 2590633.985 ops/s
[info] # Warmup Iteration   3: 2473004.260 ops/s
[info] Iteration   1: 2470393.642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2473391.228 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2462583.526 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2465745.769 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2465789.674 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2467580.768 ±(99.9%) 16474.882 ops/s [Average]
[info]   (min, avg, max) = (2462583.526, 2467580.768, 2473391.228), stdev = 4278.475
[info]   CI (99.9%): [2451105.886, 2484055.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.31% complete, ETA 00:21:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314071.873 ops/s
[info] # Warmup Iteration   2: 380181.489 ops/s
[info] # Warmup Iteration   3: 368778.352 ops/s
[info] Iteration   1: 362071.632 ops/s
[info]                  ·gc.alloc.rate:                   521.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1429.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 363653.521 ops/s
[info]                  ·gc.alloc.rate:                   523.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2844.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 350455.986 ops/s
[info]                  ·gc.alloc.rate:                   504.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1474.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 362970.246 ops/s
[info]                  ·gc.alloc.rate:                   522.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2850.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 360698.637 ops/s
[info]                  ·gc.alloc.rate:                   518.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2871.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   359970.004 ±(99.9%) 20917.366 ops/s [Average]
[info]   (min, avg, max) = (350455.986, 359970.004, 363653.521), stdev = 5432.173
[info]   CI (99.9%): [339052.639, 380887.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   517.868 ±(99.9%) 30.248 MB/sec [Average]
[info]   (min, avg, max) = (504.105, 517.868, 523.109), stdev = 7.855
[info]   CI (99.9%): [487.620, 548.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   526.047 ±(99.9%) 693.945 MB/sec [Average]
[info]   (min, avg, max) = (328.401, 526.047, 658.213), stdev = 180.215
[info]   CI (99.9%): [≈ 0, 1219.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2294.181 ±(99.9%) 2961.456 B/op [Average]
[info]   (min, avg, max) = (1429.023, 2294.181, 2871.919), stdev = 769.081
[info]   CI (99.9%): [≈ 0, 5255.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.420 ±(99.9%) 3.347 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.420, 1.975), stdev = 0.869
[info]   CI (99.9%): [≈ 0, 3.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.826 ±(99.9%) 14.542 B/op [Average]
[info]   (min, avg, max) = (0.090, 1.826, 8.581), stdev = 3.776
[info]   CI (99.9%): [≈ 0, 16.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.55% complete, ETA 00:21:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39473.666 ops/s
[info] # Warmup Iteration   2: 50543.469 ops/s
[info] # Warmup Iteration   3: 51361.484 ops/s
[info] Iteration   1: 51774.155 ops/s
[info]                  ·gc.alloc.rate:                   1603.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              48744.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50532.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.531 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 50963.516 ops/s
[info]                  ·gc.alloc.rate:                   1578.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              48744.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51603.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.929 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 51135.199 ops/s
[info]                  ·gc.alloc.rate:                   1583.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              48744.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51690.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.281 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 51853.415 ops/s
[info]                  ·gc.alloc.rate:                   1605.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              48744.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40932.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.791 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 51776.507 ops/s
[info]                  ·gc.alloc.rate:                   1604.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              48744.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51391.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.531 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   51500.558 ±(99.9%) 1607.860 ops/s [Average]
[info]   (min, avg, max) = (50963.516, 51500.558, 51853.415), stdev = 417.556
[info]   CI (99.9%): [49892.699, 53108.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1595.142 ±(99.9%) 49.959 MB/sec [Average]
[info]   (min, avg, max) = (1578.452, 1595.142, 1605.931), stdev = 12.974
[info]   CI (99.9%): [1545.183, 1645.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   48744.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48744.008, 48744.009, 48744.009), stdev = 0.001
[info]   CI (99.9%): [48744.007, 48744.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.529 ±(99.9%) 565.367 MB/sec [Average]
[info]   (min, avg, max) = (1348.572, 1610.529, 1691.135), stdev = 146.824
[info]   CI (99.9%): [1045.162, 2175.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49230.138 ±(99.9%) 17948.463 B/op [Average]
[info]   (min, avg, max) = (40932.515, 49230.138, 51690.799), stdev = 4661.159
[info]   CI (99.9%): [31281.676, 67178.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.413 ±(99.9%) 3.572 B/op [Average]
[info]   (min, avg, max) = (1.281, 2.413, 3.791), stdev = 0.928
[info]   CI (99.9%): [≈ 0, 5.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.79% complete, ETA 00:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34154.995 ops/s
[info] # Warmup Iteration   2: 63698.200 ops/s
[info] # Warmup Iteration   3: 63390.776 ops/s
[info] Iteration   1: 63277.292 ops/s
[info]                  ·gc.alloc.rate:                   1138.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24373.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 64099.701 ops/s
[info]                  ·gc.alloc.rate:                   1153.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32220.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 64616.599 ops/s
[info]                  ·gc.alloc.rate:                   1162.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24094.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 63567.218 ops/s
[info]                  ·gc.alloc.rate:                   1143.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32854.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.546 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 64287.179 ops/s
[info]                  ·gc.alloc.rate:                   1156.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24503.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   63969.598 ±(99.9%) 2089.300 ops/s [Average]
[info]   (min, avg, max) = (63277.292, 63969.598, 64616.599), stdev = 542.585
[info]   CI (99.9%): [61880.297, 66058.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1150.654 ±(99.9%) 37.751 MB/sec [Average]
[info]   (min, avg, max) = (1138.209, 1150.654, 1162.339), stdev = 9.804
[info]   CI (99.9%): [1112.903, 1188.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28304.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28304.007, 28304.007, 28304.007), stdev = 0.001
[info]   CI (99.9%): [28304.006, 28304.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1122.102 ±(99.9%) 696.337 MB/sec [Average]
[info]   (min, avg, max) = (980.166, 1122.102, 1326.992), stdev = 180.837
[info]   CI (99.9%): [425.764, 1818.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27609.433 ±(99.9%) 17353.043 B/op [Average]
[info]   (min, avg, max) = (24094.938, 27609.433, 32854.073), stdev = 4506.530
[info]   CI (99.9%): [10256.390, 44962.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.049 ±(99.9%) 3.110 B/op [Average]
[info]   (min, avg, max) = (1.014, 2.049, 3.067), stdev = 0.808
[info]   CI (99.9%): [≈ 0, 5.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.04% complete, ETA 00:20:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90113.595 ops/s
[info] # Warmup Iteration   2: 96724.487 ops/s
[info] # Warmup Iteration   3: 98040.803 ops/s
[info] Iteration   1: 97274.068 ops/s
[info]                  ·gc.alloc.rate:                   1491.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26960.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.010 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 98867.345 ops/s
[info]                  ·gc.alloc.rate:                   1516.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21314.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 98949.600 ops/s
[info]                  ·gc.alloc.rate:                   1517.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26717.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.993 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 98882.637 ops/s
[info]                  ·gc.alloc.rate:                   1516.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21470.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.657 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 98314.425 ops/s
[info]                  ·gc.alloc.rate:                   1507.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27064.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.000 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   98457.615 ±(99.9%) 2730.877 ops/s [Average]
[info]   (min, avg, max) = (97274.068, 98457.615, 98949.600), stdev = 709.200
[info]   CI (99.9%): [95726.738, 101188.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1510.026 ±(99.9%) 42.213 MB/sec [Average]
[info]   (min, avg, max) = (1491.695, 1510.026, 1517.642), stdev = 10.963
[info]   CI (99.9%): [1467.813, 1552.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24136.004, 24136.004, 24136.005), stdev = 0.001
[info]   CI (99.9%): [24136.004, 24136.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1545.061 ±(99.9%) 707.403 MB/sec [Average]
[info]   (min, avg, max) = (1339.239, 1545.061, 1690.897), stdev = 183.710
[info]   CI (99.9%): [837.658, 2252.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24705.737 ±(99.9%) 11657.844 B/op [Average]
[info]   (min, avg, max) = (21314.676, 24705.737, 27064.842), stdev = 3027.505
[info]   CI (99.9%): [13047.892, 36363.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.330 ±(99.9%) 1.790 B/op [Average]
[info]   (min, avg, max) = (0.993, 1.330, 1.988), stdev = 0.465
[info]   CI (99.9%): [≈ 0, 3.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.28% complete, ETA 00:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11733.011 ops/s
[info] # Warmup Iteration   2: 25143.791 ops/s
[info] # Warmup Iteration   3: 25289.948 ops/s
[info] Iteration   1: 25572.205 ops/s
[info]                  ·gc.alloc.rate:                   1782.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121396.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.125 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 25560.109 ops/s
[info]                  ·gc.alloc.rate:                   1781.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102134.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 25452.479 ops/s
[info]                  ·gc.alloc.rate:                   1774.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103304.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.287 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25311.235 ops/s
[info]                  ·gc.alloc.rate:                   1764.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125501.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.649 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 25659.409 ops/s
[info]                  ·gc.alloc.rate:                   1788.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103574.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.554 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   25511.087 ±(99.9%) 514.871 ops/s [Average]
[info]   (min, avg, max) = (25311.235, 25511.087, 25659.409), stdev = 133.710
[info]   CI (99.9%): [24996.217, 26025.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1778.154 ±(99.9%) 35.797 MB/sec [Average]
[info]   (min, avg, max) = (1764.196, 1778.154, 1788.502), stdev = 9.296
[info]   CI (99.9%): [1742.357, 1813.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109696.034 ±(99.9%) 0.130 B/op [Average]
[info]   (min, avg, max) = (109696.017, 109696.034, 109696.094), stdev = 0.034
[info]   CI (99.9%): [109695.904, 109696.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1801.815 ±(99.9%) 684.592 MB/sec [Average]
[info]   (min, avg, max) = (1658.692, 1801.815, 2018.382), stdev = 177.786
[info]   CI (99.9%): [1117.223, 2486.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   111182.174 ±(99.9%) 43529.228 B/op [Average]
[info]   (min, avg, max) = (102134.026, 111182.174, 125501.078), stdev = 11304.402
[info]   CI (99.9%): [67652.946, 154711.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.187), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.892 ±(99.9%) 15.555 B/op [Average]
[info]   (min, avg, max) = (1.287, 4.892, 11.649), stdev = 4.040
[info]   CI (99.9%): [≈ 0, 20.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.53% complete, ETA 00:20:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86822.440 ops/s
[info] # Warmup Iteration   2: 144549.550 ops/s
[info] # Warmup Iteration   3: 144767.004 ops/s
[info] Iteration   1: 143649.148 ops/s
[info]                  ·gc.alloc.rate:                   1117.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              12248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10714.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 145068.267 ops/s
[info]                  ·gc.alloc.rate:                   1128.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              12248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14212.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.903 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 145188.753 ops/s
[info]                  ·gc.alloc.rate:                   1129.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              12248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10705.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.677 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 145570.582 ops/s
[info]                  ·gc.alloc.rate:                   1132.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              12248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14332.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 147371.690 ops/s
[info]                  ·gc.alloc.rate:                   1147.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              12248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10681.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.667 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   145369.688 ±(99.9%) 5141.807 ops/s [Average]
[info]   (min, avg, max) = (143649.148, 145369.688, 147371.690), stdev = 1335.311
[info]   CI (99.9%): [140227.881, 150511.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1131.310 ±(99.9%) 40.373 MB/sec [Average]
[info]   (min, avg, max) = (1117.832, 1131.310, 1147.065), stdev = 10.485
[info]   CI (99.9%): [1090.937, 1171.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12248.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12248.003, 12248.003, 12248.003), stdev = 0.001
[info]   CI (99.9%): [12248.003, 12248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1120.286 ±(99.9%) 695.339 MB/sec [Average]
[info]   (min, avg, max) = (977.868, 1120.286, 1325.588), stdev = 180.577
[info]   CI (99.9%): [424.946, 1815.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12129.231 ±(99.9%) 7535.642 B/op [Average]
[info]   (min, avg, max) = (10681.680, 12129.231, 14332.286), stdev = 1956.982
[info]   CI (99.9%): [4593.589, 19664.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.676 ±(99.9%) 0.618 B/op [Average]
[info]   (min, avg, max) = (0.450, 0.676, 0.903), stdev = 0.160
[info]   CI (99.9%): [0.059, 1.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.77% complete, ETA 00:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 501284.417 ops/s
[info] # Warmup Iteration   2: 560759.704 ops/s
[info] # Warmup Iteration   3: 563078.773 ops/s
[info] Iteration   1: 563651.244 ops/s
[info]                  ·gc.alloc.rate:                   621.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1850.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 560409.794 ops/s
[info]                  ·gc.alloc.rate:                   618.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1859.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 561817.207 ops/s
[info]                  ·gc.alloc.rate:                   619.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1854.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 563278.477 ops/s
[info]                  ·gc.alloc.rate:                   621.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1852.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 563425.720 ops/s
[info]                  ·gc.alloc.rate:                   621.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   562516.489 ±(99.9%) 5315.477 ops/s [Average]
[info]   (min, avg, max) = (560409.794, 562516.489, 563651.244), stdev = 1380.413
[info]   CI (99.9%): [557201.011, 567831.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   620.585 ±(99.9%) 6.005 MB/sec [Average]
[info]   (min, avg, max) = (618.251, 620.585, 621.925), stdev = 1.560
[info]   CI (99.9%): [614.580, 626.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   662.819 ±(99.9%) 2.348 MB/sec [Average]
[info]   (min, avg, max) = (662.201, 662.819, 663.684), stdev = 0.610
[info]   CI (99.9%): [660.471, 665.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1854.151 ±(99.9%) 13.203 B/op [Average]
[info]   (min, avg, max) = (1850.751, 1854.151, 1859.599), stdev = 3.429
[info]   CI (99.9%): [1840.949, 1867.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.398 ±(99.9%) 2.937 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.398, 1.762), stdev = 0.763
[info]   CI (99.9%): [≈ 0, 3.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.112 ±(99.9%) 8.196 B/op [Average]
[info]   (min, avg, max) = (0.058, 1.112, 4.918), stdev = 2.129
[info]   CI (99.9%): [≈ 0, 9.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.02% complete, ETA 00:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 511925.115 ops/s
[info] # Warmup Iteration   2: 565504.010 ops/s
[info] # Warmup Iteration   3: 573215.066 ops/s
[info] Iteration   1: 571561.520 ops/s
[info]                  ·gc.alloc.rate:      5.813 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 571798.611 ops/s
[info]                  ·gc.alloc.rate:      5.814 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 572180.847 ops/s
[info]                  ·gc.alloc.rate:      5.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 572115.497 ops/s
[info]                  ·gc.alloc.rate:      5.817 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 573007.261 ops/s
[info]                  ·gc.alloc.rate:      5.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   572132.747 ±(99.9%) 2113.766 ops/s [Average]
[info]   (min, avg, max) = (571561.520, 572132.747, 573007.261), stdev = 548.938
[info]   CI (99.9%): [570018.981, 574246.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.818 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (5.813, 5.818, 5.826), stdev = 0.005
[info]   CI (99.9%): [5.798, 5.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.26% complete, ETA 00:19:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33040.595 ops/s
[info] # Warmup Iteration   2: 61180.786 ops/s
[info] # Warmup Iteration   3: 61780.451 ops/s
[info] Iteration   1: 62221.826 ops/s
[info]                  ·gc.alloc.rate:                   1042.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              26360.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24735.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 61956.762 ops/s
[info]                  ·gc.alloc.rate:                   1037.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              26360.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33250.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.702 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 61870.456 ops/s
[info]                  ·gc.alloc.rate:                   1036.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              26360.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25120.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.648 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 61489.549 ops/s
[info]                  ·gc.alloc.rate:                   1029.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              26360.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25396.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 61209.835 ops/s
[info]                  ·gc.alloc.rate:                   1025.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              26360.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25648.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   61749.686 ±(99.9%) 1539.646 ops/s [Average]
[info]   (min, avg, max) = (61209.835, 61749.686, 62221.826), stdev = 399.841
[info]   CI (99.9%): [60210.040, 63289.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1034.302 ±(99.9%) 26.110 MB/sec [Average]
[info]   (min, avg, max) = (1025.182, 1034.302, 1042.299), stdev = 6.781
[info]   CI (99.9%): [1008.192, 1060.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26360.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26360.007, 26360.007, 26360.007), stdev = 0.001
[info]   CI (99.9%): [26360.006, 26360.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1052.895 ±(99.9%) 551.854 MB/sec [Average]
[info]   (min, avg, max) = (978.046, 1052.895, 1308.946), stdev = 143.315
[info]   CI (99.9%): [501.041, 1604.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   26830.319 ±(99.9%) 13882.096 B/op [Average]
[info]   (min, avg, max) = (24735.017, 26830.319, 33250.792), stdev = 3605.136
[info]   CI (99.9%): [12948.223, 40712.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.332 ±(99.9%) 3.687 B/op [Average]
[info]   (min, avg, max) = (1.066, 2.332, 3.702), stdev = 0.957
[info]   CI (99.9%): [≈ 0, 6.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77.51% complete, ETA 00:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1121764.173 ops/s
[info] # Warmup Iteration   2: 2042514.486 ops/s
[info] # Warmup Iteration   3: 2123936.295 ops/s
[info] Iteration   1: 2122680.510 ops/s
[info]                  ·gc.alloc.rate:                   3258.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3033.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2249.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2113434.393 ops/s
[info]                  ·gc.alloc.rate:                   3244.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2523.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2123369.217 ops/s
[info]                  ·gc.alloc.rate:                   3259.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2266.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2108095.589 ops/s
[info]                  ·gc.alloc.rate:                   3236.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2541.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2109987.990 ops/s
[info]                  ·gc.alloc.rate:                   3238.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2285.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2115513.540 ±(99.9%) 27428.756 ops/s [Average]
[info]   (min, avg, max) = (2108095.589, 2115513.540, 2123369.217), stdev = 7123.161
[info]   CI (99.9%): [2088084.784, 2142942.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3247.478 ±(99.9%) 42.091 MB/sec [Average]
[info]   (min, avg, max) = (3236.002, 3247.478, 3259.524), stdev = 10.931
[info]   CI (99.9%): [3205.387, 3289.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2416.000, 2416.000, 2416.000), stdev = 0.001
[info]   CI (99.9%): [2416.000, 2416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3189.377 ±(99.9%) 728.866 MB/sec [Average]
[info]   (min, avg, max) = (3033.316, 3189.377, 3403.904), stdev = 189.284
[info]   CI (99.9%): [2460.512, 3918.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2373.039 ±(99.9%) 562.698 B/op [Average]
[info]   (min, avg, max) = (2249.096, 2373.039, 2541.356), stdev = 146.131
[info]   CI (99.9%): [1810.341, 2935.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.146), stdev = 0.017
[info]   CI (99.9%): [0.062, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.078, 0.096, 0.109), stdev = 0.013
[info]   CI (99.9%): [0.047, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77.75% complete, ETA 00:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.885 ops/s
[info] # Warmup Iteration   2: 797172.974 ops/s
[info] # Warmup Iteration   3: 836818.502 ops/s
[info] Iteration   1: 847301.545 ops/s
[info]                  ·gc.alloc.rate:               516.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 475.147 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 843670.321 ops/s
[info]                  ·gc.alloc.rate:                   514.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1204.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 844549.472 ops/s
[info]                  ·gc.alloc.rate:                   515.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1207.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 846775.519 ops/s
[info]                  ·gc.alloc.rate:               516.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 604.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 823210.035 ops/s
[info]                  ·gc.alloc.rate:                   502.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   841101.378 ±(99.9%) 38948.027 ops/s [Average]
[info]   (min, avg, max) = (823210.035, 841101.378, 847301.545), stdev = 10114.679
[info]   CI (99.9%): [802153.351, 880049.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   513.126 ±(99.9%) 23.481 MB/sec [Average]
[info]   (min, avg, max) = (502.337, 513.126, 516.833), stdev = 6.098
[info]   CI (99.9%): [489.645, 536.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (960.001, 960.001, 960.001), stdev = 0.001
[info]   CI (99.9%): [960.000, 960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   505.496 ±(99.9%) 761.262 MB/sec [Average]
[info]   (min, avg, max) = (255.804, 505.496, 652.401), stdev = 197.697
[info]   CI (99.9%): [≈ 0, 1266.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   947.763 ±(99.9%) 1445.649 B/op [Average]
[info]   (min, avg, max) = (475.147, 947.763, 1246.783), stdev = 375.430
[info]   CI (99.9%): [≈ 0, 2393.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.00% complete, ETA 00:19:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60661.383 ops/s
[info] # Warmup Iteration   2: 294053.569 ops/s
[info] # Warmup Iteration   3: 301057.835 ops/s
[info] Iteration   1: 304932.408 ops/s
[info]                  ·gc.alloc.rate:                   731.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3359.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 303676.412 ops/s
[info]                  ·gc.alloc.rate:                   728.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3376.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 301710.002 ops/s
[info]                  ·gc.alloc.rate:                   723.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5106.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 309171.354 ops/s
[info]                  ·gc.alloc.rate:                   741.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3331.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 311934.979 ops/s
[info]                  ·gc.alloc.rate:               748.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3312.301 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   306285.031 ±(99.9%) 16087.461 ops/s [Average]
[info]   (min, avg, max) = (301710.002, 306285.031, 311934.979), stdev = 4177.863
[info]   CI (99.9%): [290197.570, 322372.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   734.950 ±(99.9%) 38.645 MB/sec [Average]
[info]   (min, avg, max) = (723.869, 734.950, 748.595), stdev = 10.036
[info]   CI (99.9%): [696.304, 773.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3776.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3776.001, 3776.001, 3776.002), stdev = 0.001
[info]   CI (99.9%): [3776.001, 3776.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   718.530 ±(99.9%) 560.486 MB/sec [Average]
[info]   (min, avg, max) = (650.911, 718.530, 978.878), stdev = 145.557
[info]   CI (99.9%): [158.044, 1279.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3697.164 ±(99.9%) 3034.617 B/op [Average]
[info]   (min, avg, max) = (3312.301, 3697.164, 5106.233), stdev = 788.080
[info]   CI (99.9%): [662.546, 6731.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.477 ±(99.9%) 3.841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 2.261), stdev = 0.998
[info]   CI (99.9%): [≈ 0, 4.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.463 ±(99.9%) 19.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.463, 11.670), stdev = 5.148
[info]   CI (99.9%): [≈ 0, 22.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78.24% complete, ETA 00:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 685788.476 ops/s
[info] # Warmup Iteration   2: 720868.138 ops/s
[info] # Warmup Iteration   3: 723115.321 ops/s
[info] Iteration   1: 725257.235 ops/s
[info]                  ·gc.alloc.rate:                   648.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1452.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 707132.011 ops/s
[info]                  ·gc.alloc.rate:                   632.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1488.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 705755.019 ops/s
[info]                  ·gc.alloc.rate:               631.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 745.738 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 705398.103 ops/s
[info]                  ·gc.alloc.rate:                   631.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1492.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 706032.308 ops/s
[info]                  ·gc.alloc.rate:                   631.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1492.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   709914.935 ±(99.9%) 33119.583 ops/s [Average]
[info]   (min, avg, max) = (705398.103, 709914.935, 725257.235), stdev = 8601.051
[info]   CI (99.9%): [676795.352, 743034.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   635.093 ±(99.9%) 29.541 MB/sec [Average]
[info]   (min, avg, max) = (631.052, 635.093, 648.775), stdev = 7.672
[info]   CI (99.9%): [605.551, 664.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1408.001, 1408.001, 1408.001), stdev = 0.001
[info]   CI (99.9%): [1408.001, 1408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   602.192 ±(99.9%) 576.439 MB/sec [Average]
[info]   (min, avg, max) = (334.402, 602.192, 669.479), stdev = 149.699
[info]   CI (99.9%): [25.753, 1178.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1334.352 ±(99.9%) 1268.654 B/op [Average]
[info]   (min, avg, max) = (745.738, 1334.352, 1492.376), stdev = 329.465
[info]   CI (99.9%): [65.698, 2603.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.128 ±(99.9%) 0.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.128, 0.271), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.48% complete, ETA 00:18:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3671634.870 ops/s
[info] # Warmup Iteration   2: 3975835.366 ops/s
[info] # Warmup Iteration   3: 3978657.835 ops/s
[info] Iteration   1: 3997355.094 ops/s
[info]                  ·gc.alloc.rate:                   2336.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     928.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3969117.454 ops/s
[info]                  ·gc.alloc.rate:                   2320.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     938.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4024841.523 ops/s
[info]                  ·gc.alloc.rate:                   2353.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     928.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3971762.299 ops/s
[info]                  ·gc.alloc.rate:                   2322.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4020771.659 ops/s
[info]                  ·gc.alloc.rate:                   2350.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3996769.606 ±(99.9%) 101046.957 ops/s [Average]
[info]   (min, avg, max) = (3969117.454, 3996769.606, 4024841.523), stdev = 26241.574
[info]   CI (99.9%): [3895722.649, 4097816.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2336.878 ±(99.9%) 58.044 MB/sec [Average]
[info]   (min, avg, max) = (2320.932, 2336.878, 2353.105), stdev = 15.074
[info]   CI (99.9%): [2278.835, 2394.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2372.638 ±(99.9%) 37.185 MB/sec [Average]
[info]   (min, avg, max) = (2358.068, 2372.638, 2382.499), stdev = 9.657
[info]   CI (99.9%): [2335.453, 2409.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   934.104 ±(99.9%) 24.289 B/op [Average]
[info]   (min, avg, max) = (928.315, 934.104, 942.364), stdev = 6.308
[info]   CI (99.9%): [909.816, 958.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.041, 0.058), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.73% complete, ETA 00:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7230804.734 ops/s
[info] # Warmup Iteration   2: 7597113.633 ops/s
[info] # Warmup Iteration   3: 8013577.469 ops/s
[info] Iteration   1: 8199788.211 ops/s
[info]                  ·gc.alloc.rate:                   875.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8191698.275 ops/s
[info]                  ·gc.alloc.rate:                   874.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8105549.333 ops/s
[info]                  ·gc.alloc.rate:               865.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129.867 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 8138652.048 ops/s
[info]                  ·gc.alloc.rate:                   869.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8148183.588 ops/s
[info]                  ·gc.alloc.rate:                   869.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8156774.291 ±(99.9%) 150324.303 ops/s [Average]
[info]   (min, avg, max) = (8105549.333, 8156774.291, 8199788.211), stdev = 39038.744
[info]   CI (99.9%): [8006449.988, 8307098.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   870.832 ±(99.9%) 15.434 MB/sec [Average]
[info]   (min, avg, max) = (865.577, 870.832, 875.243), stdev = 4.008
[info]   CI (99.9%): [855.398, 886.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   870.615 ±(99.9%) 704.116 MB/sec [Average]
[info]   (min, avg, max) = (669.107, 870.615, 1005.945), stdev = 182.857
[info]   CI (99.9%): [166.499, 1574.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   167.869 ±(99.9%) 133.907 B/op [Average]
[info]   (min, avg, max) = (129.699, 167.869, 194.459), stdev = 34.775
[info]   CI (99.9%): [33.962, 301.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.024), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78.97% complete, ETA 00:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23997.723 ops/s
[info] # Warmup Iteration   2: 171745.785 ops/s
[info] # Warmup Iteration   3: 177641.390 ops/s
[info] Iteration   1: 183851.355 ops/s
[info]                  ·gc.alloc.rate:                   1579.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1634.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13988.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.891 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 180151.858 ops/s
[info]                  ·gc.alloc.rate:                   1547.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11511.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 177256.690 ops/s
[info]                  ·gc.alloc.rate:                   1522.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14727.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.555 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 180996.213 ops/s
[info]                  ·gc.alloc.rate:                   1554.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14527.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.905 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 179260.829 ops/s
[info]                  ·gc.alloc.rate:                   1540.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11802.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   180303.389 ±(99.9%) 9325.465 ops/s [Average]
[info]   (min, avg, max) = (177256.690, 180303.389, 183851.355), stdev = 2421.794
[info]   CI (99.9%): [170977.924, 189628.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1548.925 ±(99.9%) 80.072 MB/sec [Average]
[info]   (min, avg, max) = (1522.669, 1548.925, 1579.366), stdev = 20.794
[info]   CI (99.9%): [1468.853, 1628.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13520.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13520.002, 13520.002, 13520.003), stdev = 0.001
[info]   CI (99.9%): [13520.002, 13520.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1525.129 ±(99.9%) 684.909 MB/sec [Average]
[info]   (min, avg, max) = (1317.690, 1525.129, 1670.694), stdev = 177.869
[info]   CI (99.9%): [840.220, 2210.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13311.487 ±(99.9%) 5921.404 B/op [Average]
[info]   (min, avg, max) = (11511.493, 13311.487, 14727.523), stdev = 1537.770
[info]   CI (99.9%): [7390.082, 19232.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.762 ±(99.9%) 0.740 B/op [Average]
[info]   (min, avg, max) = (0.548, 0.762, 0.909), stdev = 0.192
[info]   CI (99.9%): [0.022, 1.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.22% complete, ETA 00:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 631233.704 ops/s
[info] # Warmup Iteration   2: 697901.658 ops/s
[info] # Warmup Iteration   3: 705586.235 ops/s
[info] Iteration   1: 700616.306 ops/s
[info]                  ·gc.alloc.rate:               67.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 574.629 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 701100.777 ops/s
[info]                  ·gc.alloc.rate:      67.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 728450.833 ops/s
[info]                  ·gc.alloc.rate:      70.350 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 728323.296 ops/s
[info]                  ·gc.alloc.rate:      70.339 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 726243.862 ops/s
[info]                  ·gc.alloc.rate:                   70.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   716947.015 ±(99.9%) 56657.626 ops/s [Average]
[info]   (min, avg, max) = (700616.306, 716947.015, 728450.833), stdev = 14713.806
[info]   CI (99.9%): [660289.389, 773604.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   69.244 ±(99.9%) 5.449 MB/sec [Average]
[info]   (min, avg, max) = (67.673, 69.244, 70.350), stdev = 1.415
[info]   CI (99.9%): [63.795, 74.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.001, 152.001, 152.001), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.325 ±(99.9%) 539.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.325, 255.833), stdev = 140.114
[info]   CI (99.9%): [≈ 0, 641.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   225.796 ±(99.9%) 1190.879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 225.796, 574.629), stdev = 309.267
[info]   CI (99.9%): [≈ 0, 1416.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.537 ±(99.9%) 4.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.537, 2.684), stdev = 1.200
[info]   CI (99.9%): [≈ 0, 5.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.163 ±(99.9%) 10.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.163, 5.817), stdev = 2.602
[info]   CI (99.9%): [≈ 0, 11.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79.46% complete, ETA 00:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29983.550 ops/s
[info] # Warmup Iteration   2: 63191.681 ops/s
[info] # Warmup Iteration   3: 63070.558 ops/s
[info] Iteration   1: 62953.467 ops/s
[info]                  ·gc.alloc.rate:                   2842.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66823.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.643 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 62271.595 ops/s
[info]                  ·gc.alloc.rate:                   2811.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68119.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.735 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 62634.460 ops/s
[info]                  ·gc.alloc.rate:                   2827.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3048.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76596.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.138 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 63761.825 ops/s
[info]                  ·gc.alloc.rate:                   2878.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67069.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.597 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 63448.596 ops/s
[info]                  ·gc.alloc.rate:                   2864.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75927.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.131 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   63013.989 ±(99.9%) 2315.992 ops/s [Average]
[info]   (min, avg, max) = (62271.595, 63013.989, 63761.825), stdev = 601.456
[info]   CI (99.9%): [60697.997, 65329.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2845.010 ±(99.9%) 104.273 MB/sec [Average]
[info]   (min, avg, max) = (2811.840, 2845.010, 2878.722), stdev = 27.079
[info]   CI (99.9%): [2740.737, 2949.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71056.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71056.007, 71056.007, 71056.007), stdev = 0.001
[info]   CI (99.9%): [71056.006, 71056.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2838.981 ±(99.9%) 760.736 MB/sec [Average]
[info]   (min, avg, max) = (2672.763, 2838.981, 3061.123), stdev = 197.561
[info]   CI (99.9%): [2078.245, 3599.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70907.136 ±(99.9%) 18937.255 B/op [Average]
[info]   (min, avg, max) = (66823.550, 70907.136, 76596.063), stdev = 4917.945
[info]   CI (99.9%): [51969.881, 89844.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.154, 0.187), stdev = 0.024
[info]   CI (99.9%): [0.063, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.849 ±(99.9%) 2.339 B/op [Average]
[info]   (min, avg, max) = (3.138, 3.849, 4.735), stdev = 0.607
[info]   CI (99.9%): [1.510, 6.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 1.095
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.71% complete, ETA 00:17:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711794.702 ops/s
[info] # Warmup Iteration   2: 994704.751 ops/s
[info] # Warmup Iteration   3: 980515.573 ops/s
[info] Iteration   1: 1004125.262 ops/s
[info]                  ·gc.alloc.rate:                   576.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     512.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.478 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 997380.403 ops/s
[info]                  ·gc.alloc.rate:                   573.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1030.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1003036.704 ops/s
[info]                  ·gc.alloc.rate:                   576.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1025.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1003407.432 ops/s
[info]                  ·gc.alloc.rate:                   576.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1026.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1006108.769 ops/s
[info]                  ·gc.alloc.rate:                   577.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1025.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1002811.714 ±(99.9%) 12551.655 ops/s [Average]
[info]   (min, avg, max) = (997380.403, 1002811.714, 1006108.769), stdev = 3259.625
[info]   CI (99.9%): [990260.059, 1015363.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   576.037 ±(99.9%) 7.010 MB/sec [Average]
[info]   (min, avg, max) = (573.025, 576.037, 577.921), stdev = 1.820
[info]   CI (99.9%): [569.027, 583.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   588.776 ±(99.9%) 564.033 MB/sec [Average]
[info]   (min, avg, max) = (326.756, 588.776, 655.872), stdev = 146.477
[info]   CI (99.9%): [24.744, 1152.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   924.128 ±(99.9%) 886.867 B/op [Average]
[info]   (min, avg, max) = (512.143, 924.128, 1030.681), stdev = 230.316
[info]   CI (99.9%): [37.262, 1810.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.490 ±(99.9%) 3.724 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.490, 2.219), stdev = 0.967
[info]   CI (99.9%): [≈ 0, 4.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.768 ±(99.9%) 5.837 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.768, 3.478), stdev = 1.516
[info]   CI (99.9%): [≈ 0, 6.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.95% complete, ETA 00:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1199196.331 ops/s
[info] # Warmup Iteration   2: 1340713.675 ops/s
[info] # Warmup Iteration   3: 1355990.977 ops/s
[info] Iteration   1: 1367144.646 ops/s
[info]                  ·gc.alloc.rate:               382.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 294.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1362020.428 ops/s
[info]                  ·gc.alloc.rate:                   380.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     678.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1380308.095 ops/s
[info]                  ·gc.alloc.rate:                   385.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     378.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1382006.887 ops/s
[info]                  ·gc.alloc.rate:                   386.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     377.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1380783.024 ops/s
[info]                  ·gc.alloc.rate:               386.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 377.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1374452.616 ±(99.9%) 35469.501 ops/s [Average]
[info]   (min, avg, max) = (1362020.428, 1374452.616, 1382006.887), stdev = 9211.317
[info]   CI (99.9%): [1338983.114, 1409922.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   384.277 ±(99.9%) 9.948 MB/sec [Average]
[info]   (min, avg, max) = (380.809, 384.277, 386.372), stdev = 2.583
[info]   CI (99.9%): [374.330, 394.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   367.479 ±(99.9%) 490.297 MB/sec [Average]
[info]   (min, avg, max) = (255.796, 367.479, 587.607), stdev = 127.328
[info]   CI (99.9%): [≈ 0, 857.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   421.220 ±(99.9%) 571.803 B/op [Average]
[info]   (min, avg, max) = (294.481, 421.220, 678.943), stdev = 148.495
[info]   CI (99.9%): [≈ 0, 993.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 3.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.793), stdev = 0.793
[info]   CI (99.9%): [≈ 0, 3.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.433 ±(99.9%) 3.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.433, 2.071), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.20% complete, ETA 00:17:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 901291.022 ops/s
[info] # Warmup Iteration   2: 976598.483 ops/s
[info] # Warmup Iteration   3: 974982.193 ops/s
[info] Iteration   1: 979649.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 982239.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 978788.979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 979851.284 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 979606.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   980027.117 ±(99.9%) 5013.467 ops/s [Average]
[info]   (min, avg, max) = (978788.979, 980027.117, 982239.964), stdev = 1301.981
[info]   CI (99.9%): [975013.650, 985040.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.44% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20029.409 ops/s
[info] # Warmup Iteration   2: 36796.249 ops/s
[info] # Warmup Iteration   3: 37544.245 ops/s
[info] Iteration   1: 37250.713 ops/s
[info]                  ·gc.alloc.rate:                   1617.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69446.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.639 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 37594.252 ops/s
[info]                  ·gc.alloc.rate:                   1633.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55481.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.614 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37325.299 ops/s
[info]                  ·gc.alloc.rate:                   1621.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70303.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.633 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 37791.246 ops/s
[info]                  ·gc.alloc.rate:                   1641.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69879.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 37847.209 ops/s
[info]                  ·gc.alloc.rate:                   1643.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70084.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.731 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   37561.744 ±(99.9%) 1032.993 ops/s [Average]
[info]   (min, avg, max) = (37250.713, 37561.744, 37847.209), stdev = 268.265
[info]   CI (99.9%): [36528.751, 38594.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1631.616 ±(99.9%) 44.680 MB/sec [Average]
[info]   (min, avg, max) = (1617.982, 1631.616, 1643.959), stdev = 11.603
[info]   CI (99.9%): [1586.936, 1676.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68360.013 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (68360.011, 68360.013, 68360.016), stdev = 0.002
[info]   CI (99.9%): [68360.005, 68360.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1600.032 ±(99.9%) 594.149 MB/sec [Average]
[info]   (min, avg, max) = (1325.455, 1600.032, 1685.423), stdev = 154.299
[info]   CI (99.9%): [1005.883, 2194.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67038.925 ±(99.9%) 24909.046 B/op [Average]
[info]   (min, avg, max) = (55481.023, 67038.925, 70303.914), stdev = 6468.800
[info]   CI (99.9%): [42129.880, 91947.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.617 ±(99.9%) 2.365 B/op [Average]
[info]   (min, avg, max) = (1.731, 2.617, 3.468), stdev = 0.614
[info]   CI (99.9%): [0.252, 4.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.68% complete, ETA 00:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232763.301 ops/s
[info] # Warmup Iteration   2: 248857.217 ops/s
[info] # Warmup Iteration   3: 250733.179 ops/s
[info] Iteration   1: 247088.943 ops/s
[info]                  ·gc.alloc.rate:                   967.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6352.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 250411.192 ops/s
[info]                  ·gc.alloc.rate:                   980.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6276.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 250597.645 ops/s
[info]                  ·gc.alloc.rate:                   980.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4188.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 250774.132 ops/s
[info]                  ·gc.alloc.rate:                   981.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6294.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 250774.266 ops/s
[info]                  ·gc.alloc.rate:                   981.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6311.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   249929.236 ±(99.9%) 6141.216 ops/s [Average]
[info]   (min, avg, max) = (247088.943, 249929.236, 250774.266), stdev = 1594.854
[info]   CI (99.9%): [243788.020, 256070.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   978.397 ±(99.9%) 23.945 MB/sec [Average]
[info]   (min, avg, max) = (967.311, 978.397, 981.778), stdev = 6.219
[info]   CI (99.9%): [954.452, 1002.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.002, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   934.426 ±(99.9%) 576.045 MB/sec [Average]
[info]   (min, avg, max) = (666.884, 934.426, 1005.857), stdev = 149.597
[info]   CI (99.9%): [358.381, 1510.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5884.358 ±(99.9%) 3652.997 B/op [Average]
[info]   (min, avg, max) = (4188.062, 5884.358, 6352.023), stdev = 948.672
[info]   CI (99.9%): [2231.360, 9537.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.393 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (0.265, 0.393, 0.523), stdev = 0.091
[info]   CI (99.9%): [0.041, 0.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.93% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12278.428 ops/s
[info] # Warmup Iteration   2: 26991.086 ops/s
[info] # Warmup Iteration   3: 27399.263 ops/s
[info] Iteration   1: 27800.539 ops/s
[info]                  ·gc.alloc.rate:                   1472.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74028.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.071 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27705.506 ops/s
[info]                  ·gc.alloc.rate:                   1467.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93603.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.461 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27601.007 ops/s
[info]                  ·gc.alloc.rate:                   1461.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75723.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.561 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27884.641 ops/s
[info]                  ·gc.alloc.rate:                   1476.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94292.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.175 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27596.623 ops/s
[info]                  ·gc.alloc.rate:                   1461.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76662.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.561 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   27717.663 ±(99.9%) 483.854 ops/s [Average]
[info]   (min, avg, max) = (27596.623, 27717.663, 27884.641), stdev = 125.655
[info]   CI (99.9%): [27233.810, 28201.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1468.101 ±(99.9%) 25.560 MB/sec [Average]
[info]   (min, avg, max) = (1461.719, 1468.101, 1476.941), stdev = 6.638
[info]   CI (99.9%): [1442.540, 1493.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83360.017 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (83360.016, 83360.017, 83360.023), stdev = 0.003
[info]   CI (99.9%): [83360.006, 83360.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1459.663 ±(99.9%) 703.935 MB/sec [Average]
[info]   (min, avg, max) = (1307.611, 1459.663, 1670.645), stdev = 182.810
[info]   CI (99.9%): [755.728, 2163.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82861.908 ±(99.9%) 39149.826 B/op [Average]
[info]   (min, avg, max) = (74028.221, 82861.908, 94292.887), stdev = 10167.086
[info]   CI (99.9%): [43712.081, 122011.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.167), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.966 ±(99.9%) 12.618 B/op [Average]
[info]   (min, avg, max) = (1.175, 4.966, 9.461), stdev = 3.277
[info]   CI (99.9%): [≈ 0, 17.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.17% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63154.652 ops/s
[info] # Warmup Iteration   2: 108431.886 ops/s
[info] # Warmup Iteration   3: 110517.501 ops/s
[info] Iteration   1: 109548.971 ops/s
[info]                  ·gc.alloc.rate:                   1409.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18805.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 109430.109 ops/s
[info]                  ·gc.alloc.rate:                   1407.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23712.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.096 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 109396.659 ops/s
[info]                  ·gc.alloc.rate:                   1407.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19114.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 109974.707 ops/s
[info]                  ·gc.alloc.rate:                   1414.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19128.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.894 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 108585.581 ops/s
[info]                  ·gc.alloc.rate:                   1396.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19464.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   109387.205 ±(99.9%) 1940.527 ops/s [Average]
[info]   (min, avg, max) = (108585.581, 109387.205, 109974.707), stdev = 503.949
[info]   CI (99.9%): [107446.678, 111327.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1407.330 ±(99.9%) 25.199 MB/sec [Average]
[info]   (min, avg, max) = (1396.961, 1407.330, 1414.999), stdev = 6.544
[info]   CI (99.9%): [1382.131, 1432.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20248.004, 20248.004, 20248.004), stdev = 0.001
[info]   CI (99.9%): [20248.004, 20248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1393.217 ±(99.9%) 552.088 MB/sec [Average]
[info]   (min, avg, max) = (1309.107, 1393.217, 1648.679), stdev = 143.375
[info]   CI (99.9%): [841.129, 1945.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20045.230 ±(99.9%) 7944.274 B/op [Average]
[info]   (min, avg, max) = (18805.749, 20045.230, 23712.168), stdev = 2063.103
[info]   CI (99.9%): [12100.955, 27989.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.958 ±(99.9%) 2.627 B/op [Average]
[info]   (min, avg, max) = (0.299, 0.958, 2.096), stdev = 0.682
[info]   CI (99.9%): [≈ 0, 3.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.42% complete, ETA 00:16:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313243.576 ops/s
[info] # Warmup Iteration   2: 354098.292 ops/s
[info] # Warmup Iteration   3: 353907.214 ops/s
[info] Iteration   1: 350633.924 ops/s
[info]                  ·gc.alloc.rate:                   1669.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7480.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.467 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 358143.961 ops/s
[info]                  ·gc.alloc.rate:                   1705.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7361.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 358625.781 ops/s
[info]                  ·gc.alloc.rate:                   1708.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7384.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 354766.379 ops/s
[info]                  ·gc.alloc.rate:                   1689.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7491.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 358570.392 ops/s
[info]                  ·gc.alloc.rate:                   1707.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7432.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   356148.087 ±(99.9%) 13381.356 ops/s [Average]
[info]   (min, avg, max) = (350633.924, 356148.087, 358625.781), stdev = 3475.096
[info]   CI (99.9%): [342766.732, 369529.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1696.316 ±(99.9%) 64.013 MB/sec [Average]
[info]   (min, avg, max) = (1669.970, 1696.316, 1708.311), stdev = 16.624
[info]   CI (99.9%): [1632.303, 1760.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1681.286 ±(99.9%) 41.388 MB/sec [Average]
[info]   (min, avg, max) = (1666.416, 1681.286, 1693.388), stdev = 10.748
[info]   CI (99.9%): [1639.897, 1722.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7429.925 ±(99.9%) 220.378 B/op [Average]
[info]   (min, avg, max) = (7361.104, 7429.925, 7491.433), stdev = 57.231
[info]   CI (99.9%): [7209.548, 7650.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.313 ±(99.9%) 0.413 B/op [Average]
[info]   (min, avg, max) = (0.185, 0.313, 0.467), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.66% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 370885.418 ops/s
[info] # Warmup Iteration   2: 422887.119 ops/s
[info] # Warmup Iteration   3: 418207.011 ops/s
[info] Iteration   1: 428016.830 ops/s
[info]                  ·gc.alloc.rate:                   1466.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4889.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 424324.118 ops/s
[info]                  ·gc.alloc.rate:                   1453.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4951.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.463 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 429426.685 ops/s
[info]                  ·gc.alloc.rate:                   1471.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6146.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 426847.270 ops/s
[info]                  ·gc.alloc.rate:                   1462.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4965.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 429307.352 ops/s
[info]                  ·gc.alloc.rate:                   1471.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4951.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   427584.451 ±(99.9%) 8105.211 ops/s [Average]
[info]   (min, avg, max) = (424324.118, 427584.451, 429426.685), stdev = 2104.898
[info]   CI (99.9%): [419479.240, 435689.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1465.189 ±(99.9%) 28.268 MB/sec [Average]
[info]   (min, avg, max) = (1453.710, 1465.189, 1471.418), stdev = 7.341
[info]   CI (99.9%): [1436.921, 1493.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1408.082 ±(99.9%) 580.506 MB/sec [Average]
[info]   (min, avg, max) = (1329.661, 1408.082, 1677.303), stdev = 150.756
[info]   CI (99.9%): [827.576, 1988.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   5180.842 ±(99.9%) 2081.698 B/op [Average]
[info]   (min, avg, max) = (4889.140, 5180.842, 6146.465), stdev = 540.610
[info]   CI (99.9%): [3099.144, 7262.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.276 ±(99.9%) 0.453 B/op [Average]
[info]   (min, avg, max) = (0.153, 0.276, 0.463), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.91% complete, ETA 00:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31355.160 ops/s
[info] # Warmup Iteration   2: 57733.633 ops/s
[info] # Warmup Iteration   3: 58544.838 ops/s
[info] Iteration   1: 58777.741 ops/s
[info]                  ·gc.alloc.rate:                   1257.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              33648.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35006.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.115 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 58958.850 ops/s
[info]                  ·gc.alloc.rate:                   1260.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              33648.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26300.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58656.987 ops/s
[info]                  ·gc.alloc.rate:                   1254.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              33648.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35478.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 57987.884 ops/s
[info]                  ·gc.alloc.rate:                   1239.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              33648.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36104.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58733.872 ops/s
[info]                  ·gc.alloc.rate:                   1255.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              33648.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35843.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.116 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   58623.067 ±(99.9%) 1432.471 ops/s [Average]
[info]   (min, avg, max) = (57987.884, 58623.067, 58958.850), stdev = 372.008
[info]   CI (99.9%): [57190.595, 60055.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1253.461 ±(99.9%) 30.859 MB/sec [Average]
[info]   (min, avg, max) = (1239.747, 1253.461, 1260.553), stdev = 8.014
[info]   CI (99.9%): [1222.602, 1284.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33648.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33648.007, 33648.008, 33648.008), stdev = 0.001
[info]   CI (99.9%): [33648.006, 33648.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1256.690 ±(99.9%) 585.773 MB/sec [Average]
[info]   (min, avg, max) = (985.283, 1256.690, 1337.648), stdev = 152.123
[info]   CI (99.9%): [670.917, 1842.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33746.578 ±(99.9%) 16107.369 B/op [Average]
[info]   (min, avg, max) = (26300.200, 33746.578, 36104.179), stdev = 4183.032
[info]   CI (99.9%): [17639.210, 49853.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.565 ±(99.9%) 1.792 B/op [Average]
[info]   (min, avg, max) = (1.115, 1.565, 2.223), stdev = 0.465
[info]   CI (99.9%): [≈ 0, 3.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.15% complete, ETA 00:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56078.929 ops/s
[info] # Warmup Iteration   2: 70861.606 ops/s
[info] # Warmup Iteration   3: 69671.673 ops/s
[info] Iteration   1: 71997.325 ops/s
[info]                  ·gc.alloc.rate:                   1422.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              31088.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29042.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.910 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 73216.772 ops/s
[info]                  ·gc.alloc.rate:                   1446.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              31088.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28673.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.790 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 71304.182 ops/s
[info]                  ·gc.alloc.rate:                   1408.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              31088.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36993.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.297 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71530.595 ops/s
[info]                  ·gc.alloc.rate:                   1412.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              31088.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29622.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73229.700 ops/s
[info]                  ·gc.alloc.rate:                   1446.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              31088.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29020.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.790 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   72255.715 ±(99.9%) 3534.557 ops/s [Average]
[info]   (min, avg, max) = (71304.182, 72255.715, 73229.700), stdev = 917.913
[info]   CI (99.9%): [68721.158, 75790.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1427.300 ±(99.9%) 70.198 MB/sec [Average]
[info]   (min, avg, max) = (1408.481, 1427.300, 1446.689), stdev = 18.230
[info]   CI (99.9%): [1357.101, 1497.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31088.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31088.006, 31088.006, 31088.006), stdev = 0.001
[info]   CI (99.9%): [31088.005, 31088.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1407.066 ±(99.9%) 580.023 MB/sec [Average]
[info]   (min, avg, max) = (1328.522, 1407.066, 1676.053), stdev = 150.630
[info]   CI (99.9%): [827.043, 1987.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30670.489 ±(99.9%) 13674.529 B/op [Average]
[info]   (min, avg, max) = (28673.678, 30670.489, 36993.861), stdev = 3551.232
[info]   CI (99.9%): [16995.961, 44345.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.449 ±(99.9%) 2.872 B/op [Average]
[info]   (min, avg, max) = (0.458, 1.449, 2.297), stdev = 0.746
[info]   CI (99.9%): [≈ 0, 4.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.40% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53566.506 ops/s
[info] # Warmup Iteration   2: 95125.005 ops/s
[info] # Warmup Iteration   3: 96584.436 ops/s
[info] Iteration   1: 99189.391 ops/s
[info]                  ·gc.alloc.rate:                   670.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10347.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 100298.099 ops/s
[info]                  ·gc.alloc.rate:                   678.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10244.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 97924.612 ops/s
[info]                  ·gc.alloc.rate:                   662.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10492.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.669 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101552.193 ops/s
[info]                  ·gc.alloc.rate:                   686.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10138.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100994.923 ops/s
[info]                  ·gc.alloc.rate:               682.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          10640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10225.098 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   99991.844 ±(99.9%) 5597.368 ops/s [Average]
[info]   (min, avg, max) = (97924.612, 99991.844, 101552.193), stdev = 1453.619
[info]   CI (99.9%): [94394.475, 105589.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   676.029 ±(99.9%) 37.930 MB/sec [Average]
[info]   (min, avg, max) = (662.039, 676.029, 686.629), stdev = 9.850
[info]   CI (99.9%): [638.099, 713.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10640.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10640.004, 10640.004, 10640.005), stdev = 0.001
[info]   CI (99.9%): [10640.004, 10640.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   653.657 ±(99.9%) 6.113 MB/sec [Average]
[info]   (min, avg, max) = (652.145, 653.657, 656.154), stdev = 1.588
[info]   CI (99.9%): [647.544, 659.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10289.468 ±(99.9%) 522.287 B/op [Average]
[info]   (min, avg, max) = (10138.052, 10289.468, 10492.077), stdev = 135.636
[info]   CI (99.9%): [9767.181, 10811.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.490 ±(99.9%) 3.992 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.490, 2.344), stdev = 1.037
[info]   CI (99.9%): [≈ 0, 4.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.768 ±(99.9%) 63.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.768, 37.195), stdev = 16.453
[info]   CI (99.9%): [≈ 0, 71.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.64% complete, ETA 00:15:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171531.633 ops/s
[info] # Warmup Iteration   2: 179541.664 ops/s
[info] # Warmup Iteration   3: 188977.153 ops/s
[info] Iteration   1: 190809.979 ops/s
[info]                  ·gc.alloc.rate:                   785.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5483.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 187235.996 ops/s
[info]                  ·gc.alloc.rate:                   771.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5582.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 190183.906 ops/s
[info]                  ·gc.alloc.rate:                   783.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8257.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 184889.009 ops/s
[info]                  ·gc.alloc.rate:               761.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5673.634 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 185572.318 ops/s
[info]                  ·gc.alloc.rate:                   764.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5661.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   187738.242 ±(99.9%) 10274.519 ops/s [Average]
[info]   (min, avg, max) = (184889.009, 187738.242, 190809.979), stdev = 2668.260
[info]   CI (99.9%): [177463.722, 198012.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   773.038 ±(99.9%) 42.200 MB/sec [Average]
[info]   (min, avg, max) = (761.260, 773.038, 785.601), stdev = 10.959
[info]   CI (99.9%): [730.837, 815.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.230 ±(99.9%) 571.907 MB/sec [Average]
[info]   (min, avg, max) = (664.387, 732.230, 997.905), stdev = 148.522
[info]   CI (99.9%): [160.324, 1304.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6131.782 ±(99.9%) 4586.035 B/op [Average]
[info]   (min, avg, max) = (5483.454, 6131.782, 8257.936), stdev = 1190.979
[info]   CI (99.9%): [1545.746, 10717.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.522 ±(99.9%) 1.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 0.883), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.89% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11039.922 ops/s
[info] # Warmup Iteration   2: 26236.119 ops/s
[info] # Warmup Iteration   3: 25985.158 ops/s
[info] Iteration   1: 26243.889 ops/s
[info]                  ·gc.alloc.rate:               1409.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          84504.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1308.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78416.499 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 26176.607 ops/s
[info]                  ·gc.alloc.rate:                   1406.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              84504.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79220.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.510 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26361.861 ops/s
[info]                  ·gc.alloc.rate:                   1415.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              84504.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79142.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.486 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 26445.774 ops/s
[info]                  ·gc.alloc.rate:                   1420.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              84504.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99327.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.194 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 26432.305 ops/s
[info]                  ·gc.alloc.rate:                   1419.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              84504.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79941.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   26332.087 ±(99.9%) 454.832 ops/s [Average]
[info]   (min, avg, max) = (26176.607, 26332.087, 26445.774), stdev = 118.118
[info]   CI (99.9%): [25877.256, 26786.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1414.089 ±(99.9%) 23.508 MB/sec [Average]
[info]   (min, avg, max) = (1406.047, 1414.089, 1420.097), stdev = 6.105
[info]   CI (99.9%): [1390.581, 1437.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84504.018 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (84504.016, 84504.018, 84504.023), stdev = 0.003
[info]   CI (99.9%): [84504.008, 84504.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1392.732 ±(99.9%) 597.103 MB/sec [Average]
[info]   (min, avg, max) = (1308.077, 1392.732, 1669.204), stdev = 155.066
[info]   CI (99.9%): [795.629, 1989.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83209.646 ±(99.9%) 34756.675 B/op [Average]
[info]   (min, avg, max) = (78416.499, 83209.646, 99327.303), stdev = 9026.198
[info]   CI (99.9%): [48452.971, 117966.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.477 ±(99.9%) 12.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.477, 7.510), stdev = 3.127
[info]   CI (99.9%): [≈ 0, 16.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.13% complete, ETA 00:14:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85526.845 ops/s
[info] # Warmup Iteration   2: 146002.758 ops/s
[info] # Warmup Iteration   3: 148801.191 ops/s
[info] Iteration   1: 147887.118 ops/s
[info]                  ·gc.alloc.rate:                   1008.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10399.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 148103.813 ops/s
[info]                  ·gc.alloc.rate:                   1010.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10423.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 147329.926 ops/s
[info]                  ·gc.alloc.rate:                   1005.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10520.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.889 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 148432.311 ops/s
[info]                  ·gc.alloc.rate:                   1012.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10499.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 145775.783 ops/s
[info]                  ·gc.alloc.rate:                   994.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10740.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   147505.790 ±(99.9%) 4031.855 ops/s [Average]
[info]   (min, avg, max) = (145775.783, 147505.790, 148432.311), stdev = 1047.060
[info]   CI (99.9%): [143473.935, 151537.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1006.288 ±(99.9%) 26.805 MB/sec [Average]
[info]   (min, avg, max) = (994.825, 1006.288, 1012.519), stdev = 6.961
[info]   CI (99.9%): [979.484, 1033.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10736.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10736.003, 10736.003, 10736.003), stdev = 0.001
[info]   CI (99.9%): [10736.003, 10736.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   985.698 ±(99.9%) 27.752 MB/sec [Average]
[info]   (min, avg, max) = (977.232, 985.698, 995.281), stdev = 7.207
[info]   CI (99.9%): [957.946, 1013.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10516.991 ±(99.9%) 519.684 B/op [Average]
[info]   (min, avg, max) = (10399.980, 10516.991, 10740.924), stdev = 134.960
[info]   CI (99.9%): [9997.307, 11036.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.755 ±(99.9%) 1.139 B/op [Average]
[info]   (min, avg, max) = (0.441, 0.755, 1.106), stdev = 0.296
[info]   CI (99.9%): [≈ 0, 1.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.37% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505316.163 ops/s
[info] # Warmup Iteration   2: 565778.536 ops/s
[info] # Warmup Iteration   3: 561904.384 ops/s
[info] Iteration   1: 567793.383 ops/s
[info]                  ·gc.alloc.rate:                   632.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     918.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 564907.536 ops/s
[info]                  ·gc.alloc.rate:                   628.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1844.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 568369.390 ops/s
[info]                  ·gc.alloc.rate:                   632.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1833.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 563925.359 ops/s
[info]                  ·gc.alloc.rate:                   627.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1851.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 567456.640 ops/s
[info]                  ·gc.alloc.rate:                   631.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1842.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   566490.462 ±(99.9%) 7517.853 ops/s [Average]
[info]   (min, avg, max) = (563925.359, 566490.462, 568369.390), stdev = 1952.363
[info]   CI (99.9%): [558972.609, 574008.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   630.628 ±(99.9%) 8.479 MB/sec [Average]
[info]   (min, avg, max) = (627.740, 630.628, 632.702), stdev = 2.202
[info]   CI (99.9%): [622.149, 639.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   596.672 ±(99.9%) 570.882 MB/sec [Average]
[info]   (min, avg, max) = (331.468, 596.672, 664.158), stdev = 148.256
[info]   CI (99.9%): [25.790, 1167.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1658.135 ±(99.9%) 1592.049 B/op [Average]
[info]   (min, avg, max) = (918.626, 1658.135, 1851.741), stdev = 413.450
[info]   CI (99.9%): [66.086, 3250.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.162 ±(99.9%) 0.242 B/op [Average]
[info]   (min, avg, max) = (0.115, 0.162, 0.231), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 83.62% complete, ETA 00:14:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 529626.066 ops/s
[info] # Warmup Iteration   2: 586608.613 ops/s
[info] # Warmup Iteration   3: 591168.037 ops/s
[info] Iteration   1: 563766.126 ops/s
[info]                  ·gc.alloc.rate:      11.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 585766.862 ops/s
[info]                  ·gc.alloc.rate:      11.911 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 592983.220 ops/s
[info]                  ·gc.alloc.rate:      12.058 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 593288.541 ops/s
[info]                  ·gc.alloc.rate:      12.064 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 590997.284 ops/s
[info]                  ·gc.alloc.rate:      12.017 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   585360.406 ±(99.9%) 47909.777 ops/s [Average]
[info]   (min, avg, max) = (563766.126, 585360.406, 593288.541), stdev = 12442.017
[info]   CI (99.9%): [537450.629, 633270.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.903 ±(99.9%) 0.969 MB/sec [Average]
[info]   (min, avg, max) = (11.467, 11.903, 12.064), stdev = 0.252
[info]   CI (99.9%): [10.934, 12.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.86% complete, ETA 00:14:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35086.962 ops/s
[info] # Warmup Iteration   2: 61717.968 ops/s
[info] # Warmup Iteration   3: 63195.108 ops/s
[info] Iteration   1: 63176.561 ops/s
[info]                  ·gc.alloc.rate:                   1157.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              28848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32526.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 63358.855 ops/s
[info]                  ·gc.alloc.rate:                   1161.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              28848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24448.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 63201.339 ops/s
[info]                  ·gc.alloc.rate:                   1158.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              28848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32870.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.555 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 63427.311 ops/s
[info]                  ·gc.alloc.rate:                   1162.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              28848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24694.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 63376.148 ops/s
[info]                  ·gc.alloc.rate:                   1162.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              28848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33151.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.551 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   63308.043 ±(99.9%) 431.024 ops/s [Average]
[info]   (min, avg, max) = (63176.561, 63308.043, 63427.311), stdev = 111.936
[info]   CI (99.9%): [62877.019, 63739.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1160.493 ±(99.9%) 8.315 MB/sec [Average]
[info]   (min, avg, max) = (1157.959, 1160.493, 1162.611), stdev = 2.159
[info]   CI (99.9%): [1152.178, 1168.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28848.007, 28848.007, 28848.007), stdev = 0.001
[info]   CI (99.9%): [28848.006, 28848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1188.103 ±(99.9%) 698.621 MB/sec [Average]
[info]   (min, avg, max) = (984.244, 1188.103, 1335.487), stdev = 181.430
[info]   CI (99.9%): [489.482, 1886.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29538.380 ±(99.9%) 17482.718 B/op [Average]
[info]   (min, avg, max) = (24448.406, 29538.380, 33151.584), stdev = 4540.206
[info]   CI (99.9%): [12055.662, 47021.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.656 ±(99.9%) 2.957 B/op [Average]
[info]   (min, avg, max) = (0.517, 1.656, 2.585), stdev = 0.768
[info]   CI (99.9%): [≈ 0, 4.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.11% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72173.570 ops/s
[info] # Warmup Iteration   2: 91519.691 ops/s
[info] # Warmup Iteration   3: 92742.367 ops/s
[info] Iteration   1: 92948.387 ops/s
[info]                  ·gc.alloc.rate:                   1711.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              28968.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28210.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.057 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 93458.354 ops/s
[info]                  ·gc.alloc.rate:                   1720.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              28968.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33854.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.103 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 93151.951 ops/s
[info]                  ·gc.alloc.rate:                   1714.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              28968.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28447.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.703 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 93768.707 ops/s
[info]                  ·gc.alloc.rate:                   1725.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              28968.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28360.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.699 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 93602.788 ops/s
[info]                  ·gc.alloc.rate:                   1722.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              28968.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28483.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   93386.037 ±(99.9%) 1284.322 ops/s [Average]
[info]   (min, avg, max) = (92948.387, 93386.037, 93768.707), stdev = 333.534
[info]   CI (99.9%): [92101.715, 94670.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1718.891 ±(99.9%) 23.289 MB/sec [Average]
[info]   (min, avg, max) = (1711.073, 1718.891, 1725.854), stdev = 6.048
[info]   CI (99.9%): [1695.602, 1742.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   28968.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28968.005, 28968.005, 28968.005), stdev = 0.001
[info]   CI (99.9%): [28968.004, 28968.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1748.797 ±(99.9%) 564.473 MB/sec [Average]
[info]   (min, avg, max) = (1666.301, 1748.797, 2010.350), stdev = 146.592
[info]   CI (99.9%): [1184.324, 2313.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   29471.043 ±(99.9%) 9444.862 B/op [Average]
[info]   (min, avg, max) = (28210.025, 29471.043, 33854.705), stdev = 2452.801
[info]   CI (99.9%): [20026.181, 38915.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.193 ±(99.9%) 2.257 B/op [Average]
[info]   (min, avg, max) = (0.699, 1.193, 2.103), stdev = 0.586
[info]   CI (99.9%): [≈ 0, 3.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.35% complete, ETA 00:13:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78318.283 ops/s
[info] # Warmup Iteration   2: 141690.275 ops/s
[info] # Warmup Iteration   3: 140912.847 ops/s
[info] Iteration   1: 142737.280 ops/s
[info]                  ·gc.alloc.rate:                   610.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7190.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 142423.939 ops/s
[info]                  ·gc.alloc.rate:               608.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3599.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 139658.349 ops/s
[info]                  ·gc.alloc.rate:                   597.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7349.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 140418.335 ops/s
[info]                  ·gc.alloc.rate:                   600.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7324.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 142404.532 ops/s
[info]                  ·gc.alloc.rate:                   608.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7240.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   141528.487 ±(99.9%) 5363.437 ops/s [Average]
[info]   (min, avg, max) = (139658.349, 141528.487, 142737.280), stdev = 1392.868
[info]   CI (99.9%): [136165.050, 146891.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   605.104 ±(99.9%) 22.553 MB/sec [Average]
[info]   (min, avg, max) = (597.161, 605.104, 610.223), stdev = 5.857
[info]   CI (99.9%): [582.551, 627.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.003, 6728.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   587.843 ±(99.9%) 564.211 MB/sec [Average]
[info]   (min, avg, max) = (325.742, 587.843, 655.179), stdev = 146.524
[info]   CI (99.9%): [23.631, 1152.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6541.046 ±(99.9%) 6336.125 B/op [Average]
[info]   (min, avg, max) = (3599.736, 6541.046, 7349.288), stdev = 1645.471
[info]   CI (99.9%): [204.921, 12877.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.525 ±(99.9%) 3.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.525, 2.334), stdev = 1.012
[info]   CI (99.9%): [≈ 0, 4.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.797 ±(99.9%) 42.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.797, 25.733), stdev = 11.157
[info]   CI (99.9%): [≈ 0, 48.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.60% complete, ETA 00:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212377.026 ops/s
[info] # Warmup Iteration   2: 232105.723 ops/s
[info] # Warmup Iteration   3: 232739.539 ops/s
[info] Iteration   1: 237669.477 ops/s
[info]                  ·gc.alloc.rate:                   846.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6603.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.827 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 237770.640 ops/s
[info]                  ·gc.alloc.rate:                   847.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4400.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 238829.360 ops/s
[info]                  ·gc.alloc.rate:                   850.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6580.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 239518.788 ops/s
[info]                  ·gc.alloc.rate:                   853.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6576.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 232541.321 ops/s
[info]                  ·gc.alloc.rate:                   828.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4526.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   237265.917 ±(99.9%) 10590.880 ops/s [Average]
[info]   (min, avg, max) = (232541.321, 237265.917, 239518.788), stdev = 2750.418
[info]   CI (99.9%): [226675.038, 247856.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   845.477 ±(99.9%) 37.731 MB/sec [Average]
[info]   (min, avg, max) = (828.618, 845.477, 853.457), stdev = 9.799
[info]   CI (99.9%): [807.745, 883.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   866.093 ±(99.9%) 700.336 MB/sec [Average]
[info]   (min, avg, max) = (664.913, 866.093, 1000.890), stdev = 181.875
[info]   CI (99.9%): [165.757, 1566.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5737.532 ±(99.9%) 4481.851 B/op [Average]
[info]   (min, avg, max) = (4400.464, 5737.532, 6603.612), stdev = 1163.922
[info]   CI (99.9%): [1255.682, 10219.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.470 ±(99.9%) 0.895 B/op [Average]
[info]   (min, avg, max) = (0.274, 0.470, 0.827), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 1.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.84% complete, ETA 00:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26485.913 ops/s
[info] # Warmup Iteration   2: 40798.877 ops/s
[info] # Warmup Iteration   3: 41170.358 ops/s
[info] Iteration   1: 41031.996 ops/s
[info]                  ·gc.alloc.rate:                   1650.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63327.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 41306.594 ops/s
[info]                  ·gc.alloc.rate:                   1662.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63340.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.759 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 41302.815 ops/s
[info]                  ·gc.alloc.rate:                   1661.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63762.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.380 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41108.593 ops/s
[info]                  ·gc.alloc.rate:                   1654.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64420.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.782 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41192.336 ops/s
[info]                  ·gc.alloc.rate:                   1657.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64519.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.181 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   41188.467 ±(99.9%) 463.309 ops/s [Average]
[info]   (min, avg, max) = (41031.996, 41188.467, 41306.594), stdev = 120.320
[info]   CI (99.9%): [40725.158, 41651.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1657.362 ±(99.9%) 18.477 MB/sec [Average]
[info]   (min, avg, max) = (1650.971, 1657.362, 1662.023), stdev = 4.798
[info]   CI (99.9%): [1638.885, 1675.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63328.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (63328.010, 63328.011, 63328.011), stdev = 0.001
[info]   CI (99.9%): [63328.009, 63328.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1671.648 ±(99.9%) 58.871 MB/sec [Average]
[info]   (min, avg, max) = (1650.957, 1671.648, 1688.683), stdev = 15.289
[info]   CI (99.9%): [1612.777, 1730.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63874.013 ±(99.9%) 2204.411 B/op [Average]
[info]   (min, avg, max) = (63327.460, 63874.013, 64519.531), stdev = 572.478
[info]   CI (99.9%): [61669.602, 66078.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.499 ±(99.9%) 4.639 B/op [Average]
[info]   (min, avg, max) = (2.380, 3.499, 4.782), stdev = 1.205
[info]   CI (99.9%): [≈ 0, 8.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.09% complete, ETA 00:12:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161631.291 ops/s
[info] # Warmup Iteration   2: 217146.414 ops/s
[info] # Warmup Iteration   3: 222429.613 ops/s
[info] Iteration   1: 221691.622 ops/s
[info]                  ·gc.alloc.rate:                   1514.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11744.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.887 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 220997.664 ops/s
[info]                  ·gc.alloc.rate:                   1509.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11862.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.741 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 222822.781 ops/s
[info]                  ·gc.alloc.rate:                   1522.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9459.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 222688.356 ops/s
[info]                  ·gc.alloc.rate:                   1521.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11887.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 221259.201 ops/s
[info]                  ·gc.alloc.rate:                   1511.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9605.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.592 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   221891.925 ±(99.9%) 3187.533 ops/s [Average]
[info]   (min, avg, max) = (220997.664, 221891.925, 222822.781), stdev = 827.792
[info]   CI (99.9%): [218704.392, 225079.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1515.896 ±(99.9%) 21.525 MB/sec [Average]
[info]   (min, avg, max) = (1509.752, 1515.896, 1522.208), stdev = 5.590
[info]   CI (99.9%): [1494.371, 1537.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10752.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10752.002, 10752.002, 10752.002), stdev = 0.001
[info]   CI (99.9%): [10752.002, 10752.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1538.333 ±(99.9%) 681.192 MB/sec [Average]
[info]   (min, avg, max) = (1339.246, 1538.333, 1681.960), stdev = 176.903
[info]   CI (99.9%): [857.141, 2219.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10911.889 ±(99.9%) 4857.806 B/op [Average]
[info]   (min, avg, max) = (9459.665, 10911.889, 11887.869), stdev = 1261.557
[info]   CI (99.9%): [6054.083, 15769.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.591 ±(99.9%) 0.904 B/op [Average]
[info]   (min, avg, max) = (0.294, 0.591, 0.887), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.33% complete, ETA 00:12:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 330210.701 ops/s
[info] # Warmup Iteration   2: 523848.625 ops/s
[info] # Warmup Iteration   3: 541734.977 ops/s
[info] Iteration   1: 538846.738 ops/s
[info]                  ·gc.alloc.rate:               432.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1494.283 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 543609.872 ops/s
[info]                  ·gc.alloc.rate:                   436.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.757 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 539731.501 ops/s
[info]                  ·gc.alloc.rate:                   433.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     949.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 539084.156 ops/s
[info]                  ·gc.alloc.rate:                   432.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1902.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 540462.203 ops/s
[info]                  ·gc.alloc.rate:               434.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 949.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   540346.894 ±(99.9%) 7427.854 ops/s [Average]
[info]   (min, avg, max) = (538846.738, 540346.894, 543609.872), stdev = 1928.990
[info]   CI (99.9%): [532919.040, 547774.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   434.006 ±(99.9%) 6.224 MB/sec [Average]
[info]   (min, avg, max) = (432.808, 434.006, 436.760), stdev = 1.616
[info]   CI (99.9%): [427.782, 440.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   428.167 ±(99.9%) 571.823 MB/sec [Average]
[info]   (min, avg, max) = (325.746, 428.167, 651.471), stdev = 148.501
[info]   CI (99.9%): [≈ 0, 999.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1247.773 ±(99.9%) 1677.668 B/op [Average]
[info]   (min, avg, max) = (943.099, 1247.773, 1902.018), stdev = 435.685
[info]   CI (99.9%): [≈ 0, 2925.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.484 ±(99.9%) 3.985 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.484, 2.335), stdev = 1.035
[info]   CI (99.9%): [≈ 0, 4.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.400 ±(99.9%) 11.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.400, 6.757), stdev = 2.995
[info]   CI (99.9%): [≈ 0, 12.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.57% complete, ETA 00:12:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 618554.182 ops/s
[info] # Warmup Iteration   2: 676909.426 ops/s
[info] # Warmup Iteration   3: 674404.246 ops/s
[info] Iteration   1: 679108.385 ops/s
[info]                  ·gc.alloc.rate:                   365.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     592.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 677212.562 ops/s
[info]                  ·gc.alloc.rate:               364.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 594.499 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 678443.414 ops/s
[info]                  ·gc.alloc.rate:                   365.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1539.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 673804.981 ops/s
[info]                  ·gc.alloc.rate:                   363.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     773.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 672503.814 ops/s
[info]                  ·gc.alloc.rate:               362.497 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 774.838 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   676214.631 ±(99.9%) 11212.208 ops/s [Average]
[info]   (min, avg, max) = (672503.814, 676214.631, 679108.385), stdev = 2911.775
[info]   CI (99.9%): [665002.424, 687426.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   364.377 ±(99.9%) 5.834 MB/sec [Average]
[info]   (min, avg, max) = (362.497, 364.377, 365.873), stdev = 1.515
[info]   CI (99.9%): [358.543, 370.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.001, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   367.477 ±(99.9%) 653.432 MB/sec [Average]
[info]   (min, avg, max) = (255.783, 367.477, 663.463), stdev = 169.694
[info]   CI (99.9%): [≈ 0, 1020.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   854.937 ±(99.9%) 1513.314 B/op [Average]
[info]   (min, avg, max) = (592.840, 854.937, 1539.192), stdev = 393.003
[info]   CI (99.9%): [≈ 0, 2368.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.376 ±(99.9%) 3.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.824), stdev = 0.809
[info]   CI (99.9%): [≈ 0, 3.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.872 ±(99.9%) 7.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.872, 4.231), stdev = 1.878
[info]   CI (99.9%): [≈ 0, 8.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 85.82% complete, ETA 00:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630992.702 ops/s
[info] # Warmup Iteration   2: 685563.889 ops/s
[info] # Warmup Iteration   3: 688613.464 ops/s
[info] Iteration   1: 688745.614 ops/s
[info]                  ·gc.alloc.rate:      7.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 688648.548 ops/s
[info]                  ·gc.alloc.rate:      7.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 687098.834 ops/s
[info]                  ·gc.alloc.rate:      6.985 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 684493.659 ops/s
[info]                  ·gc.alloc.rate:      6.960 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 684711.479 ops/s
[info]                  ·gc.alloc.rate:      6.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   686739.627 ±(99.9%) 7927.734 ops/s [Average]
[info]   (min, avg, max) = (684493.659, 686739.627, 688745.614), stdev = 2058.807
[info]   CI (99.9%): [678811.893, 694667.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.982 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (6.960, 6.982, 7.002), stdev = 0.020
[info]   CI (99.9%): [6.903, 7.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.06% complete, ETA 00:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21430.498 ops/s
[info] # Warmup Iteration   2: 30707.743 ops/s
[info] # Warmup Iteration   3: 30633.384 ops/s
[info] Iteration   1: 30766.308 ops/s
[info]                  ·gc.alloc.rate:                   1623.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              83037.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84578.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30277.291 ops/s
[info]                  ·gc.alloc.rate:                   1597.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86501.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.493 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 31066.717 ops/s
[info]                  ·gc.alloc.rate:                   1638.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84841.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.164 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31050.570 ops/s
[info]                  ·gc.alloc.rate:                   1638.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85285.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.165 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30988.334 ops/s
[info]                  ·gc.alloc.rate:                   1634.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85836.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.172 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   30829.844 ±(99.9%) 1276.097 ops/s [Average]
[info]   (min, avg, max) = (30277.291, 30829.844, 31066.717), stdev = 331.398
[info]   CI (99.9%): [29553.747, 32105.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1626.677 ±(99.9%) 66.513 MB/sec [Average]
[info]   (min, avg, max) = (1597.922, 1626.677, 1638.897), stdev = 17.273
[info]   CI (99.9%): [1560.164, 1693.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   83026.801 ±(99.9%) 23.991 B/op [Average]
[info]   (min, avg, max) = (83024.014, 83026.801, 83037.946), stdev = 6.230
[info]   CI (99.9%): [83002.810, 83050.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1673.262 ±(99.9%) 56.289 MB/sec [Average]
[info]   (min, avg, max) = (1653.359, 1673.262, 1690.291), stdev = 14.618
[info]   CI (99.9%): [1616.973, 1729.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85408.602 ±(99.9%) 2984.043 B/op [Average]
[info]   (min, avg, max) = (84578.520, 85408.602, 86501.200), stdev = 774.946
[info]   CI (99.9%): [82424.559, 88392.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.264 ±(99.9%) 5.997 B/op [Average]
[info]   (min, avg, max) = (3.164, 4.264, 6.493), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 10.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.31% complete, ETA 00:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217844.726 ops/s
[info] # Warmup Iteration   2: 675452.438 ops/s
[info] # Warmup Iteration   3: 695116.845 ops/s
[info] Iteration   1: 711428.854 ops/s
[info]                  ·gc.alloc.rate:                   2141.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              4736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4425.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 713619.363 ops/s
[info]                  ·gc.alloc.rate:                   2147.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              4736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4438.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 714948.560 ops/s
[info]                  ·gc.alloc.rate:                   2151.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              4736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5197.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 716711.086 ops/s
[info]                  ·gc.alloc.rate:                   2156.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              4736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4460.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 717529.640 ops/s
[info]                  ·gc.alloc.rate:                   2159.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              4736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5211.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   714847.500 ±(99.9%) 9407.026 ops/s [Average]
[info]   (min, avg, max) = (711428.854, 714847.500, 717529.640), stdev = 2442.975
[info]   CI (99.9%): [705440.474, 724254.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2151.161 ±(99.9%) 27.552 MB/sec [Average]
[info]   (min, avg, max) = (2141.136, 2151.161, 2159.162), stdev = 7.155
[info]   CI (99.9%): [2123.609, 2178.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4736.001, 4736.001, 4736.001), stdev = 0.001
[info]   CI (99.9%): [4736.001, 4736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2156.370 ±(99.9%) 747.483 MB/sec [Average]
[info]   (min, avg, max) = (2000.732, 2156.370, 2376.125), stdev = 194.119
[info]   CI (99.9%): [1408.887, 2903.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4746.860 ±(99.9%) 1610.724 B/op [Average]
[info]   (min, avg, max) = (4425.441, 4746.860, 5211.896), stdev = 418.300
[info]   CI (99.9%): [3136.137, 6357.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.266 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.266, 0.322), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 86.55% complete, ETA 00:11:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452527.025 ops/s
[info] # Warmup Iteration   2: 1466820.197 ops/s
[info] # Warmup Iteration   3: 1431016.597 ops/s
[info] Iteration   1: 1493250.065 ops/s
[info]                  ·gc.alloc.rate:                   1130.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1030.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1488862.141 ops/s
[info]                  ·gc.alloc.rate:                   1127.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1383.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1494438.687 ops/s
[info]                  ·gc.alloc.rate:                   1131.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1447635.940 ops/s
[info]                  ·gc.alloc.rate:                   1097.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1438.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1464895.015 ops/s
[info]                  ·gc.alloc.rate:                   1109.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1073.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1477816.370 ±(99.9%) 79716.914 ops/s [Average]
[info]   (min, avg, max) = (1447635.940, 1477816.370, 1494438.687), stdev = 20702.229
[info]   CI (99.9%): [1398099.456, 1557533.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1119.396 ±(99.9%) 59.392 MB/sec [Average]
[info]   (min, avg, max) = (1097.098, 1119.396, 1131.849), stdev = 15.424
[info]   CI (99.9%): [1060.004, 1178.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.527 ±(99.9%) 693.830 MB/sec [Average]
[info]   (min, avg, max) = (977.892, 1119.527, 1324.281), stdev = 180.186
[info]   CI (99.9%): [425.697, 1813.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1193.301 ±(99.9%) 772.335 B/op [Average]
[info]   (min, avg, max) = (1030.697, 1193.301, 1438.835), stdev = 200.573
[info]   CI (99.9%): [420.966, 1965.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.186 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.075, 0.154), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 86.80% complete, ETA 00:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5707463.705 ops/s
[info] # Warmup Iteration   2: 6360622.246 ops/s
[info] # Warmup Iteration   3: 6473002.628 ops/s
[info] Iteration   1: 6364658.369 ops/s
[info]                  ·gc.alloc.rate:               194.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63.256 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6492701.651 ops/s
[info]                  ·gc.alloc.rate:      198.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6486249.628 ops/s
[info]                  ·gc.alloc.rate:               197.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62.069 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 6493709.904 ops/s
[info]                  ·gc.alloc.rate:                   198.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6492664.892 ops/s
[info]                  ·gc.alloc.rate:                   198.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6465996.889 ±(99.9%) 218437.149 ops/s [Average]
[info]   (min, avg, max) = (6364658.369, 6465996.889, 6493709.904), stdev = 56727.434
[info]   CI (99.9%): [6247559.740, 6684434.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   197.199 ±(99.9%) 6.666 MB/sec [Average]
[info]   (min, avg, max) = (194.107, 197.199, 198.045), stdev = 1.731
[info]   CI (99.9%): [190.533, 203.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.642 ±(99.9%) 440.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.642, 255.808), stdev = 114.398
[info]   CI (99.9%): [≈ 0, 645.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   49.867 ±(99.9%) 107.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.867, 63.256), stdev = 27.881
[info]   CI (99.9%): [≈ 0, 157.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.04% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44863.051 ops/s
[info] # Warmup Iteration   2: 220296.578 ops/s
[info] # Warmup Iteration   3: 226115.439 ops/s
[info] Iteration   1: 225481.759 ops/s
[info]                  ·gc.alloc.rate:                   1551.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1634.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11405.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.581 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 222008.211 ops/s
[info]                  ·gc.alloc.rate:                   1527.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11685.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 224785.247 ops/s
[info]                  ·gc.alloc.rate:                   1547.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9297.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 226330.016 ops/s
[info]                  ·gc.alloc.rate:                   1557.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11618.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 221750.161 ops/s
[info]                  ·gc.alloc.rate:                   1526.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11933.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   224071.079 ±(99.9%) 7995.290 ops/s [Average]
[info]   (min, avg, max) = (221750.161, 224071.079, 226330.016), stdev = 2076.351
[info]   CI (99.9%): [216075.789, 232066.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1542.265 ±(99.9%) 54.569 MB/sec [Average]
[info]   (min, avg, max) = (1526.638, 1542.265, 1557.756), stdev = 14.171
[info]   CI (99.9%): [1487.696, 1596.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.002, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1592.634 ±(99.9%) 574.200 MB/sec [Average]
[info]   (min, avg, max) = (1327.995, 1592.634, 1681.945), stdev = 149.118
[info]   CI (99.9%): [1018.434, 2166.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11188.259 ±(99.9%) 4133.700 B/op [Average]
[info]   (min, avg, max) = (9297.739, 11188.259, 11933.958), stdev = 1073.509
[info]   CI (99.9%): [7054.559, 15321.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.468 ±(99.9%) 0.927 B/op [Average]
[info]   (min, avg, max) = (0.146, 0.468, 0.738), stdev = 0.241
[info]   CI (99.9%): [≈ 0, 1.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.29% complete, ETA 00:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 395256.168 ops/s
[info] # Warmup Iteration   2: 915228.442 ops/s
[info] # Warmup Iteration   3: 955440.724 ops/s
[info] Iteration   1: 954889.548 ops/s
[info]                  ·gc.alloc.rate:                   1664.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2726.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 952197.908 ops/s
[info]                  ·gc.alloc.rate:                   1660.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2753.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 946657.749 ops/s
[info]                  ·gc.alloc.rate:                   1650.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2784.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 960216.276 ops/s
[info]                  ·gc.alloc.rate:                   1674.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2758.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 954384.205 ops/s
[info]                  ·gc.alloc.rate:                   1664.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2786.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   953669.137 ±(99.9%) 18882.867 ops/s [Average]
[info]   (min, avg, max) = (946657.749, 953669.137, 960216.276), stdev = 4903.821
[info]   CI (99.9%): [934786.270, 972552.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1662.917 ±(99.9%) 33.040 MB/sec [Average]
[info]   (min, avg, max) = (1650.494, 1662.917, 1674.343), stdev = 8.580
[info]   CI (99.9%): [1629.877, 1695.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2744.000, 2744.000, 2744.000), stdev = 0.001
[info]   CI (99.9%): [2744.000, 2744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1673.808 ±(99.9%) 53.935 MB/sec [Average]
[info]   (min, avg, max) = (1654.354, 1673.808, 1689.932), stdev = 14.007
[info]   CI (99.9%): [1619.874, 1727.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2762.014 ±(99.9%) 95.286 B/op [Average]
[info]   (min, avg, max) = (2726.795, 2762.014, 2786.493), stdev = 24.745
[info]   CI (99.9%): [2666.728, 2857.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.131 ±(99.9%) 0.237 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.131, 0.173), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 87.53% complete, ETA 00:10:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 808989.323 ops/s
[info] # Warmup Iteration   2: 2418057.852 ops/s
[info] # Warmup Iteration   3: 2508252.068 ops/s
[info] Iteration   1: 2508384.565 ops/s
[info]                  ·gc.alloc.rate:                   1109.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2499521.014 ops/s
[info]                  ·gc.alloc.rate:                   1105.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2514657.368 ops/s
[info]                  ·gc.alloc.rate:                   1112.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     618.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2522250.276 ops/s
[info]                  ·gc.alloc.rate:                   1115.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     619.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2520360.458 ops/s
[info]                  ·gc.alloc.rate:                   1114.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2513034.736 ±(99.9%) 35785.624 ops/s [Average]
[info]   (min, avg, max) = (2499521.014, 2513034.736, 2522250.276), stdev = 9293.413
[info]   CI (99.9%): [2477249.112, 2548820.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1111.315 ±(99.9%) 15.866 MB/sec [Average]
[info]   (min, avg, max) = (1105.349, 1111.315, 1115.387), stdev = 4.120
[info]   CI (99.9%): [1095.449, 1127.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.664 ±(99.9%) 705.252 MB/sec [Average]
[info]   (min, avg, max) = (977.851, 1119.664, 1331.073), stdev = 183.152
[info]   CI (99.9%): [414.412, 1824.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   701.321 ±(99.9%) 444.414 B/op [Average]
[info]   (min, avg, max) = (613.577, 701.321, 831.176), stdev = 115.413
[info]   CI (99.9%): [256.907, 1145.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.047, 0.066), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 87.78% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4390716.017 ops/s
[info] # Warmup Iteration   2: 7039043.607 ops/s
[info] # Warmup Iteration   3: 7063634.711 ops/s
[info] Iteration   1: 7223084.120 ops/s
[info]                  ·gc.alloc.rate:                   587.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6981975.788 ops/s
[info]                  ·gc.alloc.rate:                   567.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7195330.091 ops/s
[info]                  ·gc.alloc.rate:                   585.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7196470.690 ops/s
[info]                  ·gc.alloc.rate:                   585.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7023663.864 ops/s
[info]                  ·gc.alloc.rate:               571.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.337 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   7124104.911 ±(99.9%) 432215.732 ops/s [Average]
[info]   (min, avg, max) = (6981975.788, 7124104.911, 7223084.120), stdev = 112245.053
[info]   CI (99.9%): [6691889.179, 7556320.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   579.462 ±(99.9%) 35.100 MB/sec [Average]
[info]   (min, avg, max) = (567.889, 579.462, 587.427), stdev = 9.115
[info]   CI (99.9%): [544.362, 614.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.322 ±(99.9%) 697.945 MB/sec [Average]
[info]   (min, avg, max) = (331.731, 530.322, 663.065), stdev = 181.254
[info]   CI (99.9%): [≈ 0, 1228.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   117.165 ±(99.9%) 154.344 B/op [Average]
[info]   (min, avg, max) = (72.284, 117.165, 149.411), stdev = 40.083
[info]   CI (99.9%): [≈ 0, 271.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.386 ±(99.9%) 2.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 1.740), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.379), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.02% complete, ETA 00:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4089127.316 ops/s
[info] # Warmup Iteration   2: 6442216.815 ops/s
[info] # Warmup Iteration   3: 6232815.027 ops/s
[info] Iteration   1: 6302224.631 ops/s
[info]                  ·gc.alloc.rate:                   384.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6218201.704 ops/s
[info]                  ·gc.alloc.rate:               379.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64.746 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6239833.132 ops/s
[info]                  ·gc.alloc.rate:                   380.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6457351.820 ops/s
[info]                  ·gc.alloc.rate:               393.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80.856 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 6459564.798 ops/s
[info]                  ·gc.alloc.rate:               394.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80.828 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6335435.217 ±(99.9%) 448472.784 ops/s [Average]
[info]   (min, avg, max) = (6218201.704, 6335435.217, 6459564.798), stdev = 116466.958
[info]   CI (99.9%): [5886962.433, 6783908.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   386.470 ±(99.9%) 27.226 MB/sec [Average]
[info]   (min, avg, max) = (379.437, 386.470, 394.017), stdev = 7.070
[info]   CI (99.9%): [359.244, 413.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.733 ±(99.9%) 653.161 MB/sec [Average]
[info]   (min, avg, max) = (255.792, 367.733, 663.474), stdev = 169.624
[info]   CI (99.9%): [≈ 0, 1020.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   91.531 ±(99.9%) 166.276 B/op [Average]
[info]   (min, avg, max) = (63.880, 91.531, 167.347), stdev = 43.181
[info]   CI (99.9%): [≈ 0, 257.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 3.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.855), stdev = 0.826
[info]   CI (99.9%): [≈ 0, 3.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.095 ±(99.9%) 0.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.468), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.26% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56827.872 ops/s
[info] # Warmup Iteration   2: 302565.892 ops/s
[info] # Warmup Iteration   3: 313452.831 ops/s
[info] Iteration   1: 309423.529 ops/s
[info]                  ·gc.alloc.rate:                   1591.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8330.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 309359.900 ops/s
[info]                  ·gc.alloc.rate:                   1591.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6717.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.424 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 311865.003 ops/s
[info]                  ·gc.alloc.rate:                   1604.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8389.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 308482.890 ops/s
[info]                  ·gc.alloc.rate:                   1586.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8541.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 315627.271 ops/s
[info]                  ·gc.alloc.rate:                   1623.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8391.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   310951.719 ±(99.9%) 11170.061 ops/s [Average]
[info]   (min, avg, max) = (308482.890, 310951.719, 315627.271), stdev = 2900.829
[info]   CI (99.9%): [299781.658, 322121.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1599.643 ±(99.9%) 57.749 MB/sec [Average]
[info]   (min, avg, max) = (1586.846, 1599.643, 1623.689), stdev = 14.997
[info]   CI (99.9%): [1541.894, 1657.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.001), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1595.563 ±(99.9%) 596.058 MB/sec [Average]
[info]   (min, avg, max) = (1320.321, 1595.563, 1682.868), stdev = 154.794
[info]   CI (99.9%): [999.504, 2191.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8073.794 ±(99.9%) 2935.623 B/op [Average]
[info]   (min, avg, max) = (6717.166, 8073.794, 8541.145), stdev = 762.372
[info]   CI (99.9%): [5138.171, 11009.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.359 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (0.311, 0.359, 0.425), stdev = 0.060
[info]   CI (99.9%): [0.127, 0.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.51% complete, ETA 00:10:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55458.674 ops/s
[info] # Warmup Iteration   2: 67766.688 ops/s
[info] # Warmup Iteration   3: 66795.827 ops/s
[info] Iteration   1: 67733.256 ops/s
[info]                  ·gc.alloc.rate:                   2000.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              46472.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46590.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.386 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 67172.621 ops/s
[info]                  ·gc.alloc.rate:                   1983.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              46472.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47275.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.414 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68121.964 ops/s
[info]                  ·gc.alloc.rate:                   2012.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              46472.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46800.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.367 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 67894.607 ops/s
[info]                  ·gc.alloc.rate:                   2004.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              46472.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47114.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.413 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 68196.620 ops/s
[info]                  ·gc.alloc.rate:                   2013.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              46472.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47011.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.922 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   67823.814 ±(99.9%) 1570.221 ops/s [Average]
[info]   (min, avg, max) = (67172.621, 67823.814, 68196.620), stdev = 407.781
[info]   CI (99.9%): [66253.592, 69394.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2002.911 ±(99.9%) 46.363 MB/sec [Average]
[info]   (min, avg, max) = (1983.820, 2002.911, 2013.672), stdev = 12.040
[info]   CI (99.9%): [1956.548, 2049.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   46472.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (46472.006, 46472.006, 46472.007), stdev = 0.001
[info]   CI (99.9%): [46472.006, 46472.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023.854 ±(99.9%) 48.741 MB/sec [Average]
[info]   (min, avg, max) = (2005.101, 2023.854, 2037.069), stdev = 12.658
[info]   CI (99.9%): [1975.114, 2072.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   46958.505 ±(99.9%) 1033.068 B/op [Average]
[info]   (min, avg, max) = (46590.307, 46958.505, 47275.195), stdev = 268.284
[info]   CI (99.9%): [45925.438, 47991.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.146), stdev = 0.029
[info]   CI (99.9%): [0.012, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.900 ±(99.9%) 2.663 B/op [Average]
[info]   (min, avg, max) = (1.922, 2.900, 3.414), stdev = 0.691
[info]   CI (99.9%): [0.238, 5.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 88.75% complete, ETA 00:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59290.773 ops/s
[info] # Warmup Iteration   2: 104263.300 ops/s
[info] # Warmup Iteration   3: 104712.791 ops/s
[info] Iteration   1: 106726.397 ops/s
[info]                  ·gc.alloc.rate:                   1643.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24249.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.228 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 106303.593 ops/s
[info]                  ·gc.alloc.rate:                   1637.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24533.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.157 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 105141.798 ops/s
[info]                  ·gc.alloc.rate:                   1619.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19982.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 106973.322 ops/s
[info]                  ·gc.alloc.rate:                   1647.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24687.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 106533.989 ops/s
[info]                  ·gc.alloc.rate:                   1641.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24907.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.230 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   106335.820 ±(99.9%) 2739.752 ops/s [Average]
[info]   (min, avg, max) = (105141.798, 106335.820, 106973.322), stdev = 711.505
[info]   CI (99.9%): [103596.068, 109075.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1637.790 ±(99.9%) 42.296 MB/sec [Average]
[info]   (min, avg, max) = (1619.327, 1637.790, 1647.519), stdev = 10.984
[info]   CI (99.9%): [1595.493, 1680.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24240.004, 24240.004, 24240.004), stdev = 0.001
[info]   CI (99.9%): [24240.004, 24240.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1600.130 ±(99.9%) 574.446 MB/sec [Average]
[info]   (min, avg, max) = (1334.926, 1600.130, 1686.369), stdev = 149.182
[info]   CI (99.9%): [1025.685, 2174.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23672.241 ±(99.9%) 7995.314 B/op [Average]
[info]   (min, avg, max) = (19982.753, 23672.241, 24907.986), stdev = 2076.358
[info]   CI (99.9%): [15676.927, 31667.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.109 ±(99.9%) 2.729 B/op [Average]
[info]   (min, avg, max) = (0.306, 1.109, 2.157), stdev = 0.709
[info]   CI (99.9%): [≈ 0, 3.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.00% complete, ETA 00:09:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133131.765 ops/s
[info] # Warmup Iteration   2: 149510.143 ops/s
[info] # Warmup Iteration   3: 150580.521 ops/s
[info] Iteration   1: 150298.312 ops/s
[info]                  ·gc.alloc.rate:                   2209.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              23136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2348.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24597.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 148773.766 ops/s
[info]                  ·gc.alloc.rate:                   2187.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              23136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21412.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.321 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 150131.191 ops/s
[info]                  ·gc.alloc.rate:                   2207.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              23136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24843.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.655 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 149091.077 ops/s
[info]                  ·gc.alloc.rate:                   2191.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              23136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21497.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.659 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 151479.839 ops/s
[info]                  ·gc.alloc.rate:                   2227.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              23136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24712.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.649 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   149954.837 ±(99.9%) 4136.404 ops/s [Average]
[info]   (min, avg, max) = (148773.766, 149954.837, 151479.839), stdev = 1074.211
[info]   CI (99.9%): [145818.433, 154091.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2204.531 ±(99.9%) 60.764 MB/sec [Average]
[info]   (min, avg, max) = (2187.519, 2204.531, 2227.160), stdev = 15.780
[info]   CI (99.9%): [2143.767, 2265.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23136.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23136.003, 23136.003, 23136.003), stdev = 0.001
[info]   CI (99.9%): [23136.002, 23136.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2231.719 ±(99.9%) 708.850 MB/sec [Average]
[info]   (min, avg, max) = (2024.523, 2231.719, 2378.886), stdev = 184.086
[info]   CI (99.9%): [1522.869, 2940.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23412.515 ±(99.9%) 6891.283 B/op [Average]
[info]   (min, avg, max) = (21412.094, 23412.515, 24843.884), stdev = 1789.644
[info]   CI (99.9%): [16521.232, 30303.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.700 ±(99.9%) 1.522 B/op [Average]
[info]   (min, avg, max) = (0.218, 0.700, 1.321), stdev = 0.395
[info]   CI (99.9%): [≈ 0, 2.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.24% complete, ETA 00:09:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33975.801 ops/s
[info] # Warmup Iteration   2: 53976.610 ops/s
[info] # Warmup Iteration   3: 53132.360 ops/s
[info] Iteration   1: 54557.353 ops/s
[info]                  ·gc.alloc.rate:                   2802.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77282.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.603 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 54110.799 ops/s
[info]                  ·gc.alloc.rate:                   2780.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3038.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88333.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.055 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 53870.272 ops/s
[info]                  ·gc.alloc.rate:                   2767.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79227.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.041 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 54379.124 ops/s
[info]                  ·gc.alloc.rate:                   2794.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78661.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.807 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 54334.584 ops/s
[info]                  ·gc.alloc.rate:                   2791.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78860.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.824 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   54250.426 ±(99.9%) 1022.168 ops/s [Average]
[info]   (min, avg, max) = (53870.272, 54250.426, 54557.353), stdev = 265.454
[info]   CI (99.9%): [53228.258, 55272.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2787.279 ±(99.9%) 52.569 MB/sec [Average]
[info]   (min, avg, max) = (2767.610, 2787.279, 2802.960), stdev = 13.652
[info]   CI (99.9%): [2734.709, 2839.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80840.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80840.008, 80840.008, 80840.009), stdev = 0.001
[info]   CI (99.9%): [80840.007, 80840.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2774.388 ±(99.9%) 571.357 MB/sec [Average]
[info]   (min, avg, max) = (2679.614, 2774.388, 3038.053), stdev = 148.380
[info]   CI (99.9%): [2203.031, 3345.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80473.276 ±(99.9%) 17156.440 B/op [Average]
[info]   (min, avg, max) = (77282.611, 80473.276, 88333.974), stdev = 4455.473
[info]   CI (99.9%): [63316.835, 97629.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.208), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.866 ±(99.9%) 6.297 B/op [Average]
[info]   (min, avg, max) = (1.807, 3.866, 6.055), stdev = 1.635
[info]   CI (99.9%): [≈ 0, 10.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.49% complete, ETA 00:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159209.977 ops/s
[info] # Warmup Iteration   2: 210180.362 ops/s
[info] # Warmup Iteration   3: 210131.802 ops/s
[info] Iteration   1: 209080.516 ops/s
[info]                  ·gc.alloc.rate:                   1444.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12450.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.627 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 213326.540 ops/s
[info]                  ·gc.alloc.rate:                   1473.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9819.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.461 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 214649.945 ops/s
[info]                  ·gc.alloc.rate:                   1482.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9807.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 214898.137 ops/s
[info]                  ·gc.alloc.rate:                   1484.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12301.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.457 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 213920.462 ops/s
[info]                  ·gc.alloc.rate:                   1477.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9926.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.459 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   213175.120 ±(99.9%) 9130.197 ops/s [Average]
[info]   (min, avg, max) = (209080.516, 213175.120, 214898.137), stdev = 2371.083
[info]   CI (99.9%): [204044.923, 222305.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1472.609 ±(99.9%) 62.568 MB/sec [Average]
[info]   (min, avg, max) = (1444.549, 1472.609, 1484.345), stdev = 16.249
[info]   CI (99.9%): [1410.041, 1535.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10872.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10872.002, 10872.002, 10872.002), stdev = 0.001
[info]   CI (99.9%): [10872.002, 10872.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1470.342 ±(99.9%) 692.347 MB/sec [Average]
[info]   (min, avg, max) = (1330.970, 1470.342, 1679.559), stdev = 179.800
[info]   CI (99.9%): [777.995, 2162.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10861.277 ±(99.9%) 5332.141 B/op [Average]
[info]   (min, avg, max) = (9807.673, 10861.277, 12450.633), stdev = 1384.740
[info]   CI (99.9%): [5529.137, 16193.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.492 ±(99.9%) 0.289 B/op [Average]
[info]   (min, avg, max) = (0.457, 0.492, 0.627), stdev = 0.075
[info]   CI (99.9%): [0.203, 0.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.73% complete, ETA 00:08:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 326163.030 ops/s
[info] # Warmup Iteration   2: 533234.742 ops/s
[info] # Warmup Iteration   3: 542690.348 ops/s
[info] Iteration   1: 545623.267 ops/s
[info]                  ·gc.alloc.rate:               477.059 MB/sec
[info]                  ·gc.alloc.rate.norm:          1376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 737.857 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 544276.199 ops/s
[info]                  ·gc.alloc.rate:                   475.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              1376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1881.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 543418.450 ops/s
[info]                  ·gc.alloc.rate:               475.096 MB/sec
[info]                  ·gc.alloc.rate.norm:          1376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 943.427 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 531630.704 ops/s
[info]                  ·gc.alloc.rate:                   464.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              1376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1928.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 542860.913 ops/s
[info]                  ·gc.alloc.rate:               474.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          1376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944.376 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   541561.907 ±(99.9%) 21750.599 ops/s [Average]
[info]   (min, avg, max) = (531630.704, 541561.907, 545623.267), stdev = 5648.561
[info]   CI (99.9%): [519811.308, 563312.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   473.528 ±(99.9%) 18.718 MB/sec [Average]
[info]   (min, avg, max) = (464.991, 473.528, 477.059), stdev = 4.861
[info]   CI (99.9%): [454.811, 492.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1376.001, 1376.001, 1376.001), stdev = 0.001
[info]   CI (99.9%): [1376.001, 1376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   441.983 ±(99.9%) 743.985 MB/sec [Average]
[info]   (min, avg, max) = (255.815, 441.983, 651.762), stdev = 193.211
[info]   CI (99.9%): [≈ 0, 1185.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1287.264 ±(99.9%) 2197.520 B/op [Average]
[info]   (min, avg, max) = (737.857, 1287.264, 1928.693), stdev = 570.689
[info]   CI (99.9%): [≈ 0, 3484.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.494 ±(99.9%) 4.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.494, 2.407), stdev = 1.070
[info]   CI (99.9%): [≈ 0, 4.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.429 ±(99.9%) 11.908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.429, 6.959), stdev = 3.093
[info]   CI (99.9%): [≈ 0, 13.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.98% complete, ETA 00:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517496.761 ops/s
[info] # Warmup Iteration   2: 576134.910 ops/s
[info] # Warmup Iteration   3: 579110.210 ops/s
[info] Iteration   1: 578446.068 ops/s
[info]                  ·gc.alloc.rate:               311.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 696.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 576985.563 ops/s
[info]                  ·gc.alloc.rate:                   310.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1395.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 574151.480 ops/s
[info]                  ·gc.alloc.rate:                   309.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     908.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 561660.799 ops/s
[info]                  ·gc.alloc.rate:      302.661 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 563669.913 ops/s
[info]                  ·gc.alloc.rate:                   303.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   570982.764 ±(99.9%) 29960.390 ops/s [Average]
[info]   (min, avg, max) = (561660.799, 570982.764, 578446.068), stdev = 7780.618
[info]   CI (99.9%): [541022.374, 600943.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   307.655 ±(99.9%) 16.099 MB/sec [Average]
[info]   (min, avg, max) = (302.661, 307.655, 311.667), stdev = 4.181
[info]   CI (99.9%): [291.556, 323.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.001, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.047 ±(99.9%) 714.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.047, 511.613), stdev = 185.561
[info]   CI (99.9%): [≈ 0, 1000.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   785.069 ±(99.9%) 1955.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 785.069, 1395.531), stdev = 507.894
[info]   CI (99.9%): [≈ 0, 2740.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.367 ±(99.9%) 2.936 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.730), stdev = 0.763
[info]   CI (99.9%): [≈ 0, 3.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.006 ±(99.9%) 8.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.006, 4.742), stdev = 2.090
[info]   CI (99.9%): [≈ 0, 9.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.22% complete, ETA 00:08:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 593145.505 ops/s
[info] # Warmup Iteration   2: 635336.012 ops/s
[info] # Warmup Iteration   3: 640140.181 ops/s
[info] Iteration   1: 640279.795 ops/s
[info]                  ·gc.alloc.rate:      6.509 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 640263.306 ops/s
[info]                  ·gc.alloc.rate:      6.510 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 640174.130 ops/s
[info]                  ·gc.alloc.rate:      6.510 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 639761.966 ops/s
[info]                  ·gc.alloc.rate:      6.504 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 640054.188 ops/s
[info]                  ·gc.alloc.rate:      6.507 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   640106.677 ±(99.9%) 818.281 ops/s [Average]
[info]   (min, avg, max) = (639761.966, 640106.677, 640279.795), stdev = 212.505
[info]   CI (99.9%): [639288.396, 640924.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.508 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (6.504, 6.508, 6.510), stdev = 0.002
[info]   CI (99.9%): [6.498, 6.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.46% complete, ETA 00:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21496.454 ops/s
[info] # Warmup Iteration   2: 30059.497 ops/s
[info] # Warmup Iteration   3: 30719.274 ops/s
[info] Iteration   1: 30532.575 ops/s
[info]                  ·gc.alloc.rate:                   1605.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              82750.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85226.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.292 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30353.766 ops/s
[info]                  ·gc.alloc.rate:                   1595.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86276.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.238 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30492.826 ops/s
[info]                  ·gc.alloc.rate:                   1603.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86438.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.223 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 30496.541 ops/s
[info]                  ·gc.alloc.rate:                   1603.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69444.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30492.040 ops/s
[info]                  ·gc.alloc.rate:                   1603.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87126.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   30473.549 ±(99.9%) 265.905 ops/s [Average]
[info]   (min, avg, max) = (30353.766, 30473.549, 30532.575), stdev = 69.055
[info]   CI (99.9%): [30207.644, 30739.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1602.183 ±(99.9%) 13.812 MB/sec [Average]
[info]   (min, avg, max) = (1595.968, 1602.183, 1605.278), stdev = 3.587
[info]   CI (99.9%): [1588.371, 1615.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82738.874 ±(99.9%) 24.625 B/op [Average]
[info]   (min, avg, max) = (82736.014, 82738.874, 82750.314), stdev = 6.395
[info]   CI (99.9%): [82714.250, 82763.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1605.306 ±(99.9%) 561.318 MB/sec [Average]
[info]   (min, avg, max) = (1345.575, 1605.306, 1688.368), stdev = 145.772
[info]   CI (99.9%): [1043.988, 2166.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82902.427 ±(99.9%) 29087.571 B/op [Average]
[info]   (min, avg, max) = (69444.396, 82902.427, 87126.327), stdev = 7553.950
[info]   CI (99.9%): [53814.857, 111989.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.580 ±(99.9%) 5.551 B/op [Average]
[info]   (min, avg, max) = (1.074, 2.580, 4.292), stdev = 1.442
[info]   CI (99.9%): [≈ 0, 8.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 90.71% complete, ETA 00:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2315259.834 ops/s
[info] # Warmup Iteration   2: 3346013.463 ops/s
[info] # Warmup Iteration   3: 3376117.329 ops/s
[info] Iteration   1: 3371782.421 ops/s
[info]                  ·gc.alloc.rate:                   3067.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3035.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1416.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3404631.467 ops/s
[info]                  ·gc.alloc.rate:                   3098.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3050.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1410.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3390295.644 ops/s
[info]                  ·gc.alloc.rate:                   3085.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1419.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3377664.908 ops/s
[info]                  ·gc.alloc.rate:                   3074.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1427.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3359019.881 ops/s
[info]                  ·gc.alloc.rate:                   3056.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1435.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3380678.864 ±(99.9%) 67346.425 ops/s [Average]
[info]   (min, avg, max) = (3359019.881, 3380678.864, 3404631.467), stdev = 17489.653
[info]   CI (99.9%): [3313332.439, 3448025.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3076.426 ±(99.9%) 61.508 MB/sec [Average]
[info]   (min, avg, max) = (3056.777, 3076.426, 3098.163), stdev = 15.973
[info]   CI (99.9%): [3014.918, 3137.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3054.795 ±(99.9%) 46.924 MB/sec [Average]
[info]   (min, avg, max) = (3035.468, 3054.795, 3064.614), stdev = 12.186
[info]   CI (99.9%): [3007.871, 3101.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1421.965 ±(99.9%) 37.868 B/op [Average]
[info]   (min, avg, max) = (1410.034, 1421.965, 1435.487), stdev = 9.834
[info]   CI (99.9%): [1384.097, 1459.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.045, 0.067), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 90.95% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.870 ops/s
[info] # Warmup Iteration   2: 7600622.223 ops/s
[info] # Warmup Iteration   3: 7661073.433 ops/s
[info] Iteration   1: 7870296.551 ops/s
[info]                  ·gc.alloc.rate:                   1480.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 7942724.101 ops/s
[info]                  ·gc.alloc.rate:                   1493.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     325.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.461 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7991570.056 ops/s
[info]                  ·gc.alloc.rate:               1503.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 258.966 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 7988229.234 ops/s
[info]                  ·gc.alloc.rate:               1502.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1651.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 325.425 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7934995.216 ops/s
[info]                  ·gc.alloc.rate:               1492.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 263.725 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7945563.032 ±(99.9%) 189835.501 ops/s [Average]
[info]   (min, avg, max) = (7870296.551, 7945563.032, 7991570.056), stdev = 49299.677
[info]   CI (99.9%): [7755727.531, 8135398.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1494.414 ±(99.9%) 35.579 MB/sec [Average]
[info]   (min, avg, max) = (1480.259, 1494.414, 1503.005), stdev = 9.240
[info]   CI (99.9%): [1458.835, 1529.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1449.055 ±(99.9%) 696.312 MB/sec [Average]
[info]   (min, avg, max) = (1306.686, 1449.055, 1651.739), stdev = 180.830
[info]   CI (99.9%): [752.744, 2145.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   286.956 ±(99.9%) 135.285 B/op [Average]
[info]   (min, avg, max) = (258.966, 286.956, 325.425), stdev = 35.133
[info]   CI (99.9%): [151.671, 422.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.475 ±(99.9%) 3.987 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 2.327), stdev = 1.035
[info]   CI (99.9%): [≈ 0, 4.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.094 ±(99.9%) 0.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.461), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 91.20% complete, ETA 00:07:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1687507.521 ops/s
[info] # Warmup Iteration   2: 3969705.943 ops/s
[info] # Warmup Iteration   3: 3934794.495 ops/s
[info] Iteration   1: 3985946.705 ops/s
[info]                  ·gc.alloc.rate:                   2390.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2328.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     919.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4028999.797 ops/s
[info]                  ·gc.alloc.rate:                   2416.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4027287.814 ops/s
[info]                  ·gc.alloc.rate:                   2415.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     923.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3988386.914 ops/s
[info]                  ·gc.alloc.rate:                   2392.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     936.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4035177.502 ops/s
[info]                  ·gc.alloc.rate:                   2420.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     927.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4013159.746 ±(99.9%) 92124.875 ops/s [Average]
[info]   (min, avg, max) = (3985946.705, 4013159.746, 4035177.502), stdev = 23924.537
[info]   CI (99.9%): [3921034.872, 4105284.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2407.027 ±(99.9%) 55.458 MB/sec [Average]
[info]   (min, avg, max) = (2390.565, 2407.027, 2420.277), stdev = 14.402
[info]   CI (99.9%): [2351.569, 2462.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2358.317 ±(99.9%) 76.919 MB/sec [Average]
[info]   (min, avg, max) = (2328.330, 2358.317, 2377.858), stdev = 19.976
[info]   CI (99.9%): [2281.397, 2435.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   924.907 ±(99.9%) 28.429 B/op [Average]
[info]   (min, avg, max) = (917.664, 924.907, 936.210), stdev = 7.383
[info]   CI (99.9%): [896.477, 953.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.042, 0.065), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 91.44% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6866751.083 ops/s
[info] # Warmup Iteration   2: 7461689.291 ops/s
[info] # Warmup Iteration   3: 7482656.314 ops/s
[info] Iteration   1: 7567996.336 ops/s
[info]                  ·gc.alloc.rate:                   1423.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7428843.121 ops/s
[info]                  ·gc.alloc.rate:                   1397.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7522157.033 ops/s
[info]                  ·gc.alloc.rate:                   1415.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7504788.368 ops/s
[info]                  ·gc.alloc.rate:                   1411.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7475519.162 ops/s
[info]                  ·gc.alloc.rate:                   1405.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7499860.804 ±(99.9%) 200084.219 ops/s [Average]
[info]   (min, avg, max) = (7428843.121, 7499860.804, 7567996.336), stdev = 51961.236
[info]   CI (99.9%): [7299776.586, 7699945.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1410.738 ±(99.9%) 36.907 MB/sec [Average]
[info]   (min, avg, max) = (1397.814, 1410.738, 1423.227), stdev = 9.585
[info]   CI (99.9%): [1373.831, 1447.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1413.930 ±(99.9%) 559.787 MB/sec [Average]
[info]   (min, avg, max) = (1344.284, 1413.930, 1673.912), stdev = 145.375
[info]   CI (99.9%): [854.143, 1973.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   296.560 ±(99.9%) 111.130 B/op [Average]
[info]   (min, avg, max) = (281.831, 296.560, 348.137), stdev = 28.860
[info]   CI (99.9%): [185.430, 407.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.017, 0.022), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 91.69% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2883409.380 ops/s
[info] # Warmup Iteration   2: 4950464.444 ops/s
[info] # Warmup Iteration   3: 4876886.724 ops/s
[info] Iteration   1: 4923160.130 ops/s
[info]                  ·gc.alloc.rate:                   3052.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3022.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 4972435.037 ops/s
[info]                  ·gc.alloc.rate:                   3084.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3045.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4889767.889 ops/s
[info]                  ·gc.alloc.rate:                   3032.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     983.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 4897964.966 ops/s
[info]                  ·gc.alloc.rate:                   3037.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3060.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     983.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4977267.393 ops/s
[info]                  ·gc.alloc.rate:                   3086.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     968.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4932119.083 ±(99.9%) 157643.032 ops/s [Average]
[info]   (min, avg, max) = (4889767.889, 4932119.083, 4977267.393), stdev = 40939.395
[info]   CI (99.9%): [4774476.051, 5089762.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3058.614 ±(99.9%) 98.183 MB/sec [Average]
[info]   (min, avg, max) = (3032.338, 3058.614, 3086.471), stdev = 25.498
[info]   CI (99.9%): [2960.431, 3156.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3049.721 ±(99.9%) 63.308 MB/sec [Average]
[info]   (min, avg, max) = (3022.988, 3049.721, 3063.515), stdev = 16.441
[info]   CI (99.9%): [2986.413, 3113.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   973.216 ±(99.9%) 36.914 B/op [Average]
[info]   (min, avg, max) = (963.829, 973.216, 983.572), stdev = 9.586
[info]   CI (99.9%): [936.302, 1010.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.033, 0.047), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 91.93% complete, ETA 00:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1525500.395 ops/s
[info] # Warmup Iteration   2: 2748657.382 ops/s
[info] # Warmup Iteration   3: 2741715.587 ops/s
[info] Iteration   1: 2771153.064 ops/s
[info]                  ·gc.alloc.rate:                   1718.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2767753.347 ops/s
[info]                  ·gc.alloc.rate:                   1716.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1138.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2781687.459 ops/s
[info]                  ·gc.alloc.rate:                   1725.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     950.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2787605.033 ops/s
[info]                  ·gc.alloc.rate:                   1728.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2761197.200 ops/s
[info]                  ·gc.alloc.rate:                   1712.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2773879.220 ±(99.9%) 41075.670 ops/s [Average]
[info]   (min, avg, max) = (2761197.200, 2773879.220, 2787605.033), stdev = 10667.221
[info]   CI (99.9%): [2732803.551, 2814954.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1720.415 ±(99.9%) 26.303 MB/sec [Average]
[info]   (min, avg, max) = (1712.265, 1720.415, 1728.969), stdev = 6.831
[info]   CI (99.9%): [1694.112, 1746.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1743.795 ±(99.9%) 559.484 MB/sec [Average]
[info]   (min, avg, max) = (1658.032, 1743.795, 2002.697), stdev = 145.296
[info]   CI (99.9%): [1184.312, 2303.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   989.364 ±(99.9%) 323.310 B/op [Average]
[info]   (min, avg, max) = (941.458, 989.364, 1138.866), stdev = 83.962
[info]   CI (99.9%): [666.054, 1312.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.054, 0.095), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 92.18% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.822 ops/s
[info] # Warmup Iteration   2: 9369782.637 ops/s
[info] # Warmup Iteration   3: 9393039.172 ops/s
[info] Iteration   1: 9452921.722 ops/s
[info]                  ·gc.alloc.rate:                   913.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9439366.262 ops/s
[info]                  ·gc.alloc.rate:                   911.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9463034.604 ops/s
[info]                  ·gc.alloc.rate:               913.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      982.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.367 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 9493439.927 ops/s
[info]                  ·gc.alloc.rate:                   916.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9565973.702 ops/s
[info]                  ·gc.alloc.rate:               923.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108.068 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   9482947.244 ±(99.9%) 194455.959 ops/s [Average]
[info]   (min, avg, max) = (9439366.262, 9482947.244, 9565973.702), stdev = 50499.595
[info]   CI (99.9%): [9288491.285, 9677403.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   915.946 ±(99.9%) 18.464 MB/sec [Average]
[info]   (min, avg, max) = (911.922, 915.946, 923.878), stdev = 4.795
[info]   CI (99.9%): [897.482, 934.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   914.811 ±(99.9%) 555.683 MB/sec [Average]
[info]   (min, avg, max) = (656.853, 914.811, 985.935), stdev = 144.309
[info]   CI (99.9%): [359.128, 1470.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   151.906 ±(99.9%) 94.406 B/op [Average]
[info]   (min, avg, max) = (108.068, 151.906, 163.450), stdev = 24.517
[info]   CI (99.9%): [57.500, 246.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.468 ±(99.9%) 3.927 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.468, 2.292), stdev = 1.020
[info]   CI (99.9%): [≈ 0, 4.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.380), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 92.42% complete, ETA 00:06:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2215249.383 ops/s
[info] # Warmup Iteration   2: 4713225.137 ops/s
[info] # Warmup Iteration   3: 4904793.203 ops/s
[info] Iteration   1: 4856649.452 ops/s
[info]                  ·gc.alloc.rate:                   1283.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4898927.926 ops/s
[info]                  ·gc.alloc.rate:                   1295.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     423.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4907525.151 ops/s
[info]                  ·gc.alloc.rate:                   1297.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     425.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4881143.707 ops/s
[info]                  ·gc.alloc.rate:                   1290.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     430.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4785883.284 ops/s
[info]                  ·gc.alloc.rate:                   1264.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4866025.904 ±(99.9%) 188091.598 ops/s [Average]
[info]   (min, avg, max) = (4785883.284, 4866025.904, 4907525.151), stdev = 48846.791
[info]   CI (99.9%): [4677934.306, 5054117.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1286.288 ±(99.9%) 50.107 MB/sec [Average]
[info]   (min, avg, max) = (1264.983, 1286.288, 1297.096), stdev = 13.013
[info]   CI (99.9%): [1236.181, 1336.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1260.611 ±(99.9%) 596.606 MB/sec [Average]
[info]   (min, avg, max) = (983.841, 1260.611, 1340.273), stdev = 154.937
[info]   CI (99.9%): [664.004, 1857.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   407.702 ±(99.9%) 193.022 B/op [Average]
[info]   (min, avg, max) = (318.845, 407.702, 440.760), stdev = 50.127
[info]   CI (99.9%): [214.681, 600.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.187), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.024, 0.060), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 92.67% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6929671.386 ops/s
[info] # Warmup Iteration   2: 9671295.455 ops/s
[info] # Warmup Iteration   3: 9945419.239 ops/s
[info] Iteration   1: 9684412.068 ops/s
[info]                  ·gc.alloc.rate:                   935.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9811715.466 ops/s
[info]                  ·gc.alloc.rate:                   947.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9699344.650 ops/s
[info]                  ·gc.alloc.rate:                   937.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9938732.440 ops/s
[info]                  ·gc.alloc.rate:                   960.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9713037.143 ops/s
[info]                  ·gc.alloc.rate:                   938.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9769448.353 ±(99.9%) 411908.828 ops/s [Average]
[info]   (min, avg, max) = (9684412.068, 9769448.353, 9938732.440), stdev = 106971.415
[info]   CI (99.9%): [9357539.525, 10181357.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   943.662 ±(99.9%) 40.176 MB/sec [Average]
[info]   (min, avg, max) = (935.278, 943.662, 960.282), stdev = 10.433
[info]   CI (99.9%): [903.487, 983.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   931.583 ±(99.9%) 577.294 MB/sec [Average]
[info]   (min, avg, max) = (663.466, 931.583, 1003.286), stdev = 149.921
[info]   CI (99.9%): [354.289, 1508.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   150.113 ±(99.9%) 94.240 B/op [Average]
[info]   (min, avg, max) = (106.430, 150.113, 162.562), stdev = 24.474
[info]   CI (99.9%): [55.873, 244.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.011, 0.014), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 92.91% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4480546.981 ops/s
[info] # Warmup Iteration   2: 6271110.097 ops/s
[info] # Warmup Iteration   3: 6501621.070 ops/s
[info] Iteration   1: 6478748.578 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6463707.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6483221.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6486316.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6449125.932 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6472223.937 ±(99.9%) 59907.217 ops/s [Average]
[info]   (min, avg, max) = (6449125.932, 6472223.937, 6486316.392), stdev = 15557.714
[info]   CI (99.9%): [6412316.720, 6532131.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 93.15% complete, ETA 00:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3677229.495 ops/s
[info] # Warmup Iteration   2: 4938777.847 ops/s
[info] # Warmup Iteration   3: 5093041.916 ops/s
[info] Iteration   1: 5128022.592 ops/s
[info]                  ·gc.alloc.rate:                   1641.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     509.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4999647.537 ops/s
[info]                  ·gc.alloc.rate:                   1601.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     525.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4997879.446 ops/s
[info]                  ·gc.alloc.rate:                   1600.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5029841.273 ops/s
[info]                  ·gc.alloc.rate:                   1610.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     527.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5076470.321 ops/s
[info]                  ·gc.alloc.rate:                   1625.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     419.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   5046372.234 ±(99.9%) 214227.836 ops/s [Average]
[info]   (min, avg, max) = (4997879.446, 5046372.234, 5128022.592), stdev = 55634.289
[info]   CI (99.9%): [4832144.398, 5260600.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1616.081 ±(99.9%) 68.110 MB/sec [Average]
[info]   (min, avg, max) = (1600.788, 1616.081, 1641.972), stdev = 17.688
[info]   CI (99.9%): [1547.972, 1684.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1609.805 ±(99.9%) 555.201 MB/sec [Average]
[info]   (min, avg, max) = (1352.427, 1609.805, 1686.143), stdev = 144.184
[info]   CI (99.9%): [1054.605, 2165.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   502.228 ±(99.9%) 180.988 B/op [Average]
[info]   (min, avg, max) = (419.259, 502.228, 528.651), stdev = 47.002
[info]   CI (99.9%): [321.240, 683.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.018, 0.033), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 93.40% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 627362.261 ops/s
[info] # Warmup Iteration   2: 853963.315 ops/s
[info] # Warmup Iteration   3: 887784.600 ops/s
[info] Iteration   1: 886107.546 ops/s
[info]                  ·gc.alloc.rate:                   1207.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1768.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 865349.504 ops/s
[info]                  ·gc.alloc.rate:                   1179.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2420.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 870397.287 ops/s
[info]                  ·gc.alloc.rate:                   1185.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1811.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 870565.939 ops/s
[info]                  ·gc.alloc.rate:                   1186.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2423.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 886051.443 ops/s
[info]                  ·gc.alloc.rate:                   1207.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2390.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   875694.344 ±(99.9%) 37386.923 ops/s [Average]
[info]   (min, avg, max) = (865349.504, 875694.344, 886107.546), stdev = 9709.265
[info]   CI (99.9%): [838307.420, 913081.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1193.074 ±(99.9%) 50.592 MB/sec [Average]
[info]   (min, avg, max) = (1179.313, 1193.074, 1207.192), stdev = 13.139
[info]   CI (99.9%): [1142.482, 1243.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.000, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.000, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1203.107 ±(99.9%) 718.129 MB/sec [Average]
[info]   (min, avg, max) = (995.914, 1203.107, 1345.831), stdev = 186.496
[info]   CI (99.9%): [484.978, 1921.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2162.891 ±(99.9%) 1312.228 B/op [Average]
[info]   (min, avg, max) = (1768.845, 2162.891, 2423.097), stdev = 340.782
[info]   CI (99.9%): [850.662, 3475.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.157 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (0.113, 0.157, 0.227), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 93.64% complete, ETA 00:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.847 ops/s
[info] # Warmup Iteration   2: 2613458.651 ops/s
[info] # Warmup Iteration   3: 2691257.706 ops/s
[info] Iteration   1: 2717709.055 ops/s
[info]                  ·gc.alloc.rate:               511.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 2671711.545 ops/s
[info]                  ·gc.alloc.rate:                   502.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     380.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2675589.134 ops/s
[info]                  ·gc.alloc.rate:                   503.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2706415.047 ops/s
[info]                  ·gc.alloc.rate:                   509.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2713381.829 ops/s
[info]                  ·gc.alloc.rate:                   510.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     378.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2696961.322 ±(99.9%) 83564.209 ops/s [Average]
[info]   (min, avg, max) = (2671711.545, 2696961.322, 2717709.055), stdev = 21701.360
[info]   CI (99.9%): [2613397.113, 2780525.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   507.255 ±(99.9%) 15.809 MB/sec [Average]
[info]   (min, avg, max) = (502.466, 507.255, 511.122), stdev = 4.106
[info]   CI (99.9%): [491.446, 523.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   505.432 ±(99.9%) 760.929 MB/sec [Average]
[info]   (min, avg, max) = (255.805, 505.432, 652.166), stdev = 197.611
[info]   CI (99.9%): [≈ 0, 1266.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   295.439 ±(99.9%) 449.054 B/op [Average]
[info]   (min, avg, max) = (148.141, 295.439, 381.273), stdev = 116.618
[info]   CI (99.9%): [≈ 0, 744.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.055), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.033), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 93.89% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 474809.842 ops/s
[info] # Warmup Iteration   2: 1050683.442 ops/s
[info] # Warmup Iteration   3: 1044146.184 ops/s
[info] Iteration   1: 1057282.504 ops/s
[info]                  ·gc.alloc.rate:                   634.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1060235.187 ops/s
[info]                  ·gc.alloc.rate:                   636.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1061833.677 ops/s
[info]                  ·gc.alloc.rate:                   637.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     970.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1045219.735 ops/s
[info]                  ·gc.alloc.rate:                   627.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     988.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1086982.589 ops/s
[info]                  ·gc.alloc.rate:               652.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 476.006 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1062310.738 ±(99.9%) 58734.037 ops/s [Average]
[info]   (min, avg, max) = (1045219.735, 1062310.738, 1086982.589), stdev = 15253.043
[info]   CI (99.9%): [1003576.702, 1121044.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   637.332 ±(99.9%) 35.154 MB/sec [Average]
[info]   (min, avg, max) = (627.056, 637.332, 652.074), stdev = 9.129
[info]   CI (99.9%): [602.178, 672.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   589.900 ±(99.9%) 562.036 MB/sec [Average]
[info]   (min, avg, max) = (328.804, 589.900, 656.288), stdev = 145.959
[info]   CI (99.9%): [27.865, 1151.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   876.094 ±(99.9%) 861.649 B/op [Average]
[info]   (min, avg, max) = (476.006, 876.094, 988.008), stdev = 223.767
[info]   CI (99.9%): [14.446, 1737.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.453 ±(99.9%) 3.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.453, 2.162), stdev = 0.956
[info]   CI (99.9%): [≈ 0, 4.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.674 ±(99.9%) 5.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.217), stdev = 1.422
[info]   CI (99.9%): [≈ 0, 6.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 94.13% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1717026.463 ops/s
[info] # Warmup Iteration   2: 1799675.159 ops/s
[info] # Warmup Iteration   3: 1827856.512 ops/s
[info] Iteration   1: 1836925.265 ops/s
[info]                  ·gc.alloc.rate:               345.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 219.168 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1782254.095 ops/s
[info]                  ·gc.alloc.rate:                   335.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1818275.690 ops/s
[info]                  ·gc.alloc.rate:                   341.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1829357.291 ops/s
[info]                  ·gc.alloc.rate:                   344.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1847713.253 ops/s
[info]                  ·gc.alloc.rate:                   347.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          334.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1822905.119 ±(99.9%) 96795.567 ops/s [Average]
[info]   (min, avg, max) = (1782254.095, 1822905.119, 1847713.253), stdev = 25137.501
[info]   CI (99.9%): [1726109.552, 1919700.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   342.874 ±(99.9%) 18.059 MB/sec [Average]
[info]   (min, avg, max) = (335.321, 342.874, 347.576), stdev = 4.690
[info]   CI (99.9%): [324.815, 360.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.259 ±(99.9%) 166.680 MB/sec [Average]
[info]   (min, avg, max) = (255.786, 303.259, 335.081), stdev = 43.286
[info]   CI (99.9%): [136.580, 469.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   261.641 ±(99.9%) 137.973 B/op [Average]
[info]   (min, avg, max) = (219.168, 261.641, 290.031), stdev = 35.831
[info]   CI (99.9%): [123.668, 399.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.314 ±(99.9%) 2.534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 1.491), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.271 ±(99.9%) 2.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 1.290), stdev = 0.570
[info]   CI (99.9%): [≈ 0, 2.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 94.38% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 685616.634 ops/s
[info] # Warmup Iteration   2: 1115568.641 ops/s
[info] # Warmup Iteration   3: 1158331.733 ops/s
[info] Iteration   1: 1134960.718 ops/s
[info]                  ·gc.alloc.rate:                   703.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     910.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1164221.749 ops/s
[info]                  ·gc.alloc.rate:                   722.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     887.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1162675.021 ops/s
[info]                  ·gc.alloc.rate:               721.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 889.985 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1163839.627 ops/s
[info]                  ·gc.alloc.rate:                   721.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     890.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1156385.616 ops/s
[info]                  ·gc.alloc.rate:                   717.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1348.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1156416.546 ±(99.9%) 47767.597 ops/s [Average]
[info]   (min, avg, max) = (1134960.718, 1156416.546, 1164221.749), stdev = 12405.093
[info]   CI (99.9%): [1108648.949, 1204184.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   717.265 ±(99.9%) 29.828 MB/sec [Average]
[info]   (min, avg, max) = (703.790, 717.265, 722.134), stdev = 7.746
[info]   CI (99.9%): [687.437, 747.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   724.191 ±(99.9%) 574.719 MB/sec [Average]
[info]   (min, avg, max) = (656.444, 724.191, 991.178), stdev = 149.253
[info]   CI (99.9%): [149.472, 1298.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   985.464 ±(99.9%) 781.481 B/op [Average]
[info]   (min, avg, max) = (887.931, 985.464, 1348.149), stdev = 202.948
[info]   CI (99.9%): [203.983, 1766.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.169), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 94.62% complete, ETA 00:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753807.027 ops/s
[info] # Warmup Iteration   2: 1255932.869 ops/s
[info] # Warmup Iteration   3: 1251575.140 ops/s
[info] Iteration   1: 1276370.764 ops/s
[info]                  ·gc.alloc.rate:                   966.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     813.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1280962.032 ops/s
[info]                  ·gc.alloc.rate:                   970.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1217.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1279024.033 ops/s
[info]                  ·gc.alloc.rate:                   968.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1273889.222 ops/s
[info]                  ·gc.alloc.rate:                   964.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1232.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1278033.064 ops/s
[info]                  ·gc.alloc.rate:                   968.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1232.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1277655.823 ±(99.9%) 10329.489 ops/s [Average]
[info]   (min, avg, max) = (1273889.222, 1277655.823, 1280962.032), stdev = 2682.536
[info]   CI (99.9%): [1267326.334, 1287985.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   967.746 ±(99.9%) 7.797 MB/sec [Average]
[info]   (min, avg, max) = (964.905, 967.746, 970.136), stdev = 2.025
[info]   CI (99.9%): [959.950, 975.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   928.507 ±(99.9%) 579.318 MB/sec [Average]
[info]   (min, avg, max) = (659.470, 928.507, 1001.169), stdev = 150.447
[info]   CI (99.9%): [349.189, 1507.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1143.582 ±(99.9%) 711.589 B/op [Average]
[info]   (min, avg, max) = (813.210, 1143.582, 1232.597), stdev = 184.797
[info]   CI (99.9%): [431.993, 1855.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.072, 0.102), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 94.87% complete, ETA 00:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.829 ops/s
[info] # Warmup Iteration   2: 2831530.931 ops/s
[info] # Warmup Iteration   3: 2927449.343 ops/s
[info] Iteration   1: 2959698.468 ops/s
[info]                  ·gc.alloc.rate:                   692.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2932379.496 ops/s
[info]                  ·gc.alloc.rate:                   685.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2890817.803 ops/s
[info]                  ·gc.alloc.rate:                   675.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2956886.197 ops/s
[info]                  ·gc.alloc.rate:                   691.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2928084.235 ops/s
[info]                  ·gc.alloc.rate:               684.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 352.337 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2933573.240 ±(99.9%) 106948.179 ops/s [Average]
[info]   (min, avg, max) = (2890817.803, 2933573.240, 2959698.468), stdev = 27774.102
[info]   CI (99.9%): [2826625.061, 3040521.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   685.970 ±(99.9%) 25.064 MB/sec [Average]
[info]   (min, avg, max) = (675.918, 685.970, 692.022), stdev = 6.509
[info]   CI (99.9%): [660.906, 711.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   650.744 ±(99.9%) 15.651 MB/sec [Average]
[info]   (min, avg, max) = (645.499, 650.744, 655.636), stdev = 4.064
[info]   CI (99.9%): [635.094, 666.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   349.131 ±(99.9%) 16.681 B/op [Average]
[info]   (min, avg, max) = (343.260, 349.131, 354.336), stdev = 4.332
[info]   CI (99.9%): [332.451, 365.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 95.11% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1184051.008 ops/s
[info] # Warmup Iteration   2: 2414780.308 ops/s
[info] # Warmup Iteration   3: 2439921.133 ops/s
[info] Iteration   1: 2409303.095 ops/s
[info]                  ·gc.alloc.rate:                   1077.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     641.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2408370.240 ops/s
[info]                  ·gc.alloc.rate:                   1077.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     858.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2428065.399 ops/s
[info]                  ·gc.alloc.rate:                   1086.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2446403.166 ops/s
[info]                  ·gc.alloc.rate:                   1094.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     640.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2431194.454 ops/s
[info]                  ·gc.alloc.rate:                   1087.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     863.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2424667.271 ±(99.9%) 61738.074 ops/s [Average]
[info]   (min, avg, max) = (2408370.240, 2424667.271, 2446403.166), stdev = 16033.182
[info]   CI (99.9%): [2362929.197, 2486405.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1084.545 ±(99.9%) 27.656 MB/sec [Average]
[info]   (min, avg, max) = (1077.283, 1084.545, 1094.259), stdev = 7.182
[info]   CI (99.9%): [1056.889, 1112.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.494 ±(99.9%) 706.623 MB/sec [Average]
[info]   (min, avg, max) = (982.482, 1123.494, 1334.274), stdev = 183.508
[info]   CI (99.9%): [416.871, 1830.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   729.455 ±(99.9%) 463.609 B/op [Average]
[info]   (min, avg, max) = (640.251, 729.455, 863.742), stdev = 120.398
[info]   CI (99.9%): [265.846, 1193.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.049, 0.068), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 95.35% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1816399.086 ops/s
[info] # Warmup Iteration   2: 2513166.736 ops/s
[info] # Warmup Iteration   3: 2601808.751 ops/s
[info] Iteration   1: 2581265.451 ops/s
[info]                  ·gc.alloc.rate:                   603.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2599796.866 ops/s
[info]                  ·gc.alloc.rate:                   607.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2597723.182 ops/s
[info]                  ·gc.alloc.rate:                   607.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2586521.179 ops/s
[info]                  ·gc.alloc.rate:                   604.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2582795.119 ops/s
[info]                  ·gc.alloc.rate:                   603.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2589620.359 ±(99.9%) 33080.278 ops/s [Average]
[info]   (min, avg, max) = (2581265.451, 2589620.359, 2599796.866), stdev = 8590.843
[info]   CI (99.9%): [2556540.081, 2622700.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   605.521 ±(99.9%) 7.811 MB/sec [Average]
[info]   (min, avg, max) = (603.578, 605.521, 607.963), stdev = 2.029
[info]   CI (99.9%): [597.710, 613.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   596.821 ±(99.9%) 571.352 MB/sec [Average]
[info]   (min, avg, max) = (331.396, 596.821, 663.815), stdev = 148.378
[info]   CI (99.9%): [25.470, 1168.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   362.842 ±(99.9%) 348.896 B/op [Average]
[info]   (min, avg, max) = (200.781, 362.842, 404.554), stdev = 90.607
[info]   CI (99.9%): [13.946, 711.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.407 ±(99.9%) 2.972 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.407, 1.787), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 3.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.248 ±(99.9%) 1.812 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.248, 1.089), stdev = 0.471
[info]   CI (99.9%): [≈ 0, 2.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 95.60% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1898838.492 ops/s
[info] # Warmup Iteration   2: 2632323.465 ops/s
[info] # Warmup Iteration   3: 2672153.002 ops/s
[info] Iteration   1: 2668767.961 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2663074.448 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2662188.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2662154.747 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2663098.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2663856.755 ±(99.9%) 10717.617 ops/s [Average]
[info]   (min, avg, max) = (2662154.747, 2663856.755, 2668767.961), stdev = 2783.331
[info]   CI (99.9%): [2653139.138, 2674574.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 95.84% complete, ETA 00:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1853893.722 ops/s
[info] # Warmup Iteration   2: 2372805.889 ops/s
[info] # Warmup Iteration   3: 2429683.375 ops/s
[info] Iteration   1: 2382597.649 ops/s
[info]                  ·gc.alloc.rate:                   1090.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     874.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2406731.274 ops/s
[info]                  ·gc.alloc.rate:                   1101.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2442500.584 ops/s
[info]                  ·gc.alloc.rate:                   1117.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     643.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2395960.635 ops/s
[info]                  ·gc.alloc.rate:                   1096.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     658.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2400559.152 ops/s
[info]                  ·gc.alloc.rate:                   1098.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     879.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2405669.859 ±(99.9%) 86325.394 ops/s [Average]
[info]   (min, avg, max) = (2382597.649, 2405669.859, 2442500.584), stdev = 22418.431
[info]   CI (99.9%): [2319344.465, 2491995.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1100.658 ±(99.9%) 39.423 MB/sec [Average]
[info]   (min, avg, max) = (1090.428, 1100.658, 1117.599), stdev = 10.238
[info]   CI (99.9%): [1061.236, 1140.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1132.682 ±(99.9%) 705.580 MB/sec [Average]
[info]   (min, avg, max) = (995.923, 1132.682, 1341.688), stdev = 183.237
[info]   CI (99.9%): [427.101, 1838.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   741.495 ±(99.9%) 477.547 B/op [Average]
[info]   (min, avg, max) = (643.426, 741.495, 879.616), stdev = 124.017
[info]   CI (99.9%): [263.948, 1219.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.044, 0.055), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.09% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5829.182 ops/s
[info] # Warmup Iteration   2: 10021.065 ops/s
[info] # Warmup Iteration   3: 11114.789 ops/s
[info] Iteration   1: 11809.360 ops/s
[info]                  ·gc.alloc.rate:                   1673.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              223040.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220110.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.645 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11758.951 ops/s
[info]                  ·gc.alloc.rate:                   1666.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              223040.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222625.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.717 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11788.178 ops/s
[info]                  ·gc.alloc.rate:                   1671.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              223044.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223481.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.674 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11791.316 ops/s
[info]                  ·gc.alloc.rate:                   1671.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224599.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.786 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11684.163 ops/s
[info]                  ·gc.alloc.rate:                   1656.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227444.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.253 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11766.394 ±(99.9%) 190.198 ops/s [Average]
[info]   (min, avg, max) = (11684.163, 11766.394, 11809.360), stdev = 49.394
[info]   CI (99.9%): [11576.196, 11956.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1667.793 ±(99.9%) 26.876 MB/sec [Average]
[info]   (min, avg, max) = (1656.210, 1667.793, 1673.588), stdev = 6.980
[info]   CI (99.9%): [1640.917, 1694.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   223063.291 ±(99.9%) 115.301 B/op [Average]
[info]   (min, avg, max) = (223040.037, 223063.291, 223096.037), stdev = 29.943
[info]   CI (99.9%): [222947.990, 223178.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1672.141 ±(99.9%) 57.230 MB/sec [Average]
[info]   (min, avg, max) = (1651.605, 1672.141, 1688.490), stdev = 14.863
[info]   CI (99.9%): [1614.910, 1729.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   223652.184 ±(99.9%) 10351.161 B/op [Average]
[info]   (min, avg, max) = (220110.412, 223652.184, 227444.182), stdev = 2688.164
[info]   CI (99.9%): [213301.023, 234003.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.175, 0.291), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.415 ±(99.9%) 38.798 B/op [Average]
[info]   (min, avg, max) = (16.645, 23.415, 39.253), stdev = 10.076
[info]   CI (99.9%): [≈ 0, 62.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.33% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5467.101 ops/s
[info] # Warmup Iteration   2: 14682.557 ops/s
[info] # Warmup Iteration   3: 15043.326 ops/s
[info] Iteration   1: 15124.345 ops/s
[info]                  ·gc.alloc.rate:               239.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26618.178 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15007.433 ops/s
[info]                  ·gc.alloc.rate:               237.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26825.662 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15051.983 ops/s
[info]                  ·gc.alloc.rate:                   237.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26747.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.175 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15088.569 ops/s
[info]                  ·gc.alloc.rate:                   238.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26681.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.173 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15132.146 ops/s
[info]                  ·gc.alloc.rate:      239.212 MB/sec
[info]                  ·gc.alloc.rate.norm: 24880.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15080.895 ±(99.9%) 200.141 ops/s [Average]
[info]   (min, avg, max) = (15007.433, 15080.895, 15132.146), stdev = 51.976
[info]   CI (99.9%): [14880.754, 15281.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   238.425 ±(99.9%) 3.122 MB/sec [Average]
[info]   (min, avg, max) = (237.284, 238.425, 239.212), stdev = 0.811
[info]   CI (99.9%): [235.303, 241.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24880.031 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (24880.029, 24880.031, 24880.039), stdev = 0.005
[info]   CI (99.9%): [24880.014, 24880.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204.661 ±(99.9%) 440.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.661, 255.840), stdev = 114.409
[info]   CI (99.9%): [≈ 0, 645.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21374.554 ±(99.9%) 46011.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21374.554, 26825.662), stdev = 11948.987
[info]   CI (99.9%): [≈ 0, 67385.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.870 ±(99.9%) 4.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 2.175), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.58% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19505.369 ops/s
[info] # Warmup Iteration   2: 21442.171 ops/s
[info] # Warmup Iteration   3: 36505.998 ops/s
[info] Iteration   1: 36165.338 ops/s
[info]                  ·gc.alloc.rate:                   386.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          510.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22219.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 37178.258 ops/s
[info]                  ·gc.alloc.rate:                   397.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10828.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 36647.394 ops/s
[info]                  ·gc.alloc.rate:                   391.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14261.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 36780.479 ops/s
[info]                  ·gc.alloc.rate:               393.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          16816.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14208.849 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 36599.653 ops/s
[info]                  ·gc.alloc.rate:                   391.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28507.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36674.224 ±(99.9%) 1402.430 ops/s [Average]
[info]   (min, avg, max) = (36165.338, 36674.224, 37178.258), stdev = 364.207
[info]   CI (99.9%): [35271.794, 38076.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   392.005 ±(99.9%) 14.676 MB/sec [Average]
[info]   (min, avg, max) = (386.706, 392.005, 397.330), stdev = 3.811
[info]   CI (99.9%): [377.329, 406.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16816.019 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (16816.012, 16816.019, 16816.046), stdev = 0.015
[info]   CI (99.9%): [16815.961, 16816.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   418.890 ±(99.9%) 638.249 MB/sec [Average]
[info]   (min, avg, max) = (255.861, 418.890, 663.385), stdev = 165.751
[info]   CI (99.9%): [≈ 0, 1057.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18005.219 ±(99.9%) 27767.239 B/op [Average]
[info]   (min, avg, max) = (10828.668, 18005.219, 28507.757), stdev = 7211.064
[info]   CI (99.9%): [≈ 0, 45772.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.344 ±(99.9%) 2.869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 1.677), stdev = 0.745
[info]   CI (99.9%): [≈ 0, 3.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.778 ±(99.9%) 123.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.778, 72.001), stdev = 31.990
[info]   CI (99.9%): [≈ 0, 137.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.82% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 900.504 ops/s
[info] # Warmup Iteration   2: 3024.319 ops/s
[info] # Warmup Iteration   3: 2879.457 ops/s
[info] Iteration   1: 3340.957 ops/s
[info]                  ·gc.alloc.rate:               1064.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          501297.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      962.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 453378.911 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 3557.868 ops/s
[info]                  ·gc.alloc.rate:                   1133.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              501256.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          972.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429860.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3489.020 ops/s
[info]                  ·gc.alloc.rate:                   1112.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              501508.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     589485.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 3526.327 ops/s
[info]                  ·gc.alloc.rate:                   1123.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              501256.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441192.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 3533.407 ops/s
[info]                  ·gc.alloc.rate:               1125.886 MB/sec
[info]                  ·gc.alloc.rate.norm:          501256.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 591641.354 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3489.516 ±(99.9%) 333.606 ops/s [Average]
[info]   (min, avg, max) = (3340.957, 3489.516, 3557.868), stdev = 86.637
[info]   CI (99.9%): [3155.909, 3823.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1112.048 ±(99.9%) 106.099 MB/sec [Average]
[info]   (min, avg, max) = (1064.705, 1112.048, 1133.705), stdev = 27.553
[info]   CI (99.9%): [1005.949, 1218.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   501314.861 ±(99.9%) 421.796 B/op [Average]
[info]   (min, avg, max) = (501256.122, 501314.861, 501508.135), stdev = 109.539
[info]   CI (99.9%): [500893.064, 501736.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1112.097 ±(99.9%) 725.805 MB/sec [Average]
[info]   (min, avg, max) = (962.931, 1112.097, 1328.903), stdev = 188.489
[info]   CI (99.9%): [386.292, 1837.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   501111.835 ±(99.9%) 316076.149 B/op [Average]
[info]   (min, avg, max) = (429860.181, 501111.835, 591641.354), stdev = 82083.972
[info]   CI (99.9%): [185035.686, 817187.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.419 ±(99.9%) 29.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.419, 18.414), stdev = 7.719
[info]   CI (99.9%): [≈ 0, 37.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 17.000), stdev = 4.604
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.07% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25371.591 ops/s
[info] # Warmup Iteration   2: 57133.494 ops/s
[info] # Warmup Iteration   3: 58404.754 ops/s
[info] Iteration   1: 60260.337 ops/s
[info]                  ·gc.alloc.rate:                   769.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16850.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 60156.101 ops/s
[info]                  ·gc.alloc.rate:                   768.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16888.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 60330.115 ops/s
[info]                  ·gc.alloc.rate:                   770.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          970.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25319.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 60031.784 ops/s
[info]                  ·gc.alloc.rate:                   766.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17026.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60438.512 ops/s
[info]                  ·gc.alloc.rate:                   771.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16982.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   60243.370 ±(99.9%) 603.574 ops/s [Average]
[info]   (min, avg, max) = (60031.784, 60243.370, 60438.512), stdev = 156.746
[info]   CI (99.9%): [59639.796, 60846.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   769.391 ±(99.9%) 7.710 MB/sec [Average]
[info]   (min, avg, max) = (766.695, 769.391, 771.914), stdev = 2.002
[info]   CI (99.9%): [761.681, 777.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.001 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (20099.948, 20100.001, 20100.038), stdev = 0.036
[info]   CI (99.9%): [20099.863, 20100.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   712.586 ±(99.9%) 555.425 MB/sec [Average]
[info]   (min, avg, max) = (645.170, 712.586, 970.562), stdev = 144.242
[info]   CI (99.9%): [157.161, 1268.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18613.663 ±(99.9%) 14438.152 B/op [Average]
[info]   (min, avg, max) = (16850.778, 18613.663, 25319.863), stdev = 3749.542
[info]   CI (99.9%): [4175.511, 33051.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.849 ±(99.9%) 2.809 B/op [Average]
[info]   (min, avg, max) = (1.086, 1.849, 2.723), stdev = 0.729
[info]   CI (99.9%): [≈ 0, 4.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.31% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57772.817 ops/s
[info] # Warmup Iteration   2: 83106.852 ops/s
[info] # Warmup Iteration   3: 81965.812 ops/s
[info] Iteration   1: 82970.129 ops/s
[info]                  ·gc.alloc.rate:                   542.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          586.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11132.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 82967.908 ops/s
[info]                  ·gc.alloc.rate:                   542.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12547.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80704.201 ops/s
[info]                  ·gc.alloc.rate:               527.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      330.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6443.342 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 81228.989 ops/s
[info]                  ·gc.alloc.rate:                   531.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12816.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 80936.487 ops/s
[info]                  ·gc.alloc.rate:                   529.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12875.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   81761.543 ±(99.9%) 4304.418 ops/s [Average]
[info]   (min, avg, max) = (80704.201, 81761.543, 82970.129), stdev = 1117.844
[info]   CI (99.9%): [77457.124, 86065.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   534.473 ±(99.9%) 28.140 MB/sec [Average]
[info]   (min, avg, max) = (527.539, 534.473, 542.364), stdev = 7.308
[info]   CI (99.9%): [506.332, 562.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.005, 10288.005, 10288.006), stdev = 0.001
[info]   CI (99.9%): [10288.005, 10288.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   580.494 ±(99.9%) 552.642 MB/sec [Average]
[info]   (min, avg, max) = (330.396, 580.494, 662.161), stdev = 143.519
[info]   CI (99.9%): [27.852, 1133.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11163.214 ±(99.9%) 10521.376 B/op [Average]
[info]   (min, avg, max) = (6443.342, 11163.214, 12875.976), stdev = 2732.368
[info]   CI (99.9%): [641.838, 21684.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.405 ±(99.9%) 3.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.405, 1.860), stdev = 0.814
[info]   CI (99.9%): [≈ 0, 3.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.699 ±(99.9%) 59.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.699, 35.289), stdev = 15.431
[info]   CI (99.9%): [≈ 0, 67.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.56% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65423.682 ops/s
[info] # Warmup Iteration   2: 88995.027 ops/s
[info] # Warmup Iteration   3: 89648.775 ops/s
[info] Iteration   1: 89400.346 ops/s
[info]                  ·gc.alloc.rate:      10.908 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 89494.064 ops/s
[info]                  ·gc.alloc.rate:      10.919 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 89829.388 ops/s
[info]                  ·gc.alloc.rate:      10.963 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 89781.104 ops/s
[info]                  ·gc.alloc.rate:      10.954 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 89811.403 ops/s
[info]                  ·gc.alloc.rate:      10.959 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   89663.261 ±(99.9%) 772.971 ops/s [Average]
[info]   (min, avg, max) = (89400.346, 89663.261, 89829.388), stdev = 200.738
[info]   CI (99.9%): [88890.290, 90436.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.941 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (10.908, 10.941, 10.963), stdev = 0.025
[info]   CI (99.9%): [10.844, 11.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.005, 192.005, 192.005), stdev = 0.001
[info]   CI (99.9%): [192.005, 192.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.80% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284386.378 ops/s
[info] # Warmup Iteration   2: 331231.489 ops/s
[info] # Warmup Iteration   3: 335391.835 ops/s
[info] Iteration   1: 338974.988 ops/s
[info]                  ·gc.alloc.rate:                   1964.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              9120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9315.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 337837.708 ops/s
[info]                  ·gc.alloc.rate:                   1957.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              9120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7832.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 338364.314 ops/s
[info]                  ·gc.alloc.rate:                   1960.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              9120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9422.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 338312.651 ops/s
[info]                  ·gc.alloc.rate:                   1960.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              9120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9454.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 335732.760 ops/s
[info]                  ·gc.alloc.rate:                   1945.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              9120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9546.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   337844.484 ±(99.9%) 4804.388 ops/s [Average]
[info]   (min, avg, max) = (335732.760, 337844.484, 338974.988), stdev = 1247.684
[info]   CI (99.9%): [333040.096, 342648.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1957.847 ±(99.9%) 28.061 MB/sec [Average]
[info]   (min, avg, max) = (1945.538, 1957.847, 1964.587), stdev = 7.287
[info]   CI (99.9%): [1929.786, 1985.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9120.001, 9120.001, 9120.001), stdev = 0.001
[info]   CI (99.9%): [9120.001, 9120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1956.621 ±(99.9%) 593.796 MB/sec [Average]
[info]   (min, avg, max) = (1681.521, 1956.621, 2036.534), stdev = 154.207
[info]   CI (99.9%): [1362.825, 2550.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9114.515 ±(99.9%) 2777.307 B/op [Average]
[info]   (min, avg, max) = (7832.744, 9114.515, 9546.562), stdev = 721.258
[info]   CI (99.9%): [6337.208, 11891.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.310 ±(99.9%) 0.312 B/op [Average]
[info]   (min, avg, max) = (0.194, 0.310, 0.388), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.04% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219072.499 ops/s
[info] # Warmup Iteration   2: 446284.735 ops/s
[info] # Warmup Iteration   3: 447180.060 ops/s
[info] Iteration   1: 445790.061 ops/s
[info]                  ·gc.alloc.rate:                   543.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2054.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 452114.664 ops/s
[info]                  ·gc.alloc.rate:                   551.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2269.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 452468.079 ops/s
[info]                  ·gc.alloc.rate:                   552.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1133.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 452242.432 ops/s
[info]                  ·gc.alloc.rate:                   551.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2269.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 436933.486 ops/s
[info]                  ·gc.alloc.rate:                   533.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2353.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   447909.744 ±(99.9%) 25988.513 ops/s [Average]
[info]   (min, avg, max) = (436933.486, 447909.744, 452468.079), stdev = 6749.134
[info]   CI (99.9%): [421921.231, 473898.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   546.470 ±(99.9%) 31.698 MB/sec [Average]
[info]   (min, avg, max) = (533.103, 546.470, 552.035), stdev = 8.232
[info]   CI (99.9%): [514.773, 578.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   573.090 ±(99.9%) 545.233 MB/sec [Average]
[info]   (min, avg, max) = (325.785, 573.090, 653.590), stdev = 141.595
[info]   CI (99.9%): [27.856, 1118.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2016.048 ±(99.9%) 1947.929 B/op [Average]
[info]   (min, avg, max) = (1133.092, 2016.048, 2353.946), stdev = 505.871
[info]   CI (99.9%): [68.119, 3963.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.499 ±(99.9%) 3.893 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.499, 2.307), stdev = 1.011
[info]   CI (99.9%): [≈ 0, 4.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.760 ±(99.9%) 13.744 B/op [Average]
[info]   (min, avg, max) = (0.145, 1.760, 8.145), stdev = 3.569
[info]   CI (99.9%): [≈ 0, 15.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.29% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1154844.271 ops/s
[info] # Warmup Iteration   2: 1215792.715 ops/s
[info] # Warmup Iteration   3: 1227417.857 ops/s
[info] Iteration   1: 1232624.593 ops/s
[info]                  ·gc.alloc.rate:                   645.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1229266.117 ops/s
[info]                  ·gc.alloc.rate:                   643.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     851.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1233534.298 ops/s
[info]                  ·gc.alloc.rate:                   646.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     848.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1226702.310 ops/s
[info]                  ·gc.alloc.rate:               642.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 426.465 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1227806.515 ops/s
[info]                  ·gc.alloc.rate:                   642.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     853.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1229986.767 ±(99.9%) 11488.156 ops/s [Average]
[info]   (min, avg, max) = (1226702.310, 1229986.767, 1233534.298), stdev = 2983.438
[info]   CI (99.9%): [1218498.611, 1241474.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   644.016 ±(99.9%) 6.263 MB/sec [Average]
[info]   (min, avg, max) = (642.265, 644.016, 646.058), stdev = 1.626
[info]   CI (99.9%): [637.753, 650.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   598.708 ±(99.9%) 573.235 MB/sec [Average]
[info]   (min, avg, max) = (332.408, 598.708, 666.133), stdev = 148.867
[info]   CI (99.9%): [25.473, 1171.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   765.803 ±(99.9%) 730.496 B/op [Average]
[info]   (min, avg, max) = (426.465, 765.803, 853.878), stdev = 189.707
[info]   CI (99.9%): [35.307, 1496.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.091 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.159), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.53% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72988.169 ops/s
[info] # Warmup Iteration   2: 113350.063 ops/s
[info] # Warmup Iteration   3: 113866.588 ops/s
[info] Iteration   1: 115376.815 ops/s
[info]                  ·gc.alloc.rate:                   4010.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3719.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50733.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.136 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 113171.924 ops/s
[info]                  ·gc.alloc.rate:                   3934.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56667.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.026 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 113958.524 ops/s
[info]                  ·gc.alloc.rate:                   3961.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56405.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.150 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 115191.413 ops/s
[info]                  ·gc.alloc.rate:                   4003.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51162.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.275 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 114895.641 ops/s
[info]                  ·gc.alloc.rate:                   3994.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55955.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.281 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   114518.863 ±(99.9%) 3580.576 ops/s [Average]
[info]   (min, avg, max) = (113171.924, 114518.863, 115376.815), stdev = 929.864
[info]   CI (99.9%): [110938.288, 118099.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3980.833 ±(99.9%) 123.207 MB/sec [Average]
[info]   (min, avg, max) = (3934.399, 3980.833, 4010.128), stdev = 31.996
[info]   CI (99.9%): [3857.626, 4104.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.004), stdev = 0.001
[info]   CI (99.9%): [54704.003, 54704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3941.940 ±(99.9%) 739.812 MB/sec [Average]
[info]   (min, avg, max) = (3719.041, 3941.940, 4085.853), stdev = 192.127
[info]   CI (99.9%): [3202.128, 4681.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54184.827 ±(99.9%) 11436.017 B/op [Average]
[info]   (min, avg, max) = (50733.151, 54184.827, 56667.515), stdev = 2969.897
[info]   CI (99.9%): [42748.810, 65620.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.774 ±(99.9%) 2.253 B/op [Average]
[info]   (min, avg, max) = (1.136, 1.774, 2.281), stdev = 0.585
[info]   CI (99.9%): [≈ 0, 4.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   58.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.78% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234791.633 ops/s
[info] # Warmup Iteration   2: 316065.781 ops/s
[info] # Warmup Iteration   3: 320541.004 ops/s
[info] Iteration   1: 317126.059 ops/s
[info]                  ·gc.alloc.rate:                   1088.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4910.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 314911.633 ops/s
[info]                  ·gc.alloc.rate:                   1080.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6611.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 320619.233 ops/s
[info]                  ·gc.alloc.rate:                   1100.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4890.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 319570.554 ops/s
[info]                  ·gc.alloc.rate:                   1096.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4929.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 320864.767 ops/s
[info]                  ·gc.alloc.rate:                   1101.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6569.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.511 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   318618.449 ±(99.9%) 9802.763 ops/s [Average]
[info]   (min, avg, max) = (314911.633, 318618.449, 320864.767), stdev = 2545.746
[info]   CI (99.9%): [308815.686, 328421.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1093.337 ±(99.9%) 33.593 MB/sec [Average]
[info]   (min, avg, max) = (1080.449, 1093.337, 1101.151), stdev = 8.724
[info]   CI (99.9%): [1059.744, 1126.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5400.001, 5400.001, 5400.001), stdev = 0.001
[info]   CI (99.9%): [5400.001, 5400.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1129.912 ±(99.9%) 708.224 MB/sec [Average]
[info]   (min, avg, max) = (989.979, 1129.912, 1339.583), stdev = 183.924
[info]   CI (99.9%): [421.687, 1838.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5582.298 ±(99.9%) 3544.878 B/op [Average]
[info]   (min, avg, max) = (4890.307, 5582.298, 6611.757), stdev = 920.594
[info]   CI (99.9%): [2037.420, 9127.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.329 ±(99.9%) 0.586 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.329, 0.511), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.02% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 392598.450 ops/s
[info] # Warmup Iteration   2: 629047.988 ops/s
[info] # Warmup Iteration   3: 637775.235 ops/s
[info] Iteration   1: 640085.590 ops/s
[info]                  ·gc.alloc.rate:               494.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          1216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 628.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 631659.528 ops/s
[info]                  ·gc.alloc.rate:                   488.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              1216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1623.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 639655.462 ops/s
[info]                  ·gc.alloc.rate:               494.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          1216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 801.511 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 641571.459 ops/s
[info]                  ·gc.alloc.rate:                   495.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              1216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1599.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 638160.042 ops/s
[info]                  ·gc.alloc.rate:                   493.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              1216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1610.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   638226.416 ±(99.9%) 14890.650 ops/s [Average]
[info]   (min, avg, max) = (631659.528, 638226.416, 641571.459), stdev = 3867.054
[info]   CI (99.9%): [623335.766, 653117.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   493.095 ±(99.9%) 11.473 MB/sec [Average]
[info]   (min, avg, max) = (488.034, 493.095, 495.676), stdev = 2.979
[info]   CI (99.9%): [481.622, 504.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1216.001, 1216.001), stdev = 0.001
[info]   CI (99.9%): [1216.001, 1216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507.540 ±(99.9%) 767.919 MB/sec [Average]
[info]   (min, avg, max) = (255.796, 507.540, 652.843), stdev = 199.426
[info]   CI (99.9%): [≈ 0, 1275.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1252.587 ±(99.9%) 1903.661 B/op [Average]
[info]   (min, avg, max) = (628.983, 1252.587, 1623.316), stdev = 494.375
[info]   CI (99.9%): [≈ 0, 3156.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.497 ±(99.9%) 4.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.497, 2.380), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.237 ±(99.9%) 10.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.237, 5.930), stdev = 2.624
[info]   CI (99.9%): [≈ 0, 11.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.27% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1626976.879 ops/s
[info] # Warmup Iteration   2: 1803646.233 ops/s
[info] # Warmup Iteration   3: 1845524.350 ops/s
[info] Iteration   1: 1844242.840 ops/s
[info]                  ·gc.alloc.rate:                   853.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1808677.107 ops/s
[info]                  ·gc.alloc.rate:                   836.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     577.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1836371.673 ops/s
[info]                  ·gc.alloc.rate:                   849.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     854.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1837729.831 ops/s
[info]                  ·gc.alloc.rate:                   850.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     855.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1843123.693 ops/s
[info]                  ·gc.alloc.rate:                   852.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     570.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1834029.029 ±(99.9%) 56097.245 ops/s [Average]
[info]   (min, avg, max) = (1808677.107, 1834029.029, 1844242.840), stdev = 14568.276
[info]   CI (99.9%): [1777931.784, 1890126.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   848.425 ±(99.9%) 25.642 MB/sec [Average]
[info]   (min, avg, max) = (836.867, 848.425, 853.268), stdev = 6.659
[info]   CI (99.9%): [822.783, 874.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   864.609 ±(99.9%) 698.513 MB/sec [Average]
[info]   (min, avg, max) = (663.682, 864.609, 999.273), stdev = 181.402
[info]   CI (99.9%): [166.096, 1563.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   741.411 ±(99.9%) 588.792 B/op [Average]
[info]   (min, avg, max) = (570.554, 741.411, 855.768), stdev = 152.907
[info]   CI (99.9%): [152.619, 1330.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.061, 0.071), stdev = 0.010
[info]   CI (99.9%): [0.024, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.51% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1721378.074 ops/s
[info] # Warmup Iteration   2: 1908113.787 ops/s
[info] # Warmup Iteration   3: 1924252.180 ops/s
[info] Iteration   1: 1924296.710 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1923735.691 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1924268.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1924669.789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1925341.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1924462.378 ±(99.9%) 2285.521 ops/s [Average]
[info]   (min, avg, max) = (1923735.691, 1924462.378, 1925341.533), stdev = 593.543
[info]   CI (99.9%): [1922176.857, 1926747.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_171, VM 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260589.204 ops/s
[info] # Warmup Iteration   2: 342039.612 ops/s
[info] # Warmup Iteration   3: 334767.519 ops/s
[info] Iteration   1: 344457.596 ops/s
[info]                  ·gc.alloc.rate:                   509.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          584.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2670.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 345825.440 ops/s
[info]                  ·gc.alloc.rate:                   511.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1496.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 345752.341 ops/s
[info]                  ·gc.alloc.rate:                   511.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2989.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 346158.133 ops/s
[info]                  ·gc.alloc.rate:               512.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1494.690 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 346117.687 ops/s
[info]                  ·gc.alloc.rate:                   511.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2992.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   345662.239 ±(99.9%) 2681.152 ops/s [Average]
[info]   (min, avg, max) = (344457.596, 345662.239, 346158.133), stdev = 696.287
[info]   CI (99.9%): [342981.087, 348343.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   511.294 ±(99.9%) 3.993 MB/sec [Average]
[info]   (min, avg, max) = (509.495, 511.294, 512.018), stdev = 1.037
[info]   CI (99.9%): [507.301, 515.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.001, 2328.001, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.001, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   511.401 ±(99.9%) 652.176 MB/sec [Average]
[info]   (min, avg, max) = (328.740, 511.401, 658.166), stdev = 169.368
[info]   CI (99.9%): [≈ 0, 1163.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2328.850 ±(99.9%) 2972.604 B/op [Average]
[info]   (min, avg, max) = (1494.690, 2328.850, 2992.807), stdev = 771.976
[info]   CI (99.9%): [≈ 0, 5301.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.438 ±(99.9%) 3.412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.021), stdev = 0.886
[info]   CI (99.9%): [≈ 0, 3.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.999 ±(99.9%) 15.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.999, 9.236), stdev = 4.049
[info]   CI (99.9%): [≈ 0, 17.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:27:10
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    804013.245 ±   25110.033   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      2117.251 ±      66.934  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      2086.554 ±     591.019  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5      4084.411 ±    1183.546    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0.079 ±       0.105  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0.155 ±       0.204    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1620969.132 ±   69343.192   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1153.636 ±      48.845  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1185.544 ±     696.864  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      1150.654 ±     666.023    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.092 ±       0.122  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.089 ±       0.117    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        18.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   3566783.993 ±  134810.258   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       235.712 ±       8.928  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       204.665 ±     440.558  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5        90.010 ±     193.773    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.004 ±       0.031    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         7.000                    ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    173242.379 ±    3307.586   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1440.665 ±      27.314  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     13088.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1455.704 ±     663.936  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5     13220.776 ±    5863.342    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.083 ±       0.098  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.757 ±       0.900    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        22.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        22.000                    ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    526948.388 ±   10701.065   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1832.347 ±      37.104  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      5472.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      1810.733 ±     673.396  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5      5406.296 ±    1946.828    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.071 ±       0.091  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.212 ±       0.277    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        27.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        23.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2028235.534 ±   70431.614   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       783.612 ±      27.291  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       608.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       784.952 ±     694.957  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       608.801 ±     533.137    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.046 ±       0.105  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.035 ±       0.081    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        12.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        12.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5   7223067.890 ±  134905.564   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       367.243 ±       6.880  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       367.528 ±     310.074  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        80.045 ±      67.049    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.369 ±       2.953  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.081 ±       0.645    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         9.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  10630023.009 ±  414055.429   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    322520.445 ±    2865.027   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5       998.469 ±       8.492  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      4872.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5       984.587 ±      25.880  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      4804.267 ±     123.228    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.062 ±       0.139  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.305 ±       0.681    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1720710.571 ±   46223.712   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2668.187 ±      70.748  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2440.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2641.014 ±     596.262  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      2414.535 ±     492.569    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.100 ±       0.132  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.091 ±       0.122    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        39.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        34.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5   9860281.092 ±  337839.526   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1202.984 ±      41.211  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1180.601 ±     685.225  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       188.546 ±     112.756    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.481 ±       3.975  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.078 ±       0.644    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5        18.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2604899.687 ±  107083.293   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1827.410 ±      74.173  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1802.780 ±     682.278  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      1089.153 ±     411.045    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.125 ±       0.234  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.075 ±       0.140    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5   9696582.907 ±  317014.981   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1232.351 ±      40.892  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1209.092 ±     713.044  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       196.178 ±     114.220    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.062 ±       0.150  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.010 ±       0.024    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        18.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    630312.159 ±   20509.046   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1666.229 ±      53.421  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1662.973 ±      71.725  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4151.900 ±     137.423    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.092 ±       0.185  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.229 ±       0.470    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   1880173.337 ±  112062.996   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1892.543 ±     113.420  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1584.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1880.219 ±     678.513  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1573.027 ±     527.475    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.067 ±       0.132  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.056 ±       0.111    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        28.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  18593111.197 ±  230978.794   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       567.143 ±       7.341  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       570.855 ±     544.523  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        48.301 ±      45.902    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.006    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   6051832.624 ±  305294.178   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1661.294 ±      83.116  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1662.842 ±      74.209  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       432.470 ±      31.226    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.087 ±       0.183  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.023 ±       0.047    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  24162837.824 ± 1703676.923   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       737.053 ±      51.734  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       730.349 ±     569.435  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        47.522 ±      35.575    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.075 ±       0.193  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.005 ±       0.012    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  27912940.539 ±   37825.133   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1336916.606 ±   48750.326   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1977.712 ±      72.134  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2328.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1940.433 ±     537.563  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2283.995 ±     621.312    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.112 ±       0.122  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.132 ±       0.143    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        29.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5        28.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    338011.257 ±    8002.018   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2015.487 ±      47.714  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      9384.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2024.535 ±      47.441  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9426.377 ±     293.770    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.087 ±       0.191  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.408 ±       0.897    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        30.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        25.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    484856.679 ±    2494.481   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       660.510 ±       3.517  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2144.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       652.833 ±       5.265  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2119.081 ±      12.436    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.529 ±       4.153  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.721 ±      13.512    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1302509.773 ±    8645.556   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       867.304 ±       5.799  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       866.533 ±     706.850  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1047.085 ±     854.461    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.080 ±       0.106    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        13.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    114437.771 ±    3986.192   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      3962.684 ±     138.781  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54496.004 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      3941.812 ±     709.636  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     54224.511 ±   11064.586    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.129 ±       0.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1.775 ±       1.436    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        58.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        51.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    318579.732 ±    8612.242   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1084.947 ±      29.318  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      5360.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1062.620 ±     570.927  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5251.941 ±    2907.536    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.371 ±       0.458    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5        16.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5        14.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    665795.014 ±   34774.866   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       490.719 ±      25.615  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       441.918 ±     743.636  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1046.736 ±    1781.061    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.506 ±       4.182  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.193 ±       9.845    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        10.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   2147853.798 ±   33847.138   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       993.545 ±      15.906  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       999.271 ±      18.489  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       732.198 ±       9.894    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.049 ±       0.050    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        15.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        12.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2675659.085 ±   17717.833   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    393766.350 ±    3663.094   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       566.443 ±       5.114  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       525.877 ±     692.380  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2102.838 ±    2779.298    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.429 ±       3.474  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.713 ±      13.854    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     18971.490 ±     400.433   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1367.889 ±      28.871  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    113478.530 ±      11.381    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1339.324 ±      31.633  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    111112.081 ±    3874.317    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.079 ±       0.215  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6.548 ±      17.730    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     30826.640 ±    1680.232   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       827.634 ±      45.794  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     42253.986 ±      51.416    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       788.066 ±     691.697  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     40231.986 ±   35205.237    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.046 ±       0.154  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.318 ±       7.730    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     39978.489 ±     210.701   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       537.144 ±       2.732  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     21144.011 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       531.916 ±     701.327  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     20943.026 ±   27665.658    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.359 ±       2.605  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        14.136 ±     102.434    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     25273.471 ±    1015.944   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1308.208 ±      52.333  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     81456.019 ±       0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1328.254 ±      42.789  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     82710.405 ±    3924.105    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         5.700 ±      10.303    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     27281.736 ±     885.606   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1868.178 ±      60.001  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5    107763.558 ±      68.003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1881.471 ±     742.943  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    108545.934 ±   43438.072    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.104 ±       0.127  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.999 ±       7.211    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        28.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     27154.785 ±    1139.579   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1592.840 ±      67.056  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     92312.018 ±       0.010    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1596.790 ±     573.527  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     92551.125 ±   33458.831    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         3.621 ±       8.704    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     30310.920 ±     551.615   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1681.906 ±      30.494  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     87328.016 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1680.024 ±      42.816  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     87232.563 ±    3119.372    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.108 ±       0.154  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         5.624 ±       8.055    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        25.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     30005.603 ±    1189.459   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1606.438 ±      62.966  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     84248.015 ±       0.010    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5      1544.539 ±     711.488  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     80935.737 ±   34552.676    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.083 ±       0.160  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         4.369 ±       8.393    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        23.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5        20.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5      8382.058 ±     222.883   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1185.359 ±      31.855  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    222544.232 ±       1.548    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1194.633 ±     683.297  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    224288.948 ±  128258.023    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        14.098 ±      25.455    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     17920.461 ±     800.726   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1545.728 ±      69.173  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    135733.779 ±      17.452    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1543.933 ±     706.654  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    135636.295 ±   64075.099    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.071 ±       0.176  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         6.211 ±      15.293    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        23.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        21.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     41551.805 ±    1465.628   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1147.247 ±      41.037  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     43448.131 ±       1.040    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1190.970 ±     698.912  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     45126.637 ±   27103.276    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.361 ±       4.237    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     60299.101 ±    1943.161   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       779.302 ±      24.910  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       799.290 ±     704.182  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     20855.089 ±   18300.842    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.054 ±       0.238  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.409 ±       6.203    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     30535.881 ±     993.680   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2071.049 ±      67.421  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    106744.016 ±       0.010    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2079.346 ±     617.178  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    107199.429 ±   33439.300    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         4.511 ±       7.403    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        31.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        33.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     28007.185 ±     909.417   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1687.243 ±      54.857  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     94808.017 ±       0.012    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1667.624 ±      67.551  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     93705.289 ±    2005.752    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4.677 ±       5.454    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        25.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     37635.168 ±     342.108   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1611.955 ±      14.905  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     67408.012 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1612.689 ±     577.207  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     67431.215 ±   23780.412    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.961 ±       5.086    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        20.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     37006.587 ±     715.752   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1641.061 ±      30.755  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     69784.012 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1681.051 ±      43.716  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     71487.146 ±    2937.317    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.071 ±       0.108  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         3.008 ±       4.550    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        25.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    321046.852 ±   15161.348   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1764.348 ±      82.126  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      8648.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1750.505 ±     542.680  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      8576.783 ±    2388.014    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.079 ±       0.200  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.386 ±       0.967    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        26.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1409446.106 ±   77092.635   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       444.229 ±      24.406  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5       426.174 ±     568.749  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       476.358 ±     639.126    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.014 ±       0.083  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.016 ±       0.093    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    689504.902 ±   26407.679   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       571.356 ±      21.483  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       523.554 ±     690.081  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1197.572 ±    1607.179    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.438 ±       3.545  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.991 ±       8.027    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1735542.300 ±   17884.526   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       335.238 ±       3.491  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       301.778 ±     161.639  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       273.673 ±     147.031    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.332 ±       2.674  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.303 ±       2.437    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    106341.596 ±    1220.240   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3863.407 ±      44.318  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3804.956 ±     601.263  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     56314.005 ±    9243.967    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.108 ±       0.119  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.601 ±       1.751    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        56.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        46.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    321207.460 ±    4405.286   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1097.203 ±      15.266  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      5376.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1129.613 ±     708.540  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      5534.334 ±    3455.791    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.071 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.347 ±       0.356    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1494967.696 ±   48580.541   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       691.529 ±      22.549  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5       716.468 ±     570.274  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       753.755 ±     584.398    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.478 ±       3.979  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.505 ±       4.207    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5    917886.954 ±   47445.060   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       648.586 ±      33.305  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       655.299 ±       6.508  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1123.692 ±      66.560    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.469 ±       3.590  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.789 ±       6.026    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   2593923.234 ±  107960.904   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1199.976 ±      49.965  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1201.323 ±     690.257  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       729.009 ±     423.677    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.045 ±       0.100    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        18.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   2261828.466 ±    8096.568   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    487377.602 ±   57992.637   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       569.784 ±      67.786  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       591.849 ±     567.093  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1917.279 ±    1906.451    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.438 ±       3.456  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.392 ±      10.977    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    171592.806 ±    7084.392   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2109.232 ±      87.303  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     19344.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2093.848 ±     591.221  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     19203.014 ±    5362.044    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.725 ±       0.945    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        31.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    419280.574 ±   26868.172   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       347.390 ±      22.304  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       349.593 ±     368.258  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1317.157 ±    1491.456    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.439 ±       3.632  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.637 ±      13.543    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5    963118.057 ±   57685.071   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       186.051 ±      11.020  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       153.509 ±     539.607  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       252.136 ±     886.591    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.001 ±       0.010  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.002 ±       0.016    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     82018.390 ±    1578.919   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3384.937 ±      64.444  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     64952.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3324.266 ±     562.489  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     63779.181 ±    9791.056    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.129 ±       0.191  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2.477 ±       3.679    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        49.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        42.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    275576.775 ±    8444.518   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1519.995 ±      47.288  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8680.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1472.494 ±     709.619  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8409.111 ±    4057.767    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.451 ±       0.586    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        22.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        18.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   1641802.597 ±   12527.303   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       843.108 ±       6.337  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       855.488 ±     702.558  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       819.935 ±     674.735    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.071 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.068 ±       0.069    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   1983360.985 ±  128420.736   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       534.405 ±      34.739  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       530.363 ±     698.551  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       420.784 ±     553.832    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.381 ±       2.883  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.307 ±       2.325    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1964607.138 ±   70898.535   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     38363.784 ±     850.721   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1673.634 ±      37.725  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     68656.626 ±       5.290    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1674.706 ±      54.490  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     68703.233 ±    3058.599    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         3.413 ±       4.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    231975.830 ±    5146.421   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2463.364 ±      54.095  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16712.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2505.342 ±     728.342  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     16997.514 ±    4974.505    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.104 ±       0.150  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.707 ±       1.028    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        37.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        31.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    311516.479 ±   16066.763   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1559.776 ±      81.292  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7880.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1532.761 ±     691.603  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7743.547 ±    3481.740    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.087 ±       0.104  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.442 ±       0.534    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        23.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1150605.972 ±   11795.068   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       397.734 ±       4.243  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       368.274 ±     308.481  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       503.881 ±     426.821    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.325 ±       2.624  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.446 ±       3.599    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     77835.588 ±    2643.090   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3168.858 ±     108.385  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     64064.006 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3115.017 ±     605.946  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     62966.244 ±   11031.401    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.104 ±       0.170  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2.106 ±       3.454    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        46.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        48.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    212135.079 ±    3340.751   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      2089.011 ±      32.348  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15496.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2089.280 ±     528.919  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     15499.911 ±    4064.034    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.125 ±       0.179  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.926 ±       1.321    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        31.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1159185.702 ±   56975.988   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       677.612 ±      33.252  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       655.904 ±       7.702  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       890.626 ±      37.980    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.062 ±       0.212  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.085 ±       0.294    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2852768.579 ±  116946.370   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       971.623 ±      40.041  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       999.162 ±      15.171  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       551.237 ±      21.488    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.075 ±       0.108  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.041 ±       0.061    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2542282.934 ±   12981.892   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    275850.558 ±    4311.385   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2258.002 ±      36.317  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2220.866 ±     729.722  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12666.673 ±    4077.279    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.133 ±       0.176  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.760 ±       1.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        33.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        32.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     25217.381 ±    1367.044   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1588.098 ±      85.071  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     99109.053 ±      28.130    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1612.001 ±     566.116  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    100624.632 ±   36088.159    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         4.692 ±       9.303    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5     89252.215 ±    4701.966   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       841.612 ±      44.446  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14840.005 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       849.325 ±     693.910  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     14984.134 ±   12374.862    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.483 ±       3.950  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         8.635 ±      70.669    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     56986.814 ±    2261.283   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       999.014 ±      39.762  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     27584.008 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       989.055 ±      24.968  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     27310.214 ±     698.308    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.956 ±       1.250    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5        15.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    117952.234 ±    3799.713   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       793.265 ±      25.808  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10584.004 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       799.186 ±     704.481  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     10658.987 ±    9300.075    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.067 ±       0.164  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.886 ±       2.187    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     33719.907 ±    1498.407   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1725.490 ±      76.538  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     80536.014 ±       0.010    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1673.142 ±      57.215  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     78101.236 ±    4463.733    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         4.080 ±       4.088    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        25.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     39230.347 ±    1909.624   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       618.794 ±      29.982  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     24824.759 ±       6.436    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       593.335 ±     565.264  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     23848.538 ±   23245.628    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.406 ±       3.098  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        16.582 ±     126.686    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     41795.312 ±     427.450   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       420.218 ±       4.260  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     15824.011 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       429.327 ±     573.542  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16169.243 ±   21618.146    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.431 ±       3.492  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        16.282 ±     131.832    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     43986.245 ±    1300.608   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       431.590 ±      12.651  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     15440.010 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       433.724 ±     577.726  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     15518.684 ±   20712.074    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.373 ±       2.902  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        13.489 ±     105.006    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     44199.805 ±    3229.083   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       383.082 ±      27.911  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     13640.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5       367.469 ±     490.339  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     13149.101 ±   18727.872    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.381 ±       3.084  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        14.000 ±     113.492    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     14942.184 ±     346.936   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1066.763 ±      24.466  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    112346.307 ±      25.292    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1066.452 ±     581.759  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    112299.213 ±   60619.717    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.100 ±       0.236  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.519 ±      24.820    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        14.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     15977.801 ±     805.615   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       969.426 ±      48.755  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     95483.706 ±      55.164    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       989.412 ±      24.352  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     97459.706 ±    2972.915    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.141 ±       5.308    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        14.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     77986.845 ±    1420.656   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       202.975 ±       3.634  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       204.655 ±     440.536  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4135.374 ±    8902.016    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.006 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.126 ±       0.723    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     12935.698 ±     204.788   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1239.654 ±      19.240  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    150816.064 ±       0.253    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1193.989 ±     701.450  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    145326.704 ±   87257.091    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.584 ±       8.719    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     55930.717 ±    1200.744   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1386.749 ±      29.674  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     39016.008 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1401.662 ±     541.745  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     39431.274 ±   14978.591    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.993 ±       3.433    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        21.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        19.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5     79995.164 ±    2693.101   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1211.470 ±      40.563  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     23832.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1193.214 ±     700.195  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     23463.626 ±   13474.211    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.071 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1.393 ±       1.422    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        18.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    212831.645 ±   10561.822   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       337.527 ±      16.756  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       352.519 ±     365.031  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2606.052 ±    2678.062    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.367 ±       3.025  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.767 ±      22.844    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    231046.435 ±    1050.102   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     53117.373 ±    2188.404   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1002.971 ±      41.147  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     29712.008 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1060.199 ±     553.573  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     31397.661 ±   15922.756    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.976 ±       2.032    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     26486.066 ±     362.731   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       588.358 ±       8.070  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34959.898 ±       1.019    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       592.294 ±     567.902  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     35198.045 ±   33801.151    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.392 ±       3.151  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        23.279 ±     187.259    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5     87643.447 ±    3957.845   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1207.412 ±      54.461  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     21680.005 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1192.452 ±     708.943  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     21428.693 ±   13212.518    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.062 ±       0.170  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.123 ±       3.056    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        18.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        16.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    124853.039 ±    8553.162   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       487.390 ±      33.369  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144.004 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       515.793 ±     657.287  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      6520.247 ±    8533.995    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.354 ±       2.652  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.447 ±      33.239    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     21841.214 ±     685.403   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1220.348 ±      38.637  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     87928.055 ±       0.286    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1254.513 ±     569.465  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     90415.464 ±   41822.109    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         4.809 ±       8.654    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        21.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    168660.368 ±    4874.322   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1103.448 ±      31.830  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1129.398 ±     693.140  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     10541.763 ±    6577.158    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.698 ±       0.838    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    551968.643 ±    5534.541   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       558.393 ±       5.492  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       523.528 ±     691.217  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1493.235 ±    1978.432    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.450 ±       3.563  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.283 ±      10.153    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    589294.747 ±    4047.209   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       452.313 ±       3.189  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       448.595 ±     761.127  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1198.567 ±    2039.682    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.386 ±       2.894  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.034 ±       7.741    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    604971.325 ±     544.685   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    333199.828 ±    8134.630   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       921.409 ±      22.736  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       918.828 ±     560.143  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4341.176 ±    2678.391    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.353 ±       0.424    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     35830.747 ±    1444.337   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1688.660 ±      68.954  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     74160.013 ±       0.010    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1681.228 ±      42.605  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     73837.242 ±    2066.748    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.286 ±       6.341    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    289499.232 ±    6569.529   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       300.231 ±       6.659  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632.002 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       282.612 ±     141.102  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1535.846 ±     751.063    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.003 ±       0.023  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.015 ±       0.127    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5     93503.887 ±    5126.345   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1091.295 ±      59.972  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     18368.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1056.870 ±     555.626  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17782.337 ±    9014.128    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.046 ±       0.067  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.773 ±       1.162    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    381509.292 ±   50605.336   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       248.226 ±      32.949  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       219.967 ±     490.425  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       895.722 ±    2011.219    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.320 ±       2.656  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.324 ±      11.002    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     38602.674 ±    1114.738   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2023.755 ±      58.004  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     82505.094 ±       9.313    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2015.755 ±      67.593  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     82180.152 ±    2400.210    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         3.057 ±       2.948    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        30.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5     85806.737 ±    2543.271   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       685.709 ±      19.927  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     12576.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       659.963 ±       6.202  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     12104.516 ±     451.520    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.220 ±       1.892    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    109604.697 ±    5995.449   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       405.627 ±      22.251  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      5824.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       426.160 ±     675.782  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      6115.158 ±    9701.306    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.070  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.175 ±       1.012    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5     96647.136 ±    5055.442   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       381.223 ±      19.951  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6208.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       363.852 ±     485.473  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5923.270 ±    7821.379    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.431 ±       3.535  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.984 ±      57.197    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    112866.996 ±    1824.716   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       417.704 ±       6.878  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5824.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       434.097 ±     577.662  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      6055.520 ±    8088.340    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.371 ±       2.906  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         5.168 ±      40.475    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    112754.902 ±    1716.904   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       328.478 ±       5.136  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      4584.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5       352.454 ±     365.059  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      4922.508 ±    5187.042    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.375 ±       3.031  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         5.229 ±      42.217    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5      9555.403 ±     323.821   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1586.852 ±      52.764  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    261291.955 ±      26.687    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1543.682 ±     712.237  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    254105.986 ±  113995.264    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         8.932 ±      15.236    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     10100.822 ±     137.694   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1556.122 ±      21.147  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    242465.096 ±      54.119    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1532.648 ±     691.575  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    238753.968 ±  105544.713    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.071 ±       0.108  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        11.033 ±      16.807    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    113546.891 ±    6946.431   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       295.526 ±      18.172  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       286.592 ±     162.221  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3968.343 ±    2095.524    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.333 ±       2.647  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         4.564 ±      36.243    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      5658.962 ±     229.077   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1506.982 ±      60.758  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    419048.164 ±       0.741    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1532.163 ±     703.118  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    426335.620 ±  205624.790    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        17.385 ±      16.164    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     24101.790 ±     414.954   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1775.343 ±      29.936  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5    115920.419 ±     128.915    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1812.634 ±     702.901  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    118351.979 ±   45693.970    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.096 ±       0.108  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6.257 ±       7.099    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        27.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     29476.221 ±    1166.210   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1766.070 ±      70.330  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     94288.016 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1805.543 ±     666.071  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     96370.970 ±   33978.459    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.092 ±       0.201  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         4.891 ±      10.719    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        27.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    351937.674 ±    3444.895   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       778.308 ±       7.680  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       797.021 ±     703.384  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3563.631 ±    3143.782    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.062 ±       0.188  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.279 ±       0.840    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    412014.600 ±    2507.092   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     29397.675 ±     743.396   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1928.488 ±      48.269  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    103240.016 ±       0.009    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1881.461 ±     720.291  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    100720.897 ±   38389.049    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.117 ±       0.217  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.252 ±      11.762    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        28.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5    129361.496 ±    5885.827   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      2227.800 ±     101.284  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     27104.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2230.553 ±     688.458  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     27140.716 ±    8471.258    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.096 ±       0.134  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         1.162 ±       1.600    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        33.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    427983.709 ±    8671.469   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       443.828 ±       9.109  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       426.171 ±     568.835  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1568.237 ±    2106.299    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.046 ±       0.264    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    303317.280 ±   14415.492   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       428.604 ±      20.404  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       429.252 ±     573.730  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2227.048 ±    2958.383    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.448 ±       3.524  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.354 ±      18.554    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    699549.314 ±   32383.789   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       455.204 ±      21.137  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       450.142 ±     764.976  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1011.888 ±    1708.091    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.342 ±       2.731  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.767 ±       6.125    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     70651.118 ±    2580.771   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3001.340 ±     109.598  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     66856.006 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2980.731 ±     574.839  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     66411.168 ±   13865.197    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.112 ±       0.146  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         2.509 ±       3.335    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        44.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        40.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    210391.361 ±    5723.943   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1713.417 ±      46.052  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12816.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1678.326 ±      52.168  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     12553.805 ±     406.004    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.100 ±       0.191  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.748 ±       1.433    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5    910503.952 ±   88326.861   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       495.256 ±      47.855  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       505.466 ±     763.223  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       874.974 ±    1325.684    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.013 ±       0.046  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.022 ±       0.080    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    830475.333 ±   38418.586   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       654.332 ±      30.267  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       655.252 ±       6.126  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1241.881 ±      55.942    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.463 ±       3.536  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.874 ±       6.676    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1011701.735 ±   30489.160   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       550.266 ±      16.678  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       530.811 ±     699.805  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       824.063 ±    1067.609    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.389 ±       2.856  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.607 ±       4.468    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1001206.411 ±   22019.139   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     30483.346 ±    1453.371   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1677.257 ±      80.145  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86587.131 ±      26.839    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1674.942 ±      54.690  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     86471.792 ±    2066.264    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         4.295 ±       7.634    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    133115.632 ±     466.339   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1828.210 ±       6.446  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     21616.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1813.196 ±     714.302  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     21438.846 ±    8462.793    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.087 ±       0.183  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.034 ±       2.164    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        27.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    197763.502 ±    3467.555   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1180.357 ±      20.191  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9392.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1189.673 ±     676.329  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9464.446 ±    5325.750    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.092 ±       0.257  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.729 ±       2.044    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        18.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    268388.102 ±    3131.067   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       873.151 ±       9.564  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       866.717 ±     704.606  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      5084.044 ±    4168.371    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.062 ±       0.170  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.367 ±       1.002    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     65849.826 ±    4056.126   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2736.219 ±     169.737  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65392.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2701.025 ±      79.543  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     64570.038 ±    5768.563    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.142 ±       0.222  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.389 ±       5.447    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        40.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        43.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    166105.898 ±    6094.034   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1086.615 ±      39.886  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1129.623 ±     708.739  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10706.521 ±    6794.297    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.751 ±       1.263    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        17.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    564374.986 ±   32554.122   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       570.880 ±      32.979  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       522.656 ±     688.708  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1452.539 ±    1856.592    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.460 ±       3.697  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1.314 ±      10.577    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    573851.591 ±    6521.090   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       440.501 ±       4.851  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       448.470 ±     760.466  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1230.342 ±    2091.953    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.385 ±       3.051  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.058 ±       8.378    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    614729.611 ±     578.437   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    321974.413 ±    7677.548   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       887.121 ±      20.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       918.813 ±     572.324  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4488.962 ±    2750.813    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.285 ±       0.330    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5      9240.756 ±     342.862   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1210.510 ±      45.459  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    206147.378 ±      27.499    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1201.987 ±     709.911  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    204588.636 ±  117466.039    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.087 ±       0.119  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        14.899 ±      20.243    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      9648.660 ±     476.502   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1156.245 ±      57.224  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    188599.878 ±      53.378    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1190.864 ±     698.870  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    194285.523 ±  114761.142    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         8.840 ±      15.177    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        17.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    153066.254 ±    9489.313   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       995.945 ±      61.572  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1002.156 ±      15.720  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     10305.937 ±     642.095    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.472 ±       1.370    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      7748.122 ±     416.535   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1443.149 ±      77.763  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    293096.057 ±       0.006    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1464.721 ±     688.541  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    297490.914 ±  139336.373    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        11.825 ±      20.895    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        22.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        20.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     19811.752 ±    1019.937   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1052.588 ±      52.670  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     83607.360 ±     115.620    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1062.619 ±     592.037  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     84314.556 ±   43104.542    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         5.960 ±       5.844    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     22724.679 ±     120.530   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       963.118 ±       5.211  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     66696.021 ±       0.014    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       922.754 ±     562.802  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     63906.687 ±   39113.721    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         3.460 ±       3.032    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        13.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    711237.602 ±   25770.315   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1283.396 ±      46.338  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1270.979 ±     560.434  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      2813.908 ±    1286.783    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.096 ±       0.156  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.212 ±       0.342    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        19.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    775074.090 ±    6241.683   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     20646.651 ±    1878.763   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       952.078 ±      87.299  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     72568.064 ±      30.808    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       992.364 ±      21.433  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     75680.971 ±    8567.801    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         6.036 ±       7.985    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     25469.434 ±    1193.070   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1426.250 ±      66.808  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     88133.087 ±      28.224    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1406.910 ±     592.886  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     86892.068 ±   33943.112    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.083 ±       0.170  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5.135 ±      10.350    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5        19.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     25452.616 ±    1445.167   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1178.942 ±      66.164  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     72891.282 ±      60.310    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1191.313 ±     690.089  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     73666.057 ±   42786.475    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4.137 ±       6.678    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    271418.746 ±    2756.543   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       706.369 ±       7.097  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       732.290 ±     571.666  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4245.060 ±    3276.680    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.067 ±       0.215  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.386 ±       1.246    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     16216.546 ±     536.664   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1659.137 ±      54.845  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    160984.029 ±       0.015    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1671.552 ±      59.378  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    162200.393 ±    8659.345    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         7.685 ±       6.703    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        25.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     44209.704 ±    1690.129   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1405.759 ±      54.285  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     50040.010 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1403.112 ±     593.397  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     49931.662 ±   20264.884    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.376 ±       5.516    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    137281.390 ±    9934.706   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1074.005 ±      77.762  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     12312.003 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1057.517 ±     556.138  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     12143.872 ±    7128.738    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.622 ±       0.854    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        16.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1152708.300 ±   44103.741   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1236.363 ±      47.573  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1203.816 ±     712.758  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1643.999 ±     984.201    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.085 ±       0.135    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1168735.016 ±    2391.220   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     52374.461 ±     145.073   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1387.991 ±       3.721  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     41704.008 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1333.610 ±      38.582  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     40070.169 ±    1225.411    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.002 ±       2.637    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     15537.558 ±     254.144   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1340.532 ±      22.332  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    135760.031 ±       0.016    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338.480 ±      32.705  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    135552.303 ±    2572.294    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         7.171 ±      18.722    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     15486.833 ±     655.130   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1261.640 ±      53.151  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    128196.078 ±      51.330    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1259.994 ±     559.748  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    128017.596 ±   56327.367    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         6.758 ±       8.694    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    268807.000 ±   19321.801   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       699.649 ±      49.874  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       732.379 ±     573.818  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4285.848 ±    3282.388    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.412 ±       0.897    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        10.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     11219.017 ±     385.462   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1541.832 ±      52.976  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    216280.040 ±       0.006    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1534.240 ±     693.189  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    215210.025 ±   96799.719    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         8.194 ±      20.333    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        23.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     33848.026 ±    1434.039   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1285.610 ±      54.657  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     59774.485 ±      55.720    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1266.877 ±     585.756  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     58859.270 ±   25597.881    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.083 ±       0.160  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3.881 ±       7.563    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     48250.510 ±    1204.596   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1437.249 ±      36.404  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     46872.009 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1463.892 ±     688.203  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     47766.237 ±   23424.709    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.309 ±       3.967    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        22.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        20.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1285208.601 ±   33035.930   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1169.564 ±      30.410  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1202.782 ±     705.739  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1473.218 ±     879.995    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.071 ±       0.108  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.087 ±       0.132    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5        18.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        15.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1263144.558 ±    8313.754   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5      3553.491 ±      48.435   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5       484.481 ±       6.799  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    214544.123 ±       0.017    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5       445.494 ±     752.961  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    197358.074 ±  334143.887    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.431 ±       3.424  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       191.640 ±    1522.281    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5    118453.816 ±    1610.471   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2201.012 ±      30.435  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     29240.004 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2162.606 ±     719.899  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     28733.088 ±    9741.491    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.117 ±       0.270  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1.549 ±       3.583    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        32.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    331971.881 ±    1181.695   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       664.901 ±       2.467  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       650.869 ±      15.146  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3085.480 ±      69.268    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.100 ±       0.271    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    246775.077 ±    2627.737   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       541.920 ±       5.724  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       574.660 ±     546.334  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3665.110 ±    3485.333    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.448 ±       3.591  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.868 ±      22.991    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    489734.498 ±    7341.781   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       617.402 ±       9.469  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       665.130 ±       2.225  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2137.399 ±      30.126    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.348 ±       2.642  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.115 ±       8.459    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     68432.591 ±    1994.940   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2964.204 ±      84.946  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     68168.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2979.200 ±     553.387  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     68505.968 ±   11926.238    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.133 ±       0.238  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.066 ±       5.517    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        44.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        38.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    180822.914 ±    4263.205   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1844.892 ±      42.956  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     16056.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1882.234 ±     707.479  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     16383.614 ±    6272.088    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.761 ±       0.901    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        28.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    757172.920 ±   25750.765   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       592.786 ±      19.796  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       636.369 ±     124.427  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1322.196 ±     217.554    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.027 ±       0.089  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.055 ±       0.184    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    483924.762 ±   15089.863   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       496.908 ±      15.489  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       509.318 ±     650.670  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1658.607 ±    2141.228    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.435 ±       3.526  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.434 ±      11.619    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    617188.975 ±   10589.069   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       483.113 ±       8.300  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       515.052 ±     656.228  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1314.535 ±    1686.470    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.388 ±       2.890  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.993 ±       7.413    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    696026.149 ±    4021.419   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     27463.083 ±     951.308   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1509.876 ±      51.723  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     86516.343 ±      26.826    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1536.116 ±     704.272  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     88034.278 ±   40788.706    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5.251 ±       5.293    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        22.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      7172.954 ±     317.353   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1134.311 ±      50.446  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    248864.061 ±       0.006    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1133.583 ±     689.263  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    248662.832 ±  149405.218    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.037 ±       0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8.200 ±      19.057    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      7469.251 ±     401.581   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1090.926 ±      58.894  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    229848.060 ±       0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1122.298 ±     688.149  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    236817.392 ±  155524.331    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        17.606 ±      21.898    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    104120.391 ±    6614.765   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1008.879 ±      63.502  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248.004 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1002.214 ±      16.095  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     15151.040 ±    1124.779    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         1.129 ±       2.021    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      7146.081 ±     294.682   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1304.353 ±      54.079  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    287248.062 ±       0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1328.254 ±      43.316  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    292524.349 ±    9046.466    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.067 ±       0.036  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        14.666 ±       7.685    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        20.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     16752.344 ±     605.351   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       988.374 ±      35.993  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     92844.780 ±     128.154    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5       994.513 ±      21.030  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     93426.289 ±    3042.174    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.862 ±       9.175    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     18889.512 ±     599.785   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       885.989 ±      27.888  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     73808.026 ±       0.013    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       854.905 ±     689.540  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     71180.057 ±   56558.044    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.062 ±       0.204  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         5.191 ±      17.044    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        11.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    485777.278 ±   12629.222   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1101.336 ±      28.205  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1067.489 ±     573.229  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3457.157 ±    1805.187    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.058 ±       0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.189 ±       0.284    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5        16.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        14.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    522448.421 ±    4572.084   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     18342.654 ±     423.426   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       928.734 ±      21.820  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     79682.727 ±      28.937    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5       925.637 ±     578.201  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     79422.539 ±   49739.706    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.079 ±       0.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         6.781 ±      12.241    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        13.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     11796.397 ±     354.639   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1216.489 ±      36.312  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    162255.985 ±      30.808    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1201.737 ±     697.405  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    160309.430 ±   93580.445    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.058 ±       0.119  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         7.766 ±      15.816    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     12118.609 ±     335.346   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1124.839 ±      31.832  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    146063.957 ±      61.613    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1123.867 ±     708.510  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    145874.701 ±   89926.839    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         8.651 ±      19.957    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        17.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    167075.647 ±   10886.765   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       966.588 ±      62.776  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104.003 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       934.346 ±     580.402  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      8797.507 ±    5390.746    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.062 ±       0.204  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.584 ±       1.905    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     11011.930 ±     524.452   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1378.141 ±      65.987  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    196928.074 ±       0.290    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1390.321 ±     523.090  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    198732.554 ±   77489.062    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        11.282 ±      14.603    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     26896.065 ±     940.727   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1180.656 ±      39.486  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     69073.811 ±     107.825    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1130.469 ±     703.516  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     66155.539 ±   41655.403    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.104 ±       0.188  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.103 ±      11.166    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        17.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     81428.303 ±    4000.116   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1664.399 ±      81.534  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     32168.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1604.381 ±     594.290  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     30999.837 ±   11035.197    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.607 ±       1.488    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        24.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    682498.767 ±   32289.524   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       936.938 ±      44.017  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       931.550 ±     570.001  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2148.158 ±    1325.506    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.144 ±       0.188    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        12.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    759284.582 ±    3185.631   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     74019.502 ±    2245.005   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1785.302 ±      53.763  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     37960.006 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1804.935 ±     684.947  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     38359.567 ±   13570.098    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.411 ±       3.234    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        27.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        27.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     14396.295 ±     159.493   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       759.277 ±       8.204  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     82993.745 ±      33.172    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       795.914 ±     697.982  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     86979.267 ±   75845.609    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.381 ±       2.787  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        41.627 ±     304.553    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     16864.565 ±     985.519   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       719.564 ±      42.536  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     67138.503 ±      53.059    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       721.049 ±     567.429  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     67203.947 ±   50482.186    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.450 ±       3.652  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        42.299 ±     343.496    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5    101204.266 ±    5496.658   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       254.146 ±      13.817  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       220.049 ±     490.772  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3429.265 ±    7614.324    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.308 ±       2.587  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4.744 ±      39.822    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     12234.905 ±     131.260   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5       952.160 ±       9.727  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    122456.036 ±       0.005    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       988.422 ±      19.930  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    127119.584 ±    2236.560    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.058 ±       0.183  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         7.510 ±      23.622    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        15.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     51612.639 ±    1425.351   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1547.208 ±      41.564  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     47176.009 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1540.077 ±     720.575  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     46943.384 ±   21337.951    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2.283 ±       2.774    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        23.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     73684.622 ±    2604.526   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1520.189 ±      53.110  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     32464.006 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1533.429 ±     674.431  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     32745.486 ±   14317.947    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.510 ±       0.893    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    270989.277 ±   23761.906   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       519.352 ±      45.369  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       464.074 ±     698.585  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2696.257 ±    4067.546    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.377 ±       2.893  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.251 ±      17.321    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    273784.301 ±     735.384   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     66623.792 ±    2656.030   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1493.193 ±      59.553  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     35272.007 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1470.494 ±     708.670  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     34765.364 ±   17824.230    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.092 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.163 ±       0.994    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        22.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    150754.385 ±    3919.891   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2254.638 ±      59.554  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23536.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2230.862 ±     702.974  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     23297.631 ±    7857.682    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.096 ±       0.217  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.998 ±       2.250    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        33.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    549114.143 ±   33776.968   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       304.271 ±      18.729  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       282.633 ±     710.913  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       813.524 ±    2042.727    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.099  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.049 ±       0.288    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    385885.486 ±   29277.120   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       394.294 ±      30.019  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       363.906 ±     485.807  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1480.802 ±    1916.732    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.436 ±       3.618  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.753 ±      14.556    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    925476.720 ±   28034.933   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       319.953 ±       9.769  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       353.007 ±     364.908  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       599.380 ±     603.649    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.341 ±       2.733  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.577 ±       4.629    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     75047.835 ±    3117.957   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3119.276 ±     127.870  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     65408.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3116.680 ±     521.496  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     65364.587 ±   11821.610    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.158 ±       0.185  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         3.318 ±       3.875    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        46.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        40.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    249281.240 ±    3844.624   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1644.900 ±      26.133  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10384.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1609.414 ±     610.953  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10160.933 ±    3892.782    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.096 ±       0.122  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.605 ±       0.778    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        21.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1394594.193 ±   51548.024   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       474.973 ±      17.578  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       491.254 ±     623.151  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       554.551 ±     702.879    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.014 ±       0.063  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.015 ±       0.070    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1279418.277 ±   77044.615   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       747.867 ±      44.995  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       788.017 ±     695.565  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       971.059 ±     890.492    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.079 ±       0.191  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.097 ±       0.235    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1381996.161 ±    6445.595   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       470.683 ±       2.281  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       448.735 ±     761.780  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       511.199 ±     870.009    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.379 ±       3.133  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.432 ±       3.571    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1423142.010 ±    3626.438   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     34709.857 ±     318.790   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1668.686 ±      15.429  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75657.614 ±      13.786    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1674.639 ±      55.042  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     75926.795 ±    1941.015    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.585 ±       5.957    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        25.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     17714.169 ±     347.366   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1860.453 ±      30.869  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    165287.979 ±    1020.221    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1819.049 ±     715.198  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    161585.656 ±   62307.832    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         5.184 ±       9.361    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        27.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     97292.159 ±    5901.117   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1276.983 ±      77.668  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20656.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1326.730 ±      47.015  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     21465.574 ±    1659.747    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.145 ±       1.463    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    279469.253 ±   12376.049   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       909.202 ±      40.524  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       933.663 ±     578.771  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5262.050 ±    3353.332    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.375 ±       0.868    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     16521.766 ±     223.543   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2106.438 ±      27.444  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    200640.029 ±       0.016    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2085.562 ±     613.493  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    198679.018 ±   60233.203    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         7.132 ±      15.732    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        31.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     20689.193 ±     364.608   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1674.534 ±      27.998  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5    127370.658 ±      69.137    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1676.646 ±      50.985  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    127532.834 ±    4224.702    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         6.655 ±       8.015    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5     89117.217 ±     968.871   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1220.827 ±      13.755  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560.005 ±       0.061    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1191.485 ±     689.485  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     21047.206 ±   12336.252    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.250 ±       2.766    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    317573.917 ±    9906.817   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1012.138 ±      31.451  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       999.645 ±      17.530  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4954.366 ±     186.661    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.351 ±       0.451    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    381159.588 ±    5151.444   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     25768.024 ±     637.139   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1756.583 ±      43.410  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    107288.006 ±       0.149    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1810.370 ±     701.330  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    110568.025 ±   42488.646    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.104 ±       0.204  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6.360 ±      12.500    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        27.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     69784.680 ±    2201.081   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1592.189 ±      50.420  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     35904.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1606.295 ±     561.185  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     36222.464 ±   12647.223    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.054 ±       0.134  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.217 ±       2.993    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        21.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     90712.706 ±    2797.533   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1159.264 ±      35.507  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     20112.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1187.151 ±     675.263  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     20589.160 ±   11485.902    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.085 ±       1.720    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    104704.530 ±    1628.111   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1224.681 ±      18.812  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     18408.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1201.087 ±     710.361  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     18054.325 ±   10702.185    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.751 ±       2.200    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     45231.549 ±    1049.905   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2168.547 ±      51.357  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75448.010 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2149.765 ±     719.442  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     74787.766 ±   24548.923    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.092 ±       0.134  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.187 ±       4.674    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        32.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    120453.923 ±    3332.329   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1130.435 ±      30.922  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     14768.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1191.657 ±     700.244  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     15566.296 ±    9094.084    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.090 ±       1.687    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    332889.153 ±    5572.159   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       494.116 ±       8.325  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       507.558 ±     647.833  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2401.672 ±    3088.106    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.543 ±       4.316  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.579 ±      20.523    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    661234.924 ±   11009.826   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       820.133 ±      13.473  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       861.828 ±     700.015  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2050.994 ±    1660.591    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.092 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.218 ±       0.108    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    711169.125 ±   25903.308   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    215242.454 ±    4468.018   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       703.521 ±      14.401  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       655.896 ±       7.533  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4795.877 ±     105.237    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.058 ±       0.119  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.427 ±       0.880    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    132730.040 ±    3963.467   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1818.382 ±      53.737  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     21560.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1813.508 ±     714.166  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21514.773 ±    9034.981    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.092 ±       0.156  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.086 ±       1.859    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        27.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    185655.717 ±   12252.712   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1107.156 ±      73.265  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9384.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1124.033 ±     707.661  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9549.947 ±    6646.828    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.532 ±       0.857    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    325910.424 ±   20499.054   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       632.853 ±      39.930  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       598.353 ±     573.196  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2891.003 ±    2788.644    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.075 ±       0.185  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.361 ±       0.878    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     67024.128 ±    2922.701   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2784.650 ±     122.555  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     65384.007 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2768.873 ±     603.506  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     65014.804 ±   13940.139    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.096 ±       0.156  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.252 ±       3.690    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        41.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        43.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    166095.569 ±    7403.919   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1062.195 ±      47.550  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     10064.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1062.601 ±     571.402  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10066.213 ±    5320.722    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.672 ±       0.875    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        16.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        15.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    536748.559 ±   16199.431   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       529.391 ±      16.151  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       509.165 ±     649.218  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1491.959 ±    1890.307    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.452 ±       3.626  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.336 ±      10.721    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1141600.805 ±   41499.639   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       847.294 ±      30.826  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       864.465 ±     696.257  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1191.342 ±     951.853    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.109 ±       0.119    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1108877.586 ±   46632.343   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    341089.797 ±   27479.591   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       931.078 ±      74.879  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       985.219 ±      26.437  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4547.806 ±     466.144    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.071 ±       0.176  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.324 ±       0.794    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        15.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        15.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5       671.686 ±      36.376   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1400.845 ±      76.592  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5   3281136.743 ±       0.522    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1452.918 ±     699.466  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5   3403174.271 ± 1628554.509    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.046 ±       0.119  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       106.831 ±     276.597    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5       687.727 ±      10.354   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1426.416 ±      21.518  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5   3263310.331 ±      48.832    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1444.392 ±     674.619  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5   3304970.055 ± 1564173.498    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       142.663 ±     223.747    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     27070.031 ±     277.201   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       472.836 ±       4.848  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     27488.018 ±       0.010    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       443.560 ±     749.945  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     25804.963 ±   43846.612    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.728 ±       6.134  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        42.390 ±     357.202    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        11.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5       673.739 ±      13.706   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1440.907 ±      28.165  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5   3364700.080 ±      69.335    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1445.422 ±     698.597  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5   3375806.211 ± 1652307.946    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       116.785 ±     215.557    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     13089.711 ±     147.086   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1054.368 ±      12.926  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5    126749.284 ±     131.254    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1109.822 ±     693.991  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    133449.484 ±   84469.373    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.077 ±       0.105  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         9.250 ±      12.468    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     15101.273 ±     760.423   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       944.255 ±      48.062  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     98400.031 ±       0.454    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       907.978 ±     551.432  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     94585.206 ±   56472.609    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         6.050 ±      15.899    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        13.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    272417.086 ±    3438.199   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       961.194 ±      11.580  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5552.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       919.500 ±     572.952  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5312.512 ±    3339.831    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.433 ±       0.524    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        12.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    317903.824 ±    2080.139   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     15161.633 ±     380.917   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1004.548 ±      25.658  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    104261.604 ±      43.594    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1042.955 ±     543.291  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    108305.263 ±   58679.452    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.054 ±       0.156  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.638 ±      16.374    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                 N/A  thrpt    5    671504.954 ±    7239.575   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5        44.379 ±       0.453  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5       104.001 ±       0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5        51.185 ±     440.721  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5       120.499 ±    1037.534    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       N/A  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                        N/A  thrpt    5         2.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                      N/A  thrpt    5     71728.466 ±    1639.396   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      3142.166 ±      71.971  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5     68944.006 ±       0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      3112.703 ±     508.919  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5     68294.111 ±   10611.596    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.142 ±       0.132  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         3.106 ±       2.896    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            N/A  thrpt    5        46.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             N/A  thrpt    5        46.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                 N/A  thrpt    5   1574216.601 ±   75062.874   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5       880.280 ±      42.528  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5       880.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       853.758 ±     688.173  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5       854.277 ±     703.767    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.096 ±       0.156  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.096 ±       0.158    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       N/A  thrpt    5        13.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        N/A  thrpt    5        12.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                N/A  thrpt    5   1363306.183 ±   28204.365   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       381.195 ±       7.763  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       440.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       367.386 ±     490.053  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       424.663 ±     577.004    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.386 ±       3.031  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.449 ±       3.529    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      N/A  thrpt    5         6.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       N/A  thrpt    5         9.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        N/A  thrpt    5   1415286.109 ±   17801.544   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         N/A  thrpt    5        14.389 ±       0.175  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    N/A  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              N/A  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                     N/A  thrpt    5     37714.556 ±     890.763   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1638.186 ±      38.262  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5     68360.012 ±       0.007    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1599.761 ±     556.298  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5     66755.938 ±   23161.612    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.083 ±       0.080  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         3.471 ±       3.275    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           N/A  thrpt    5        24.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            N/A  thrpt    5        26.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    813351.252 ±    9898.782   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2700.234 ±      32.070  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5224.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2707.347 ±     874.552  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      5238.428 ±    1727.046    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.100 ±       0.154  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.193 ±       0.299    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        40.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        33.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   5227865.457 ±  400939.307   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       318.950 ±      24.373  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       347.472 ±     371.080  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       105.010 ±     119.965    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.015 ±       0.081  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.005 ±       0.024    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        12.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5    964279.040 ±   46015.898   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1196.159 ±      57.263  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      1188.368 ±     708.226  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      1939.609 ±    1160.266    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.075 ±       0.091  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.123 ±       0.154    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        17.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   7552823.991 ±  116817.102   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       345.550 ±       5.484  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       354.417 ±     363.104  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        73.856 ±      75.776    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.321 ±       2.499  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.067 ±       0.524    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         8.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    288709.233 ±    7750.085   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1493.914 ±      40.100  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8144.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1457.509 ±     702.685  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      7947.108 ±    3887.734    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.087 ±       0.143  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.477 ±       0.792    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        22.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        23.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      3720.215 ±     104.298   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      1845.308 ±      51.672  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    780640.118 ±       0.014    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1875.389 ±     705.182  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5    792963.979 ±  277635.111    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.246 ±       0.337  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5       103.866 ±     142.184    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        28.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5062.276 ±      99.987   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2119.953 ±      41.529  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    659032.088 ±       0.014    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2073.824 ±     554.362  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    644632.868 ±  167284.605    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.087 ±       0.067  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        27.183 ±      20.865    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        31.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        34.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     42378.797 ±    2422.803   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       705.066 ±      40.203  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     26184.010 ±       0.002    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       731.969 ±     570.821  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     27158.032 ±   20339.210    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.054 ±       0.156  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         1.998 ±       5.748    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        11.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4046.450 ±     162.238   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       863.213 ±      34.435  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    335712.110 ±       0.019    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       856.305 ±     696.916  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    333200.197 ±  274523.101    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.042 ±       0.057  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        16.188 ±      21.897    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        13.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5        12.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      4687.773 ±     155.643   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       600.108 ±      19.665  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    201429.397 ±       2.912    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       582.577 ±     558.630  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    195695.631 ±  189405.259    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.582 ±       4.699  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       194.257 ±    1566.954    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5        11.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      6217.241 ±     170.638   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       200.581 ±       5.502  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     50768.070 ±       0.008    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       204.662 ±     440.551  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     51675.021 ±  111240.117    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.013 ±       0.094  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         3.393 ±      23.788    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         8.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      6385.192 ±      63.144   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       159.307 ±       1.538  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     39264.071 ±       0.028    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.642 ±     440.508  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     50481.659 ±  108666.354    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.592 ±       5.078  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5       145.947 ±    1252.216    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      7976.807 ±     288.640   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2053.748 ±      75.039  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    405176.055 ±       0.007    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2085.824 ±     593.067  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    411410.635 ±  109085.953    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.107 ±       0.239  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        21.237 ±      47.959    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        31.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                            N/A  thrpt    5     11707.622 ±    1002.913   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       288.890 ±      24.772  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5     38832.038 ±       0.007    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       282.336 ±     139.785  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     37916.769 ±   17031.192    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.003 ±       0.015  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.383 ±       1.994    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     13786.133 ±     905.385   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       372.699 ±      24.407  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     42544.035 ±       0.020    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       360.807 ±     627.740  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     41295.965 ±   73138.987    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.540 ±       4.518  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        61.505 ±     514.226    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     22453.402 ±    1034.600   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       457.261 ±      21.113  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     32048.021 ±       0.013    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       449.446 ±     763.539  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     31457.788 ±   52983.298    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.368 ±       2.948  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        26.083 ±     208.961    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2354.282 ±      48.871   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1473.865 ±      30.845  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    985216.199 ±       0.110    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1463.263 ±     667.826  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    978184.690 ±  448066.561    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.042 ±       0.127  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        27.905 ±      85.157    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      8677.925 ±      78.408   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1934.933 ±      16.906  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    350861.256 ±      44.808    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1946.279 ±     546.635  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    352932.146 ±   99900.136    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.155 ±       0.150  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        28.013 ±      27.125    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        29.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     53487.353 ±     640.644   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       500.070 ±       6.000  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712.008 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       504.585 ±     761.240  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     14847.329 ±   22414.556    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.022 ±       0.081  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.652 ±       2.380    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5        16.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     41676.791 ±    2838.528   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       620.522 ±      42.191  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431.857 ±       0.191    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       648.720 ±       8.452  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     24503.348 ±    1844.723    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.585 ±       4.545  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        22.353 ±     174.055    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     82389.943 ±    4957.825   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       619.543 ±      37.515  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       662.700 ±       2.257  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     12658.858 ±     812.383    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.418 ±       3.199  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         7.907 ±      60.391    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5    104269.933 ±    2999.191   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      5039.602 ±      83.358   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      1587.083 ±      26.150  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    495583.779 ±       5.026    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1593.951 ±     572.602  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5    497598.400 ±  172662.960    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.071 ±       0.176  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        22.074 ±      54.866    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   6257729.355 ±  108686.314   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3881.177 ±      64.886  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      3874.955 ±     695.944  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       974.505 ±     181.445    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0.108 ±       0.199  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0.027 ±       0.050    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        57.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        46.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  39952423.207 ±  966431.196   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       406.169 ±       9.817  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16.000 ±       0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       361.063 ±     481.713  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        14.224 ±      18.959    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.012 ±       0.058  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5        12.000                    ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   8484497.309 ±  199118.247   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3191.344 ±      75.108  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      3184.659 ±     732.510  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       590.758 ±     134.924    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.100 ±       0.088  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.019 ±       0.016    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        47.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        40.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  49429304.214 ±  419729.047   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  17020925.236 ±  519454.631   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1124.707 ±      34.271  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       104.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1138.822 ±     703.464  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       105.326 ±      65.639    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.067 ±       0.088  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.006 ±       0.008    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5        17.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5        14.000                    ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   7411599.418 ±  217220.732   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      3579.381 ±     107.069  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      3598.974 ±     742.228  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       764.059 ±     146.618    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.133 ±       0.122  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.028 ±       0.025    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        53.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        47.000                    ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  12399103.881 ±  290648.945   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2395.369 ±      54.841  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       304.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2431.155 ±     522.371  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       308.486 ±      60.476    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.087 ±       0.067  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.011 ±       0.008    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        36.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        30.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  59370826.359 ± 2476674.941   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1810.982 ±      74.657  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48.000 ±       0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1785.519 ±     699.029  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        47.349 ±      19.560    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.474 ±       3.944  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.013 ±       0.105    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        27.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5        36.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  11998074.782 ±  205780.162   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      2378.327 ±      42.441  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2423.286 ±     500.085  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       317.937 ±      68.981    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.108 ±       0.143  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.014 ±       0.019    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        36.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        33.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  43319108.199 ± 2664668.899   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       880.914 ±      54.327  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       864.536 ±     696.411  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        31.343 ±      23.886    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.083 ±       0.057  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.003 ±       0.002    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5        11.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  59214931.903 ± 1063274.846   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  13356905.181 ±  325096.277   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2240.636 ±      54.062  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       264.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2236.960 ±     698.483  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       263.511 ±      78.810    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.092 ±       0.122  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.011 ±       0.014    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        33.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2262163.027 ±   65693.602   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1954.937 ±      56.000  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1360.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1953.096 ±     595.922  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      1358.303 ±     389.459    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.087 ±       0.067  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.061 ±       0.047    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        29.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5        25.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       N/A  thrpt    5    153764.162 ±    5920.146   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5      2820.713 ±     108.511  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     28872.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      2782.307 ±     592.361  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     28478.595 ±    5912.407    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.087 ±       0.105  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.894 ±       1.060    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5        41.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5        35.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            N/A  thrpt    5     28715.676 ±    1373.389   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      2200.383 ±     105.045  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5    120584.017 ±       0.009    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      2215.415 ±     663.527  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    121489.567 ±   40689.099    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.087 ±       0.154  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         4.807 ±       8.598    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        33.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        35.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       N/A  thrpt    5    131815.711 ±    4044.362   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5      1276.480 ±      39.533  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     15240.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      1256.488 ±     545.176  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     15010.476 ±    6823.042    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.079 ±       0.143  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.943 ±       1.703    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5        19.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        19.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      N/A  thrpt    5    498626.901 ±   21078.711   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5      1031.603 ±      43.419  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5      3256.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      1066.044 ±     573.450  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5      3366.791 ±    1885.376    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.079 ±       0.154  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.250 ±       0.491    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5        16.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        14.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5    528611.645 ±   42354.537   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5       515.921 ±      41.336  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5      1536.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       463.729 ±     698.224  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5      1382.484 ±    2100.597    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.379 ±       2.955  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         1.099 ±       8.533    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     N/A  thrpt    5         7.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           N/A  thrpt    5     43621.363 ±    1071.071   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            N/A  thrpt    5       761.468 ±      18.601  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       N/A  thrpt    5     27472.010 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       785.187 ±     695.275  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     28331.206 ±   25148.187    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.046 ±       0.105  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         1.651 ±       3.767    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 N/A  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  N/A  thrpt    5        12.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    332439.947 ±   11818.113   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2408.409 ±      85.626  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     11400.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2436.508 ±     537.519  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     11532.133 ±    2421.855    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.100 ±       0.154  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.473 ±       0.722    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        36.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    335145.896 ±   13372.063   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       887.688 ±      35.424  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4168.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       852.770 ±     687.166  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4007.722 ±    3301.587    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.104 ±       0.150  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.488 ±       0.694    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5        13.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    458269.207 ±   14147.126   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       903.816 ±      27.979  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3104.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       933.610 ±     575.215  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3203.199 ±    1897.807    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.058 ±       0.154  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.199 ±       0.528    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        14.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        12.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    110821.215 ±    2395.638   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      4013.319 ±      84.531  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56984.004 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      4010.476 ±     573.148  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     56945.762 ±    8315.051    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.167 ±       0.098  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.366 ±       1.405    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        59.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        51.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    333044.630 ±   17613.721   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1130.932 ±      59.932  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5344.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1130.879 ±     701.855  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5348.977 ±    3469.127    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.075 ±       0.134  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.354 ±       0.629    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        17.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    735103.613 ±   35177.075   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       538.128 ±      25.776  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1152.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       573.203 ±     545.357  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1227.722 ±    1174.164    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.499 ±       3.937  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.075 ±       8.495    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2033845.820 ±  121735.876   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       940.813 ±      56.092  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728.000 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       999.551 ±      17.818  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       773.560 ±      34.269    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.079 ±       0.143  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.061 ±       0.113    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        15.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        13.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2467580.768 ±   16474.882   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    359970.004 ±   20917.366   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       517.868 ±      30.248  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       526.047 ±     693.945  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2294.181 ±    2961.456    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.420 ±       3.347  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.826 ±      14.542    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     51500.558 ±    1607.860   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1595.142 ±      49.959  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     48744.009 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1610.529 ±     565.367  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     49230.138 ±   17948.463    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.079 ±       0.119  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.413 ±       3.572    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        24.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     63969.598 ±    2089.300   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1150.654 ±      37.751  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28304.007 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1122.102 ±     696.337  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     27609.433 ±   17353.043    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.083 ±       0.127  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.049 ±       3.110    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        17.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        16.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5     98457.615 ±    2730.877   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1510.026 ±      42.213  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24136.004 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1545.061 ±     707.403  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24705.737 ±   11657.844    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.083 ±       0.113  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.330 ±       1.790    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        23.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     25511.087 ±     514.871   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1778.154 ±      35.797  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109696.034 ±       0.130    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1801.815 ±     684.592  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    111182.174 ±   43529.228    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.079 ±       0.250  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4.892 ±      15.555    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        27.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    145369.688 ±    5141.807   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1131.310 ±      40.373  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     12248.003 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1120.286 ±     695.339  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     12129.231 ±    7535.642    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.062 ±       0.057  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.676 ±       0.618    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        17.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    562516.489 ±    5315.477   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       620.585 ±       6.005  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       662.819 ±       2.348  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1854.151 ±      13.203    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.398 ±       2.937  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.112 ±       8.196    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        11.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    572132.747 ±    2113.766   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5.818 ±       0.020  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     61749.686 ±    1539.646   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1034.302 ±      26.110  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     26360.007 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1052.895 ±     551.854  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     26830.319 ±   13882.096    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.092 ±       0.146  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.332 ±       3.687    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2115513.540 ±   27428.756   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3247.478 ±      42.091  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2416.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      3189.377 ±     728.866  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2373.039 ±     562.698    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.129 ±       0.067  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.096 ±       0.049    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        47.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    841101.378 ±   38948.027   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       513.126 ±      23.481  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5       960.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       505.496 ±     761.262  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       947.763 ±    1445.649    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.013 ±       0.057  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.024 ±       0.106    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         8.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    306285.031 ±   16087.461   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       734.950 ±      38.645  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      3776.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       718.530 ±     560.486  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      3697.164 ±    3034.617    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.477 ±       3.841  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         2.463 ±      19.822    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    709914.935 ±   33119.583   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       635.093 ±      29.541  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1408.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       602.192 ±     576.439  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1334.352 ±    1268.654    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.058 ±       0.183  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0.128 ±       0.397    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         8.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   3996769.606 ±  101046.957   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      2336.878 ±      58.044  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       920.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5      2372.638 ±      37.185  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       934.104 ±      24.289    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.104 ±       0.113  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.041 ±       0.045    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        35.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5        28.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   8156774.291 ±  150324.303   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       870.832 ±      15.434  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       168.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       870.615 ±     704.116  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       167.869 ±     133.907    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.062 ±       0.179  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.012 ±       0.034    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5        13.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    180303.389 ±    9325.465   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1548.925 ±      80.072  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     13520.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1525.129 ±     684.909  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     13311.487 ±    5921.404    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.087 ±       0.088  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.762 ±       0.740    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5        23.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5        23.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5    716947.015 ±   56657.626   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        69.244 ±       5.449  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       152.001 ±       0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       102.325 ±     539.530  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       225.796 ±    1190.879    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.537 ±       4.622  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.163 ±      10.018    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         2.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         4.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     63013.989 ±    2315.992   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2845.010 ±     104.273  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     71056.007 ±       0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2838.981 ±     760.736  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     70907.136 ±   18937.255    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.154 ±       0.091  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         3.849 ±       2.339    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        42.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        44.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1002811.714 ±   12551.655   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       576.037 ±       7.010  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       588.776 ±     564.033  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       924.128 ±     886.867    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.490 ±       3.724  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.768 ±       5.837    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5   1374452.616 ±   35469.501   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       384.277 ±       9.948  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       367.479 ±     490.297  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       421.220 ±     571.803    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.375 ±       3.052  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.433 ±       3.527    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         6.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    980027.117 ±    5013.467   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻³                  B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     37561.744 ±    1032.993   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1631.616 ±      44.680  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     68360.013 ±       0.007    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1600.032 ±     594.149  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     67038.925 ±   24909.046    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.062 ±       0.057  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.617 ±       2.365    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        24.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    249929.236 ±    6141.216   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       978.397 ±      23.945  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160.002 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       934.426 ±     576.045  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      5884.358 ±    3652.997    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.062 ±       0.057  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.393 ±       0.352    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        14.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        13.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     27717.663 ±     483.854   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1468.101 ±      25.560  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     83360.017 ±       0.012    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1459.663 ±     703.935  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     82861.908 ±   39149.826    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.087 ±       0.222  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         4.966 ±      12.618    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        22.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        24.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    109387.205 ±    1940.527   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1407.330 ±      25.199  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     20248.004 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1393.217 ±     552.088  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     20045.230 ±    7944.274    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.067 ±       0.183  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.958 ±       2.627    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        21.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        21.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    356148.087 ±   13381.356   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1696.316 ±      64.013  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1681.286 ±      41.388  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7429.925 ±     220.378    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.071 ±       0.091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.313 ±       0.413    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        25.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        20.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    427584.451 ±    8105.211   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1465.189 ±      28.268  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1408.082 ±     580.506  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      5180.842 ±    2081.698    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.075 ±       0.122  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.276 ±       0.453    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        21.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        17.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     58623.067 ±    1432.471   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1253.461 ±      30.859  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     33648.008 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1256.690 ±     585.773  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     33746.578 ±   16107.369    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.058 ±       0.067  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.565 ±       1.792    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        19.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        20.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     72255.715 ±    3534.557   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1427.300 ±      70.198  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     31088.006 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5      1407.066 ±     580.023  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     30670.489 ±   13674.529    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.067 ±       0.132  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.449 ±       2.872    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        21.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5     99991.844 ±    5597.368   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       676.029 ±      37.930  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5     10640.004 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       653.657 ±       6.113  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     10289.468 ±     522.287    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.490 ±       3.992  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         7.768 ±      63.353    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5        12.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    187738.242 ±   10274.519   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5       773.038 ±      42.200  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480.002 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       732.230 ±     571.907  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      6131.782 ±    4586.035    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.062 ±       0.150  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.522 ±       1.263    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         9.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     26332.087 ±     454.832   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1414.089 ±      23.508  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     84504.018 ±       0.010    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1392.732 ±     597.103  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     83209.646 ±   34756.675    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.075 ±       0.201  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         4.477 ±      12.041    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5        21.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5        22.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    147505.790 ±    4031.855   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1006.288 ±      26.805  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     10736.003 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       985.698 ±      27.752  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     10516.991 ±     519.684    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.071 ±       0.108  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.755 ±       1.139    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5        15.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5        15.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    566490.462 ±    7517.853   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       630.628 ±       8.479  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       596.672 ±     570.882  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5      1658.135 ±    1592.049    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.058 ±       0.088  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.162 ±       0.242    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         8.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    585360.406 ±   47909.777   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        11.903 ±       0.969  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     63308.043 ±     431.024   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5      1160.493 ±       8.315  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     28848.007 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1188.103 ±     698.621  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     29538.380 ±   17482.718    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.067 ±       0.119  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         1.656 ±       2.957    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5        18.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     93386.037 ±    1284.322   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1718.891 ±      23.289  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     28968.005 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1748.797 ±     564.473  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     29471.043 ±    9444.862    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.071 ±       0.134  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.193 ±       2.257    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        26.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        22.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    141528.487 ±    5363.437   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       605.104 ±      22.553  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6728.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       587.843 ±     564.211  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6541.046 ±    6336.125    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.525 ±       3.898  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.797 ±      42.961    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        12.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    237265.917 ±   10590.880   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       845.477 ±      37.731  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       866.093 ±     700.336  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      5737.532 ±    4481.851    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.071 ±       0.134  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.470 ±       0.895    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     41188.467 ±     463.309   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1657.362 ±      18.477  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63328.011 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1671.648 ±      58.871  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     63874.013 ±    2204.411    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.092 ±       0.122  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.499 ±       4.639    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        25.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    221891.925 ±    3187.533   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1515.896 ±      21.525  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10752.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1538.333 ±     681.192  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10911.889 ±    4857.806    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.083 ±       0.127  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.591 ±       0.904    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        23.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        21.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    540346.894 ±    7427.854   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       434.006 ±       6.224  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       428.167 ±     571.823  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1247.773 ±    1677.668    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.484 ±       3.985  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1.400 ±      11.533    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    676214.631 ±   11212.208   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       364.377 ±       5.834  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       848.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       367.477 ±     653.432  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       854.937 ±    1513.314    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.376 ±       3.117  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.872 ±       7.230    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    686739.627 ±    7927.734   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         6.982 ±       0.079  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     30829.844 ±    1276.097   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1626.677 ±      66.513  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     83026.801 ±      23.991    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1673.262 ±      56.289  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     85408.602 ±    2984.043    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.083 ±       0.113  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.264 ±       5.997    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        25.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    714847.500 ±    9407.026   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2151.161 ±      27.552  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4736.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2156.370 ±     747.483  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4746.860 ±    1610.724    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.121 ±       0.143  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.266 ±       0.318    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        32.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1477816.370 ±   79716.914   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1119.396 ±      59.392  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1119.527 ±     693.830  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1193.301 ±     772.335    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.071 ±       0.176  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.075 ±       0.186    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   6465996.889 ±  218437.149   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       197.199 ±       6.666  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       204.642 ±     440.506  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        49.867 ±     107.362    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.008 ±       0.052  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.002 ±       0.013    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    224071.079 ±    7995.290   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1542.265 ±      54.569  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     10832.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1592.634 ±     574.200  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     11188.259 ±    4133.700    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.067 ±       0.132  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.468 ±       0.927    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        24.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        23.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5    953669.137 ±   18882.867   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1662.917 ±      33.040  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2744.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1673.808 ±      53.935  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2762.014 ±      95.286    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.079 ±       0.143  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.131 ±       0.237    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        25.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2513034.736 ±   35785.624   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1111.315 ±      15.866  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1119.664 ±     705.252  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5       701.321 ±     444.414    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.075 ±       0.091  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.047 ±       0.058    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   7124104.911 ±  432215.732   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       579.462 ±      35.100  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       530.322 ±     697.945  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       117.165 ±     154.344    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.386 ±       2.920  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.084 ±       0.636    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   6335435.217 ±  448472.784   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       386.470 ±      27.226  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       367.733 ±     653.161  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5        91.531 ±     166.276    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.377 ±       3.181  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.095 ±       0.802    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    310951.719 ±   11170.061   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      1599.643 ±      57.749  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8096.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1595.563 ±     596.058  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      8073.794 ±    2935.623    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.071 ±       0.044  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.359 ±       0.231    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        24.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     67823.814 ±    1570.221   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      2002.911 ±      46.363  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     46472.006 ±       0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      2023.854 ±      48.741  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     46958.505 ±    1033.068    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.125 ±       0.113  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         2.900 ±       2.663    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        30.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    106335.820 ±    2739.752   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1637.790 ±      42.296  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24240.004 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1600.130 ±     574.446  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     23672.241 ±    7995.314    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.075 ±       0.185  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.109 ±       2.729    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        24.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        21.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    149954.837 ±    4136.404   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2204.531 ±      60.764  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23136.003 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2231.719 ±     708.850  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     23412.515 ±    6891.283    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.067 ±       0.143  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.700 ±       1.522    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        33.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     54250.426 ±    1022.168   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      2787.279 ±      52.569  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     80840.008 ±       0.001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2774.388 ±     571.357  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     80473.276 ±   17156.440    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.133 ±       0.217  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.866 ±       6.297    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        41.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        35.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    213175.120 ±    9130.197   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1472.609 ±      62.568  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     10872.002 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1470.342 ±     692.347  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     10861.277 ±    5332.141    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.067 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.492 ±       0.289    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        19.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    541561.907 ±   21750.599   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       473.528 ±      18.718  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1376.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       441.983 ±     743.985  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1287.264 ±    2197.520    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.494 ±       4.119  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.429 ±      11.908    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         7.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    570982.764 ±   29960.390   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       307.655 ±      16.099  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       286.047 ±     714.530  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       785.069 ±    1955.718    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.367 ±       2.936  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.006 ±       8.048    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    640106.677 ±     818.281   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         6.508 ±       0.010  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     30473.549 ±     265.905   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1602.183 ±      13.812  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     82738.874 ±      24.625    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1605.306 ±     561.318  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     82902.427 ±   29087.571    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.050 ±       0.108  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         2.580 ±       5.551    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        24.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        22.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             N/A  thrpt    5   3380678.864 ±   67346.425   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              N/A  thrpt    5      3076.426 ±      61.508  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         N/A  thrpt    5      1432.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      3054.795 ±      46.924  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1421.965 ±      37.868    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.096 ±       0.122  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.045 ±       0.056    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   N/A  thrpt    5        45.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    N/A  thrpt    5        39.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       N/A  thrpt    5   7945563.032 ±  189835.501   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        N/A  thrpt    5      1494.414 ±      35.579  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   N/A  thrpt    5       296.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      1449.055 ±     696.312  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5       286.956 ±     135.285    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.475 ±       3.987  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.094 ±       0.790    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             N/A  thrpt    5        22.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              N/A  thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      N/A  thrpt    5   4013159.746 ±   92124.875   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       N/A  thrpt    5      2407.027 ±      55.458  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  N/A  thrpt    5       944.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      2358.317 ±      76.919  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       924.907 ±      28.429    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.108 ±       0.143  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.042 ±       0.056    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            N/A  thrpt    5        35.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             N/A  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     N/A  thrpt    5   7499860.804 ±  200084.219   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      N/A  thrpt    5      1410.738 ±      36.907  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 N/A  thrpt    5       296.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5      1413.930 ±     559.787  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5       296.560 ±     111.130    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.079 ±       0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.017 ±       0.018    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           N/A  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            N/A  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          N/A  thrpt    5   4932119.083 ±  157643.032   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           N/A  thrpt    5      3058.614 ±      98.183  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      N/A  thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      3049.721 ±      63.308  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       973.216 ±      36.914    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.104 ±       0.150  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.033 ±       0.048    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                N/A  thrpt    5        45.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 N/A  thrpt    5        38.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            N/A  thrpt    5   2773879.220 ±   41075.670   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             N/A  thrpt    5      1720.415 ±      26.303  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1743.795 ±     559.484  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       989.364 ±     323.310    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.096 ±       0.185  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.054 ±       0.105    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  N/A  thrpt    5        26.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   N/A  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      N/A  thrpt    5   9482947.244 ±  194455.959   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       915.946 ±      18.464  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       914.811 ±     555.683  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       151.906 ±      94.406    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.468 ±       3.927  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.078 ±       0.651    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            N/A  thrpt    5        14.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             N/A  thrpt    5        23.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     N/A  thrpt    5   4866025.904 ±  188091.598   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5      1286.288 ±      50.107  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5       416.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5      1260.611 ±     596.606  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5       407.702 ±     193.022    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.075 ±       0.251  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.024 ±       0.080    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           N/A  thrpt    5        19.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            N/A  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    N/A  thrpt    5   9769448.353 ±  411908.828   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       943.662 ±      40.176  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       931.583 ±     577.294  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       150.113 ±      94.240    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.067 ±       0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.011 ±       0.011    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          N/A  thrpt    5        14.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           N/A  thrpt    5        11.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            N/A  thrpt    5   6472223.937 ±   59907.217   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  N/A  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         N/A  thrpt    5   5046372.234 ±  214227.836   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          N/A  thrpt    5      1616.081 ±      68.110  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      1609.805 ±     555.201  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5       502.228 ±     180.988    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.058 ±       0.105  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.018 ±       0.033    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               N/A  thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                N/A  thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          N/A  thrpt    5    875694.344 ±   37386.923   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           N/A  thrpt    5      1193.074 ±      50.592  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      N/A  thrpt    5      2144.001 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      1203.107 ±     718.129  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      2162.891 ±    1312.228    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.087 ±       0.088  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.157 ±       0.162    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                N/A  thrpt    5        18.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 N/A  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    N/A  thrpt    5   2696961.322 ±   83564.209   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     N/A  thrpt    5       507.255 ±      15.809  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                N/A  thrpt    5       296.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       505.432 ±     760.929  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       295.439 ±     449.054    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.021 ±       0.082  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.012 ±       0.049    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          N/A  thrpt    5         8.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           N/A  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   N/A  thrpt    5   1062310.738 ±   58734.037   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    N/A  thrpt    5       637.332 ±      35.154  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               N/A  thrpt    5       944.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       589.900 ±     562.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5       876.094 ±     861.649    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.453 ±       3.680  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.674 ±       5.475    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         N/A  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          N/A  thrpt    5        10.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  N/A  thrpt    5   1822905.119 ±   96795.567   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   N/A  thrpt    5       342.874 ±      18.059  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              N/A  thrpt    5       296.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          N/A  thrpt    5       303.259 ±     166.680  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     N/A  thrpt    5       261.641 ±     137.973    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      N/A  thrpt    5         0.314 ±       2.534  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 N/A  thrpt    5         0.271 ±       2.194    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        N/A  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         N/A  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       N/A  thrpt    5   1156416.546 ±   47767.597   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        N/A  thrpt    5       717.265 ±      29.828  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   N/A  thrpt    5       976.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       724.191 ±     574.719  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5       985.464 ±     781.481    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.058 ±       0.174  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.079 ±       0.235    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             N/A  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              N/A  thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         N/A  thrpt    5   1277655.823 ±   10329.489   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          N/A  thrpt    5       967.746 ±       7.797  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     N/A  thrpt    5      1192.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       928.507 ±     579.318  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      1143.582 ±     711.589    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.058 ±       0.088  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.072 ±       0.108    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               N/A  thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                N/A  thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   N/A  thrpt    5   2933573.240 ±  106948.179   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    N/A  thrpt    5       685.970 ±      25.064  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               N/A  thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       650.744 ±      15.651  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5       349.131 ±      16.681    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.009 ±       0.045  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.005 ±       0.024    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         N/A  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          N/A  thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  N/A  thrpt    5   2424667.271 ±   61738.074   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   N/A  thrpt    5      1084.545 ±      27.656  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              N/A  thrpt    5       704.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          N/A  thrpt    5      1123.494 ±     706.623  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     N/A  thrpt    5       729.455 ±     463.609    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      N/A  thrpt    5         0.075 ±       0.091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 N/A  thrpt    5         0.049 ±       0.060    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        N/A  thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         N/A  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 N/A  thrpt    5   2589620.359 ±   33080.278   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  N/A  thrpt    5       605.521 ±       7.811  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             N/A  thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         N/A  thrpt    5       596.821 ±     571.352  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    N/A  thrpt    5       362.842 ±     348.896    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     N/A  thrpt    5         0.407 ±       2.972  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                N/A  thrpt    5         0.248 ±       1.812    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       N/A  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        N/A  thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         N/A  thrpt    5   2663856.755 ±   10717.617   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               N/A  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      N/A  thrpt    5   2405669.859 ±   86325.394   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       N/A  thrpt    5      1100.658 ±      39.423  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  N/A  thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      1132.682 ±     705.580  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       741.495 ±     477.547    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.067 ±       0.104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.044 ±       0.068    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            N/A  thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             N/A  thrpt    5        15.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     11766.394 ±     190.198   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1667.793 ±      26.876  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    223063.291 ±     115.301    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1672.141 ±      57.230  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5    223652.184 ±   10351.161    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.175 ±       0.287  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        23.415 ±      38.798    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        25.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        22.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     15080.895 ±     200.141   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       238.425 ±       3.122  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     24880.031 ±       0.018    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       204.661 ±     440.548  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     21374.554 ±   46011.296    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.870 ±       4.585    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     36674.224 ±    1402.430   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       392.005 ±      14.676  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     16816.019 ±       0.058    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       418.890 ±     638.249  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     18005.219 ±   27767.239    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.344 ±       2.869  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5        14.778 ±     123.183    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      3489.516 ±     333.606   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1112.048 ±     106.099  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    501314.861 ±     421.796    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1112.097 ±     725.805  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    501111.835 ±  316076.149    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         7.419 ±      29.725    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        51.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     60243.370 ±     603.574   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       769.391 ±       7.710  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20100.001 ±       0.138    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       712.586 ±     555.425  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     18613.663 ±   14438.152    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.071 ±       0.108  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.849 ±       2.809    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     81761.543 ±    4304.418   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       534.473 ±      28.140  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10288.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       580.494 ±     552.642  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     11163.214 ±   10521.376    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.405 ±       3.134  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         7.699 ±      59.420    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         9.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5     89663.261 ±     772.971   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        10.941 ±       0.097  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       192.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    337844.484 ±    4804.388   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1957.847 ±      28.061  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      9120.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1956.621 ±     593.796  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      9114.515 ±    2777.307    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.067 ±       0.067  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.310 ±       0.312    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        29.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    447909.744 ±   25988.513   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       546.470 ±      31.698  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1920.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       573.090 ±     545.233  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2016.048 ±    1947.929    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.499 ±       3.893  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.760 ±      13.744    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        12.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1229986.767 ±   11488.156   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       644.016 ±       6.263  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       598.708 ±     573.235  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       765.803 ±     730.496    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.071 ±       0.193  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.091 ±       0.247    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         8.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    114518.863 ±    3580.576   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3980.833 ±     123.207  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54704.004 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3941.940 ±     739.812  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     54184.827 ±   11436.017    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.129 ±       0.164  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.774 ±       2.253    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        58.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        51.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    318618.449 ±    9802.763   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1093.337 ±      33.593  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5400.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1129.912 ±     708.224  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      5582.298 ±    3544.878    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.067 ±       0.119  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.329 ±       0.586    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        17.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        15.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    638226.416 ±   14890.650   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       493.095 ±      11.473  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1216.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       507.540 ±     767.919  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1252.587 ±    1903.661    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.497 ±       4.055  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1.237 ±      10.105    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         8.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   1834029.029 ±   56097.245   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       848.425 ±      25.642  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       864.609 ±     698.513  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       741.411 ±     588.792    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.071 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.061 ±       0.037    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1924462.378 ±    2285.521   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    345662.239 ±    2681.152   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       511.294 ±       3.993  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       511.401 ±     652.176  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2328.850 ±    2972.604    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.438 ±       3.412  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.999 ±      15.590    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] Benchmark result is saved to jdk8.json
[success] Total time: 5399 s, completed Apr 19, 2018 9:39:00 PM
