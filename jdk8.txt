[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Mar 29, 2018 3:30:55 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:941:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.21.6-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.21.6-SNAPSHOT.jar ...
[info] Compiling 47 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intCodec.decodeValue(in, 0));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:57: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig())
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = JsoniterCodecs.this.intCodec.decodeValue(in, _a);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decodeValue(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.a, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.b, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = JsoniterCodecs.this.intCodec.decodeValue(in, _value);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.value, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decodeValue(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decodeValue(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = JsoniterCodecs.this.intCodec.decodeValue(in, _followers_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = JsoniterCodecs.this.intCodec.decodeValue(in, _friends_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = JsoniterCodecs.this.intCodec.decodeValue(in, _listed_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favourites_count);
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = JsoniterCodecs.this.intCodec.decodeValue(in, _utc_offset);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decodeValue(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = JsoniterCodecs.this.intCodec.decodeValue(in, _statuses_count);
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decodeValue(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.expanded_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.display_url, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.location, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.description, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.followers_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.friends_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.listed_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favourites_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.utc_offset, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.time_zone, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.statuses_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_banner_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_link_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_border_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_fill_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_text_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.translator_type, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.6-SNAPSHOT.jar ...
[info] Compiling 41 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 339 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 490 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.6-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.6-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -jvm /usr/lib/jvm/java-8-oracle/bin/java -prof gc -rf json -rff jdk-8_scala-2.12.5.json .*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336014.808 ops/s
[info] # Warmup Iteration   2: 790366.171 ops/s
[info] # Warmup Iteration   3: 784687.908 ops/s
[info] Iteration   1: 794899.747 ops/s
[info]                  ·gc.alloc.rate:                   2093.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2330.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4613.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 803468.475 ops/s
[info]                  ·gc.alloc.rate:                   2115.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3941.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 799251.456 ops/s
[info]                  ·gc.alloc.rate:                   2104.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3983.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 791871.686 ops/s
[info]                  ·gc.alloc.rate:                   2085.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4035.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 794920.977 ops/s
[info]                  ·gc.alloc.rate:                   2092.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4030.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   796882.468 ±(99.9%) 17421.149 ops/s [Average]
[info]   (min, avg, max) = (791871.686, 796882.468, 803468.475), stdev = 4524.217
[info]   CI (99.9%): [779461.319, 814303.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2098.314 ±(99.9%) 46.247 MB/sec [Average]
[info]   (min, avg, max) = (2085.218, 2098.314, 2115.972), stdev = 12.010
[info]   CI (99.9%): [2052.068, 2144.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2086.471 ±(99.9%) 525.938 MB/sec [Average]
[info]   (min, avg, max) = (2012.794, 2086.471, 2330.315), stdev = 136.584
[info]   CI (99.9%): [1560.533, 2612.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4121.082 ±(99.9%) 1070.380 B/op [Average]
[info]   (min, avg, max) = (3941.932, 4121.082, 4613.636), stdev = 277.974
[info]   CI (99.9%): [3050.702, 5191.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.205 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.205, 0.247), stdev = 0.050
[info]   CI (99.9%): [0.013, 0.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.30% complete, ETA 01:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 524747.423 ops/s
[info] # Warmup Iteration   2: 1582422.157 ops/s
[info] # Warmup Iteration   3: 1610335.203 ops/s
[info] Iteration   1: 1615929.227 ops/s
[info]                  ·gc.alloc.rate:                   1149.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1269.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1597668.726 ops/s
[info]                  ·gc.alloc.rate:                   1136.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1576495.057 ops/s
[info]                  ·gc.alloc.rate:                   1122.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1314.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1550960.423 ops/s
[info]                  ·gc.alloc.rate:                   1103.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1008.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1567127.017 ops/s
[info]                  ·gc.alloc.rate:                   1115.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1001.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1581636.090 ±(99.9%) 98380.083 ops/s [Average]
[info]   (min, avg, max) = (1550960.423, 1581636.090, 1615929.227), stdev = 25548.995
[info]   CI (99.9%): [1483256.007, 1680016.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1125.691 ±(99.9%) 69.591 MB/sec [Average]
[info]   (min, avg, max) = (1103.764, 1125.691, 1149.904), stdev = 18.073
[info]   CI (99.9%): [1056.099, 1195.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1118.506 ±(99.9%) 673.183 MB/sec [Average]
[info]   (min, avg, max) = (981.240, 1118.506, 1316.668), stdev = 174.824
[info]   CI (99.9%): [445.322, 1791.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1111.994 ±(99.9%) 637.297 B/op [Average]
[info]   (min, avg, max) = (966.614, 1111.994, 1314.136), stdev = 165.504
[info]   CI (99.9%): [474.696, 1749.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.105), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.61% complete, ETA 01:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2177100.460 ops/s
[info] # Warmup Iteration   2: 3491580.712 ops/s
[info] # Warmup Iteration   3: 3643353.888 ops/s
[info] Iteration   1: 3618761.417 ops/s
[info]                  ·gc.alloc.rate:               239.117 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111.252 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3549506.919 ops/s
[info]                  ·gc.alloc.rate:               234.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3722802.692 ops/s
[info]                  ·gc.alloc.rate:                   245.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3719063.822 ops/s
[info]                  ·gc.alloc.rate:               245.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3589578.496 ops/s
[info]                  ·gc.alloc.rate:                   237.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3639942.669 ±(99.9%) 300064.750 ops/s [Average]
[info]   (min, avg, max) = (3549506.919, 3639942.669, 3722802.692), stdev = 77925.863
[info]   CI (99.9%): [3339877.919, 3940007.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   240.526 ±(99.9%) 19.796 MB/sec [Average]
[info]   (min, avg, max) = (234.545, 240.526, 245.995), stdev = 5.141
[info]   CI (99.9%): [220.729, 260.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   271.197 ±(99.9%) 132.602 MB/sec [Average]
[info]   (min, avg, max) = (255.791, 271.197, 332.798), stdev = 34.436
[info]   CI (99.9%): [138.595, 403.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   117.395 ±(99.9%) 61.937 B/op [Average]
[info]   (min, avg, max) = (108.146, 117.395, 145.896), stdev = 16.085
[info]   CI (99.9%): [55.458, 179.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.325 ±(99.9%) 2.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.574), stdev = 0.699
[info]   CI (99.9%): [≈ 0, 3.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.142 ±(99.9%) 1.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.690), stdev = 0.306
[info]   CI (99.9%): [≈ 0, 1.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.91% complete, ETA 01:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27081.513 ops/s
[info] # Warmup Iteration   2: 165005.220 ops/s
[info] # Warmup Iteration   3: 167445.352 ops/s
[info] Iteration   1: 171306.585 ops/s
[info]                  ·gc.alloc.rate:                   1425.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1631.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14978.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.530 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 170143.309 ops/s
[info]                  ·gc.alloc.rate:                   1414.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12145.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 172564.152 ops/s
[info]                  ·gc.alloc.rate:                   1435.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12065.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 169382.869 ops/s
[info]                  ·gc.alloc.rate:                   1409.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12373.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 172416.932 ops/s
[info]                  ·gc.alloc.rate:                   1433.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15284.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.950 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   171162.769 ±(99.9%) 5364.994 ops/s [Average]
[info]   (min, avg, max) = (169382.869, 171162.769, 172564.152), stdev = 1393.272
[info]   CI (99.9%): [165797.775, 176527.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1423.602 ±(99.9%) 44.213 MB/sec [Average]
[info]   (min, avg, max) = (1409.057, 1423.602, 1435.027), stdev = 11.482
[info]   CI (99.9%): [1379.389, 1467.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13088.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13088.003, 13088.003, 13088.003), stdev = 0.001
[info]   CI (99.9%): [13088.002, 13088.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1454.734 ±(99.9%) 699.347 MB/sec [Average]
[info]   (min, avg, max) = (1312.944, 1454.734, 1674.539), stdev = 181.618
[info]   CI (99.9%): [755.387, 2154.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13369.638 ±(99.9%) 6223.408 B/op [Average]
[info]   (min, avg, max) = (12065.936, 13369.638, 15284.664), stdev = 1616.199
[info]   CI (99.9%): [7146.231, 19593.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.100, 0.167), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.918 ±(99.9%) 2.115 B/op [Average]
[info]   (min, avg, max) = (0.193, 0.918, 1.530), stdev = 0.549
[info]   CI (99.9%): [≈ 0, 3.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.21% complete, ETA 01:08:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227710.759 ops/s
[info] # Warmup Iteration   2: 563501.871 ops/s
[info] # Warmup Iteration   3: 576363.290 ops/s
[info] Iteration   1: 572828.587 ops/s
[info]                  ·gc.alloc.rate:                   1948.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5479.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 569060.499 ops/s
[info]                  ·gc.alloc.rate:                   1936.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5555.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 559717.315 ops/s
[info]                  ·gc.alloc.rate:                   1904.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4731.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 561657.665 ops/s
[info]                  ·gc.alloc.rate:                   1909.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5680.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 576172.399 ops/s
[info]                  ·gc.alloc.rate:                   1959.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5553.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   567887.293 ±(99.9%) 27227.660 ops/s [Average]
[info]   (min, avg, max) = (559717.315, 567887.293, 576172.399), stdev = 7070.937
[info]   CI (99.9%): [540659.633, 595114.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1931.655 ±(99.9%) 92.192 MB/sec [Average]
[info]   (min, avg, max) = (1904.272, 1931.655, 1959.237), stdev = 23.942
[info]   CI (99.9%): [1839.464, 2023.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5352.001, 5352.001, 5352.001), stdev = 0.001
[info]   CI (99.9%): [5352.001, 5352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1949.711 ±(99.9%) 575.707 MB/sec [Average]
[info]   (min, avg, max) = (1683.588, 1949.711, 2033.064), stdev = 149.509
[info]   CI (99.9%): [1374.004, 2525.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5400.112 ±(99.9%) 1465.159 B/op [Average]
[info]   (min, avg, max) = (4731.762, 5400.112, 5680.248), stdev = 380.497
[info]   CI (99.9%): [3934.953, 6865.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.266 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (0.175, 0.266, 0.351), stdev = 0.067
[info]   CI (99.9%): [0.008, 0.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.52% complete, ETA 01:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 701483.888 ops/s
[info] # Warmup Iteration   2: 2031994.582 ops/s
[info] # Warmup Iteration   3: 2078194.556 ops/s
[info] Iteration   1: 2093238.796 ops/s
[info]                  ·gc.alloc.rate:                   808.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     489.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2032348.400 ops/s
[info]                  ·gc.alloc.rate:                   785.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2054991.867 ops/s
[info]                  ·gc.alloc.rate:                   793.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     500.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2055193.963 ops/s
[info]                  ·gc.alloc.rate:                   794.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     753.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2077685.458 ops/s
[info]                  ·gc.alloc.rate:                   802.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     499.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2062691.697 ±(99.9%) 90185.608 ops/s [Average]
[info]   (min, avg, max) = (2032348.400, 2062691.697, 2093238.796), stdev = 23420.916
[info]   CI (99.9%): [1972506.089, 2152877.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   796.981 ±(99.9%) 34.740 MB/sec [Average]
[info]   (min, avg, max) = (785.262, 796.981, 808.802), stdev = 9.022
[info]   CI (99.9%): [762.241, 831.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   785.011 ±(99.9%) 688.214 MB/sec [Average]
[info]   (min, avg, max) = (651.207, 785.011, 984.068), stdev = 178.727
[info]   CI (99.9%): [96.797, 1473.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   599.825 ±(99.9%) 545.775 B/op [Average]
[info]   (min, avg, max) = (489.532, 599.825, 756.800), stdev = 141.736
[info]   CI (99.9%): [54.049, 1145.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.045, 0.081), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.82% complete, ETA 01:08:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5700002.587 ops/s
[info] # Warmup Iteration   2: 9401369.558 ops/s
[info] # Warmup Iteration   3: 9902085.407 ops/s
[info] Iteration   1: 9891850.311 ops/s
[info]                  ·gc.alloc.rate:               502.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 9970353.420 ops/s
[info]                  ·gc.alloc.rate:                   506.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9998640.350 ops/s
[info]                  ·gc.alloc.rate:               508.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52.219 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 9984900.498 ops/s
[info]                  ·gc.alloc.rate:                   507.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9776466.917 ops/s
[info]                  ·gc.alloc.rate:               496.949 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   9924442.299 ±(99.9%) 356196.672 ops/s [Average]
[info]   (min, avg, max) = (9776466.917, 9924442.299, 9998640.350), stdev = 92503.145
[info]   CI (99.9%): [9568245.627, 10280638.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   504.521 ±(99.9%) 18.288 MB/sec [Average]
[info]   (min, avg, max) = (496.949, 504.521, 508.353), stdev = 4.749
[info]   CI (99.9%): [486.233, 522.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.316 ±(99.9%) 762.706 MB/sec [Average]
[info]   (min, avg, max) = (255.788, 449.316, 663.736), stdev = 198.072
[info]   CI (99.9%): [≈ 0, 1212.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   71.128 ±(99.9%) 119.404 B/op [Average]
[info]   (min, avg, max) = (40.700, 71.128, 104.734), stdev = 31.009
[info]   CI (99.9%): [≈ 0, 190.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.392 ±(99.9%) 3.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.392, 1.856), stdev = 0.819
[info]   CI (99.9%): [≈ 0, 3.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.293), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.12% complete, ETA 01:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65891.064 ops/s
[info] # Warmup Iteration   2: 292654.819 ops/s
[info] # Warmup Iteration   3: 304530.387 ops/s
[info] Iteration   1: 287017.662 ops/s
[info]                  ·gc.alloc.rate:               983.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      975.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5349.673 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 299873.916 ops/s
[info]                  ·gc.alloc.rate:                   1027.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5130.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 295583.545 ops/s
[info]                  ·gc.alloc.rate:               1012.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      982.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5233.675 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 305357.771 ops/s
[info]                  ·gc.alloc.rate:                   1046.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5086.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 305604.534 ops/s
[info]                  ·gc.alloc.rate:                   1047.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6827.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   298687.486 ±(99.9%) 29799.924 ops/s [Average]
[info]   (min, avg, max) = (287017.662, 298687.486, 305604.534), stdev = 7738.946
[info]   CI (99.9%): [268887.562, 328487.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1023.393 ±(99.9%) 101.587 MB/sec [Average]
[info]   (min, avg, max) = (983.701, 1023.393, 1047.007), stdev = 26.382
[info]   CI (99.9%): [921.806, 1124.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.002), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1049.830 ±(99.9%) 593.976 MB/sec [Average]
[info]   (min, avg, max) = (975.978, 1049.830, 1325.657), stdev = 154.254
[info]   CI (99.9%): [455.855, 1643.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5525.577 ±(99.9%) 2828.561 B/op [Average]
[info]   (min, avg, max) = (5086.725, 5525.577, 6827.024), stdev = 734.568
[info]   CI (99.9%): [2697.016, 8354.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.303 ±(99.9%) 1.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.303, 0.765), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.42% complete, ETA 01:07:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 946811.252 ops/s
[info] # Warmup Iteration   2: 1653044.049 ops/s
[info] # Warmup Iteration   3: 1673412.145 ops/s
[info] Iteration   1: 1697748.971 ops/s
[info]                  ·gc.alloc.rate:                   2623.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2487.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1680065.478 ops/s
[info]                  ·gc.alloc.rate:                   2596.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2213.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1683831.339 ops/s
[info]                  ·gc.alloc.rate:                   2601.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2533.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1681042.204 ops/s
[info]                  ·gc.alloc.rate:                   2597.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2544.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1705006.139 ops/s
[info]                  ·gc.alloc.rate:                   2635.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2512.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1689538.826 ±(99.9%) 43101.271 ops/s [Average]
[info]   (min, avg, max) = (1680065.478, 1689538.826, 1705006.139), stdev = 11193.263
[info]   CI (99.9%): [1646437.556, 1732640.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2610.962 ±(99.9%) 67.928 MB/sec [Average]
[info]   (min, avg, max) = (2596.095, 2610.962, 2635.646), stdev = 17.641
[info]   CI (99.9%): [2543.033, 2678.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2639.455 ±(99.9%) 598.969 MB/sec [Average]
[info]   (min, avg, max) = (2362.541, 2639.455, 2722.917), stdev = 155.550
[info]   CI (99.9%): [2040.486, 3238.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2458.271 ±(99.9%) 534.134 B/op [Average]
[info]   (min, avg, max) = (2213.209, 2458.271, 2544.576), stdev = 138.713
[info]   CI (99.9%): [1924.137, 2992.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.187), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.101 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.101, 0.176), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.73% complete, ETA 01:07:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 871460.504 ops/s
[info] # Warmup Iteration   2: 2501034.392 ops/s
[info] # Warmup Iteration   3: 2515402.453 ops/s
[info] Iteration   1: 2536304.318 ops/s
[info]                  ·gc.alloc.rate:                   1779.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1019.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2560758.532 ops/s
[info]                  ·gc.alloc.rate:                   1796.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2601576.961 ops/s
[info]                  ·gc.alloc.rate:                   1824.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1010.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2589665.398 ops/s
[info]                  ·gc.alloc.rate:                   1816.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1021.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2590332.014 ops/s
[info]                  ·gc.alloc.rate:                   1817.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1231.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2575727.445 ±(99.9%) 102856.327 ops/s [Average]
[info]   (min, avg, max) = (2536304.318, 2575727.445, 2601576.961), stdev = 26711.461
[info]   CI (99.9%): [2472871.118, 2678583.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1806.886 ±(99.9%) 71.393 MB/sec [Average]
[info]   (min, avg, max) = (1779.703, 1806.886, 1824.889), stdev = 18.540
[info]   CI (99.9%): [1735.493, 1878.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1802.192 ±(99.9%) 726.924 MB/sec [Average]
[info]   (min, avg, max) = (1642.969, 1802.192, 2026.464), stdev = 188.780
[info]   CI (99.9%): [1075.268, 2529.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1101.149 ±(99.9%) 442.774 B/op [Average]
[info]   (min, avg, max) = (1010.717, 1101.149, 1231.240), stdev = 114.987
[info]   CI (99.9%): [658.375, 1543.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.059, 0.077), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.03% complete, ETA 01:07:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7153662.963 ops/s
[info] # Warmup Iteration   2: 8848345.799 ops/s
[info] # Warmup Iteration   3: 9254050.281 ops/s
[info] Iteration   1: 9316287.736 ops/s
[info]                  ·gc.alloc.rate:                   1183.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9235783.726 ops/s
[info]                  ·gc.alloc.rate:                   1173.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8988148.640 ops/s
[info]                  ·gc.alloc.rate:                   1142.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8927316.179 ops/s
[info]                  ·gc.alloc.rate:                   1134.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8939386.078 ops/s
[info]                  ·gc.alloc.rate:                   1135.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9081384.472 ±(99.9%) 698475.860 ops/s [Average]
[info]   (min, avg, max) = (8927316.179, 9081384.472, 9316287.736), stdev = 181391.963
[info]   CI (99.9%): [8382908.612, 9779860.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1154.019 ±(99.9%) 88.642 MB/sec [Average]
[info]   (min, avg, max) = (1134.444, 1154.019, 1183.808), stdev = 23.020
[info]   CI (99.9%): [1065.377, 1242.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1137.410 ±(99.9%) 704.797 MB/sec [Average]
[info]   (min, avg, max) = (997.841, 1137.410, 1342.020), stdev = 183.034
[info]   CI (99.9%): [432.613, 1842.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   197.196 ±(99.9%) 123.460 B/op [Average]
[info]   (min, avg, max) = (168.582, 197.196, 236.595), stdev = 32.062
[info]   CI (99.9%): [73.736, 320.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.253 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.208), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.018, 0.035), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.33% complete, ETA 01:07:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143209.103 ops/s
[info] # Warmup Iteration   2: 618587.598 ops/s
[info] # Warmup Iteration   3: 632236.820 ops/s
[info] Iteration   1: 622446.366 ops/s
[info]                  ·gc.alloc.rate:                   1645.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4134.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 619623.654 ops/s
[info]                  ·gc.alloc.rate:                   1637.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4187.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 640702.520 ops/s
[info]                  ·gc.alloc.rate:                   1693.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4086.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 623972.067 ops/s
[info]                  ·gc.alloc.rate:                   1649.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4223.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 624227.822 ops/s
[info]                  ·gc.alloc.rate:                   1650.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4245.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   626194.486 ±(99.9%) 32015.632 ops/s [Average]
[info]   (min, avg, max) = (619623.654, 626194.486, 640702.520), stdev = 8314.358
[info]   CI (99.9%): [594178.854, 658210.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1655.416 ±(99.9%) 84.219 MB/sec [Average]
[info]   (min, avg, max) = (1637.708, 1655.416, 1693.495), stdev = 21.871
[info]   CI (99.9%): [1571.196, 1739.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1661.431 ±(99.9%) 74.724 MB/sec [Average]
[info]   (min, avg, max) = (1636.077, 1661.431, 1684.425), stdev = 19.406
[info]   CI (99.9%): [1586.707, 1736.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4175.582 ±(99.9%) 249.434 B/op [Average]
[info]   (min, avg, max) = (4086.802, 4175.582, 4245.108), stdev = 64.777
[info]   CI (99.9%): [3926.148, 4425.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.208), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.220 ±(99.9%) 0.683 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.220, 0.529), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.64% complete, ETA 01:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1136975.627 ops/s
[info] # Warmup Iteration   2: 1951181.950 ops/s
[info] # Warmup Iteration   3: 1940673.158 ops/s
[info] Iteration   1: 1980753.586 ops/s
[info]                  ·gc.alloc.rate:                   1973.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1586.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1947785.588 ops/s
[info]                  ·gc.alloc.rate:                   1940.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1624.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1989285.694 ops/s
[info]                  ·gc.alloc.rate:                   1982.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1600.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1960629.702 ops/s
[info]                  ·gc.alloc.rate:                   1953.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1629.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1996728.266 ops/s
[info]                  ·gc.alloc.rate:                   1989.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1336.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1975036.567 ±(99.9%) 78359.074 ops/s [Average]
[info]   (min, avg, max) = (1947785.588, 1975036.567, 1996728.266), stdev = 20349.603
[info]   CI (99.9%): [1896677.493, 2053395.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1967.920 ±(99.9%) 78.548 MB/sec [Average]
[info]   (min, avg, max) = (1940.554, 1967.920, 1989.234), stdev = 20.399
[info]   CI (99.9%): [1889.372, 2046.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1568.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1568.000, 1568.000, 1568.000), stdev = 0.001
[info]   CI (99.9%): [1568.000, 1568.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1951.325 ±(99.9%) 552.404 MB/sec [Average]
[info]   (min, avg, max) = (1695.665, 1951.325, 2029.909), stdev = 143.457
[info]   CI (99.9%): [1398.922, 2503.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1555.467 ±(99.9%) 475.910 B/op [Average]
[info]   (min, avg, max) = (1336.596, 1555.467, 1629.394), stdev = 123.592
[info]   CI (99.9%): [1079.557, 2031.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.070, 0.101), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.94% complete, ETA 01:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2189267.723 ops/s
[info] # Warmup Iteration   2: 5854283.980 ops/s
[info] # Warmup Iteration   3: 5977680.431 ops/s
[info] Iteration   1: 5953556.201 ops/s
[info]                  ·gc.alloc.rate:                   1634.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     432.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5934841.194 ops/s
[info]                  ·gc.alloc.rate:                   1628.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     438.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5951055.408 ops/s
[info]                  ·gc.alloc.rate:                   1634.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6022609.311 ops/s
[info]                  ·gc.alloc.rate:                   1653.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     438.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6026266.101 ops/s
[info]                  ·gc.alloc.rate:                   1654.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     439.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   5977665.643 ±(99.9%) 166796.022 ops/s [Average]
[info]   (min, avg, max) = (5934841.194, 5977665.643, 6026266.101), stdev = 43316.397
[info]   CI (99.9%): [5810869.621, 6144461.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1641.017 ±(99.9%) 45.162 MB/sec [Average]
[info]   (min, avg, max) = (1628.997, 1641.017, 1654.096), stdev = 11.728
[info]   CI (99.9%): [1595.856, 1686.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1662.888 ±(99.9%) 73.987 MB/sec [Average]
[info]   (min, avg, max) = (1636.264, 1662.888, 1684.344), stdev = 19.214
[info]   CI (99.9%): [1588.901, 1736.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   437.752 ±(99.9%) 12.129 B/op [Average]
[info]   (min, avg, max) = (432.409, 437.752, 440.260), stdev = 3.150
[info]   CI (99.9%): [425.623, 449.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.029, 0.044), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.24% complete, ETA 01:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12866053.160 ops/s
[info] # Warmup Iteration   2: 26468373.538 ops/s
[info] # Warmup Iteration   3: 27469235.277 ops/s
[info] Iteration   1: 27396693.932 ops/s
[info]                  ·gc.alloc.rate:                   835.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27765032.066 ops/s
[info]                  ·gc.alloc.rate:                   847.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 27408049.690 ops/s
[info]                  ·gc.alloc.rate:                   836.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27448915.612 ops/s
[info]                  ·gc.alloc.rate:               837.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.138 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 27858706.844 ops/s
[info]                  ·gc.alloc.rate:                   849.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   27575479.629 ±(99.9%) 843992.597 ops/s [Average]
[info]   (min, avg, max) = (27396693.932, 27575479.629, 27858706.844), stdev = 219182.197
[info]   CI (99.9%): [26731487.032, 28419472.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   841.201 ±(99.9%) 26.180 MB/sec [Average]
[info]   (min, avg, max) = (835.536, 841.201, 849.969), stdev = 6.799
[info]   CI (99.9%): [815.021, 867.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   864.082 ±(99.9%) 701.741 MB/sec [Average]
[info]   (min, avg, max) = (663.753, 864.082, 999.941), stdev = 182.240
[info]   CI (99.9%): [162.341, 1565.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   49.316 ±(99.9%) 40.242 B/op [Average]
[info]   (min, avg, max) = (37.610, 49.316, 57.189), stdev = 10.451
[info]   CI (99.9%): [9.074, 89.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.55% complete, ETA 01:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18728992.352 ops/s
[info] # Warmup Iteration   2: 26747114.331 ops/s
[info] # Warmup Iteration   3: 26600130.542 ops/s
[info] Iteration   1: 26616267.367 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 26606058.017 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 26603958.902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26627186.070 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 26614398.894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   26613573.850 ±(99.9%) 35613.941 ops/s [Average]
[info]   (min, avg, max) = (26603958.902, 26613573.850, 26627186.070), stdev = 9248.827
[info]   CI (99.9%): [26577959.909, 26649187.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.85% complete, ETA 01:05:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343370.371 ops/s
[info] # Warmup Iteration   2: 1090304.749 ops/s
[info] # Warmup Iteration   3: 1090054.175 ops/s
[info] Iteration   1: 1097070.378 ops/s
[info]                  ·gc.alloc.rate:                   1668.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2351.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1091795.256 ops/s
[info]                  ·gc.alloc.rate:                   1659.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2383.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1074283.736 ops/s
[info]                  ·gc.alloc.rate:                   1632.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2441.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1071290.709 ops/s
[info]                  ·gc.alloc.rate:                   1628.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2464.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1079506.967 ops/s
[info]                  ·gc.alloc.rate:                   1640.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2457.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1082789.409 ±(99.9%) 43068.396 ops/s [Average]
[info]   (min, avg, max) = (1071290.709, 1082789.409, 1097070.378), stdev = 11184.726
[info]   CI (99.9%): [1039721.013, 1125857.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1645.804 ±(99.9%) 66.233 MB/sec [Average]
[info]   (min, avg, max) = (1628.317, 1645.804, 1668.046), stdev = 17.200
[info]   CI (99.9%): [1579.571, 1712.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2392.000, 2392.000, 2392.000), stdev = 0.001
[info]   CI (99.9%): [2392.000, 2392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.531 ±(99.9%) 70.361 MB/sec [Average]
[info]   (min, avg, max) = (1639.732, 1664.531, 1685.341), stdev = 18.273
[info]   CI (99.9%): [1594.170, 1734.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2419.614 ±(99.9%) 190.598 B/op [Average]
[info]   (min, avg, max) = (2351.397, 2419.614, 2464.253), stdev = 49.498
[info]   CI (99.9%): [2229.015, 2610.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.127 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.127, 0.180), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.15% complete, ETA 01:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15365.673 ops/s
[info] # Warmup Iteration   2: 18929.266 ops/s
[info] # Warmup Iteration   3: 18778.532 ops/s
[info] Iteration   1: 18353.016 ops/s
[info]                  ·gc.alloc.rate:                   1299.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              111440.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113791.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.570 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18705.678 ops/s
[info]                  ·gc.alloc.rate:                   1324.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112093.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18714.869 ops/s
[info]                  ·gc.alloc.rate:                   1325.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112481.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.753 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18974.326 ops/s
[info]                  ·gc.alloc.rate:                   1343.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              111447.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111394.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.180 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19034.260 ops/s
[info]                  ·gc.alloc.rate:                   1347.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111422.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.606 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   18756.430 ±(99.9%) 1039.877 ops/s [Average]
[info]   (min, avg, max) = (18353.016, 18756.430, 19034.260), stdev = 270.053
[info]   CI (99.9%): [17716.553, 19796.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1328.382 ±(99.9%) 73.609 MB/sec [Average]
[info]   (min, avg, max) = (1299.564, 1328.382, 1347.873), stdev = 19.116
[info]   CI (99.9%): [1254.773, 1401.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   111446.415 ±(99.9%) 12.174 B/op [Average]
[info]   (min, avg, max) = (111440.796, 111446.415, 111448.033), stdev = 3.161
[info]   CI (99.9%): [111434.241, 111458.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.670 ±(99.9%) 31.435 MB/sec [Average]
[info]   (min, avg, max) = (1326.981, 1337.670, 1347.570), stdev = 8.164
[info]   CI (99.9%): [1306.235, 1369.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112236.746 ±(99.9%) 3788.025 B/op [Average]
[info]   (min, avg, max) = (111394.278, 112236.746, 113791.861), stdev = 983.738
[info]   CI (99.9%): [108448.721, 116024.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.024 ±(99.9%) 15.480 B/op [Average]
[info]   (min, avg, max) = (3.570, 8.024, 14.012), stdev = 4.020
[info]   CI (99.9%): [≈ 0, 23.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.45% complete, ETA 01:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21014.228 ops/s
[info] # Warmup Iteration   2: 31687.128 ops/s
[info] # Warmup Iteration   3: 31393.076 ops/s
[info] Iteration   1: 30902.677 ops/s
[info]                  ·gc.alloc.rate:                   830.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              42274.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33316.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 32176.079 ops/s
[info]                  ·gc.alloc.rate:                   863.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48028.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 32207.341 ops/s
[info]                  ·gc.alloc.rate:                   864.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48144.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 31457.396 ops/s
[info]                  ·gc.alloc.rate:                   844.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32960.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31857.237 ops/s
[info]                  ·gc.alloc.rate:                   855.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49052.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31720.146 ±(99.9%) 2110.245 ops/s [Average]
[info]   (min, avg, max) = (30902.677, 31720.146, 32207.341), stdev = 548.024
[info]   CI (99.9%): [29609.901, 33830.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   851.636 ±(99.9%) 56.125 MB/sec [Average]
[info]   (min, avg, max) = (830.040, 851.636, 864.614), stdev = 14.576
[info]   CI (99.9%): [795.510, 907.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42253.289 ±(99.9%) 45.419 B/op [Average]
[info]   (min, avg, max) = (42248.013, 42253.289, 42274.389), stdev = 11.795
[info]   CI (99.9%): [42207.869, 42298.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   854.653 ±(99.9%) 696.800 MB/sec [Average]
[info]   (min, avg, max) = (654.148, 854.653, 992.894), stdev = 180.957
[info]   CI (99.9%): [157.853, 1551.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42300.466 ±(99.9%) 32245.720 B/op [Average]
[info]   (min, avg, max) = (32960.673, 42300.466, 49052.242), stdev = 8374.111
[info]   CI (99.9%): [10054.746, 74546.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.296 ±(99.9%) 8.990 B/op [Average]
[info]   (min, avg, max) = (1.017, 3.296, 6.109), stdev = 2.335
[info]   CI (99.9%): [≈ 0, 12.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.76% complete, ETA 01:05:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26558.965 ops/s
[info] # Warmup Iteration   2: 29270.925 ops/s
[info] # Warmup Iteration   3: 29538.905 ops/s
[info] Iteration   1: 29245.681 ops/s
[info]                  ·gc.alloc.rate:                   392.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27531.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 29562.554 ops/s
[info]                  ·gc.alloc.rate:                   397.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17696.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29496.167 ops/s
[info]                  ·gc.alloc.rate:                   396.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17736.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29627.205 ops/s
[info]                  ·gc.alloc.rate:               398.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17657.918 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 29648.125 ops/s
[info]                  ·gc.alloc.rate:                   398.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17644.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   29515.946 ±(99.9%) 625.230 ops/s [Average]
[info]   (min, avg, max) = (29245.681, 29515.946, 29648.125), stdev = 162.370
[info]   CI (99.9%): [28890.716, 30141.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   396.554 ±(99.9%) 8.302 MB/sec [Average]
[info]   (min, avg, max) = (392.973, 396.554, 398.328), stdev = 2.156
[info]   CI (99.9%): [388.252, 404.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.016 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (21144.015, 21144.016, 21144.020), stdev = 0.002
[info]   CI (99.9%): [21144.007, 21144.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   368.265 ±(99.9%) 308.741 MB/sec [Average]
[info]   (min, avg, max) = (332.396, 368.265, 511.694), stdev = 80.179
[info]   CI (99.9%): [59.524, 677.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19653.530 ±(99.9%) 16959.231 B/op [Average]
[info]   (min, avg, max) = (17644.223, 19653.530, 27531.842), stdev = 4404.259
[info]   CI (99.9%): [2694.298, 36612.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.341 ±(99.9%) 2.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.341, 1.620), stdev = 0.715
[info]   CI (99.9%): [≈ 0, 3.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.139 ±(99.9%) 146.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.139, 86.251), stdev = 38.084
[info]   CI (99.9%): [≈ 0, 164.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.06% complete, ETA 01:05:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15285.221 ops/s
[info] # Warmup Iteration   2: 25298.013 ops/s
[info] # Warmup Iteration   3: 25007.680 ops/s
[info] Iteration   1: 25850.315 ops/s
[info]                  ·gc.alloc.rate:                   1338.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79973.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26053.945 ops/s
[info]                  ·gc.alloc.rate:                   1349.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99751.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.545 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25894.016 ops/s
[info]                  ·gc.alloc.rate:                   1340.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80855.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.326 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25873.853 ops/s
[info]                  ·gc.alloc.rate:                   1339.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81364.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26046.689 ops/s
[info]                  ·gc.alloc.rate:                   1348.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81145.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25943.764 ±(99.9%) 379.384 ops/s [Average]
[info]   (min, avg, max) = (25850.315, 25943.764, 26053.945), stdev = 98.525
[info]   CI (99.9%): [25564.379, 26323.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1343.031 ±(99.9%) 19.566 MB/sec [Average]
[info]   (min, avg, max) = (1338.507, 1343.031, 1349.025), stdev = 5.081
[info]   CI (99.9%): [1323.465, 1362.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81456.018 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (81456.017, 81456.018, 81456.024), stdev = 0.003
[info]   CI (99.9%): [81456.006, 81456.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1395.454 ±(99.9%) 553.867 MB/sec [Average]
[info]   (min, avg, max) = (1314.144, 1395.454, 1652.020), stdev = 143.837
[info]   CI (99.9%): [841.587, 1949.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84618.108 ±(99.9%) 32639.028 B/op [Average]
[info]   (min, avg, max) = (79973.386, 84618.108, 99751.330), stdev = 8476.252
[info]   CI (99.9%): [51979.079, 117257.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.567 ±(99.9%) 4.078 B/op [Average]
[info]   (min, avg, max) = (5.031, 6.567, 7.597), stdev = 1.059
[info]   CI (99.9%): [2.489, 10.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.36% complete, ETA 01:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17823.326 ops/s
[info] # Warmup Iteration   2: 26912.208 ops/s
[info] # Warmup Iteration   3: 27391.523 ops/s
[info] Iteration   1: 27393.198 ops/s
[info]                  ·gc.alloc.rate:                   1876.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              107792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114701.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.980 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27278.138 ops/s
[info]                  ·gc.alloc.rate:                   1867.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              107766.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96617.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.809 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27578.830 ops/s
[info]                  ·gc.alloc.rate:                   1888.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115277.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.316 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27596.462 ops/s
[info]                  ·gc.alloc.rate:                   1889.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96362.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.374 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27293.351 ops/s
[info]                  ·gc.alloc.rate:                   1868.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117234.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.802 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27427.996 ±(99.9%) 586.921 ops/s [Average]
[info]   (min, avg, max) = (27278.138, 27427.996, 27596.462), stdev = 152.421
[info]   CI (99.9%): [26841.075, 28014.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1878.084 ±(99.9%) 39.824 MB/sec [Average]
[info]   (min, avg, max) = (1867.847, 1878.084, 1889.433), stdev = 10.342
[info]   CI (99.9%): [1838.260, 1917.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   107762.959 ±(99.9%) 67.187 B/op [Average]
[info]   (min, avg, max) = (107752.016, 107762.959, 107792.016), stdev = 17.448
[info]   CI (99.9%): [107695.772, 107830.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1882.809 ±(99.9%) 707.376 MB/sec [Average]
[info]   (min, avg, max) = (1674.610, 1882.809, 2033.071), stdev = 183.703
[info]   CI (99.9%): [1175.433, 2590.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   108038.621 ±(99.9%) 40755.881 B/op [Average]
[info]   (min, avg, max) = (96362.923, 108038.621, 117234.008), stdev = 10584.173
[info]   CI (99.9%): [67282.740, 148794.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.187), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.456 ±(99.9%) 12.482 B/op [Average]
[info]   (min, avg, max) = (2.374, 6.456, 10.809), stdev = 3.242
[info]   CI (99.9%): [≈ 0, 18.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.67% complete, ETA 01:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12796.288 ops/s
[info] # Warmup Iteration   2: 27203.030 ops/s
[info] # Warmup Iteration   3: 27329.161 ops/s
[info] Iteration   1: 27126.720 ops/s
[info]                  ·gc.alloc.rate:                   1590.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              92288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94979.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.623 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 27161.098 ops/s
[info]                  ·gc.alloc.rate:                   1592.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              92288.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95740.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.825 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27461.436 ops/s
[info]                  ·gc.alloc.rate:                   1610.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              92288.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95462.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.351 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27242.214 ops/s
[info]                  ·gc.alloc.rate:                   1597.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              92288.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77432.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27750.998 ops/s
[info]                  ·gc.alloc.rate:                   1627.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              92288.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95447.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.722 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   27348.493 ±(99.9%) 1001.096 ops/s [Average]
[info]   (min, avg, max) = (27126.720, 27348.493, 27750.998), stdev = 259.982
[info]   CI (99.9%): [26347.397, 28349.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1603.742 ±(99.9%) 58.998 MB/sec [Average]
[info]   (min, avg, max) = (1590.647, 1603.742, 1627.350), stdev = 15.322
[info]   CI (99.9%): [1544.744, 1662.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   92288.017 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (92288.016, 92288.017, 92288.022), stdev = 0.003
[info]   CI (99.9%): [92288.007, 92288.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1595.729 ±(99.9%) 553.695 MB/sec [Average]
[info]   (min, avg, max) = (1340.307, 1595.729, 1683.054), stdev = 143.793
[info]   CI (99.9%): [1042.034, 2149.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   91812.385 ±(99.9%) 30970.991 B/op [Average]
[info]   (min, avg, max) = (77432.831, 91812.385, 95740.890), stdev = 8043.068
[info]   CI (99.9%): [60841.394, 122783.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.785 ±(99.9%) 8.553 B/op [Average]
[info]   (min, avg, max) = (2.405, 4.785, 8.351), stdev = 2.221
[info]   CI (99.9%): [≈ 0, 13.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 6.97% complete, ETA 01:04:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23016.498 ops/s
[info] # Warmup Iteration   2: 30485.885 ops/s
[info] # Warmup Iteration   3: 30602.391 ops/s
[info] Iteration   1: 30653.460 ops/s
[info]                  ·gc.alloc.rate:                   1700.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85451.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.206 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30782.130 ops/s
[info]                  ·gc.alloc.rate:                   1707.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85590.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.257 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30424.423 ops/s
[info]                  ·gc.alloc.rate:                   1688.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86976.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.307 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30696.240 ops/s
[info]                  ·gc.alloc.rate:                   1703.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86530.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30787.305 ops/s
[info]                  ·gc.alloc.rate:                   1708.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86512.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.321 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30668.712 ±(99.9%) 569.829 ops/s [Average]
[info]   (min, avg, max) = (30424.423, 30668.712, 30787.305), stdev = 147.983
[info]   CI (99.9%): [30098.882, 31238.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1701.710 ±(99.9%) 31.703 MB/sec [Average]
[info]   (min, avg, max) = (1688.100, 1701.710, 1708.292), stdev = 8.233
[info]   CI (99.9%): [1670.007, 1733.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   87328.016 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (87328.014, 87328.016, 87328.020), stdev = 0.003
[info]   CI (99.9%): [87328.005, 87328.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1679.945 ±(99.9%) 42.811 MB/sec [Average]
[info]   (min, avg, max) = (1664.351, 1679.945, 1692.348), stdev = 11.118
[info]   CI (99.9%): [1637.134, 1722.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   86212.385 ±(99.9%) 2540.068 B/op [Average]
[info]   (min, avg, max) = (85451.813, 86212.385, 86976.431), stdev = 659.648
[info]   CI (99.9%): [83672.317, 88752.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.632 ±(99.9%) 6.226 B/op [Average]
[info]   (min, avg, max) = (1.067, 3.632, 5.321), stdev = 1.617
[info]   CI (99.9%): [≈ 0, 9.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.27% complete, ETA 01:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23146.117 ops/s
[info] # Warmup Iteration   2: 30343.893 ops/s
[info] # Warmup Iteration   3: 29919.265 ops/s
[info] Iteration   1: 30816.464 ops/s
[info]                  ·gc.alloc.rate:                   1650.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67974.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.190 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30841.231 ops/s
[info]                  ·gc.alloc.rate:                   1651.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85276.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.187 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 30633.426 ops/s
[info]                  ·gc.alloc.rate:                   1641.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86297.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30436.631 ops/s
[info]                  ·gc.alloc.rate:                   1629.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87203.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.306 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30862.841 ops/s
[info]                  ·gc.alloc.rate:                   1652.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86265.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.246 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30718.119 ±(99.9%) 699.984 ops/s [Average]
[info]   (min, avg, max) = (30436.631, 30718.119, 30862.841), stdev = 181.784
[info]   CI (99.9%): [30018.134, 31418.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1644.981 ±(99.9%) 37.155 MB/sec [Average]
[info]   (min, avg, max) = (1629.771, 1644.981, 1652.527), stdev = 9.649
[info]   CI (99.9%): [1607.825, 1682.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   84272.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (84272.014, 84272.015, 84272.019), stdev = 0.002
[info]   CI (99.9%): [84272.006, 84272.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1612.143 ±(99.9%) 605.925 MB/sec [Average]
[info]   (min, avg, max) = (1330.984, 1612.143, 1691.628), stdev = 157.357
[info]   CI (99.9%): [1006.219, 2218.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   82603.659 ±(99.9%) 31598.685 B/op [Average]
[info]   (min, avg, max) = (67974.915, 82603.659, 87203.356), stdev = 8206.078
[info]   CI (99.9%): [51004.974, 114202.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   3.200 ±(99.9%) 5.042 B/op [Average]
[info]   (min, avg, max) = (1.070, 3.200, 4.306), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 8.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.58% complete, ETA 01:04:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5360.700 ops/s
[info] # Warmup Iteration   2: 8092.253 ops/s
[info] # Warmup Iteration   3: 8453.928 ops/s
[info] Iteration   1: 8318.701 ops/s
[info]                  ·gc.alloc.rate:                   1176.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248754.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8439.600 ops/s
[info]                  ·gc.alloc.rate:                   1193.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246336.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.528 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8369.108 ops/s
[info]                  ·gc.alloc.rate:                   1183.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187330.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8414.336 ops/s
[info]                  ·gc.alloc.rate:                   1189.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249497.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.574 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8443.016 ops/s
[info]                  ·gc.alloc.rate:                   1194.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187241.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.880 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8396.952 ±(99.9%) 203.223 ops/s [Average]
[info]   (min, avg, max) = (8318.701, 8396.952, 8443.016), stdev = 52.776
[info]   CI (99.9%): [8193.729, 8600.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1187.550 ±(99.9%) 28.841 MB/sec [Average]
[info]   (min, avg, max) = (1176.339, 1187.550, 1194.305), stdev = 7.490
[info]   CI (99.9%): [1158.708, 1216.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   222544.053 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (222544.051, 222544.053, 222544.056), stdev = 0.002
[info]   CI (99.9%): [222544.044, 222544.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1194.242 ±(99.9%) 680.953 MB/sec [Average]
[info]   (min, avg, max) = (996.542, 1194.242, 1333.938), stdev = 176.841
[info]   CI (99.9%): [513.289, 1875.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   223832.221 ±(99.9%) 128544.005 B/op [Average]
[info]   (min, avg, max) = (187241.280, 223832.221, 249497.795), stdev = 33382.470
[info]   CI (99.9%): [95288.217, 352376.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.699 ±(99.9%) 28.101 B/op [Average]
[info]   (min, avg, max) = (3.880, 11.699, 19.572), stdev = 7.298
[info]   CI (99.9%): [≈ 0, 39.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.88% complete, ETA 01:04:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13778.662 ops/s
[info] # Warmup Iteration   2: 17849.170 ops/s
[info] # Warmup Iteration   3: 18086.425 ops/s
[info] Iteration   1: 17790.023 ops/s
[info]                  ·gc.alloc.rate:                   1557.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              137784.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147123.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.525 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18052.529 ops/s
[info]                  ·gc.alloc.rate:                   1580.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              137784.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145735.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.815 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18084.276 ops/s
[info]                  ·gc.alloc.rate:                   1583.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              137784.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116933.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.247 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18092.205 ops/s
[info]                  ·gc.alloc.rate:                   1583.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              137784.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146609.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.622 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17942.573 ops/s
[info]                  ·gc.alloc.rate:                   1570.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              137784.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148302.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.130 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17992.321 ±(99.9%) 492.585 ops/s [Average]
[info]   (min, avg, max) = (17790.023, 17992.321, 18092.205), stdev = 127.923
[info]   CI (99.9%): [17499.736, 18484.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1575.257 ±(99.9%) 42.537 MB/sec [Average]
[info]   (min, avg, max) = (1557.795, 1575.257, 1583.880), stdev = 11.047
[info]   CI (99.9%): [1532.720, 1617.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   137784.026 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (137784.024, 137784.026, 137784.033), stdev = 0.004
[info]   CI (99.9%): [137784.012, 137784.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.976 ±(99.9%) 577.002 MB/sec [Average]
[info]   (min, avg, max) = (1343.631, 1610.976, 1690.874), stdev = 149.845
[info]   CI (99.9%): [1033.974, 2187.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   140940.904 ±(99.9%) 51801.133 B/op [Average]
[info]   (min, avg, max) = (116933.587, 140940.904, 148302.362), stdev = 13452.590
[info]   CI (99.9%): [89139.770, 192742.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.468 ±(99.9%) 11.116 B/op [Average]
[info]   (min, avg, max) = (1.815, 5.468, 9.130), stdev = 2.887
[info]   CI (99.9%): [≈ 0, 16.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.18% complete, ETA 01:04:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27304.269 ops/s
[info] # Warmup Iteration   2: 40733.444 ops/s
[info] # Warmup Iteration   3: 39996.007 ops/s
[info] Iteration   1: 40746.244 ops/s
[info]                  ·gc.alloc.rate:                   1124.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              43449.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50586.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.608 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41406.664 ops/s
[info]                  ·gc.alloc.rate:                   1143.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37509.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.582 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41395.392 ops/s
[info]                  ·gc.alloc.rate:                   1143.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50286.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41101.315 ops/s
[info]                  ·gc.alloc.rate:                   1135.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38185.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.594 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40454.123 ops/s
[info]                  ·gc.alloc.rate:                   1117.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38951.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.239 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   41020.747 ±(99.9%) 1601.837 ops/s [Average]
[info]   (min, avg, max) = (40454.123, 41020.747, 41406.664), stdev = 415.992
[info]   CI (99.9%): [39418.910, 42622.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1132.724 ±(99.9%) 44.170 MB/sec [Average]
[info]   (min, avg, max) = (1117.279, 1132.724, 1143.266), stdev = 11.471
[info]   CI (99.9%): [1088.554, 1176.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43448.263 ±(99.9%) 2.167 B/op [Average]
[info]   (min, avg, max) = (43448.010, 43448.263, 43449.269), stdev = 0.563
[info]   CI (99.9%): [43446.096, 43450.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.794 ±(99.9%) 677.660 MB/sec [Average]
[info]   (min, avg, max) = (986.935, 1123.794, 1323.202), stdev = 175.986
[info]   CI (99.9%): [446.133, 1801.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43103.786 ±(99.9%) 25852.846 B/op [Average]
[info]   (min, avg, max) = (37509.727, 43103.786, 50586.484), stdev = 6713.902
[info]   CI (99.9%): [17250.940, 68956.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.238 ±(99.9%) 3.392 B/op [Average]
[info]   (min, avg, max) = (1.582, 2.238, 3.239), stdev = 0.881
[info]   CI (99.9%): [≈ 0, 5.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.48% complete, ETA 01:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55491.769 ops/s
[info] # Warmup Iteration   2: 60363.799 ops/s
[info] # Warmup Iteration   3: 61497.852 ops/s
[info] Iteration   1: 60331.410 ops/s
[info]                  ·gc.alloc.rate:                   779.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17343.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 60160.719 ops/s
[info]                  ·gc.alloc.rate:                   777.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26088.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 61846.839 ops/s
[info]                  ·gc.alloc.rate:                   799.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16934.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 61676.698 ops/s
[info]                  ·gc.alloc.rate:               796.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17006.829 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 60971.501 ops/s
[info]                  ·gc.alloc.rate:                   787.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25852.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   60997.434 ±(99.9%) 2937.136 ops/s [Average]
[info]   (min, avg, max) = (60160.719, 60997.434, 61846.839), stdev = 762.765
[info]   CI (99.9%): [58060.297, 63934.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   788.213 ±(99.9%) 37.718 MB/sec [Average]
[info]   (min, avg, max) = (777.617, 788.213, 799.169), stdev = 9.795
[info]   CI (99.9%): [750.495, 825.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.174 ±(99.9%) 704.398 MB/sec [Average]
[info]   (min, avg, max) = (664.808, 799.174, 1001.548), stdev = 182.930
[info]   CI (99.9%): [94.776, 1503.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20645.009 ±(99.9%) 18731.152 B/op [Average]
[info]   (min, avg, max) = (16934.389, 20645.009, 26088.055), stdev = 4864.421
[info]   CI (99.9%): [1913.858, 39376.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.407 ±(99.9%) 4.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.407, 2.715), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 5.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 8.79% complete, ETA 01:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13799.875 ops/s
[info] # Warmup Iteration   2: 30333.691 ops/s
[info] # Warmup Iteration   3: 30738.601 ops/s
[info] Iteration   1: 30623.355 ops/s
[info]                  ·gc.alloc.rate:                   2077.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101797.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.279 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 31312.323 ops/s
[info]                  ·gc.alloc.rate:                   2123.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100548.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.139 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 31158.808 ops/s
[info]                  ·gc.alloc.rate:                   2113.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2351.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118790.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.360 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 31419.188 ops/s
[info]                  ·gc.alloc.rate:                   2131.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101537.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.128 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 31201.281 ops/s
[info]                  ·gc.alloc.rate:                   2116.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102552.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.100 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   31142.991 ±(99.9%) 1184.702 ops/s [Average]
[info]   (min, avg, max) = (30623.355, 31142.991, 31419.188), stdev = 307.663
[info]   CI (99.9%): [29958.289, 32327.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2112.577 ±(99.9%) 80.291 MB/sec [Average]
[info]   (min, avg, max) = (2077.346, 2112.577, 2131.327), stdev = 20.851
[info]   CI (99.9%): [2032.286, 2192.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   106760.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (106760.014, 106760.015, 106760.019), stdev = 0.002
[info]   CI (99.9%): [106760.007, 106760.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2078.651 ±(99.9%) 593.771 MB/sec [Average]
[info]   (min, avg, max) = (1980.775, 2078.651, 2351.910), stdev = 154.200
[info]   CI (99.9%): [1484.880, 2672.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105045.256 ±(99.9%) 29716.879 B/op [Average]
[info]   (min, avg, max) = (100548.384, 105045.256, 118790.835), stdev = 7717.379
[info]   CI (99.9%): [75328.376, 134762.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.001 ±(99.9%) 7.816 B/op [Average]
[info]   (min, avg, max) = (2.100, 4.001, 7.360), stdev = 2.030
[info]   CI (99.9%): [≈ 0, 11.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.09% complete, ETA 01:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15335.246 ops/s
[info] # Warmup Iteration   2: 26643.745 ops/s
[info] # Warmup Iteration   3: 26824.115 ops/s
[info] Iteration   1: 27253.926 ops/s
[info]                  ·gc.alloc.rate:                   1642.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94882.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.809 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27167.574 ops/s
[info]                  ·gc.alloc.rate:                   1636.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95951.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.235 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 26940.741 ops/s
[info]                  ·gc.alloc.rate:                   1623.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97560.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.648 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 26951.073 ops/s
[info]                  ·gc.alloc.rate:                   1624.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78421.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.431 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27243.677 ops/s
[info]                  ·gc.alloc.rate:                   1641.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              94808.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97403.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.811 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27111.398 ±(99.9%) 595.904 ops/s [Average]
[info]   (min, avg, max) = (26940.741, 27111.398, 27253.926), stdev = 154.754
[info]   CI (99.9%): [26515.494, 27707.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1633.547 ±(99.9%) 36.032 MB/sec [Average]
[info]   (min, avg, max) = (1623.077, 1633.547, 1642.190), stdev = 9.357
[info]   CI (99.9%): [1597.516, 1669.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   94808.018 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (94808.016, 94808.018, 94808.023), stdev = 0.003
[info]   CI (99.9%): [94808.006, 94808.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1600.025 ±(99.9%) 555.832 MB/sec [Average]
[info]   (min, avg, max) = (1343.420, 1600.025, 1686.770), stdev = 144.348
[info]   CI (99.9%): [1044.193, 2155.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92843.930 ±(99.9%) 31333.520 B/op [Average]
[info]   (min, avg, max) = (78421.473, 92843.930, 97560.959), stdev = 8137.216
[info]   CI (99.9%): [61510.410, 124177.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.587 ±(99.9%) 6.846 B/op [Average]
[info]   (min, avg, max) = (2.431, 4.587, 7.235), stdev = 1.778
[info]   CI (99.9%): [≈ 0, 11.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.39% complete, ETA 01:03:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31714.747 ops/s
[info] # Warmup Iteration   2: 36035.335 ops/s
[info] # Warmup Iteration   3: 35864.888 ops/s
[info] Iteration   1: 36412.126 ops/s
[info]                  ·gc.alloc.rate:                   1678.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71983.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.599 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 37008.607 ops/s
[info]                  ·gc.alloc.rate:                   1705.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85497.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.426 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 37070.613 ops/s
[info]                  ·gc.alloc.rate:                   1709.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71439.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.768 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36090.944 ops/s
[info]                  ·gc.alloc.rate:                   1663.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73638.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.631 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 36987.821 ops/s
[info]                  ·gc.alloc.rate:                   1704.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72080.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.543 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   36714.022 ±(99.9%) 1687.564 ops/s [Average]
[info]   (min, avg, max) = (36090.944, 36714.022, 37070.613), stdev = 438.255
[info]   CI (99.9%): [35026.458, 38401.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1692.054 ±(99.9%) 78.241 MB/sec [Average]
[info]   (min, avg, max) = (1663.216, 1692.054, 1709.044), stdev = 20.319
[info]   CI (99.9%): [1613.812, 1770.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   72528.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (72528.012, 72528.012, 72528.013), stdev = 0.001
[info]   CI (99.9%): [72528.010, 72528.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1748.389 ±(99.9%) 565.490 MB/sec [Average]
[info]   (min, avg, max) = (1665.452, 1748.389, 2010.389), stdev = 146.856
[info]   CI (99.9%): [1182.899, 2313.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   74928.015 ±(99.9%) 22968.757 B/op [Average]
[info]   (min, avg, max) = (71439.826, 74928.015, 85497.443), stdev = 5964.913
[info]   CI (99.9%): [51959.258, 97896.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.393 ±(99.9%) 3.769 B/op [Average]
[info]   (min, avg, max) = (1.768, 3.393, 4.426), stdev = 0.979
[info]   CI (99.9%): [≈ 0, 7.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.70% complete, ETA 01:03:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32114.896 ops/s
[info] # Warmup Iteration   2: 37052.165 ops/s
[info] # Warmup Iteration   3: 36753.383 ops/s
[info] Iteration   1: 36374.920 ops/s
[info]                  ·gc.alloc.rate:                   1613.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72057.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.404 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 36422.504 ops/s
[info]                  ·gc.alloc.rate:                   1615.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72365.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37194.660 ops/s
[info]                  ·gc.alloc.rate:                   1649.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71173.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.762 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 37165.171 ops/s
[info]                  ·gc.alloc.rate:                   1647.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71468.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.526 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37386.008 ops/s
[info]                  ·gc.alloc.rate:                   1657.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71270.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   36908.653 ±(99.9%) 1823.149 ops/s [Average]
[info]   (min, avg, max) = (36374.920, 36908.653, 37386.008), stdev = 473.466
[info]   CI (99.9%): [35085.504, 38731.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1636.711 ±(99.9%) 80.323 MB/sec [Average]
[info]   (min, avg, max) = (1613.463, 1636.711, 1657.699), stdev = 20.860
[info]   CI (99.9%): [1556.388, 1717.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   69784.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69784.012, 69784.012, 69784.012), stdev = 0.001
[info]   CI (99.9%): [69784.011, 69784.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1680.759 ±(99.9%) 41.018 MB/sec [Average]
[info]   (min, avg, max) = (1666.020, 1680.759, 1693.016), stdev = 10.652
[info]   CI (99.9%): [1639.741, 1721.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   71667.092 ±(99.9%) 2000.454 B/op [Average]
[info]   (min, avg, max) = (71173.505, 71667.092, 72365.215), stdev = 519.511
[info]   CI (99.9%): [69666.638, 73667.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4.454 ±(99.9%) 7.830 B/op [Average]
[info]   (min, avg, max) = (1.762, 4.454, 7.196), stdev = 2.033
[info]   CI (99.9%): [≈ 0, 12.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.00% complete, ETA 01:02:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270669.999 ops/s
[info] # Warmup Iteration   2: 317336.016 ops/s
[info] # Warmup Iteration   3: 322660.894 ops/s
[info] Iteration   1: 325793.182 ops/s
[info]                  ·gc.alloc.rate:                   1790.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9670.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 320406.984 ops/s
[info]                  ·gc.alloc.rate:                   1760.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8242.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 322849.296 ops/s
[info]                  ·gc.alloc.rate:                   1773.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8212.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 326782.551 ops/s
[info]                  ·gc.alloc.rate:                   1795.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8142.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 326745.962 ops/s
[info]                  ·gc.alloc.rate:                   1796.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9796.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.501 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   324515.595 ±(99.9%) 10789.207 ops/s [Average]
[info]   (min, avg, max) = (320406.984, 324515.595, 326782.551), stdev = 2801.923
[info]   CI (99.9%): [313726.387, 335304.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1783.427 ±(99.9%) 60.252 MB/sec [Average]
[info]   (min, avg, max) = (1760.538, 1783.427, 1796.175), stdev = 15.647
[info]   CI (99.9%): [1723.175, 1843.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8648.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8648.001, 8648.001, 8648.001), stdev = 0.001
[info]   CI (99.9%): [8648.001, 8648.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1818.142 ±(99.9%) 706.361 MB/sec [Average]
[info]   (min, avg, max) = (1678.000, 1818.142, 2034.661), stdev = 183.440
[info]   CI (99.9%): [1111.782, 2524.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8813.029 ±(99.9%) 3242.757 B/op [Average]
[info]   (min, avg, max) = (8142.897, 8813.029, 9796.237), stdev = 842.134
[info]   CI (99.9%): [5570.272, 12055.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.323 ±(99.9%) 0.506 B/op [Average]
[info]   (min, avg, max) = (0.201, 0.323, 0.501), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.30% complete, ETA 01:02:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472603.534 ops/s
[info] # Warmup Iteration   2: 670786.606 ops/s
[info] # Warmup Iteration   3: 681809.541 ops/s
[info] Iteration   1: 702762.106 ops/s
[info]                  ·gc.alloc.rate:                   582.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 704315.968 ops/s
[info]                  ·gc.alloc.rate:                   583.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1459.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 693520.183 ops/s
[info]                  ·gc.alloc.rate:                   574.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1483.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 698399.897 ops/s
[info]                  ·gc.alloc.rate:                   578.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1474.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 699849.217 ops/s
[info]                  ·gc.alloc.rate:               579.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 736.334 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   699769.474 ±(99.9%) 16172.955 ops/s [Average]
[info]   (min, avg, max) = (693520.183, 699769.474, 704315.968), stdev = 4200.065
[info]   CI (99.9%): [683596.519, 715942.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   579.861 ±(99.9%) 13.088 MB/sec [Average]
[info]   (min, avg, max) = (574.863, 579.861, 583.537), stdev = 3.399
[info]   CI (99.9%): [566.773, 592.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.146 ±(99.9%) 689.068 MB/sec [Average]
[info]   (min, avg, max) = (326.792, 523.146, 654.537), stdev = 178.949
[info]   CI (99.9%): [≈ 0, 1212.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1177.139 ±(99.9%) 1557.925 B/op [Average]
[info]   (min, avg, max) = (731.735, 1177.139, 1483.087), stdev = 404.588
[info]   CI (99.9%): [≈ 0, 2735.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.471 ±(99.9%) 3.610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.147), stdev = 0.937
[info]   CI (99.9%): [≈ 0, 4.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.055 ±(99.9%) 8.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.055, 4.807), stdev = 2.099
[info]   CI (99.9%): [≈ 0, 9.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.61% complete, ETA 01:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1573540.801 ops/s
[info] # Warmup Iteration   2: 1695391.017 ops/s
[info] # Warmup Iteration   3: 1699462.267 ops/s
[info] Iteration   1: 1678129.994 ops/s
[info]                  ·gc.alloc.rate:               324.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479.809 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1679878.411 ops/s
[info]                  ·gc.alloc.rate:               324.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1745134.825 ops/s
[info]                  ·gc.alloc.rate:                   337.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.457 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1742620.324 ops/s
[info]                  ·gc.alloc.rate:                   336.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1728118.987 ops/s
[info]                  ·gc.alloc.rate:                   333.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1714776.508 ±(99.9%) 128229.500 ops/s [Average]
[info]   (min, avg, max) = (1678129.994, 1714776.508, 1745134.825), stdev = 33300.794
[info]   CI (99.9%): [1586547.009, 1843006.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   331.251 ±(99.9%) 24.799 MB/sec [Average]
[info]   (min, avg, max) = (324.174, 331.251, 337.116), stdev = 6.440
[info]   CI (99.9%): [306.452, 356.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   352.826 ±(99.9%) 364.854 MB/sec [Average]
[info]   (min, avg, max) = (255.807, 352.826, 511.650), stdev = 94.751
[info]   CI (99.9%): [≈ 0, 717.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   324.318 ±(99.9%) 349.855 B/op [Average]
[info]   (min, avg, max) = (239.663, 324.318, 479.809), stdev = 90.856
[info]   CI (99.9%): [≈ 0, 674.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.340 ±(99.9%) 2.748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.340, 1.616), stdev = 0.714
[info]   CI (99.9%): [≈ 0, 3.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.306 ±(99.9%) 2.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.306, 1.457), stdev = 0.644
[info]   CI (99.9%): [≈ 0, 2.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.91% complete, ETA 01:02:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63121.772 ops/s
[info] # Warmup Iteration   2: 104726.297 ops/s
[info] # Warmup Iteration   3: 105856.832 ops/s
[info] Iteration   1: 107361.113 ops/s
[info]                  ·gc.alloc.rate:                   3900.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4052.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59411.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.831 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 106673.619 ops/s
[info]                  ·gc.alloc.rate:                   3875.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3734.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55097.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.071 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 105485.637 ops/s
[info]                  ·gc.alloc.rate:                   3832.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3743.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55836.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.174 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 106655.399 ops/s
[info]                  ·gc.alloc.rate:                   3874.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60280.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.229 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 105272.333 ops/s
[info]                  ·gc.alloc.rate:                   3824.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55980.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.867 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   106289.620 ±(99.9%) 3395.675 ops/s [Average]
[info]   (min, avg, max) = (105272.333, 106289.620, 107361.113), stdev = 881.846
[info]   CI (99.9%): [102893.945, 109685.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3861.518 ±(99.9%) 121.727 MB/sec [Average]
[info]   (min, avg, max) = (3824.989, 3861.518, 3900.162), stdev = 31.612
[info]   CI (99.9%): [3739.791, 3983.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3871.970 ±(99.9%) 693.311 MB/sec [Average]
[info]   (min, avg, max) = (3734.198, 3871.970, 4084.839), stdev = 180.051
[info]   CI (99.9%): [3178.659, 4565.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57321.421 ±(99.9%) 9045.643 B/op [Average]
[info]   (min, avg, max) = (55097.686, 57321.421, 60280.390), stdev = 2349.125
[info]   CI (99.9%): [48275.778, 66367.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.208), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.035 ±(99.9%) 2.592 B/op [Average]
[info]   (min, avg, max) = (1.229, 2.035, 3.071), stdev = 0.673
[info]   CI (99.9%): [≈ 0, 4.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   57.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.21% complete, ETA 01:02:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242769.103 ops/s
[info] # Warmup Iteration   2: 309027.411 ops/s
[info] # Warmup Iteration   3: 323544.354 ops/s
[info] Iteration   1: 324459.314 ops/s
[info]                  ·gc.alloc.rate:                   1104.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4804.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 323489.131 ops/s
[info]                  ·gc.alloc.rate:                   1102.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6444.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 318688.636 ops/s
[info]                  ·gc.alloc.rate:                   1085.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4926.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 324950.453 ops/s
[info]                  ·gc.alloc.rate:                   1106.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4849.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 324808.448 ops/s
[info]                  ·gc.alloc.rate:                   1106.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6494.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   323279.196 ±(99.9%) 10122.452 ops/s [Average]
[info]   (min, avg, max) = (318688.636, 323279.196, 324950.453), stdev = 2628.769
[info]   CI (99.9%): [313156.744, 333401.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1101.051 ±(99.9%) 34.566 MB/sec [Average]
[info]   (min, avg, max) = (1085.306, 1101.051, 1106.732), stdev = 8.977
[info]   CI (99.9%): [1066.484, 1135.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.950 ±(99.9%) 709.598 MB/sec [Average]
[info]   (min, avg, max) = (990.521, 1130.950, 1340.210), stdev = 184.280
[info]   CI (99.9%): [421.352, 1840.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5503.972 ±(99.9%) 3398.764 B/op [Average]
[info]   (min, avg, max) = (4804.898, 5503.972, 6494.330), stdev = 882.648
[info]   CI (99.9%): [2105.208, 8902.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.324 ±(99.9%) 0.325 B/op [Average]
[info]   (min, avg, max) = (0.202, 0.324, 0.405), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.52% complete, ETA 01:01:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 677258.811 ops/s
[info] # Warmup Iteration   2: 922308.974 ops/s
[info] # Warmup Iteration   3: 923485.505 ops/s
[info] Iteration   1: 916152.831 ops/s
[info]                  ·gc.alloc.rate:                   647.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1122.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 913719.830 ops/s
[info]                  ·gc.alloc.rate:                   645.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 918483.916 ops/s
[info]                  ·gc.alloc.rate:                   648.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1122.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 930578.559 ops/s
[info]                  ·gc.alloc.rate:                   657.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1109.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 927703.005 ops/s
[info]                  ·gc.alloc.rate:                   655.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1115.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   921327.628 ±(99.9%) 28490.145 ops/s [Average]
[info]   (min, avg, max) = (913719.830, 921327.628, 930578.559), stdev = 7398.800
[info]   CI (99.9%): [892837.483, 949817.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   650.948 ±(99.9%) 20.161 MB/sec [Average]
[info]   (min, avg, max) = (645.551, 650.948, 657.486), stdev = 5.236
[info]   CI (99.9%): [630.787, 671.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.001), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.200 ±(99.9%) 6.189 MB/sec [Average]
[info]   (min, avg, max) = (653.457, 655.200, 657.458), stdev = 1.607
[info]   CI (99.9%): [649.012, 661.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1119.308 ±(99.9%) 25.913 B/op [Average]
[info]   (min, avg, max) = (1109.731, 1119.308, 1126.771), stdev = 6.730
[info]   CI (99.9%): [1093.395, 1145.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.467 ±(99.9%) 3.528 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.467, 2.105), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.801 ±(99.9%) 6.062 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.801, 3.616), stdev = 1.574
[info]   CI (99.9%): [≈ 0, 6.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 11.82% complete, ETA 01:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1982154.469 ops/s
[info] # Warmup Iteration   2: 2229884.421 ops/s
[info] # Warmup Iteration   3: 2521145.331 ops/s
[info] Iteration   1: 2593480.107 ops/s
[info]                  ·gc.alloc.rate:                   1199.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     804.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2608774.217 ops/s
[info]                  ·gc.alloc.rate:                   1207.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     802.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2550454.800 ops/s
[info]                  ·gc.alloc.rate:                   1179.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     617.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2525305.006 ops/s
[info]                  ·gc.alloc.rate:                   1168.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2565340.890 ops/s
[info]                  ·gc.alloc.rate:                   1187.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     618.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2568671.004 ±(99.9%) 128395.864 ops/s [Average]
[info]   (min, avg, max) = (2525305.006, 2568671.004, 2608774.217), stdev = 33343.998
[info]   CI (99.9%): [2440275.141, 2697066.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1188.384 ±(99.9%) 59.678 MB/sec [Average]
[info]   (min, avg, max) = (1168.213, 1188.384, 1207.154), stdev = 15.498
[info]   CI (99.9%): [1128.706, 1248.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1201.183 ±(99.9%) 691.100 MB/sec [Average]
[info]   (min, avg, max) = (1000.951, 1201.183, 1340.121), stdev = 179.476
[info]   CI (99.9%): [510.083, 1892.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   735.642 ±(99.9%) 416.471 B/op [Average]
[info]   (min, avg, max) = (617.653, 735.642, 835.129), stdev = 108.156
[info]   CI (99.9%): [319.171, 1152.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.043, 0.088), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.12% complete, ETA 01:01:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2063563.034 ops/s
[info] # Warmup Iteration   2: 2226570.000 ops/s
[info] # Warmup Iteration   3: 2236325.797 ops/s
[info] Iteration   1: 2236154.635 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2237566.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2233130.832 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2235406.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2208473.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2230146.428 ±(99.9%) 47059.660 ops/s [Average]
[info]   (min, avg, max) = (2208473.762, 2230146.428, 2237566.651), stdev = 12221.244
[info]   CI (99.9%): [2183086.769, 2277206.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.42% complete, ETA 01:01:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384275.007 ops/s
[info] # Warmup Iteration   2: 497621.601 ops/s
[info] # Warmup Iteration   3: 493225.288 ops/s
[info] Iteration   1: 501293.184 ops/s
[info]                  ·gc.alloc.rate:                   586.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2064.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 503216.912 ops/s
[info]                  ·gc.alloc.rate:               588.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1027.156 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 502970.949 ops/s
[info]                  ·gc.alloc.rate:                   588.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2055.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 485553.698 ops/s
[info]                  ·gc.alloc.rate:                   567.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2131.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 503437.923 ops/s
[info]                  ·gc.alloc.rate:                   588.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2059.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   499294.533 ±(99.9%) 29756.904 ops/s [Average]
[info]   (min, avg, max) = (485553.698, 499294.533, 503437.923), stdev = 7727.773
[info]   CI (99.9%): [469537.630, 529051.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   583.743 ±(99.9%) 34.838 MB/sec [Average]
[info]   (min, avg, max) = (567.661, 583.743, 588.581), stdev = 9.047
[info]   CI (99.9%): [548.906, 618.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   591.826 ±(99.9%) 567.040 MB/sec [Average]
[info]   (min, avg, max) = (328.405, 591.826, 658.807), stdev = 147.258
[info]   CI (99.9%): [24.786, 1158.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1867.484 ±(99.9%) 1812.837 B/op [Average]
[info]   (min, avg, max) = (1027.156, 1867.484, 2131.208), stdev = 470.788
[info]   CI (99.9%): [54.647, 3680.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.454 ±(99.9%) 3.599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.454, 2.125), stdev = 0.935
[info]   CI (99.9%): [≈ 0, 4.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.426 ±(99.9%) 11.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.426, 6.673), stdev = 2.934
[info]   CI (99.9%): [≈ 0, 12.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 12.73% complete, ETA 01:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147742.564 ops/s
[info] # Warmup Iteration   2: 176119.607 ops/s
[info] # Warmup Iteration   3: 176374.443 ops/s
[info] Iteration   1: 176617.309 ops/s
[info]                  ·gc.alloc.rate:                   2171.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17915.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.557 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 179395.713 ops/s
[info]                  ·gc.alloc.rate:                   2205.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20694.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.461 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 179782.370 ops/s
[info]                  ·gc.alloc.rate:                   2209.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17766.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 174943.743 ops/s
[info]                  ·gc.alloc.rate:                   2150.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21335.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.748 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 175110.053 ops/s
[info]                  ·gc.alloc.rate:                   2152.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18320.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.123 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   177169.838 ±(99.9%) 8882.257 ops/s [Average]
[info]   (min, avg, max) = (174943.743, 177169.838, 179782.370), stdev = 2306.694
[info]   CI (99.9%): [168287.581, 186052.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2177.914 ±(99.9%) 108.646 MB/sec [Average]
[info]   (min, avg, max) = (2150.824, 2177.914, 2209.643), stdev = 28.215
[info]   CI (99.9%): [2069.269, 2286.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19344.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19344.002, 19344.002, 19344.003), stdev = 0.001
[info]   CI (99.9%): [19344.002, 19344.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.121 ±(99.9%) 717.330 MB/sec [Average]
[info]   (min, avg, max) = (2010.718, 2162.121, 2372.260), stdev = 186.288
[info]   CI (99.9%): [1444.791, 2879.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19206.582 ±(99.9%) 6463.581 B/op [Average]
[info]   (min, avg, max) = (17766.989, 19206.582, 21335.544), stdev = 1678.571
[info]   CI (99.9%): [12743.001, 25670.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.887 ±(99.9%) 1.527 B/op [Average]
[info]   (min, avg, max) = (0.547, 0.887, 1.461), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 2.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.03% complete, ETA 01:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282418.249 ops/s
[info] # Warmup Iteration   2: 423245.941 ops/s
[info] # Warmup Iteration   3: 427744.709 ops/s
[info] Iteration   1: 424240.773 ops/s
[info]                  ·gc.alloc.rate:                   351.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1897.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 427977.061 ops/s
[info]                  ·gc.alloc.rate:               354.657 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 940.691 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 428541.701 ops/s
[info]                  ·gc.alloc.rate:                   355.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1199.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 431162.109 ops/s
[info]                  ·gc.alloc.rate:                   357.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1192.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 431417.853 ops/s
[info]                  ·gc.alloc.rate:               357.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1190.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   428667.899 ±(99.9%) 11205.963 ops/s [Average]
[info]   (min, avg, max) = (424240.773, 428667.899, 431417.853), stdev = 2910.153
[info]   CI (99.9%): [417461.936, 439873.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   355.198 ±(99.9%) 9.380 MB/sec [Average]
[info]   (min, avg, max) = (351.489, 355.198, 357.507), stdev = 2.436
[info]   CI (99.9%): [345.818, 364.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.483 ±(99.9%) 368.378 MB/sec [Average]
[info]   (min, avg, max) = (255.845, 349.483, 511.587), stdev = 95.667
[info]   CI (99.9%): [≈ 0, 717.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1284.420 ±(99.9%) 1386.885 B/op [Average]
[info]   (min, avg, max) = (940.691, 1284.420, 1897.956), stdev = 360.170
[info]   CI (99.9%): [≈ 0, 2671.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.448 ±(99.9%) 3.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.448, 2.188), stdev = 0.973
[info]   CI (99.9%): [≈ 0, 4.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.645 ±(99.9%) 13.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.645, 8.036), stdev = 3.573
[info]   CI (99.9%): [≈ 0, 15.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.33% complete, ETA 01:00:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 934101.460 ops/s
[info] # Warmup Iteration   2: 974750.297 ops/s
[info] # Warmup Iteration   3: 981889.364 ops/s
[info] Iteration   1: 976442.298 ops/s
[info]                  ·gc.alloc.rate:               188.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 412.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 984469.633 ops/s
[info]                  ·gc.alloc.rate:      190.188 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 943926.715 ops/s
[info]                  ·gc.alloc.rate:               182.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 426.499 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 982049.991 ops/s
[info]                  ·gc.alloc.rate:                   189.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     409.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 982100.909 ops/s
[info]                  ·gc.alloc.rate:                   189.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     409.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   973797.909 ±(99.9%) 65296.617 ops/s [Average]
[info]   (min, avg, max) = (943926.715, 973797.909, 984469.633), stdev = 16957.324
[info]   CI (99.9%): [908501.292, 1039094.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   188.131 ±(99.9%) 12.678 MB/sec [Average]
[info]   (min, avg, max) = (182.327, 188.131, 190.188), stdev = 3.292
[info]   CI (99.9%): [175.454, 200.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.676 ±(99.9%) 440.580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.676, 255.899), stdev = 114.417
[info]   CI (99.9%): [≈ 0, 645.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   331.731 ±(99.9%) 714.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 331.731, 426.499), stdev = 185.572
[info]   CI (99.9%): [≈ 0, 1046.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 13.64% complete, ETA 01:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40470.844 ops/s
[info] # Warmup Iteration   2: 66960.936 ops/s
[info] # Warmup Iteration   3: 68046.015 ops/s
[info] Iteration   1: 68054.224 ops/s
[info]                  ·gc.alloc.rate:                   2808.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61945.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.407 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 67749.281 ops/s
[info]                  ·gc.alloc.rate:                   2795.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3036.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70551.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.287 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 66818.873 ops/s
[info]                  ·gc.alloc.rate:                   2757.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63861.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.432 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 67940.409 ops/s
[info]                  ·gc.alloc.rate:                   2803.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62962.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.894 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 67406.215 ops/s
[info]                  ·gc.alloc.rate:                   2781.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63538.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.402 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   67593.800 ±(99.9%) 1917.608 ops/s [Average]
[info]   (min, avg, max) = (66818.873, 67593.800, 68054.224), stdev = 497.997
[info]   CI (99.9%): [65676.193, 69511.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2789.498 ±(99.9%) 79.330 MB/sec [Average]
[info]   (min, avg, max) = (2757.438, 2789.498, 2808.571), stdev = 20.602
[info]   CI (99.9%): [2710.168, 2868.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.006, 64952.006, 64952.007), stdev = 0.001
[info]   CI (99.9%): [64952.006, 64952.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2773.166 ±(99.9%) 571.247 MB/sec [Average]
[info]   (min, avg, max) = (2678.570, 2773.166, 3036.805), stdev = 148.351
[info]   CI (99.9%): [2201.919, 3344.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64572.090 ±(99.9%) 13174.096 B/op [Average]
[info]   (min, avg, max) = (61945.553, 64572.090, 70551.935), stdev = 3421.271
[info]   CI (99.9%): [51397.994, 77746.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.158, 0.271), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.684 ±(99.9%) 5.831 B/op [Average]
[info]   (min, avg, max) = (2.407, 3.684, 6.287), stdev = 1.514
[info]   CI (99.9%): [≈ 0, 9.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 10.000), stdev = 1.304
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 13.94% complete, ETA 01:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203520.066 ops/s
[info] # Warmup Iteration   2: 252723.134 ops/s
[info] # Warmup Iteration   3: 245883.807 ops/s
[info] Iteration   1: 249521.692 ops/s
[info]                  ·gc.alloc.rate:                   1376.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8361.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 245591.983 ops/s
[info]                  ·gc.alloc.rate:                   1354.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8531.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.934 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 249643.401 ops/s
[info]                  ·gc.alloc.rate:                   1376.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8433.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 251978.723 ops/s
[info]                  ·gc.alloc.rate:                   1389.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8388.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 251351.900 ops/s
[info]                  ·gc.alloc.rate:                   1386.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8440.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.652 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   249617.540 ±(99.9%) 9587.669 ops/s [Average]
[info]   (min, avg, max) = (245591.983, 249617.540, 251978.723), stdev = 2489.887
[info]   CI (99.9%): [240029.871, 259205.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1376.676 ±(99.9%) 52.662 MB/sec [Average]
[info]   (min, avg, max) = (1354.585, 1376.676, 1389.675), stdev = 13.676
[info]   CI (99.9%): [1324.015, 1429.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.002, 8680.002, 8680.002), stdev = 0.001
[info]   CI (99.9%): [8680.002, 8680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1337.116 ±(99.9%) 34.271 MB/sec [Average]
[info]   (min, avg, max) = (1325.603, 1337.116, 1347.949), stdev = 8.900
[info]   CI (99.9%): [1302.845, 1371.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8430.956 ±(99.9%) 250.068 B/op [Average]
[info]   (min, avg, max) = (8361.448, 8430.956, 8531.550), stdev = 64.942
[info]   CI (99.9%): [8180.888, 8681.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.605 ±(99.9%) 0.869 B/op [Average]
[info]   (min, avg, max) = (0.390, 0.605, 0.934), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 14.24% complete, ETA 01:00:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1123880.725 ops/s
[info] # Warmup Iteration   2: 1485983.775 ops/s
[info] # Warmup Iteration   3: 1559040.806 ops/s
[info] Iteration   1: 1570065.259 ops/s
[info]                  ·gc.alloc.rate:                   805.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1562637.235 ops/s
[info]                  ·gc.alloc.rate:                   802.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     659.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1535830.445 ops/s
[info]                  ·gc.alloc.rate:                   788.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1009.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1565231.511 ops/s
[info]                  ·gc.alloc.rate:               803.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 662.113 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1566256.408 ops/s
[info]                  ·gc.alloc.rate:                   804.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1560004.172 ±(99.9%) 53040.544 ops/s [Average]
[info]   (min, avg, max) = (1535830.445, 1560004.172, 1570065.259), stdev = 13774.461
[info]   CI (99.9%): [1506963.627, 1613044.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   800.940 ±(99.9%) 27.307 MB/sec [Average]
[info]   (min, avg, max) = (788.468, 800.940, 805.996), stdev = 7.092
[info]   CI (99.9%): [773.633, 828.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.762 ±(99.9%) 700.887 MB/sec [Average]
[info]   (min, avg, max) = (654.113, 788.762, 991.399), stdev = 182.018
[info]   CI (99.9%): [87.875, 1489.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   796.529 ±(99.9%) 724.760 B/op [Average]
[info]   (min, avg, max) = (655.739, 796.529, 1009.256), stdev = 188.218
[info]   CI (99.9%): [71.769, 1521.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.105), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.55% complete, ETA 00:59:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1815758.245 ops/s
[info] # Warmup Iteration   2: 1980903.138 ops/s
[info] # Warmup Iteration   3: 1997958.300 ops/s
[info] Iteration   1: 2005993.093 ops/s
[info]                  ·gc.alloc.rate:                   540.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2003939.022 ops/s
[info]                  ·gc.alloc.rate:                   539.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     521.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2005929.937 ops/s
[info]                  ·gc.alloc.rate:                   540.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2007539.313 ops/s
[info]                  ·gc.alloc.rate:               540.895 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 259.817 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2005629.249 ops/s
[info]                  ·gc.alloc.rate:                   540.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2005806.123 ±(99.9%) 4935.583 ops/s [Average]
[info]   (min, avg, max) = (2003939.022, 2005806.123, 2007539.313), stdev = 1281.755
[info]   CI (99.9%): [2000870.540, 2010741.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   540.407 ±(99.9%) 1.477 MB/sec [Average]
[info]   (min, avg, max) = (539.854, 540.407, 540.895), stdev = 0.384
[info]   CI (99.9%): [538.930, 541.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.676 ±(99.9%) 699.631 MB/sec [Average]
[info]   (min, avg, max) = (331.447, 530.676, 663.490), stdev = 181.692
[info]   CI (99.9%): [≈ 0, 1230.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   416.431 ±(99.9%) 549.727 B/op [Average]
[info]   (min, avg, max) = (259.817, 416.431, 521.087), stdev = 142.762
[info]   CI (99.9%): [≈ 0, 966.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 2.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.751), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.311 ±(99.9%) 2.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.311, 1.374), stdev = 0.595
[info]   CI (99.9%): [≈ 0, 2.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 14.85% complete, ETA 00:59:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1792851.571 ops/s
[info] # Warmup Iteration   2: 1949422.926 ops/s
[info] # Warmup Iteration   3: 1940228.538 ops/s
[info] Iteration   1: 1918388.872 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1927699.841 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1969923.027 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1960690.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1958413.526 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1947023.170 ±(99.9%) 86837.272 ops/s [Average]
[info]   (min, avg, max) = (1918388.872, 1947023.170, 1969923.027), stdev = 22551.364
[info]   CI (99.9%): [1860185.899, 2033860.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 15.15% complete, ETA 00:59:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26826.452 ops/s
[info] # Warmup Iteration   2: 37613.472 ops/s
[info] # Warmup Iteration   3: 37913.135 ops/s
[info] Iteration   1: 38804.092 ops/s
[info]                  ·gc.alloc.rate:                   1699.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              68947.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67111.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.221 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38718.671 ops/s
[info]                  ·gc.alloc.rate:                   1696.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67747.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.077 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38450.065 ops/s
[info]                  ·gc.alloc.rate:                   1685.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68601.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.704 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 38558.543 ops/s
[info]                  ·gc.alloc.rate:                   1689.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68749.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.549 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38018.527 ops/s
[info]                  ·gc.alloc.rate:                   1665.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69946.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.447 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38509.980 ±(99.9%) 1182.982 ops/s [Average]
[info]   (min, avg, max) = (38018.527, 38509.980, 38804.092), stdev = 307.217
[info]   CI (99.9%): [37326.998, 39692.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1687.350 ±(99.9%) 51.207 MB/sec [Average]
[info]   (min, avg, max) = (1665.824, 1687.350, 1699.902), stdev = 13.298
[info]   CI (99.9%): [1636.142, 1738.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68944.689 ±(99.9%) 5.834 B/op [Average]
[info]   (min, avg, max) = (68944.011, 68944.689, 68947.399), stdev = 1.515
[info]   CI (99.9%): [68938.855, 68950.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.629 ±(99.9%) 54.994 MB/sec [Average]
[info]   (min, avg, max) = (1654.637, 1674.629, 1690.044), stdev = 14.282
[info]   CI (99.9%): [1619.635, 1729.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68431.404 ±(99.9%) 4145.013 B/op [Average]
[info]   (min, avg, max) = (67111.458, 68431.404, 69946.431), stdev = 1076.447
[info]   CI (99.9%): [64286.391, 72576.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.400 ±(99.9%) 5.126 B/op [Average]
[info]   (min, avg, max) = (1.704, 3.400, 5.077), stdev = 1.331
[info]   CI (99.9%): [≈ 0, 8.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 15.45% complete, ETA 00:59:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19665.301 ops/s
[info] # Warmup Iteration   2: 25306.140 ops/s
[info] # Warmup Iteration   3: 25376.953 ops/s
[info] Iteration   1: 25331.365 ops/s
[info]                  ·gc.alloc.rate:                   1562.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              97072.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103322.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.293 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25309.042 ops/s
[info]                  ·gc.alloc.rate:                   1561.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              97072.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103954.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.767 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25216.592 ops/s
[info]                  ·gc.alloc.rate:                   1555.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              97072.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83861.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.898 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25325.316 ops/s
[info]                  ·gc.alloc.rate:                   1562.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              97072.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104733.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.643 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25536.799 ops/s
[info]                  ·gc.alloc.rate:                   1575.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              97072.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83340.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25343.823 ±(99.9%) 452.081 ops/s [Average]
[info]   (min, avg, max) = (25216.592, 25343.823, 25536.799), stdev = 117.404
[info]   CI (99.9%): [24891.742, 25795.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1563.303 ±(99.9%) 27.213 MB/sec [Average]
[info]   (min, avg, max) = (1555.939, 1563.303, 1575.058), stdev = 7.067
[info]   CI (99.9%): [1536.090, 1590.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   97072.019 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (97072.017, 97072.019, 97072.023), stdev = 0.003
[info]   CI (99.9%): [97072.009, 97072.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1543.306 ±(99.9%) 686.516 MB/sec [Average]
[info]   (min, avg, max) = (1344.186, 1543.306, 1685.347), stdev = 178.286
[info]   CI (99.9%): [856.789, 2229.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   95842.423 ±(99.9%) 43079.161 B/op [Average]
[info]   (min, avg, max) = (83340.875, 95842.423, 104733.410), stdev = 11187.521
[info]   CI (99.9%): [52763.262, 138921.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.096, 0.187), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.947 ±(99.9%) 15.194 B/op [Average]
[info]   (min, avg, max) = (1.293, 5.947, 11.643), stdev = 3.946
[info]   CI (99.9%): [≈ 0, 21.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 15.76% complete, ETA 00:58:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36293.544 ops/s
[info] # Warmup Iteration   2: 57308.334 ops/s
[info] # Warmup Iteration   3: 56881.665 ops/s
[info] Iteration   1: 58557.173 ops/s
[info]                  ·gc.alloc.rate:                   1026.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26372.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.798 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57833.387 ops/s
[info]                  ·gc.alloc.rate:                   1014.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26783.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.699 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58577.352 ops/s
[info]                  ·gc.alloc.rate:                   1026.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26533.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 58584.200 ops/s
[info]                  ·gc.alloc.rate:                   1027.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35596.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.237 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58764.582 ops/s
[info]                  ·gc.alloc.rate:                   1029.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26760.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   58463.339 ±(99.9%) 1393.696 ops/s [Average]
[info]   (min, avg, max) = (57833.387, 58463.339, 58764.582), stdev = 361.938
[info]   CI (99.9%): [57069.643, 59857.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1024.814 ±(99.9%) 23.928 MB/sec [Average]
[info]   (min, avg, max) = (1014.004, 1024.814, 1029.945), stdev = 6.214
[info]   CI (99.9%): [1000.886, 1048.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27584.007, 27584.007, 27584.008), stdev = 0.001
[info]   CI (99.9%): [27584.006, 27584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1055.625 ±(99.9%) 581.753 MB/sec [Average]
[info]   (min, avg, max) = (981.178, 1055.625, 1325.612), stdev = 151.079
[info]   CI (99.9%): [473.872, 1637.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28409.373 ±(99.9%) 15483.954 B/op [Average]
[info]   (min, avg, max) = (26372.852, 28409.373, 35596.212), stdev = 4021.134
[info]   CI (99.9%): [12925.419, 43893.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.017 ±(99.9%) 2.451 B/op [Average]
[info]   (min, avg, max) = (1.115, 2.017, 2.798), stdev = 0.637
[info]   CI (99.9%): [≈ 0, 4.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 16.06% complete, ETA 00:58:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65458.041 ops/s
[info] # Warmup Iteration   2: 68456.060 ops/s
[info] # Warmup Iteration   3: 68298.995 ops/s
[info] Iteration   1: 69232.766 ops/s
[info]                  ·gc.alloc.rate:                   465.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13372.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 68734.040 ops/s
[info]                  ·gc.alloc.rate:               462.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7611.309 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 69014.154 ops/s
[info]                  ·gc.alloc.rate:                   464.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7580.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 68933.781 ops/s
[info]                  ·gc.alloc.rate:                   463.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15177.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 68881.645 ops/s
[info]                  ·gc.alloc.rate:               463.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7595.068 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   68959.277 ±(99.9%) 707.975 ops/s [Average]
[info]   (min, avg, max) = (68734.040, 68959.277, 69232.766), stdev = 183.859
[info]   CI (99.9%): [68251.302, 69667.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   463.758 ±(99.9%) 4.830 MB/sec [Average]
[info]   (min, avg, max) = (462.235, 463.758, 465.636), stdev = 1.254
[info]   CI (99.9%): [458.927, 468.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10584.006, 10584.006, 10584.007), stdev = 0.001
[info]   CI (99.9%): [10584.006, 10584.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.063 ±(99.9%) 629.062 MB/sec [Average]
[info]   (min, avg, max) = (332.402, 450.063, 664.806), stdev = 163.365
[info]   CI (99.9%): [≈ 0, 1079.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10267.327 ±(99.9%) 14300.192 B/op [Average]
[info]   (min, avg, max) = (7580.434, 10267.327, 15177.798), stdev = 3713.714
[info]   CI (99.9%): [≈ 0, 24567.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.348 ±(99.9%) 2.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.616), stdev = 0.710
[info]   CI (99.9%): [≈ 0, 3.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.916 ±(99.9%) 62.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.916, 36.727), stdev = 16.136
[info]   CI (99.9%): [≈ 0, 70.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 16.36% complete, ETA 00:58:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19734.129 ops/s
[info] # Warmup Iteration   2: 33399.976 ops/s
[info] # Warmup Iteration   3: 33600.653 ops/s
[info] Iteration   1: 33979.191 ops/s
[info]                  ·gc.alloc.rate:                   1738.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76533.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.785 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34104.012 ops/s
[info]                  ·gc.alloc.rate:                   1745.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76806.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.921 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33373.298 ops/s
[info]                  ·gc.alloc.rate:                   1707.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78959.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.927 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34273.232 ops/s
[info]                  ·gc.alloc.rate:                   1753.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77286.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.868 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33921.278 ops/s
[info]                  ·gc.alloc.rate:                   1735.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94093.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.829 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33930.202 ±(99.9%) 1306.527 ops/s [Average]
[info]   (min, avg, max) = (33373.298, 33930.202, 34273.232), stdev = 339.301
[info]   CI (99.9%): [32623.675, 35236.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1736.260 ±(99.9%) 66.839 MB/sec [Average]
[info]   (min, avg, max) = (1707.762, 1736.260, 1753.804), stdev = 17.358
[info]   CI (99.9%): [1669.421, 1803.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80536.014 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (80536.013, 80536.014, 80536.018), stdev = 0.002
[info]   CI (99.9%): [80536.005, 80536.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1740.417 ±(99.9%) 620.699 MB/sec [Average]
[info]   (min, avg, max) = (1652.339, 1740.417, 2028.040), stdev = 161.193
[info]   CI (99.9%): [1119.718, 2361.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80735.852 ±(99.9%) 28980.259 B/op [Average]
[info]   (min, avg, max) = (76533.552, 80735.852, 94093.069), stdev = 7526.081
[info]   CI (99.9%): [51755.594, 109716.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.866 ±(99.9%) 5.901 B/op [Average]
[info]   (min, avg, max) = (1.921, 3.866, 5.785), stdev = 1.532
[info]   CI (99.9%): [≈ 0, 9.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 16.67% complete, ETA 00:58:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28922.107 ops/s
[info] # Warmup Iteration   2: 38868.541 ops/s
[info] # Warmup Iteration   3: 39069.869 ops/s
[info] Iteration   1: 39352.514 ops/s
[info]                  ·gc.alloc.rate:                   620.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              24826.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26400.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39605.893 ops/s
[info]                  ·gc.alloc.rate:                   624.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26205.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39591.327 ops/s
[info]                  ·gc.alloc.rate:                   624.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26242.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39616.403 ops/s
[info]                  ·gc.alloc.rate:               625.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26252.111 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 39204.621 ops/s
[info]                  ·gc.alloc.rate:                   618.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26582.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.507 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39474.152 ±(99.9%) 717.201 ops/s [Average]
[info]   (min, avg, max) = (39204.621, 39474.152, 39616.403), stdev = 186.255
[info]   CI (99.9%): [38756.950, 40191.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   622.724 ±(99.9%) 11.371 MB/sec [Average]
[info]   (min, avg, max) = (618.375, 622.724, 625.012), stdev = 2.953
[info]   CI (99.9%): [611.353, 634.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24824.557 ±(99.9%) 4.704 B/op [Average]
[info]   (min, avg, max) = (24824.011, 24824.557, 24826.742), stdev = 1.222
[info]   CI (99.9%): [24819.853, 24829.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   660.639 ±(99.9%) 3.814 MB/sec [Average]
[info]   (min, avg, max) = (659.559, 660.639, 662.170), stdev = 0.990
[info]   CI (99.9%): [656.826, 664.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26336.621 ±(99.9%) 601.385 B/op [Average]
[info]   (min, avg, max) = (26205.797, 26336.621, 26582.110), stdev = 156.178
[info]   CI (99.9%): [25735.236, 26938.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 3.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.394, 1.803), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.749 ±(99.9%) 121.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.749, 72.102), stdev = 31.530
[info]   CI (99.9%): [≈ 0, 137.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 16.97% complete, ETA 00:58:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27154.090 ops/s
[info] # Warmup Iteration   2: 40778.962 ops/s
[info] # Warmup Iteration   3: 40917.153 ops/s
[info] Iteration   1: 40632.245 ops/s
[info]                  ·gc.alloc.rate:               408.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19816.097 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 40522.993 ops/s
[info]                  ·gc.alloc.rate:                   407.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12690.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.515 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 40597.189 ops/s
[info]                  ·gc.alloc.rate:                   408.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12666.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41668.660 ops/s
[info]                  ·gc.alloc.rate:                   418.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12353.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41435.515 ops/s
[info]                  ·gc.alloc.rate:                   416.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24846.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   40971.320 ±(99.9%) 2071.582 ops/s [Average]
[info]   (min, avg, max) = (40522.993, 40971.320, 41668.660), stdev = 537.983
[info]   CI (99.9%): [38899.739, 43042.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   411.996 ±(99.9%) 20.923 MB/sec [Average]
[info]   (min, avg, max) = (407.498, 411.996, 418.945), stdev = 5.434
[info]   CI (99.9%): [391.072, 432.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15824.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (15824.010, 15824.011, 15824.011), stdev = 0.001
[info]   CI (99.9%): [15824.009, 15824.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.334 ±(99.9%) 574.222 MB/sec [Average]
[info]   (min, avg, max) = (326.745, 429.334, 654.468), stdev = 149.124
[info]   CI (99.9%): [≈ 0, 1003.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16474.633 ±(99.9%) 21702.898 B/op [Average]
[info]   (min, avg, max) = (12353.652, 16474.633, 24846.813), stdev = 5636.174
[info]   CI (99.9%): [≈ 0, 38177.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.449 ±(99.9%) 3.554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.449, 2.099), stdev = 0.923
[info]   CI (99.9%): [≈ 0, 4.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.411 ±(99.9%) 138.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.411, 81.515), stdev = 35.854
[info]   CI (99.9%): [≈ 0, 155.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 17.27% complete, ETA 00:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37394.370 ops/s
[info] # Warmup Iteration   2: 42879.815 ops/s
[info] # Warmup Iteration   3: 43412.252 ops/s
[info] Iteration   1: 43286.011 ops/s
[info]                  ·gc.alloc.rate:               424.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18601.307 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 43258.515 ops/s
[info]                  ·gc.alloc.rate:                   424.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12069.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.457 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44165.026 ops/s
[info]                  ·gc.alloc.rate:                   433.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23643.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43947.710 ops/s
[info]                  ·gc.alloc.rate:               431.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11880.124 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 42837.085 ops/s
[info]                  ·gc.alloc.rate:                   420.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12188.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.765 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   43498.869 ±(99.9%) 2096.975 ops/s [Average]
[info]   (min, avg, max) = (42837.085, 43498.869, 44165.026), stdev = 544.578
[info]   CI (99.9%): [41401.895, 45595.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   426.817 ±(99.9%) 20.283 MB/sec [Average]
[info]   (min, avg, max) = (420.455, 426.817, 433.280), stdev = 5.267
[info]   CI (99.9%): [406.534, 447.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   15440.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15440.010, 15440.010, 15440.011), stdev = 0.001
[info]   CI (99.9%): [15440.009, 15440.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.135 ±(99.9%) 577.789 MB/sec [Average]
[info]   (min, avg, max) = (331.724, 434.135, 663.488), stdev = 150.050
[info]   CI (99.9%): [≈ 0, 1011.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15676.491 ±(99.9%) 20341.145 B/op [Average]
[info]   (min, avg, max) = (11880.124, 15676.491, 23643.523), stdev = 5282.531
[info]   CI (99.9%): [≈ 0, 36017.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 3.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.772), stdev = 0.781
[info]   CI (99.9%): [≈ 0, 3.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.638 ±(99.9%) 109.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.638, 64.457), stdev = 28.435
[info]   CI (99.9%): [≈ 0, 123.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.58% complete, ETA 00:57:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37139.630 ops/s
[info] # Warmup Iteration   2: 43659.086 ops/s
[info] # Warmup Iteration   3: 43818.437 ops/s
[info] Iteration   1: 44569.367 ops/s
[info]                  ·gc.alloc.rate:                   386.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9032.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42405.985 ops/s
[info]                  ·gc.alloc.rate:                   367.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21806.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 43688.682 ops/s
[info]                  ·gc.alloc.rate:                   378.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11951.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 43768.276 ops/s
[info]                  ·gc.alloc.rate:               379.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11905.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 43447.220 ops/s
[info]                  ·gc.alloc.rate:               376.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11992.964 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   43575.906 ±(99.9%) 2996.314 ops/s [Average]
[info]   (min, avg, max) = (42405.985, 43575.906, 44569.367), stdev = 778.133
[info]   CI (99.9%): [40579.592, 46572.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   377.695 ±(99.9%) 25.904 MB/sec [Average]
[info]   (min, avg, max) = (367.584, 377.695, 386.267), stdev = 6.727
[info]   CI (99.9%): [351.791, 403.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13640.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13640.010, 13640.010, 13640.010), stdev = 0.001
[info]   CI (99.9%): [13640.009, 13640.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.494 ±(99.9%) 490.362 MB/sec [Average]
[info]   (min, avg, max) = (255.801, 367.494, 587.653), stdev = 127.345
[info]   CI (99.9%): [≈ 0, 857.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   13337.698 ±(99.9%) 18867.062 B/op [Average]
[info]   (min, avg, max) = (9032.959, 13337.698, 21806.188), stdev = 4899.716
[info]   CI (99.9%): [≈ 0, 32204.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 3.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.793), stdev = 0.793
[info]   CI (99.9%): [≈ 0, 3.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   13.903 ±(99.9%) 113.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.903, 66.528), stdev = 29.433
[info]   CI (99.9%): [≈ 0, 127.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 17.88% complete, ETA 00:57:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11272.214 ops/s
[info] # Warmup Iteration   2: 15671.359 ops/s
[info] # Warmup Iteration   3: 15689.666 ops/s
[info] Iteration   1: 15639.039 ops/s
[info]                  ·gc.alloc.rate:                   1116.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              112336.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133325.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.189 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15947.043 ops/s
[info]                  ·gc.alloc.rate:                   1138.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              112348.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98382.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15970.684 ops/s
[info]                  ·gc.alloc.rate:                   1140.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98502.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15796.421 ops/s
[info]                  ·gc.alloc.rate:                   1127.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133270.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.296 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15515.939 ops/s
[info]                  ·gc.alloc.rate:                   1107.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              112351.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102127.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15773.825 ±(99.9%) 755.407 ops/s [Average]
[info]   (min, avg, max) = (15515.939, 15773.825, 15970.684), stdev = 196.177
[info]   CI (99.9%): [15018.419, 16529.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1126.003 ±(99.9%) 53.896 MB/sec [Average]
[info]   (min, avg, max) = (1107.635, 1126.003, 1140.034), stdev = 13.997
[info]   CI (99.9%): [1072.107, 1179.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112348.002 ±(99.9%) 26.236 B/op [Average]
[info]   (min, avg, max) = (112336.030, 112348.002, 112352.037), stdev = 6.813
[info]   CI (99.9%): [112321.766, 112374.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1133.144 ±(99.9%) 696.739 MB/sec [Average]
[info]   (min, avg, max) = (996.857, 1133.144, 1337.593), stdev = 180.941
[info]   CI (99.9%): [436.405, 1829.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   113121.876 ±(99.9%) 71159.148 B/op [Average]
[info]   (min, avg, max) = (98382.068, 113121.876, 133325.939), stdev = 18479.805
[info]   CI (99.9%): [41962.728, 184281.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.573 ±(99.9%) 8.759 B/op [Average]
[info]   (min, avg, max) = (2.054, 4.573, 8.296), stdev = 2.275
[info]   CI (99.9%): [≈ 0, 13.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 18.18% complete, ETA 00:57:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9751.738 ops/s
[info] # Warmup Iteration   2: 16126.630 ops/s
[info] # Warmup Iteration   3: 16309.520 ops/s
[info] Iteration   1: 16597.607 ops/s
[info]                  ·gc.alloc.rate:                   1007.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              95464.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93039.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16511.456 ops/s
[info]                  ·gc.alloc.rate:                   1002.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              95491.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93809.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16588.713 ops/s
[info]                  ·gc.alloc.rate:                   1006.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93753.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.950 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16482.179 ops/s
[info]                  ·gc.alloc.rate:                   1000.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94839.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16177.920 ops/s
[info]                  ·gc.alloc.rate:                   981.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              95471.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97015.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   16471.575 ±(99.9%) 660.083 ops/s [Average]
[info]   (min, avg, max) = (16177.920, 16471.575, 16597.607), stdev = 171.422
[info]   CI (99.9%): [15811.492, 17131.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   999.502 ±(99.9%) 40.493 MB/sec [Average]
[info]   (min, avg, max) = (981.415, 999.502, 1007.134), stdev = 10.516
[info]   CI (99.9%): [959.009, 1039.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   95483.669 ±(99.9%) 57.918 B/op [Average]
[info]   (min, avg, max) = (95464.028, 95483.669, 95496.036), stdev = 15.041
[info]   CI (99.9%): [95425.751, 95541.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   988.986 ±(99.9%) 24.750 MB/sec [Average]
[info]   (min, avg, max) = (981.558, 988.986, 997.295), stdev = 6.427
[info]   CI (99.9%): [964.236, 1013.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94491.749 ±(99.9%) 5968.608 B/op [Average]
[info]   (min, avg, max) = (93039.723, 94491.749, 97015.962), stdev = 1550.029
[info]   CI (99.9%): [88523.140, 100460.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.581 ±(99.9%) 12.687 B/op [Average]
[info]   (min, avg, max) = (1.988, 5.581, 9.921), stdev = 3.295
[info]   CI (99.9%): [≈ 0, 18.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 18.48% complete, ETA 00:57:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76739.565 ops/s
[info] # Warmup Iteration   2: 78087.964 ops/s
[info] # Warmup Iteration   3: 78044.003 ops/s
[info] Iteration   1: 79201.137 ops/s
[info]                  ·gc.alloc.rate:                   206.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5083.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 80004.128 ops/s
[info]                  ·gc.alloc.rate:               208.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5032.284 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 78433.777 ops/s
[info]                  ·gc.alloc.rate:      204.126 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 81011.026 ops/s
[info]                  ·gc.alloc.rate:                   210.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4969.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 78961.120 ops/s
[info]                  ·gc.alloc.rate:               205.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5098.747 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   79522.238 ±(99.9%) 3875.312 ops/s [Average]
[info]   (min, avg, max) = (78433.777, 79522.238, 81011.026), stdev = 1006.406
[info]   CI (99.9%): [75646.925, 83397.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   206.973 ±(99.9%) 10.121 MB/sec [Average]
[info]   (min, avg, max) = (204.126, 206.973, 210.829), stdev = 2.628
[info]   CI (99.9%): [196.852, 217.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.663 ±(99.9%) 440.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.663, 255.910), stdev = 114.410
[info]   CI (99.9%): [≈ 0, 645.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4036.814 ±(99.9%) 8691.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4036.814, 5098.747), stdev = 2257.212
[info]   CI (99.9%): [≈ 0, 12728.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.206 ±(99.9%) 1.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.827), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 1.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 18.79% complete, ETA 00:56:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6934.674 ops/s
[info] # Warmup Iteration   2: 12964.989 ops/s
[info] # Warmup Iteration   3: 13453.014 ops/s
[info] Iteration   1: 13065.364 ops/s
[info]                  ·gc.alloc.rate:                   1251.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158273.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.522 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13417.048 ops/s
[info]                  ·gc.alloc.rate:                   1285.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154942.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13377.068 ops/s
[info]                  ·gc.alloc.rate:                   1281.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117113.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13366.864 ops/s
[info]                  ·gc.alloc.rate:                   1280.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157090.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.353 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13437.059 ops/s
[info]                  ·gc.alloc.rate:                   1287.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156986.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.877 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13332.681 ±(99.9%) 585.911 ops/s [Average]
[info]   (min, avg, max) = (13065.364, 13332.681, 13437.059), stdev = 152.159
[info]   CI (99.9%): [12746.770, 13918.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1277.572 ±(99.9%) 56.508 MB/sec [Average]
[info]   (min, avg, max) = (1251.810, 1277.572, 1287.805), stdev = 14.675
[info]   CI (99.9%): [1221.064, 1334.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   150800.195 ±(99.9%) 1.386 B/op [Average]
[info]   (min, avg, max) = (150800.032, 150800.195, 150800.838), stdev = 0.360
[info]   CI (99.9%): [150798.809, 150801.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1261.023 ±(99.9%) 573.054 MB/sec [Average]
[info]   (min, avg, max) = (995.479, 1261.023, 1340.632), stdev = 148.820
[info]   CI (99.9%): [687.969, 1834.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   148881.122 ±(99.9%) 68537.385 B/op [Average]
[info]   (min, avg, max) = (117113.581, 148881.122, 158273.352), stdev = 17798.941
[info]   CI (99.9%): [80343.737, 217418.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.372 ±(99.9%) 11.514 B/op [Average]
[info]   (min, avg, max) = (4.877, 7.372, 12.209), stdev = 2.990
[info]   CI (99.9%): [≈ 0, 18.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 19.09% complete, ETA 00:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41458.582 ops/s
[info] # Warmup Iteration   2: 55365.891 ops/s
[info] # Warmup Iteration   3: 55117.669 ops/s
[info] Iteration   1: 56882.906 ops/s
[info]                  ·gc.alloc.rate:                   1410.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45807.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.152 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 56228.472 ops/s
[info]                  ·gc.alloc.rate:                   1393.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37263.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.913 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 56980.268 ops/s
[info]                  ·gc.alloc.rate:                   1412.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36945.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.300 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56922.557 ops/s
[info]                  ·gc.alloc.rate:                   1411.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37131.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.727 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 56780.499 ops/s
[info]                  ·gc.alloc.rate:                   1407.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37361.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   56758.940 ±(99.9%) 1175.842 ops/s [Average]
[info]   (min, avg, max) = (56228.472, 56758.940, 56980.268), stdev = 305.362
[info]   CI (99.9%): [55583.099, 57934.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1407.149 ±(99.9%) 29.521 MB/sec [Average]
[info]   (min, avg, max) = (1393.845, 1407.149, 1412.530), stdev = 7.666
[info]   CI (99.9%): [1377.629, 1436.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39016.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39016.008, 39016.008, 39016.008), stdev = 0.001
[info]   CI (99.9%): [39016.007, 39016.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.158 ±(99.9%) 544.075 MB/sec [Average]
[info]   (min, avg, max) = (1331.232, 1403.158, 1655.665), stdev = 141.295
[info]   CI (99.9%): [859.083, 1947.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   38901.965 ±(99.9%) 14877.453 B/op [Average]
[info]   (min, avg, max) = (36945.791, 38901.965, 45807.815), stdev = 3863.627
[info]   CI (99.9%): [24024.512, 53779.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.311 ±(99.9%) 3.536 B/op [Average]
[info]   (min, avg, max) = (1.152, 2.311, 3.462), stdev = 0.918
[info]   CI (99.9%): [≈ 0, 5.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 19.39% complete, ETA 00:56:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53388.941 ops/s
[info] # Warmup Iteration   2: 79477.449 ops/s
[info] # Warmup Iteration   3: 82066.198 ops/s
[info] Iteration   1: 82118.692 ops/s
[info]                  ·gc.alloc.rate:                   1244.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25150.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 81584.981 ops/s
[info]                  ·gc.alloc.rate:                   1235.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19063.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 82805.334 ops/s
[info]                  ·gc.alloc.rate:               1253.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25195.502 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 82272.404 ops/s
[info]                  ·gc.alloc.rate:                   1246.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25498.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 82474.903 ops/s
[info]                  ·gc.alloc.rate:                   1248.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25576.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   82251.263 ±(99.9%) 1742.350 ops/s [Average]
[info]   (min, avg, max) = (81584.981, 82251.263, 82805.334), stdev = 452.483
[info]   CI (99.9%): [80508.912, 83993.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1245.685 ±(99.9%) 26.281 MB/sec [Average]
[info]   (min, avg, max) = (1235.375, 1245.685, 1253.863), stdev = 6.825
[info]   CI (99.9%): [1219.404, 1271.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23832.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23832.005, 23832.005, 23832.006), stdev = 0.001
[info]   CI (99.9%): [23832.005, 23832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1260.085 ±(99.9%) 586.559 MB/sec [Average]
[info]   (min, avg, max) = (988.203, 1260.085, 1340.279), stdev = 152.327
[info]   CI (99.9%): [673.527, 1846.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24097.120 ±(99.9%) 10858.135 B/op [Average]
[info]   (min, avg, max) = (19063.733, 24097.120, 25576.575), stdev = 2819.823
[info]   CI (99.9%): [13238.985, 34955.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.959 ±(99.9%) 2.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.959, 2.008), stdev = 0.730
[info]   CI (99.9%): [≈ 0, 3.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 19.70% complete, ETA 00:56:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251842.557 ops/s
[info] # Warmup Iteration   2: 278847.783 ops/s
[info] # Warmup Iteration   3: 291219.934 ops/s
[info] Iteration   1: 296819.621 ops/s
[info]                  ·gc.alloc.rate:               470.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1356.342 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 296843.155 ops/s
[info]                  ·gc.alloc.rate:                   470.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3517.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 298320.743 ops/s
[info]                  ·gc.alloc.rate:               473.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1746.707 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 297833.715 ops/s
[info]                  ·gc.alloc.rate:                   472.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3500.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 298545.171 ops/s
[info]                  ·gc.alloc.rate:               473.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1747.147 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   297672.481 ±(99.9%) 3118.177 ops/s [Average]
[info]   (min, avg, max) = (296819.621, 297672.481, 298545.171), stdev = 809.781
[info]   CI (99.9%): [294554.304, 300790.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   472.108 ±(99.9%) 4.880 MB/sec [Average]
[info]   (min, avg, max) = (470.717, 472.108, 473.461), stdev = 1.267
[info]   CI (99.9%): [467.228, 476.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.001, 2496.001, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.888 ±(99.9%) 762.145 MB/sec [Average]
[info]   (min, avg, max) = (255.791, 448.888, 663.640), stdev = 197.927
[info]   CI (99.9%): [≈ 0, 1211.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2373.764 ±(99.9%) 4038.628 B/op [Average]
[info]   (min, avg, max) = (1356.342, 2373.764, 3517.799), stdev = 1048.819
[info]   CI (99.9%): [≈ 0, 6412.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.384 ±(99.9%) 3.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 1.839), stdev = 0.814
[info]   CI (99.9%): [≈ 0, 3.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.038 ±(99.9%) 16.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.038, 9.749), stdev = 4.315
[info]   CI (99.9%): [≈ 0, 18.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 20.00% complete, ETA 00:56:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294068.293 ops/s
[info] # Warmup Iteration   2: 320650.683 ops/s
[info] # Warmup Iteration   3: 338173.210 ops/s
[info] Iteration   1: 337262.094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 336888.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 337430.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 335689.529 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 337473.585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   336948.809 ±(99.9%) 2852.443 ops/s [Average]
[info]   (min, avg, max) = (335689.529, 336948.809, 337473.585), stdev = 740.770
[info]   CI (99.9%): [334096.366, 339801.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 20.30% complete, ETA 00:55:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54488.171 ops/s
[info] # Warmup Iteration   2: 75133.853 ops/s
[info] # Warmup Iteration   3: 74488.529 ops/s
[info] Iteration   1: 72646.426 ops/s
[info]                  ·gc.alloc.rate:                   1370.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              29688.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28597.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.902 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 74558.672 ops/s
[info]                  ·gc.alloc.rate:                   1406.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              29688.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28010.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.318 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 73654.966 ops/s
[info]                  ·gc.alloc.rate:                   1389.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              29688.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28504.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.890 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 75564.383 ops/s
[info]                  ·gc.alloc.rate:                   1425.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              29688.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34908.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73744.056 ops/s
[info]                  ·gc.alloc.rate:                   1391.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              29688.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28746.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.777 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   74033.701 ±(99.9%) 4205.165 ops/s [Average]
[info]   (min, avg, max) = (72646.426, 74033.701, 75564.383), stdev = 1092.068
[info]   CI (99.9%): [69828.536, 78238.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1396.543 ±(99.9%) 78.958 MB/sec [Average]
[info]   (min, avg, max) = (1370.646, 1396.543, 1425.382), stdev = 20.505
[info]   CI (99.9%): [1317.584, 1475.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29688.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29688.006, 29688.006, 29688.006), stdev = 0.001
[info]   CI (99.9%): [29688.005, 29688.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1400.800 ±(99.9%) 593.630 MB/sec [Average]
[info]   (min, avg, max) = (1320.282, 1400.800, 1676.011), stdev = 154.164
[info]   CI (99.9%): [807.170, 1994.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29753.285 ±(99.9%) 11146.916 B/op [Average]
[info]   (min, avg, max) = (28010.774, 29753.285, 34908.135), stdev = 2894.819
[info]   CI (99.9%): [18606.369, 40900.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.238 ±(99.9%) 1.409 B/op [Average]
[info]   (min, avg, max) = (0.890, 1.238, 1.777), stdev = 0.366
[info]   CI (99.9%): [≈ 0, 2.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 20.61% complete, ETA 00:55:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19020.427 ops/s
[info] # Warmup Iteration   2: 27144.937 ops/s
[info] # Warmup Iteration   3: 26818.314 ops/s
[info] Iteration   1: 26962.851 ops/s
[info]                  ·gc.alloc.rate:                   598.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38455.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 26819.714 ops/s
[info]                  ·gc.alloc.rate:                   595.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38621.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 26472.889 ops/s
[info]                  ·gc.alloc.rate:                   588.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          329.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19583.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.713 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27176.567 ops/s
[info]                  ·gc.alloc.rate:               603.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38190.355 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 26737.463 ops/s
[info]                  ·gc.alloc.rate:                   594.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38898.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   26833.897 ±(99.9%) 1007.588 ops/s [Average]
[info]   (min, avg, max) = (26472.889, 26833.897, 27176.567), stdev = 261.667
[info]   CI (99.9%): [25826.308, 27841.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   596.256 ±(99.9%) 22.280 MB/sec [Average]
[info]   (min, avg, max) = (588.309, 596.256, 603.946), stdev = 5.786
[info]   CI (99.9%): [573.976, 618.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34960.021 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (34960.016, 34960.021, 34960.042), stdev = 0.011
[info]   CI (99.9%): [34959.977, 34960.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   593.514 ±(99.9%) 568.228 MB/sec [Average]
[info]   (min, avg, max) = (329.545, 593.514, 661.105), stdev = 147.567
[info]   CI (99.9%): [25.287, 1161.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34749.972 ±(99.9%) 32662.892 B/op [Average]
[info]   (min, avg, max) = (19583.082, 34749.972, 38898.597), stdev = 8482.449
[info]   CI (99.9%): [2087.079, 67412.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.404 ±(99.9%) 3.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 1.813), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.626 ±(99.9%) 177.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.626, 105.845), stdev = 46.047
[info]   CI (99.9%): [≈ 0, 200.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 20.91% complete, ETA 00:55:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18825.973 ops/s
[info] # Warmup Iteration   2: 28113.792 ops/s
[info] # Warmup Iteration   3: 28152.420 ops/s
[info] Iteration   1: 28272.415 ops/s
[info]                  ·gc.alloc.rate:               390.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          21712.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14239.601 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 27742.617 ops/s
[info]                  ·gc.alloc.rate:                   382.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              21688.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33046.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27614.342 ops/s
[info]                  ·gc.alloc.rate:               380.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          21680.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18622.200 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 27798.851 ops/s
[info]                  ·gc.alloc.rate:                   383.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18479.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27817.320 ops/s
[info]                  ·gc.alloc.rate:                   383.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18466.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.178 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   27849.109 ±(99.9%) 961.082 ops/s [Average]
[info]   (min, avg, max) = (27614.342, 27849.109, 28272.415), stdev = 249.590
[info]   CI (99.9%): [26888.027, 28810.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   383.862 ±(99.9%) 14.266 MB/sec [Average]
[info]   (min, avg, max) = (380.410, 383.862, 390.181), stdev = 3.705
[info]   CI (99.9%): [369.596, 398.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21688.080 ±(99.9%) 53.368 B/op [Average]
[info]   (min, avg, max) = (21680.016, 21688.080, 21712.021), stdev = 13.859
[info]   CI (99.9%): [21634.712, 21741.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.664 ±(99.9%) 486.091 MB/sec [Average]
[info]   (min, avg, max) = (255.896, 363.664, 582.749), stdev = 126.236
[info]   CI (99.9%): [≈ 0, 849.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20570.950 ±(99.9%) 27789.383 B/op [Average]
[info]   (min, avg, max) = (14239.601, 20570.950, 33046.696), stdev = 7216.815
[info]   CI (99.9%): [≈ 0, 48360.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.448 ±(99.9%) 3.769 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.448, 2.199), stdev = 0.979
[info]   CI (99.9%): [≈ 0, 4.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.414 ±(99.9%) 213.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.414, 124.713), stdev = 55.513
[info]   CI (99.9%): [≈ 0, 239.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 21.21% complete, ETA 00:55:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107613.040 ops/s
[info] # Warmup Iteration   2: 125386.501 ops/s
[info] # Warmup Iteration   3: 120149.192 ops/s
[info] Iteration   1: 119084.162 ops/s
[info]                  ·gc.alloc.rate:                   464.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7769.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 126186.813 ops/s
[info]                  ·gc.alloc.rate:                   492.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4141.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 125694.576 ops/s
[info]                  ·gc.alloc.rate:                   490.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8308.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 126203.047 ops/s
[info]                  ·gc.alloc.rate:               492.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4137.214 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 125962.378 ops/s
[info]                  ·gc.alloc.rate:                   491.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8294.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   124626.195 ±(99.9%) 11956.069 ops/s [Average]
[info]   (min, avg, max) = (119084.162, 124626.195, 126203.047), stdev = 3104.953
[info]   CI (99.9%): [112670.126, 136582.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   486.633 ±(99.9%) 46.832 MB/sec [Average]
[info]   (min, avg, max) = (464.916, 486.633, 492.797), stdev = 12.162
[info]   CI (99.9%): [439.801, 533.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.949 ±(99.9%) 657.754 MB/sec [Average]
[info]   (min, avg, max) = (331.837, 515.949, 664.094), stdev = 170.817
[info]   CI (99.9%): [≈ 0, 1173.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6530.135 ±(99.9%) 8445.164 B/op [Average]
[info]   (min, avg, max) = (4137.214, 6530.135, 8308.129), stdev = 2193.182
[info]   CI (99.9%): [≈ 0, 14975.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.369 ±(99.9%) 2.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.369, 1.637), stdev = 0.710
[info]   CI (99.9%): [≈ 0, 3.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.846 ±(99.9%) 36.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.846, 21.627), stdev = 9.393
[info]   CI (99.9%): [≈ 0, 41.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 21.52% complete, ETA 00:55:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9936.086 ops/s
[info] # Warmup Iteration   2: 21756.283 ops/s
[info] # Warmup Iteration   3: 22038.163 ops/s
[info] Iteration   1: 22050.722 ops/s
[info]                  ·gc.alloc.rate:                   1232.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92995.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.971 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 22172.857 ops/s
[info]                  ·gc.alloc.rate:                   1239.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93098.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.388 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 21975.639 ops/s
[info]                  ·gc.alloc.rate:                   1227.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94557.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 22340.701 ops/s
[info]                  ·gc.alloc.rate:                   1248.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70228.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22238.774 ops/s
[info]                  ·gc.alloc.rate:                   1242.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94523.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.420 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   22155.738 ±(99.9%) 560.873 ops/s [Average]
[info]   (min, avg, max) = (21975.639, 22155.738, 22340.701), stdev = 145.657
[info]   CI (99.9%): [21594.866, 22716.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1238.112 ±(99.9%) 31.457 MB/sec [Average]
[info]   (min, avg, max) = (1227.954, 1238.112, 1248.398), stdev = 8.169
[info]   CI (99.9%): [1206.655, 1269.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87944.054 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (87944.019, 87944.054, 87944.183), stdev = 0.072
[info]   CI (99.9%): [87943.777, 87944.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1253.563 ±(99.9%) 554.379 MB/sec [Average]
[info]   (min, avg, max) = (996.925, 1253.563, 1335.689), stdev = 143.970
[info]   CI (99.9%): [699.185, 1807.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   89080.785 ±(99.9%) 40682.180 B/op [Average]
[info]   (min, avg, max) = (70228.875, 89080.785, 94557.424), stdev = 10565.033
[info]   CI (99.9%): [48398.605, 129762.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.432 ±(99.9%) 6.935 B/op [Average]
[info]   (min, avg, max) = (2.971, 4.432, 7.388), stdev = 1.801
[info]   CI (99.9%): [≈ 0, 11.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 21.82% complete, ETA 00:54:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134166.129 ops/s
[info] # Warmup Iteration   2: 164056.975 ops/s
[info] # Warmup Iteration   3: 162022.892 ops/s
[info] Iteration   1: 163091.673 ops/s
[info]                  ·gc.alloc.rate:                   1066.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9559.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 161101.631 ops/s
[info]                  ·gc.alloc.rate:                   1054.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12940.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 163674.921 ops/s
[info]                  ·gc.alloc.rate:                   1070.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9592.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 161527.965 ops/s
[info]                  ·gc.alloc.rate:                   1056.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9755.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 164528.755 ops/s
[info]                  ·gc.alloc.rate:                   1076.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9609.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   162784.989 ±(99.9%) 5560.335 ops/s [Average]
[info]   (min, avg, max) = (161101.631, 162784.989, 164528.755), stdev = 1444.001
[info]   CI (99.9%): [157224.654, 168345.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1065.009 ±(99.9%) 36.003 MB/sec [Average]
[info]   (min, avg, max) = (1054.307, 1065.009, 1076.312), stdev = 9.350
[info]   CI (99.9%): [1029.006, 1101.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1063.808 ±(99.9%) 562.848 MB/sec [Average]
[info]   (min, avg, max) = (990.552, 1063.808, 1325.121), stdev = 146.170
[info]   CI (99.9%): [500.961, 1626.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10291.357 ±(99.9%) 5710.182 B/op [Average]
[info]   (min, avg, max) = (9559.217, 10291.357, 12940.683), stdev = 1482.916
[info]   CI (99.9%): [4581.175, 16001.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.644 ±(99.9%) 1.018 B/op [Average]
[info]   (min, avg, max) = (0.402, 0.644, 1.017), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 22.12% complete, ETA 00:54:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 392734.492 ops/s
[info] # Warmup Iteration   2: 530939.804 ops/s
[info] # Warmup Iteration   3: 542715.565 ops/s
[info] Iteration   1: 551414.479 ops/s
[info]                  ·gc.alloc.rate:                   557.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 555535.850 ops/s
[info]                  ·gc.alloc.rate:                   561.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1850.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 554867.916 ops/s
[info]                  ·gc.alloc.rate:                   561.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 539088.443 ops/s
[info]                  ·gc.alloc.rate:               545.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 954.904 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 544493.046 ops/s
[info]                  ·gc.alloc.rate:                   551.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1892.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   549079.947 ±(99.9%) 27330.020 ops/s [Average]
[info]   (min, avg, max) = (539088.443, 549079.947, 555535.850), stdev = 7097.519
[info]   CI (99.9%): [521749.927, 576409.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   555.446 ±(99.9%) 27.505 MB/sec [Average]
[info]   (min, avg, max) = (545.289, 555.446, 561.934), stdev = 7.143
[info]   CI (99.9%): [527.941, 582.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.106 ±(99.9%) 689.701 MB/sec [Average]
[info]   (min, avg, max) = (326.726, 523.106, 655.112), stdev = 179.113
[info]   CI (99.9%): [≈ 0, 1212.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1496.857 ±(99.9%) 1945.564 B/op [Average]
[info]   (min, avg, max) = (932.587, 1496.857, 1892.809), stdev = 505.257
[info]   CI (99.9%): [≈ 0, 3442.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.458 ±(99.9%) 3.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.125), stdev = 0.932
[info]   CI (99.9%): [≈ 0, 4.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.308 ±(99.9%) 10.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.308, 6.067), stdev = 2.661
[info]   CI (99.9%): [≈ 0, 11.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 22.42% complete, ETA 00:54:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518956.937 ops/s
[info] # Warmup Iteration   2: 564969.531 ops/s
[info] # Warmup Iteration   3: 569258.487 ops/s
[info] Iteration   1: 566766.243 ops/s
[info]                  ·gc.alloc.rate:               435.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 710.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 588569.375 ops/s
[info]                  ·gc.alloc.rate:                   451.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1772.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 591613.297 ops/s
[info]                  ·gc.alloc.rate:               454.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 880.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 591125.106 ops/s
[info]                  ·gc.alloc.rate:                   453.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     881.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 591200.623 ops/s
[info]                  ·gc.alloc.rate:                   453.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1762.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   585854.929 ±(99.9%) 41349.899 ops/s [Average]
[info]   (min, avg, max) = (566766.243, 585854.929, 591613.297), stdev = 10738.437
[info]   CI (99.9%): [544505.030, 627204.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   449.672 ±(99.9%) 31.771 MB/sec [Average]
[info]   (min, avg, max) = (435.005, 449.672, 454.098), stdev = 8.251
[info]   CI (99.9%): [417.901, 481.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.601 ±(99.9%) 761.177 MB/sec [Average]
[info]   (min, avg, max) = (255.793, 448.601, 662.847), stdev = 197.675
[info]   CI (99.9%): [≈ 0, 1209.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1201.578 ±(99.9%) 2007.825 B/op [Average]
[info]   (min, avg, max) = (710.333, 1201.578, 1772.459), stdev = 521.426
[info]   CI (99.9%): [≈ 0, 3209.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 3.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.834), stdev = 0.809
[info]   CI (99.9%): [≈ 0, 3.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.036 ±(99.9%) 8.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.036, 4.905), stdev = 2.164
[info]   CI (99.9%): [≈ 0, 9.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.73% complete, ETA 00:54:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 555855.407 ops/s
[info] # Warmup Iteration   2: 605189.255 ops/s
[info] # Warmup Iteration   3: 603053.628 ops/s
[info] Iteration   1: 602385.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 603069.683 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 603503.065 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 602314.706 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 603780.151 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   603010.533 ±(99.9%) 2520.473 ops/s [Average]
[info]   (min, avg, max) = (602314.706, 603010.533, 603780.151), stdev = 654.559
[info]   CI (99.9%): [600490.060, 605531.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.03% complete, ETA 00:53:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182812.252 ops/s
[info] # Warmup Iteration   2: 328847.502 ops/s
[info] # Warmup Iteration   3: 327234.442 ops/s
[info] Iteration   1: 332508.960 ops/s
[info]                  ·gc.alloc.rate:                   919.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4625.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 331505.494 ops/s
[info]                  ·gc.alloc.rate:                   916.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4645.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 331814.999 ops/s
[info]                  ·gc.alloc.rate:                   917.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4665.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 333281.284 ops/s
[info]                  ·gc.alloc.rate:                   921.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3108.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 332477.648 ops/s
[info]                  ·gc.alloc.rate:                   919.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4690.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.493 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   332317.677 ±(99.9%) 2655.999 ops/s [Average]
[info]   (min, avg, max) = (331505.494, 332317.677, 333281.284), stdev = 689.754
[info]   CI (99.9%): [329661.678, 334973.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   918.986 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (916.656, 918.986, 921.922), stdev = 2.031
[info]   CI (99.9%): [911.163, 926.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   917.715 ±(99.9%) 558.569 MB/sec [Average]
[info]   (min, avg, max) = (658.404, 917.715, 990.893), stdev = 145.058
[info]   CI (99.9%): [359.146, 1476.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4346.970 ±(99.9%) 2668.475 B/op [Average]
[info]   (min, avg, max) = (3108.048, 4346.970, 4690.476), stdev = 692.994
[info]   CI (99.9%): [1678.495, 7015.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.394 ±(99.9%) 0.710 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.394, 0.591), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 1.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 23.33% complete, ETA 00:53:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28536.707 ops/s
[info] # Warmup Iteration   2: 34778.348 ops/s
[info] # Warmup Iteration   3: 34706.598 ops/s
[info] Iteration   1: 34760.126 ops/s
[info]                  ·gc.alloc.rate:                   1638.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              74159.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75357.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.655 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 35248.939 ops/s
[info]                  ·gc.alloc.rate:                   1661.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74770.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.506 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35424.604 ops/s
[info]                  ·gc.alloc.rate:                   1669.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74703.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35505.894 ops/s
[info]                  ·gc.alloc.rate:                   1673.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74809.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.459 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34843.457 ops/s
[info]                  ·gc.alloc.rate:                   1642.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76441.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.761 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   35156.604 ±(99.9%) 1302.420 ops/s [Average]
[info]   (min, avg, max) = (34760.126, 35156.604, 35505.894), stdev = 338.234
[info]   CI (99.9%): [33854.184, 36459.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1656.997 ±(99.9%) 61.089 MB/sec [Average]
[info]   (min, avg, max) = (1638.111, 1656.997, 1673.064), stdev = 15.865
[info]   CI (99.9%): [1595.908, 1718.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74159.825 ±(99.9%) 1.612 B/op [Average]
[info]   (min, avg, max) = (74159.076, 74159.825, 74160.013), stdev = 0.419
[info]   CI (99.9%): [74158.213, 74161.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1680.513 ±(99.9%) 42.719 MB/sec [Average]
[info]   (min, avg, max) = (1664.576, 1680.513, 1693.047), stdev = 11.094
[info]   CI (99.9%): [1637.794, 1723.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   75216.580 ±(99.9%) 2821.252 B/op [Average]
[info]   (min, avg, max) = (74703.789, 75216.580, 76441.428), stdev = 732.670
[info]   CI (99.9%): [72395.328, 78037.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.016, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.401 ±(99.9%) 4.596 B/op [Average]
[info]   (min, avg, max) = (3.761, 5.401, 6.506), stdev = 1.193
[info]   CI (99.9%): [0.806, 9.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 23.64% complete, ETA 00:53:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59993.765 ops/s
[info] # Warmup Iteration   2: 93219.567 ops/s
[info] # Warmup Iteration   3: 93396.647 ops/s
[info] Iteration   1: 93216.349 ops/s
[info]                  ·gc.alloc.rate:                   1088.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16578.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 94498.349 ops/s
[info]                  ·gc.alloc.rate:                   1103.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21895.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 94961.247 ops/s
[info]                  ·gc.alloc.rate:                   1108.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16422.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.035 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 93820.071 ops/s
[info]                  ·gc.alloc.rate:                   1094.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16700.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 95280.517 ops/s
[info]                  ·gc.alloc.rate:                   1112.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22014.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   94355.307 ±(99.9%) 3237.370 ops/s [Average]
[info]   (min, avg, max) = (93216.349, 94355.307, 95280.517), stdev = 840.735
[info]   CI (99.9%): [91117.937, 97592.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1101.426 ±(99.9%) 38.453 MB/sec [Average]
[info]   (min, avg, max) = (1088.036, 1101.426, 1112.736), stdev = 9.986
[info]   CI (99.9%): [1062.973, 1139.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18368.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18368.005, 18368.005, 18368.005), stdev = 0.001
[info]   CI (99.9%): [18368.004, 18368.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.411 ±(99.9%) 706.884 MB/sec [Average]
[info]   (min, avg, max) = (982.015, 1123.411, 1333.647), stdev = 183.576
[info]   CI (99.9%): [416.528, 1830.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18722.177 ±(99.9%) 11371.049 B/op [Average]
[info]   (min, avg, max) = (16422.469, 18722.177, 22014.588), stdev = 2953.025
[info]   CI (99.9%): [7351.128, 30093.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.972 ±(99.9%) 1.477 B/op [Average]
[info]   (min, avg, max) = (0.349, 0.972, 1.406), stdev = 0.383
[info]   CI (99.9%): [≈ 0, 2.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 23.94% complete, ETA 00:53:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152052.982 ops/s
[info] # Warmup Iteration   2: 159566.661 ops/s
[info] # Warmup Iteration   3: 159506.466 ops/s
[info] Iteration   1: 160246.054 ops/s
[info]                  ·gc.alloc.rate:      104.300 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 159744.741 ops/s
[info]                  ·gc.alloc.rate:                   103.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2520.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 160195.069 ops/s
[info]                  ·gc.alloc.rate:      104.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 160617.467 ops/s
[info]                  ·gc.alloc.rate:      104.504 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 160027.480 ops/s
[info]                  ·gc.alloc.rate:                   104.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2515.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   160166.162 ±(99.9%) 1229.379 ops/s [Average]
[info]   (min, avg, max) = (159744.741, 160166.162, 160617.467), stdev = 319.266
[info]   CI (99.9%): [158936.783, 161395.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   104.217 ±(99.9%) 0.814 MB/sec [Average]
[info]   (min, avg, max) = (103.934, 104.217, 104.504), stdev = 0.211
[info]   CI (99.9%): [103.403, 105.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.320 ±(99.9%) 539.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.320, 255.804), stdev = 140.108
[info]   CI (99.9%): [≈ 0, 641.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1007.200 ±(99.9%) 5310.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1007.200, 2520.237), stdev = 1379.167
[info]   CI (99.9%): [≈ 0, 6317.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.510 ±(99.9%) 4.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.510, 2.529), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 4.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.025 ±(99.9%) 42.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.025, 24.920), stdev = 11.122
[info]   CI (99.9%): [≈ 0, 47.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 24.24% complete, ETA 00:53:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22570.000 ops/s
[info] # Warmup Iteration   2: 38024.125 ops/s
[info] # Warmup Iteration   3: 38468.544 ops/s
[info] Iteration   1: 38494.674 ops/s
[info]                  ·gc.alloc.rate:                   2017.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81366.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.702 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 38860.231 ops/s
[info]                  ·gc.alloc.rate:                   2037.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81245.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.372 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 37653.471 ops/s
[info]                  ·gc.alloc.rate:                   1973.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84364.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.610 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38564.227 ops/s
[info]                  ·gc.alloc.rate:                   2021.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82773.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.850 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 38486.964 ops/s
[info]                  ·gc.alloc.rate:                   2017.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83167.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.256 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38411.913 ±(99.9%) 1734.826 ops/s [Average]
[info]   (min, avg, max) = (37653.471, 38411.913, 38860.231), stdev = 450.529
[info]   CI (99.9%): [36677.087, 40146.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2013.678 ±(99.9%) 91.129 MB/sec [Average]
[info]   (min, avg, max) = (1973.783, 2013.678, 2037.125), stdev = 23.666
[info]   CI (99.9%): [1922.549, 2104.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82504.012 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (82504.011, 82504.012, 82504.015), stdev = 0.002
[info]   CI (99.9%): [82504.005, 82504.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.372 ±(99.9%) 67.991 MB/sec [Average]
[info]   (min, avg, max) = (1990.169, 2015.372, 2034.154), stdev = 17.657
[info]   CI (99.9%): [1947.381, 2083.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82583.745 ±(99.9%) 5028.253 B/op [Average]
[info]   (min, avg, max) = (81245.957, 82583.745, 84364.984), stdev = 1305.821
[info]   CI (99.9%): [77555.492, 87611.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.558 ±(99.9%) 5.167 B/op [Average]
[info]   (min, avg, max) = (0.850, 2.558, 4.256), stdev = 1.342
[info]   CI (99.9%): [≈ 0, 7.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 24.55% complete, ETA 00:52:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67494.271 ops/s
[info] # Warmup Iteration   2: 83803.626 ops/s
[info] # Warmup Iteration   3: 85472.126 ops/s
[info] Iteration   1: 86285.546 ops/s
[info]                  ·gc.alloc.rate:                   689.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12034.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 86245.483 ops/s
[info]                  ·gc.alloc.rate:                   689.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12040.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 86205.066 ops/s
[info]                  ·gc.alloc.rate:                   689.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12058.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 83985.369 ops/s
[info]                  ·gc.alloc.rate:                   671.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12396.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 85226.982 ops/s
[info]                  ·gc.alloc.rate:               681.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12245.955 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   85589.689 ±(99.9%) 3849.860 ops/s [Average]
[info]   (min, avg, max) = (83985.369, 85589.689, 86285.546), stdev = 999.796
[info]   CI (99.9%): [81739.829, 89439.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   684.013 ±(99.9%) 30.847 MB/sec [Average]
[info]   (min, avg, max) = (671.201, 684.013, 689.462), stdev = 8.011
[info]   CI (99.9%): [653.167, 714.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12576.005, 12576.005, 12576.005), stdev = 0.001
[info]   CI (99.9%): [12576.005, 12576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.049 ±(99.9%) 5.294 MB/sec [Average]
[info]   (min, avg, max) = (659.798, 661.049, 663.132), stdev = 1.375
[info]   CI (99.9%): [655.755, 666.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12155.294 ±(99.9%) 618.646 B/op [Average]
[info]   (min, avg, max) = (12034.931, 12155.294, 12396.257), stdev = 160.660
[info]   CI (99.9%): [11536.648, 12773.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.066 ±(99.9%) 4.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 2.279), stdev = 1.119
[info]   CI (99.9%): [≈ 0, 5.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 24.85% complete, ETA 00:52:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68554.692 ops/s
[info] # Warmup Iteration   2: 98189.340 ops/s
[info] # Warmup Iteration   3: 97825.589 ops/s
[info] Iteration   1: 98743.140 ops/s
[info]                  ·gc.alloc.rate:               389.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4077.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 98225.576 ops/s
[info]                  ·gc.alloc.rate:                   387.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9334.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 98998.503 ops/s
[info]                  ·gc.alloc.rate:                   390.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5194.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 98993.663 ops/s
[info]                  ·gc.alloc.rate:               390.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5200.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 98921.859 ops/s
[info]                  ·gc.alloc.rate:               390.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5203.930 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   98776.548 ±(99.9%) 1251.022 ops/s [Average]
[info]   (min, avg, max) = (98225.576, 98776.548, 98998.503), stdev = 324.887
[info]   CI (99.9%): [97525.526, 100027.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   389.690 ±(99.9%) 4.935 MB/sec [Average]
[info]   (min, avg, max) = (387.499, 389.690, 390.536), stdev = 1.282
[info]   CI (99.9%): [384.756, 394.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6208.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.004, 6208.005, 6208.005), stdev = 0.001
[info]   CI (99.9%): [6208.004, 6208.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.915 ±(99.9%) 485.504 MB/sec [Average]
[info]   (min, avg, max) = (255.887, 363.915, 582.627), stdev = 126.084
[info]   CI (99.9%): [≈ 0, 849.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5801.999 ±(99.9%) 7829.976 B/op [Average]
[info]   (min, avg, max) = (4077.253, 5801.999, 9334.077), stdev = 2033.420
[info]   CI (99.9%): [≈ 0, 13631.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.440 ±(99.9%) 3.653 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.440, 2.136), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.044 ±(99.9%) 58.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.044, 34.225), stdev = 15.201
[info]   CI (99.9%): [≈ 0, 65.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 25.15% complete, ETA 00:52:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98403.411 ops/s
[info] # Warmup Iteration   2: 110667.126 ops/s
[info] # Warmup Iteration   3: 111340.527 ops/s
[info] Iteration   1: 110359.349 ops/s
[info]                  ·gc.alloc.rate:                   408.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7296.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 110038.726 ops/s
[info]                  ·gc.alloc.rate:                   407.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4744.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 110407.168 ops/s
[info]                  ·gc.alloc.rate:                   408.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4729.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 110517.632 ops/s
[info]                  ·gc.alloc.rate:                   408.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9429.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 109369.451 ops/s
[info]                  ·gc.alloc.rate:               404.716 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4769.043 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   110138.465 ±(99.9%) 1791.779 ops/s [Average]
[info]   (min, avg, max) = (109369.451, 110138.465, 110517.632), stdev = 465.319
[info]   CI (99.9%): [108346.686, 111930.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   407.602 ±(99.9%) 6.601 MB/sec [Average]
[info]   (min, avg, max) = (404.716, 407.602, 408.962), stdev = 1.714
[info]   CI (99.9%): [401.001, 414.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5824.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5824.004, 5824.004), stdev = 0.001
[info]   CI (99.9%): [5824.003, 5824.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   433.759 ±(99.9%) 575.921 MB/sec [Average]
[info]   (min, avg, max) = (331.405, 433.759, 662.144), stdev = 149.565
[info]   CI (99.9%): [≈ 0, 1009.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6193.691 ±(99.9%) 8159.433 B/op [Average]
[info]   (min, avg, max) = (4729.004, 6193.691, 9429.538), stdev = 2118.979
[info]   CI (99.9%): [≈ 0, 14353.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 2.987 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.762), stdev = 0.776
[info]   CI (99.9%): [≈ 0, 3.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.364 ±(99.9%) 42.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.364, 25.191), stdev = 11.089
[info]   CI (99.9%): [≈ 0, 48.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 25.45% complete, ETA 00:52:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98914.025 ops/s
[info] # Warmup Iteration   2: 112928.532 ops/s
[info] # Warmup Iteration   3: 111930.363 ops/s
[info] Iteration   1: 111837.672 ops/s
[info]                  ·gc.alloc.rate:                   325.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7199.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 110319.398 ops/s
[info]                  ·gc.alloc.rate:                   321.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3649.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.445 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 113245.983 ops/s
[info]                  ·gc.alloc.rate:                   329.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4610.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.334 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 112703.145 ops/s
[info]                  ·gc.alloc.rate:                   328.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4632.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 113432.544 ops/s
[info]                  ·gc.alloc.rate:               330.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4593.869 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   112307.748 ±(99.9%) 4899.669 ops/s [Average]
[info]   (min, avg, max) = (110319.398, 112307.748, 113432.544), stdev = 1272.429
[info]   CI (99.9%): [107408.079, 117207.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   327.129 ±(99.9%) 14.303 MB/sec [Average]
[info]   (min, avg, max) = (321.318, 327.129, 330.399), stdev = 3.714
[info]   CI (99.9%): [312.826, 341.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4584.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4584.004, 4584.004), stdev = 0.001
[info]   CI (99.9%): [4584.004, 4584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   352.420 ±(99.9%) 365.171 MB/sec [Average]
[info]   (min, avg, max) = (255.809, 352.420, 511.591), stdev = 94.834
[info]   CI (99.9%): [≈ 0, 717.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4937.191 ±(99.9%) 5127.529 B/op [Average]
[info]   (min, avg, max) = (3649.436, 4937.191, 7199.299), stdev = 1331.603
[info]   CI (99.9%): [≈ 0, 10064.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.383 ±(99.9%) 2.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.751), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.335 ±(99.9%) 40.929 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.335, 24.334), stdev = 10.629
[info]   CI (99.9%): [≈ 0, 46.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 25.76% complete, ETA 00:52:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6455.039 ops/s
[info] # Warmup Iteration   2: 9729.523 ops/s
[info] # Warmup Iteration   3: 9622.856 ops/s
[info] Iteration   1: 9793.454 ops/s
[info]                  ·gc.alloc.rate:                   1623.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              260912.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267255.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9784.960 ops/s
[info]                  ·gc.alloc.rate:                   1622.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              260912.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268867.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9703.876 ops/s
[info]                  ·gc.alloc.rate:                   1608.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              260912.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217904.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.128 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9793.144 ops/s
[info]                  ·gc.alloc.rate:                   1623.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              260923.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270814.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9841.369 ops/s
[info]                  ·gc.alloc.rate:                   1631.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              260944.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270345.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.644 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9783.361 ±(99.9%) 191.402 ops/s [Average]
[info]   (min, avg, max) = (9703.876, 9783.361, 9841.369), stdev = 49.706
[info]   CI (99.9%): [9591.959, 9974.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1622.123 ±(99.9%) 32.240 MB/sec [Average]
[info]   (min, avg, max) = (1608.770, 1622.123, 1631.913), stdev = 8.373
[info]   CI (99.9%): [1589.883, 1654.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260920.700 ±(99.9%) 53.648 B/op [Average]
[info]   (min, avg, max) = (260912.045, 260920.700, 260944.044), stdev = 13.932
[info]   CI (99.9%): [260867.052, 260974.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.945 ±(99.9%) 577.025 MB/sec [Average]
[info]   (min, avg, max) = (1343.586, 1610.945, 1690.712), stdev = 149.852
[info]   CI (99.9%): [1033.920, 2187.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   259037.449 ±(99.9%) 88704.625 B/op [Average]
[info]   (min, avg, max) = (217904.162, 259037.449, 270814.341), stdev = 23036.309
[info]   CI (99.9%): [170332.824, 347742.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.055 ±(99.9%) 16.689 B/op [Average]
[info]   (min, avg, max) = (10.035, 14.055, 20.089), stdev = 4.334
[info]   CI (99.9%): [≈ 0, 30.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 26.06% complete, ETA 00:51:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5164.910 ops/s
[info] # Warmup Iteration   2: 9411.949 ops/s
[info] # Warmup Iteration   3: 9694.682 ops/s
[info] Iteration   1: 9552.737 ops/s
[info]                  ·gc.alloc.rate:                   1469.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270621.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.429 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9664.230 ops/s
[info]                  ·gc.alloc.rate:                   1486.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215442.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.950 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9615.464 ops/s
[info]                  ·gc.alloc.rate:                   1479.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272474.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.222 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9427.868 ops/s
[info]                  ·gc.alloc.rate:                   1450.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              242107.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223749.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.901 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9327.679 ops/s
[info]                  ·gc.alloc.rate:                   1435.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              242136.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227047.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9517.596 ±(99.9%) 532.288 ops/s [Average]
[info]   (min, avg, max) = (9327.679, 9517.596, 9664.230), stdev = 138.234
[info]   CI (99.9%): [8985.307, 10049.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1464.161 ±(99.9%) 81.608 MB/sec [Average]
[info]   (min, avg, max) = (1435.081, 1464.161, 1486.652), stdev = 21.193
[info]   CI (99.9%): [1382.553, 1545.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242111.191 ±(99.9%) 53.862 B/op [Average]
[info]   (min, avg, max) = (242104.045, 242111.191, 242136.046), stdev = 13.988
[info]   CI (99.9%): [242057.330, 242165.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1463.268 ±(99.9%) 670.802 MB/sec [Average]
[info]   (min, avg, max) = (1322.938, 1463.268, 1664.738), stdev = 174.205
[info]   CI (99.9%): [792.466, 2134.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   241867.247 ±(99.9%) 105625.650 B/op [Average]
[info]   (min, avg, max) = (215442.989, 241867.247, 272474.932), stdev = 27430.646
[info]   CI (99.9%): [136241.597, 347492.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.520 ±(99.9%) 35.090 B/op [Average]
[info]   (min, avg, max) = (3.429, 14.520, 28.100), stdev = 9.113
[info]   CI (99.9%): [≈ 0, 49.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 26.36% complete, ETA 00:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111576.941 ops/s
[info] # Warmup Iteration   2: 120074.973 ops/s
[info] # Warmup Iteration   3: 116169.361 ops/s
[info] Iteration   1: 115426.661 ops/s
[info]                  ·gc.alloc.rate:                   300.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3487.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 117181.576 ops/s
[info]                  ·gc.alloc.rate:                   304.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6871.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 120329.941 ops/s
[info]                  ·gc.alloc.rate:      313.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 120126.818 ops/s
[info]                  ·gc.alloc.rate:                   312.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4359.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 120265.589 ops/s
[info]                  ·gc.alloc.rate:                   313.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4354.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   118666.117 ±(99.9%) 8644.291 ops/s [Average]
[info]   (min, avg, max) = (115426.661, 118666.117, 120329.941), stdev = 2244.895
[info]   CI (99.9%): [110021.826, 127310.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   308.878 ±(99.9%) 22.374 MB/sec [Average]
[info]   (min, avg, max) = (300.542, 308.878, 313.150), stdev = 5.810
[info]   CI (99.9%): [286.505, 331.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.622 ±(99.9%) 715.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.622, 511.590), stdev = 185.721
[info]   CI (99.9%): [≈ 0, 1001.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3814.596 ±(99.9%) 9547.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3814.596, 6871.273), stdev = 2479.378
[info]   CI (99.9%): [≈ 0, 13361.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.333 ±(99.9%) 2.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.551), stdev = 0.681
[info]   CI (99.9%): [≈ 0, 2.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.368 ±(99.9%) 34.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.368, 20.320), stdev = 8.922
[info]   CI (99.9%): [≈ 0, 38.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 26.67% complete, ETA 00:51:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2655.618 ops/s
[info] # Warmup Iteration   2: 5356.739 ops/s
[info] # Warmup Iteration   3: 5598.281 ops/s
[info] Iteration   1: 5546.207 ops/s
[info]                  ·gc.alloc.rate:                   1475.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467010.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.722 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5517.520 ops/s
[info]                  ·gc.alloc.rate:                   1467.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     377897.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.561 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5613.435 ops/s
[info]                  ·gc.alloc.rate:                   1493.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     373491.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.672 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5637.424 ops/s
[info]                  ·gc.alloc.rate:                   1499.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467387.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.622 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5699.159 ops/s
[info]                  ·gc.alloc.rate:                   1516.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371535.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5602.749 ±(99.9%) 279.487 ops/s [Average]
[info]   (min, avg, max) = (5517.520, 5602.749, 5699.159), stdev = 72.582
[info]   CI (99.9%): [5323.263, 5882.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1490.508 ±(99.9%) 74.777 MB/sec [Average]
[info]   (min, avg, max) = (1467.826, 1490.508, 1516.385), stdev = 19.419
[info]   CI (99.9%): [1415.731, 1565.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418664.079 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (418664.076, 418664.079, 418664.084), stdev = 0.003
[info]   CI (99.9%): [418664.066, 418664.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.536 ±(99.9%) 688.582 MB/sec [Average]
[info]   (min, avg, max) = (1324.900, 1464.536, 1674.238), stdev = 178.823
[info]   CI (99.9%): [775.955, 2153.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   411464.346 ±(99.9%) 196115.873 B/op [Average]
[info]   (min, avg, max) = (371535.436, 411464.346, 467387.086), stdev = 50930.669
[info]   CI (99.9%): [215348.474, 607580.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.114 ±(99.9%) 47.644 B/op [Average]
[info]   (min, avg, max) = (11.622, 21.114, 41.561), stdev = 12.373
[info]   CI (99.9%): [≈ 0, 68.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 26.97% complete, ETA 00:51:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16395.408 ops/s
[info] # Warmup Iteration   2: 22817.962 ops/s
[info] # Warmup Iteration   3: 23376.138 ops/s
[info] Iteration   1: 23495.536 ops/s
[info]                  ·gc.alloc.rate:                   1730.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111260.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.578 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 23276.136 ops/s
[info]                  ·gc.alloc.rate:                   1714.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113005.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.222 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 23298.587 ops/s
[info]                  ·gc.alloc.rate:                   1715.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113443.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23449.572 ops/s
[info]                  ·gc.alloc.rate:                   1725.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135872.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.986 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23768.119 ops/s
[info]                  ·gc.alloc.rate:                   1749.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112126.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   23457.590 ±(99.9%) 760.783 ops/s [Average]
[info]   (min, avg, max) = (23276.136, 23457.590, 23768.119), stdev = 197.573
[info]   CI (99.9%): [22696.807, 24218.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.910 ±(99.9%) 55.021 MB/sec [Average]
[info]   (min, avg, max) = (1714.073, 1726.910, 1749.326), stdev = 14.289
[info]   CI (99.9%): [1671.889, 1781.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115857.722 ±(99.9%) 134.634 B/op [Average]
[info]   (min, avg, max) = (115832.018, 115857.722, 115896.027), stdev = 34.964
[info]   CI (99.9%): [115723.089, 115992.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.973 ±(99.9%) 601.136 MB/sec [Average]
[info]   (min, avg, max) = (1660.949, 1745.973, 2024.428), stdev = 156.113
[info]   CI (99.9%): [1144.836, 2347.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   117141.801 ±(99.9%) 40448.829 B/op [Average]
[info]   (min, avg, max) = (111260.607, 117141.801, 135872.701), stdev = 10504.432
[info]   CI (99.9%): [76692.973, 157590.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.590 ±(99.9%) 5.450 B/op [Average]
[info]   (min, avg, max) = (4.135, 5.590, 7.031), stdev = 1.415
[info]   CI (99.9%): [0.141, 11.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 27.27% complete, ETA 00:51:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16775.794 ops/s
[info] # Warmup Iteration   2: 28467.512 ops/s
[info] # Warmup Iteration   3: 28636.382 ops/s
[info] Iteration   1: 28387.040 ops/s
[info]                  ·gc.alloc.rate:                   1810.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109876.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.617 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28811.571 ops/s
[info]                  ·gc.alloc.rate:                   1837.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90944.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.685 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28775.507 ops/s
[info]                  ·gc.alloc.rate:                   1835.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110067.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.139 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 28142.418 ops/s
[info]                  ·gc.alloc.rate:                   1795.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94254.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.657 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27927.003 ops/s
[info]                  ·gc.alloc.rate:                   1781.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114385.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.866 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   28408.708 ±(99.9%) 1491.670 ops/s [Average]
[info]   (min, avg, max) = (27927.003, 28408.708, 28811.571), stdev = 387.382
[info]   CI (99.9%): [26917.038, 29900.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1812.138 ±(99.9%) 95.113 MB/sec [Average]
[info]   (min, avg, max) = (1781.455, 1812.138, 1837.853), stdev = 24.701
[info]   CI (99.9%): [1717.025, 1907.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100392.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (100392.015, 100392.017, 100392.021), stdev = 0.002
[info]   CI (99.9%): [100392.007, 100392.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1874.855 ±(99.9%) 705.641 MB/sec [Average]
[info]   (min, avg, max) = (1664.890, 1874.855, 2029.766), stdev = 183.253
[info]   CI (99.9%): [1169.214, 2580.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   103905.750 ±(99.9%) 40596.054 B/op [Average]
[info]   (min, avg, max) = (90944.020, 103905.750, 114385.331), stdev = 10542.666
[info]   CI (99.9%): [63309.695, 144501.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.393 ±(99.9%) 7.344 B/op [Average]
[info]   (min, avg, max) = (1.139, 4.393, 5.866), stdev = 1.907
[info]   CI (99.9%): [≈ 0, 11.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 27.58% complete, ETA 00:50:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312984.069 ops/s
[info] # Warmup Iteration   2: 333808.657 ops/s
[info] # Warmup Iteration   3: 327786.355 ops/s
[info] Iteration   1: 325492.220 ops/s
[info]                  ·gc.alloc.rate:                   718.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4812.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 329039.075 ops/s
[info]                  ·gc.alloc.rate:                   725.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3170.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 326116.703 ops/s
[info]                  ·gc.alloc.rate:                   719.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3202.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 328072.628 ops/s
[info]                  ·gc.alloc.rate:                   723.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3186.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 331693.594 ops/s
[info]                  ·gc.alloc.rate:                   731.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3157.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   328082.844 ±(99.9%) 9535.503 ops/s [Average]
[info]   (min, avg, max) = (325492.220, 328082.844, 331693.594), stdev = 2476.340
[info]   CI (99.9%): [318547.341, 337618.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   723.752 ±(99.9%) 21.105 MB/sec [Average]
[info]   (min, avg, max) = (718.006, 723.752, 731.743), stdev = 5.481
[info]   CI (99.9%): [702.647, 744.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.213 ±(99.9%) 570.345 MB/sec [Average]
[info]   (min, avg, max) = (662.803, 730.213, 995.166), stdev = 148.117
[info]   CI (99.9%): [159.868, 1300.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3505.667 ±(99.9%) 2813.235 B/op [Average]
[info]   (min, avg, max) = (3157.581, 3505.667, 4812.242), stdev = 730.588
[info]   CI (99.9%): [692.433, 6318.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.420 ±(99.9%) 0.697 B/op [Average]
[info]   (min, avg, max) = (0.296, 0.420, 0.705), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 1.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.88% complete, ETA 00:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349654.830 ops/s
[info] # Warmup Iteration   2: 366804.310 ops/s
[info] # Warmup Iteration   3: 386391.027 ops/s
[info] Iteration   1: 386852.859 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 387182.563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 385171.499 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 387313.354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 387184.481 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   386740.951 ±(99.9%) 3441.477 ops/s [Average]
[info]   (min, avg, max) = (385171.499, 386740.951, 387313.354), stdev = 893.741
[info]   CI (99.9%): [383299.474, 390182.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 28.18% complete, ETA 00:50:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19300.921 ops/s
[info] # Warmup Iteration   2: 28230.932 ops/s
[info] # Warmup Iteration   3: 28702.783 ops/s
[info] Iteration   1: 28653.141 ops/s
[info]                  ·gc.alloc.rate:                   1878.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109332.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.717 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28414.274 ops/s
[info]                  ·gc.alloc.rate:                   1863.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92537.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.918 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28398.515 ops/s
[info]                  ·gc.alloc.rate:                   1862.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111746.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.461 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28107.842 ops/s
[info]                  ·gc.alloc.rate:                   1843.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94518.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.662 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27799.609 ops/s
[info]                  ·gc.alloc.rate:                   1823.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115029.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.536 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28274.676 ±(99.9%) 1264.838 ops/s [Average]
[info]   (min, avg, max) = (27799.609, 28274.676, 28653.141), stdev = 328.474
[info]   CI (99.9%): [27009.839, 29539.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1854.446 ±(99.9%) 81.929 MB/sec [Average]
[info]   (min, avg, max) = (1823.518, 1854.446, 1878.759), stdev = 21.277
[info]   CI (99.9%): [1772.517, 1936.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103200.017 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (103200.015, 103200.017, 103200.022), stdev = 0.003
[info]   CI (99.9%): [103200.006, 103200.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1879.883 ±(99.9%) 705.324 MB/sec [Average]
[info]   (min, avg, max) = (1671.341, 1879.883, 2032.537), stdev = 183.170
[info]   CI (99.9%): [1174.559, 2585.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104632.758 ±(99.9%) 39895.250 B/op [Average]
[info]   (min, avg, max) = (92537.690, 104632.758, 115029.198), stdev = 10360.670
[info]   CI (99.9%): [64737.507, 144528.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.859 ±(99.9%) 5.686 B/op [Average]
[info]   (min, avg, max) = (3.461, 4.859, 6.918), stdev = 1.477
[info]   CI (99.9%): [≈ 0, 10.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 28.48% complete, ETA 00:50:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105958.010 ops/s
[info] # Warmup Iteration   2: 124823.043 ops/s
[info] # Warmup Iteration   3: 127308.981 ops/s
[info] Iteration   1: 129203.572 ops/s
[info]                  ·gc.alloc.rate:                   2225.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24480.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.761 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 129140.863 ops/s
[info]                  ·gc.alloc.rate:                   2224.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28746.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.030 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 129325.129 ops/s
[info]                  ·gc.alloc.rate:                   2227.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24697.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.013 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 126546.743 ops/s
[info]                  ·gc.alloc.rate:                   2180.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29530.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 127016.936 ops/s
[info]                  ·gc.alloc.rate:                   2188.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25256.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.548 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   128246.649 ±(99.9%) 5194.915 ops/s [Average]
[info]   (min, avg, max) = (126546.743, 128246.649, 129325.129), stdev = 1349.103
[info]   CI (99.9%): [123051.734, 133441.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2208.964 ±(99.9%) 87.819 MB/sec [Average]
[info]   (min, avg, max) = (2180.078, 2208.964, 2227.129), stdev = 22.806
[info]   CI (99.9%): [2121.144, 2296.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27104.003, 27104.003, 27104.004), stdev = 0.001
[info]   CI (99.9%): [27104.003, 27104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.509 ±(99.9%) 720.671 MB/sec [Average]
[info]   (min, avg, max) = (2009.713, 2162.509, 2375.290), stdev = 187.156
[info]   CI (99.9%): [1441.838, 2883.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26542.429 ±(99.9%) 9252.407 B/op [Average]
[info]   (min, avg, max) = (24480.405, 26542.429, 29530.993), stdev = 2402.821
[info]   CI (99.9%): [17290.022, 35794.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.226 ±(99.9%) 2.120 B/op [Average]
[info]   (min, avg, max) = (0.761, 1.226, 2.030), stdev = 0.551
[info]   CI (99.9%): [≈ 0, 3.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 28.79% complete, ETA 00:49:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203036.919 ops/s
[info] # Warmup Iteration   2: 293471.623 ops/s
[info] # Warmup Iteration   3: 306723.621 ops/s
[info] Iteration   1: 305219.560 ops/s
[info]                  ·gc.alloc.rate:                   431.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2637.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 303028.173 ops/s
[info]                  ·gc.alloc.rate:                   428.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1697.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.257 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 308205.052 ops/s
[info]                  ·gc.alloc.rate:                   435.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1668.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 308307.439 ops/s
[info]                  ·gc.alloc.rate:                   435.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3332.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 308329.543 ops/s
[info]                  ·gc.alloc.rate:                   435.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1669.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   306617.953 ±(99.9%) 9262.542 ops/s [Average]
[info]   (min, avg, max) = (303028.173, 306617.953, 308329.543), stdev = 2405.453
[info]   CI (99.9%): [297355.412, 315880.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   433.339 ±(99.9%) 13.127 MB/sec [Average]
[info]   (min, avg, max) = (428.188, 433.339, 435.765), stdev = 3.409
[info]   CI (99.9%): [420.212, 446.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.078 ±(99.9%) 572.137 MB/sec [Average]
[info]   (min, avg, max) = (326.744, 429.078, 652.976), stdev = 148.582
[info]   CI (99.9%): [≈ 0, 1001.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2201.175 ±(99.9%) 2914.304 B/op [Average]
[info]   (min, avg, max) = (1668.575, 2201.175, 3332.591), stdev = 756.836
[info]   CI (99.9%): [≈ 0, 5115.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.457 ±(99.9%) 3.682 MB/sec [Average]
[info]   (min, avg, max) = (0.015, 0.457, 2.167), stdev = 0.956
[info]   CI (99.9%): [≈ 0, 4.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.373 ±(99.9%) 19.127 B/op [Average]
[info]   (min, avg, max) = (0.077, 2.373, 11.257), stdev = 4.967
[info]   CI (99.9%): [≈ 0, 21.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 29.09% complete, ETA 00:49:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646037.834 ops/s
[info] # Warmup Iteration   2: 678155.820 ops/s
[info] # Warmup Iteration   3: 681131.920 ops/s
[info] Iteration   1: 683365.283 ops/s
[info]                  ·gc.alloc.rate:                   444.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     589.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 682654.587 ops/s
[info]                  ·gc.alloc.rate:                   444.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1532.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 684383.841 ops/s
[info]                  ·gc.alloc.rate:               445.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 764.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 669482.971 ops/s
[info]                  ·gc.alloc.rate:                   435.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 684071.499 ops/s
[info]                  ·gc.alloc.rate:                   445.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1529.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   680791.636 ±(99.9%) 24478.226 ops/s [Average]
[info]   (min, avg, max) = (669482.971, 680791.636, 684383.841), stdev = 6356.917
[info]   CI (99.9%): [656313.411, 705269.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   442.983 ±(99.9%) 15.880 MB/sec [Average]
[info]   (min, avg, max) = (435.659, 442.983, 445.448), stdev = 4.124
[info]   CI (99.9%): [427.103, 458.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.088 ±(99.9%) 764.392 MB/sec [Average]
[info]   (min, avg, max) = (255.786, 450.088, 664.837), stdev = 198.510
[info]   CI (99.9%): [≈ 0, 1214.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1039.484 ±(99.9%) 1752.561 B/op [Average]
[info]   (min, avg, max) = (589.135, 1039.484, 1532.777), stdev = 455.134
[info]   CI (99.9%): [≈ 0, 2792.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.358, 1.616), stdev = 0.703
[info]   CI (99.9%): [≈ 0, 3.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.827 ±(99.9%) 6.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.827, 3.725), stdev = 1.622
[info]   CI (99.9%): [≈ 0, 7.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 29.39% complete, ETA 00:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41995.731 ops/s
[info] # Warmup Iteration   2: 70791.816 ops/s
[info] # Warmup Iteration   3: 70130.844 ops/s
[info] Iteration   1: 70472.202 ops/s
[info]                  ·gc.alloc.rate:                   2994.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3021.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67476.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.325 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 71044.513 ops/s
[info]                  ·gc.alloc.rate:                   3017.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59900.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.767 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 71493.015 ops/s
[info]                  ·gc.alloc.rate:                   3037.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67223.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.833 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 71521.064 ops/s
[info]                  ·gc.alloc.rate:                   3038.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67312.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.581 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 71460.205 ops/s
[info]                  ·gc.alloc.rate:                   3035.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67472.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.209 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   71198.200 ±(99.9%) 1733.321 ops/s [Average]
[info]   (min, avg, max) = (70472.202, 71198.200, 71521.064), stdev = 450.138
[info]   CI (99.9%): [69464.879, 72931.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3024.614 ±(99.9%) 73.049 MB/sec [Average]
[info]   (min, avg, max) = (2994.154, 3024.614, 3038.078), stdev = 18.970
[info]   CI (99.9%): [2951.566, 3097.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66856.006, 66856.007), stdev = 0.001
[info]   CI (99.9%): [66856.005, 66856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.465 ±(99.9%) 598.705 MB/sec [Average]
[info]   (min, avg, max) = (2703.866, 2980.465, 3063.557), stdev = 155.482
[info]   CI (99.9%): [2381.759, 3579.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65877.095 ±(99.9%) 12871.800 B/op [Average]
[info]   (min, avg, max) = (59900.498, 65877.095, 67476.575), stdev = 3342.766
[info]   CI (99.9%): [53005.295, 78748.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.208), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.943 ±(99.9%) 4.038 B/op [Average]
[info]   (min, avg, max) = (1.833, 2.943, 4.581), stdev = 1.049
[info]   CI (99.9%): [≈ 0, 6.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 29.70% complete, ETA 00:49:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167930.680 ops/s
[info] # Warmup Iteration   2: 209949.229 ops/s
[info] # Warmup Iteration   3: 209601.352 ops/s
[info] Iteration   1: 207389.793 ops/s
[info]                  ·gc.alloc.rate:                   1685.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15135.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.790 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 211631.257 ops/s
[info]                  ·gc.alloc.rate:                   1720.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12439.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.774 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 212634.952 ops/s
[info]                  ·gc.alloc.rate:                   1728.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12444.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 213310.680 ops/s
[info]                  ·gc.alloc.rate:                   1734.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12449.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.461 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 211024.642 ops/s
[info]                  ·gc.alloc.rate:                   1715.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12624.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   211198.265 ±(99.9%) 8874.973 ops/s [Average]
[info]   (min, avg, max) = (207389.793, 211198.265, 213310.680), stdev = 2304.802
[info]   CI (99.9%): [202323.292, 220073.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1716.757 ±(99.9%) 72.469 MB/sec [Average]
[info]   (min, avg, max) = (1685.574, 1716.757, 1734.093), stdev = 18.820
[info]   CI (99.9%): [1644.287, 1789.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12792.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12792.002, 12792.002, 12792.002), stdev = 0.001
[info]   CI (99.9%): [12792.002, 12792.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.882 ±(99.9%) 535.836 MB/sec [Average]
[info]   (min, avg, max) = (1672.641, 1745.882, 1994.430), stdev = 139.155
[info]   CI (99.9%): [1210.046, 2281.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13018.810 ±(99.9%) 4567.137 B/op [Average]
[info]   (min, avg, max) = (12439.406, 13018.810, 15135.942), stdev = 1186.071
[info]   CI (99.9%): [8451.673, 17585.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.683 ±(99.9%) 0.552 B/op [Average]
[info]   (min, avg, max) = (0.461, 0.683, 0.790), stdev = 0.143
[info]   CI (99.9%): [0.131, 1.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 30.00% complete, ETA 00:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587833.745 ops/s
[info] # Warmup Iteration   2: 836996.330 ops/s
[info] # Warmup Iteration   3: 865435.084 ops/s
[info] Iteration   1: 853957.352 ops/s
[info]                  ·gc.alloc.rate:                   672.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1205.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 877702.308 ops/s
[info]                  ·gc.alloc.rate:                   691.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 875714.430 ops/s
[info]                  ·gc.alloc.rate:                   689.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1176.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 874399.122 ops/s
[info]                  ·gc.alloc.rate:               689.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1181.612 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 874363.758 ops/s
[info]                  ·gc.alloc.rate:               688.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1185.311 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   871227.394 ±(99.9%) 37541.754 ops/s [Average]
[info]   (min, avg, max) = (853957.352, 871227.394, 877702.308), stdev = 9749.474
[info]   CI (99.9%): [833685.640, 908769.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   686.481 ±(99.9%) 29.666 MB/sec [Average]
[info]   (min, avg, max) = (672.836, 686.481, 691.639), stdev = 7.704
[info]   CI (99.9%): [656.815, 716.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.620 ±(99.9%) 7.438 MB/sec [Average]
[info]   (min, avg, max) = (653.852, 655.620, 658.486), stdev = 1.932
[info]   CI (99.9%): [648.182, 663.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1184.364 ±(99.9%) 47.937 B/op [Average]
[info]   (min, avg, max) = (1173.009, 1184.364, 1205.014), stdev = 12.449
[info]   CI (99.9%): [1136.427, 1232.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.153), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 30.30% complete, ETA 00:48:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 908362.383 ops/s
[info] # Warmup Iteration   2: 987676.797 ops/s
[info] # Warmup Iteration   3: 1027933.336 ops/s
[info] Iteration   1: 1016208.690 ops/s
[info]                  ·gc.alloc.rate:                   552.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     513.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.728 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1030355.834 ops/s
[info]                  ·gc.alloc.rate:                   560.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1013.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 987608.687 ops/s
[info]                  ·gc.alloc.rate:                   537.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1024867.024 ops/s
[info]                  ·gc.alloc.rate:               557.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 508.921 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1020254.373 ops/s
[info]                  ·gc.alloc.rate:                   555.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1023.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1015858.922 ±(99.9%) 64111.327 ops/s [Average]
[info]   (min, avg, max) = (987608.687, 1015858.922, 1030355.834), stdev = 16649.508
[info]   CI (99.9%): [951747.595, 1079970.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   552.659 ±(99.9%) 35.178 MB/sec [Average]
[info]   (min, avg, max) = (537.141, 552.659, 560.645), stdev = 9.136
[info]   CI (99.9%): [517.482, 587.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.798 ±(99.9%) 700.052 MB/sec [Average]
[info]   (min, avg, max) = (331.423, 530.798, 663.779), stdev = 181.801
[info]   CI (99.9%): [≈ 0, 1230.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   823.294 ±(99.9%) 1098.272 B/op [Average]
[info]   (min, avg, max) = (508.921, 823.294, 1056.801), stdev = 285.218
[info]   CI (99.9%): [≈ 0, 1921.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 2.948 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.394, 1.762), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.610 ±(99.9%) 4.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.610, 2.728), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 30.61% complete, ETA 00:48:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 896359.682 ops/s
[info] # Warmup Iteration   2: 983589.548 ops/s
[info] # Warmup Iteration   3: 986883.424 ops/s
[info] Iteration   1: 972218.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 985495.833 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 984988.765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 970592.149 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 986376.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   979934.217 ±(99.9%) 30123.347 ops/s [Average]
[info]   (min, avg, max) = (970592.149, 979934.217, 986376.276), stdev = 7822.938
[info]   CI (99.9%): [949810.870, 1010057.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 30.91% complete, ETA 00:48:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21216.658 ops/s
[info] # Warmup Iteration   2: 29972.635 ops/s
[info] # Warmup Iteration   3: 30226.650 ops/s
[info] Iteration   1: 30670.393 ops/s
[info]                  ·gc.alloc.rate:                   1687.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              86599.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84928.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30659.928 ops/s
[info]                  ·gc.alloc.rate:                   1686.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85557.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.412 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30883.769 ops/s
[info]                  ·gc.alloc.rate:                   1699.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85406.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30136.613 ops/s
[info]                  ·gc.alloc.rate:                   1657.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87964.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30176.530 ops/s
[info]                  ·gc.alloc.rate:                   1660.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88128.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.257 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30505.446 ±(99.9%) 1274.825 ops/s [Average]
[info]   (min, avg, max) = (30136.613, 30505.446, 30883.769), stdev = 331.068
[info]   CI (99.9%): [29230.622, 31780.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1678.320 ±(99.9%) 70.141 MB/sec [Average]
[info]   (min, avg, max) = (1657.938, 1678.320, 1699.066), stdev = 18.216
[info]   CI (99.9%): [1608.179, 1748.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86587.058 ±(99.9%) 26.204 B/op [Average]
[info]   (min, avg, max) = (86584.014, 86587.058, 86599.231), stdev = 6.805
[info]   CI (99.9%): [86560.854, 86613.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.398 ±(99.9%) 53.706 MB/sec [Average]
[info]   (min, avg, max) = (1654.946, 1674.398, 1689.903), stdev = 13.947
[info]   CI (99.9%): [1620.691, 1728.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86397.091 ±(99.9%) 5869.614 B/op [Average]
[info]   (min, avg, max) = (84928.674, 86397.091, 88128.331), stdev = 1524.320
[info]   CI (99.9%): [80527.478, 92266.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.504 ±(99.9%) 6.701 B/op [Average]
[info]   (min, avg, max) = (3.182, 4.504, 6.412), stdev = 1.740
[info]   CI (99.9%): [≈ 0, 11.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 31.21% complete, ETA 00:48:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97936.638 ops/s
[info] # Warmup Iteration   2: 128737.287 ops/s
[info] # Warmup Iteration   3: 128999.247 ops/s
[info] Iteration   1: 129167.746 ops/s
[info]                  ·gc.alloc.rate:                   1776.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20255.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 129664.031 ops/s
[info]                  ·gc.alloc.rate:                   1783.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24365.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.263 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 129737.255 ops/s
[info]                  ·gc.alloc.rate:                   1784.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20413.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.010 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 129472.525 ops/s
[info]                  ·gc.alloc.rate:                   1780.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20527.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.518 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 130067.986 ops/s
[info]                  ·gc.alloc.rate:                   1789.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20489.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   129621.909 ±(99.9%) 1280.944 ops/s [Average]
[info]   (min, avg, max) = (129167.746, 129621.909, 130067.986), stdev = 332.657
[info]   CI (99.9%): [128340.965, 130902.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1782.858 ±(99.9%) 17.727 MB/sec [Average]
[info]   (min, avg, max) = (1776.554, 1782.858, 1789.005), stdev = 4.604
[info]   CI (99.9%): [1765.131, 1800.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21648.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21648.003, 21648.003, 21648.004), stdev = 0.001
[info]   CI (99.9%): [21648.003, 21648.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1746.841 ±(99.9%) 562.757 MB/sec [Average]
[info]   (min, avg, max) = (1662.248, 1746.841, 2007.415), stdev = 146.146
[info]   CI (99.9%): [1184.084, 2309.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21210.234 ±(99.9%) 6804.159 B/op [Average]
[info]   (min, avg, max) = (20255.143, 21210.234, 24365.651), stdev = 1767.018
[info]   CI (99.9%): [14406.076, 28014.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.264 ±(99.9%) 0.984 B/op [Average]
[info]   (min, avg, max) = (1.008, 1.264, 1.522), stdev = 0.256
[info]   CI (99.9%): [0.280, 2.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 31.52% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121739.971 ops/s
[info] # Warmup Iteration   2: 192761.162 ops/s
[info] # Warmup Iteration   3: 194009.496 ops/s
[info] Iteration   1: 195871.849 ops/s
[info]                  ·gc.alloc.rate:                   1168.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10512.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 191519.300 ops/s
[info]                  ·gc.alloc.rate:                   1143.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8099.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 197362.467 ops/s
[info]                  ·gc.alloc.rate:                   1177.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10539.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.830 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 197691.258 ops/s
[info]                  ·gc.alloc.rate:                   1179.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7931.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 194753.084 ops/s
[info]                  ·gc.alloc.rate:                   1162.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10793.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.673 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   195439.591 ±(99.9%) 9586.920 ops/s [Average]
[info]   (min, avg, max) = (191519.300, 195439.591, 197691.258), stdev = 2489.693
[info]   CI (99.9%): [185852.671, 205026.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1166.435 ±(99.9%) 56.488 MB/sec [Average]
[info]   (min, avg, max) = (1143.451, 1166.435, 1179.767), stdev = 14.670
[info]   CI (99.9%): [1109.947, 1222.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9392.002, 9392.002, 9392.002), stdev = 0.001
[info]   CI (99.9%): [9392.002, 9392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1189.661 ±(99.9%) 698.739 MB/sec [Average]
[info]   (min, avg, max) = (986.091, 1189.661, 1335.669), stdev = 181.460
[info]   CI (99.9%): [490.923, 1888.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9575.558 ±(99.9%) 5504.738 B/op [Average]
[info]   (min, avg, max) = (7931.543, 9575.558, 10793.911), stdev = 1429.563
[info]   CI (99.9%): [4070.820, 15080.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.637 ±(99.9%) 0.540 B/op [Average]
[info]   (min, avg, max) = (0.497, 0.637, 0.830), stdev = 0.140
[info]   CI (99.9%): [0.097, 1.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 31.82% complete, ETA 00:47:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249811.877 ops/s
[info] # Warmup Iteration   2: 254019.466 ops/s
[info] # Warmup Iteration   3: 267313.797 ops/s
[info] Iteration   1: 267824.289 ops/s
[info]                  ·gc.alloc.rate:                   871.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3906.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 266213.434 ops/s
[info]                  ·gc.alloc.rate:                   866.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5895.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 267328.934 ops/s
[info]                  ·gc.alloc.rate:                   869.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3921.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 259782.090 ops/s
[info]                  ·gc.alloc.rate:                   845.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6063.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 263382.705 ops/s
[info]                  ·gc.alloc.rate:                   857.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5996.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   264906.290 ±(99.9%) 12868.194 ops/s [Average]
[info]   (min, avg, max) = (259782.090, 264906.290, 267824.289), stdev = 3341.829
[info]   CI (99.9%): [252038.096, 277774.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   861.844 ±(99.9%) 41.660 MB/sec [Average]
[info]   (min, avg, max) = (845.104, 861.844, 871.176), stdev = 10.819
[info]   CI (99.9%): [820.184, 903.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   866.599 ±(99.9%) 707.044 MB/sec [Average]
[info]   (min, avg, max) = (664.740, 866.599, 1003.945), stdev = 183.617
[info]   CI (99.9%): [159.555, 1573.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5156.923 ±(99.9%) 4373.890 B/op [Average]
[info]   (min, avg, max) = (3906.754, 5156.923, 6063.804), stdev = 1135.885
[info]   CI (99.9%): [783.033, 9530.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.371 ±(99.9%) 0.886 B/op [Average]
[info]   (min, avg, max) = (0.123, 0.371, 0.738), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 32.12% complete, ETA 00:47:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29646.448 ops/s
[info] # Warmup Iteration   2: 64877.067 ops/s
[info] # Warmup Iteration   3: 66440.088 ops/s
[info] Iteration   1: 66647.229 ops/s
[info]                  ·gc.alloc.rate:                   2769.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63002.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.933 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 67327.989 ops/s
[info]                  ·gc.alloc.rate:                   2798.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62955.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.920 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 65981.481 ops/s
[info]                  ·gc.alloc.rate:                   2742.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64572.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.979 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 65407.184 ops/s
[info]                  ·gc.alloc.rate:                   2718.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65348.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.508 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 67243.836 ops/s
[info]                  ·gc.alloc.rate:                   2794.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63643.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.923 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66521.544 ±(99.9%) 3176.094 ops/s [Average]
[info]   (min, avg, max) = (65407.184, 66521.544, 67327.989), stdev = 824.822
[info]   CI (99.9%): [63345.449, 69697.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2764.718 ±(99.9%) 131.254 MB/sec [Average]
[info]   (min, avg, max) = (2718.348, 2764.718, 2798.058), stdev = 34.086
[info]   CI (99.9%): [2633.464, 2895.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65408.006, 65408.007, 65408.007), stdev = 0.001
[info]   CI (99.9%): [65408.006, 65408.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2700.790 ±(99.9%) 80.745 MB/sec [Average]
[info]   (min, avg, max) = (2667.842, 2700.790, 2719.128), stdev = 20.969
[info]   CI (99.9%): [2620.046, 2781.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63904.665 ±(99.9%) 3998.832 B/op [Average]
[info]   (min, avg, max) = (62955.980, 63904.665, 65348.666), stdev = 1038.484
[info]   CI (99.9%): [59905.832, 67903.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.146, 0.187), stdev = 0.029
[info]   CI (99.9%): [0.032, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.453 ±(99.9%) 2.812 B/op [Average]
[info]   (min, avg, max) = (2.920, 3.453, 4.508), stdev = 0.730
[info]   CI (99.9%): [0.641, 6.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 32.42% complete, ETA 00:47:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131408.887 ops/s
[info] # Warmup Iteration   2: 165186.585 ops/s
[info] # Warmup Iteration   3: 165688.999 ops/s
[info] Iteration   1: 162539.493 ops/s
[info]                  ·gc.alloc.rate:                   1063.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9591.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 164868.458 ops/s
[info]                  ·gc.alloc.rate:                   1078.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12644.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.994 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 162622.521 ops/s
[info]                  ·gc.alloc.rate:                   1064.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9654.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 164963.894 ops/s
[info]                  ·gc.alloc.rate:                   1079.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9552.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 165135.062 ops/s
[info]                  ·gc.alloc.rate:                   1080.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9574.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   164025.886 ±(99.9%) 5093.507 ops/s [Average]
[info]   (min, avg, max) = (162539.493, 164025.886, 165135.062), stdev = 1322.767
[info]   CI (99.9%): [158932.379, 169119.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1073.176 ±(99.9%) 32.633 MB/sec [Average]
[info]   (min, avg, max) = (1063.720, 1073.176, 1080.270), stdev = 8.475
[info]   CI (99.9%): [1040.543, 1105.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1063.852 ±(99.9%) 561.673 MB/sec [Average]
[info]   (min, avg, max) = (990.959, 1063.852, 1324.627), stdev = 145.865
[info]   CI (99.9%): [502.179, 1625.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10203.656 ±(99.9%) 5257.169 B/op [Average]
[info]   (min, avg, max) = (9552.616, 10203.656, 12644.976), stdev = 1365.270
[info]   CI (99.9%): [4946.488, 15460.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.639 ±(99.9%) 1.132 B/op [Average]
[info]   (min, avg, max) = (0.199, 0.639, 0.994), stdev = 0.294
[info]   CI (99.9%): [≈ 0, 1.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 32.73% complete, ETA 00:47:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362737.377 ops/s
[info] # Warmup Iteration   2: 551135.373 ops/s
[info] # Warmup Iteration   3: 562849.885 ops/s
[info] Iteration   1: 558969.183 ops/s
[info]                  ·gc.alloc.rate:                   565.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     918.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.161 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 569469.054 ops/s
[info]                  ·gc.alloc.rate:                   576.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1803.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 550244.545 ops/s
[info]                  ·gc.alloc.rate:                   556.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1868.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 551623.090 ops/s
[info]                  ·gc.alloc.rate:               557.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 562187.403 ops/s
[info]                  ·gc.alloc.rate:                   568.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1833.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   558498.655 ±(99.9%) 30416.531 ops/s [Average]
[info]   (min, avg, max) = (550244.545, 558498.655, 569469.054), stdev = 7899.077
[info]   CI (99.9%): [528082.124, 588915.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   565.006 ±(99.9%) 30.992 MB/sec [Average]
[info]   (min, avg, max) = (556.567, 565.006, 576.094), stdev = 8.049
[info]   CI (99.9%): [534.014, 595.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   522.728 ±(99.9%) 690.016 MB/sec [Average]
[info]   (min, avg, max) = (326.121, 522.728, 655.071), stdev = 179.195
[info]   CI (99.9%): [≈ 0, 1212.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1471.010 ±(99.9%) 1920.766 B/op [Average]
[info]   (min, avg, max) = (918.119, 1471.010, 1868.262), stdev = 498.817
[info]   CI (99.9%): [≈ 0, 3391.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.471 ±(99.9%) 3.698 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.188), stdev = 0.960
[info]   CI (99.9%): [≈ 0, 4.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.326 ±(99.9%) 10.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.326, 6.161), stdev = 2.704
[info]   CI (99.9%): [≈ 0, 11.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 33.03% complete, ETA 00:46:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520693.345 ops/s
[info] # Warmup Iteration   2: 564749.027 ops/s
[info] # Warmup Iteration   3: 543316.756 ops/s
[info] Iteration   1: 574181.149 ops/s
[info]                  ·gc.alloc.rate:                   440.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     701.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 575220.769 ops/s
[info]                  ·gc.alloc.rate:                   441.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     906.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.775 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 576923.398 ops/s
[info]                  ·gc.alloc.rate:                   442.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1807.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 576848.589 ops/s
[info]                  ·gc.alloc.rate:                   442.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     903.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 575503.134 ops/s
[info]                  ·gc.alloc.rate:               441.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 905.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   575735.408 ±(99.9%) 4467.832 ops/s [Average]
[info]   (min, avg, max) = (574181.149, 575735.408, 576923.398), stdev = 1160.282
[info]   CI (99.9%): [571267.575, 580203.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   442.011 ±(99.9%) 3.417 MB/sec [Average]
[info]   (min, avg, max) = (440.746, 442.011, 442.942), stdev = 0.887
[info]   CI (99.9%): [438.594, 445.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   382.476 ±(99.9%) 616.171 MB/sec [Average]
[info]   (min, avg, max) = (255.837, 382.476, 662.695), stdev = 160.018
[info]   CI (99.9%): [≈ 0, 998.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1044.797 ±(99.9%) 1676.246 B/op [Average]
[info]   (min, avg, max) = (701.199, 1044.797, 1807.316), stdev = 435.316
[info]   CI (99.9%): [≈ 0, 2721.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.380 ±(99.9%) 2.943 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.746), stdev = 0.764
[info]   CI (99.9%): [≈ 0, 3.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.040 ±(99.9%) 8.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.040, 4.775), stdev = 2.091
[info]   CI (99.9%): [≈ 0, 9.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.33% complete, ETA 00:46:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 534109.657 ops/s
[info] # Warmup Iteration   2: 583656.378 ops/s
[info] # Warmup Iteration   3: 588194.042 ops/s
[info] Iteration   1: 588119.728 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 583533.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 588304.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 588410.903 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 588399.123 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   587353.576 ±(99.9%) 8234.317 ops/s [Average]
[info]   (min, avg, max) = (583533.931, 587353.576, 588410.903), stdev = 2138.426
[info]   CI (99.9%): [579119.260, 595587.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 33.64% complete, ETA 00:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191059.754 ops/s
[info] # Warmup Iteration   2: 325849.618 ops/s
[info] # Warmup Iteration   3: 318399.390 ops/s
[info] Iteration   1: 326353.431 ops/s
[info]                  ·gc.alloc.rate:                   899.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4706.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 321004.459 ops/s
[info]                  ·gc.alloc.rate:                   884.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4797.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 330018.951 ops/s
[info]                  ·gc.alloc.rate:                   909.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3122.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 328170.241 ops/s
[info]                  ·gc.alloc.rate:                   904.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4734.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 328917.607 ops/s
[info]                  ·gc.alloc.rate:                   906.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4743.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   326892.938 ±(99.9%) 13677.647 ops/s [Average]
[info]   (min, avg, max) = (321004.459, 326892.938, 330018.951), stdev = 3552.041
[info]   CI (99.9%): [313215.291, 340570.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   900.664 ±(99.9%) 37.868 MB/sec [Average]
[info]   (min, avg, max) = (884.354, 900.664, 909.428), stdev = 9.834
[info]   CI (99.9%): [862.796, 938.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   917.620 ±(99.9%) 565.826 MB/sec [Average]
[info]   (min, avg, max) = (654.993, 917.620, 991.232), stdev = 146.943
[info]   CI (99.9%): [351.794, 1483.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4420.980 ±(99.9%) 2797.134 B/op [Average]
[info]   (min, avg, max) = (3122.899, 4420.980, 4797.876), stdev = 726.407
[info]   CI (99.9%): [1623.846, 7218.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.361 ±(99.9%) 0.446 B/op [Average]
[info]   (min, avg, max) = (0.199, 0.361, 0.502), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 33.94% complete, ETA 00:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6908.760 ops/s
[info] # Warmup Iteration   2: 9192.346 ops/s
[info] # Warmup Iteration   3: 9381.597 ops/s
[info] Iteration   1: 9347.030 ops/s
[info]                  ·gc.alloc.rate:                   1224.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223252.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9387.857 ops/s
[info]                  ·gc.alloc.rate:                   1229.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167224.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.448 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9245.331 ops/s
[info]                  ·gc.alloc.rate:                   1211.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227246.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9196.578 ops/s
[info]                  ·gc.alloc.rate:                   1204.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              206146.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229368.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9374.410 ops/s
[info]                  ·gc.alloc.rate:                   1228.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              206160.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169375.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9310.241 ±(99.9%) 325.761 ops/s [Average]
[info]   (min, avg, max) = (9196.578, 9310.241, 9387.857), stdev = 84.599
[info]   CI (99.9%): [8984.481, 9636.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1219.583 ±(99.9%) 43.001 MB/sec [Average]
[info]   (min, avg, max) = (1204.602, 1219.583, 1229.615), stdev = 11.167
[info]   CI (99.9%): [1176.583, 1262.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206147.678 ±(99.9%) 26.871 B/op [Average]
[info]   (min, avg, max) = (206144.046, 206147.678, 206160.049), stdev = 6.978
[info]   CI (99.9%): [206120.807, 206174.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.571 ±(99.9%) 697.190 MB/sec [Average]
[info]   (min, avg, max) = (997.469, 1201.571, 1340.302), stdev = 181.058
[info]   CI (99.9%): [504.381, 1898.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   203293.766 ±(99.9%) 123331.518 B/op [Average]
[info]   (min, avg, max) = (167224.980, 203293.766, 229368.875), stdev = 32028.804
[info]   CI (99.9%): [79962.248, 326625.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.950 ±(99.9%) 27.861 B/op [Average]
[info]   (min, avg, max) = (3.495, 11.950, 21.030), stdev = 7.235
[info]   CI (99.9%): [≈ 0, 39.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 34.24% complete, ETA 00:46:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5783.491 ops/s
[info] # Warmup Iteration   2: 9432.493 ops/s
[info] # Warmup Iteration   3: 9402.484 ops/s
[info] Iteration   1: 9369.596 ops/s
[info]                  ·gc.alloc.rate:                   1122.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164934.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9484.982 ops/s
[info]                  ·gc.alloc.rate:                   1137.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218181.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.908 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9570.759 ops/s
[info]                  ·gc.alloc.rate:                   1146.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162987.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9565.651 ops/s
[info]                  ·gc.alloc.rate:                   1146.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              188598.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218658.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.275 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9358.614 ops/s
[info]                  ·gc.alloc.rate:                   1121.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168545.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9469.920 ±(99.9%) 394.637 ops/s [Average]
[info]   (min, avg, max) = (9358.614, 9469.920, 9570.759), stdev = 102.486
[info]   CI (99.9%): [9075.283, 9864.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1134.899 ±(99.9%) 47.274 MB/sec [Average]
[info]   (min, avg, max) = (1121.630, 1134.899, 1146.915), stdev = 12.277
[info]   CI (99.9%): [1087.624, 1182.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   188599.724 ±(99.9%) 54.175 B/op [Average]
[info]   (min, avg, max) = (188592.045, 188599.724, 188624.463), stdev = 14.069
[info]   CI (99.9%): [188545.549, 188653.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.929 ±(99.9%) 697.666 MB/sec [Average]
[info]   (min, avg, max) = (981.858, 1123.929, 1328.960), stdev = 181.182
[info]   CI (99.9%): [426.263, 1821.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   186661.554 ±(99.9%) 111901.840 B/op [Average]
[info]   (min, avg, max) = (162987.683, 186661.554, 218658.840), stdev = 29060.552
[info]   CI (99.9%): [74759.715, 298563.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.590 ±(99.9%) 10.883 B/op [Average]
[info]   (min, avg, max) = (3.497, 7.590, 10.275), stdev = 2.826
[info]   CI (99.9%): [≈ 0, 18.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 34.55% complete, ETA 00:45:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138327.442 ops/s
[info] # Warmup Iteration   2: 149361.410 ops/s
[info] # Warmup Iteration   3: 153635.476 ops/s
[info] Iteration   1: 151514.917 ops/s
[info]                  ·gc.alloc.rate:                   985.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10362.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 150661.867 ops/s
[info]                  ·gc.alloc.rate:                   980.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10434.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 153721.864 ops/s
[info]                  ·gc.alloc.rate:                   1000.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10257.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 154077.899 ops/s
[info]                  ·gc.alloc.rate:                   1002.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10261.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 154148.968 ops/s
[info]                  ·gc.alloc.rate:                   1003.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10287.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.638 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   152825.103 ±(99.9%) 6245.429 ops/s [Average]
[info]   (min, avg, max) = (150661.867, 152825.103, 154148.968), stdev = 1621.918
[info]   CI (99.9%): [146579.674, 159070.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   994.470 ±(99.9%) 40.411 MB/sec [Average]
[info]   (min, avg, max) = (980.660, 994.470, 1003.320), stdev = 10.495
[info]   CI (99.9%): [954.059, 1034.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1002.232 ±(99.9%) 15.968 MB/sec [Average]
[info]   (min, avg, max) = (997.522, 1002.232, 1007.933), stdev = 4.147
[info]   CI (99.9%): [986.264, 1018.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10320.543 ±(99.9%) 294.150 B/op [Average]
[info]   (min, avg, max) = (10257.423, 10320.543, 10434.683), stdev = 76.390
[info]   CI (99.9%): [10026.393, 10614.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.687 ±(99.9%) 0.703 B/op [Average]
[info]   (min, avg, max) = (0.425, 0.687, 0.870), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 1.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 34.85% complete, ETA 00:45:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4489.789 ops/s
[info] # Warmup Iteration   2: 7802.020 ops/s
[info] # Warmup Iteration   3: 8182.742 ops/s
[info] Iteration   1: 8171.361 ops/s
[info]                  ·gc.alloc.rate:                   1468.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              282840.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316959.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8158.232 ops/s
[info]                  ·gc.alloc.rate:                   1466.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              282840.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255590.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8128.739 ops/s
[info]                  ·gc.alloc.rate:                   1460.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              282840.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322633.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7952.765 ops/s
[info]                  ·gc.alloc.rate:                   1429.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              282840.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265208.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7888.844 ops/s
[info]                  ·gc.alloc.rate:                   1417.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              282840.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268422.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8059.988 ±(99.9%) 500.471 ops/s [Average]
[info]   (min, avg, max) = (7888.844, 8059.988, 8171.361), stdev = 129.971
[info]   CI (99.9%): [7559.517, 8560.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1448.559 ±(99.9%) 90.112 MB/sec [Average]
[info]   (min, avg, max) = (1417.717, 1448.559, 1468.403), stdev = 23.402
[info]   CI (99.9%): [1358.447, 1538.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   282840.055 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (282840.053, 282840.055, 282840.059), stdev = 0.003
[info]   CI (99.9%): [282840.045, 282840.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.563 ±(99.9%) 674.068 MB/sec [Average]
[info]   (min, avg, max) = (1325.216, 1464.563, 1666.425), stdev = 175.053
[info]   CI (99.9%): [790.495, 2138.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   285762.941 ±(99.9%) 121252.613 B/op [Average]
[info]   (min, avg, max) = (255590.400, 285762.941, 322633.809), stdev = 31488.918
[info]   CI (99.9%): [164510.328, 407015.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.558 ±(99.9%) 23.423 B/op [Average]
[info]   (min, avg, max) = (4.031, 10.558, 20.078), stdev = 6.083
[info]   CI (99.9%): [≈ 0, 33.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 35.15% complete, ETA 00:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14850.792 ops/s
[info] # Warmup Iteration   2: 19703.237 ops/s
[info] # Warmup Iteration   3: 19948.581 ops/s
[info] Iteration   1: 19817.248 ops/s
[info]                  ·gc.alloc.rate:                   1053.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              83617.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78722.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19462.654 ops/s
[info]                  ·gc.alloc.rate:                   1034.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              83640.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80311.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19514.802 ops/s
[info]                  ·gc.alloc.rate:                   1036.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              83627.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80393.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20054.316 ops/s
[info]                  ·gc.alloc.rate:                   1064.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78441.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.634 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19941.005 ops/s
[info]                  ·gc.alloc.rate:                   1058.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105672.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.215 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   19758.005 ±(99.9%) 1002.608 ops/s [Average]
[info]   (min, avg, max) = (19462.654, 19758.005, 20054.316), stdev = 260.374
[info]   CI (99.9%): [18755.397, 20760.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1049.636 ±(99.9%) 51.963 MB/sec [Average]
[info]   (min, avg, max) = (1034.296, 1049.636, 1064.915), stdev = 13.495
[info]   CI (99.9%): [997.673, 1101.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83607.494 ±(99.9%) 114.753 B/op [Average]
[info]   (min, avg, max) = (83576.022, 83607.494, 83640.024), stdev = 29.801
[info]   CI (99.9%): [83492.741, 83722.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1063.966 ±(99.9%) 592.054 MB/sec [Average]
[info]   (min, avg, max) = (991.397, 1063.966, 1338.952), stdev = 153.754
[info]   CI (99.9%): [471.912, 1656.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   84708.356 ±(99.9%) 45257.135 B/op [Average]
[info]   (min, avg, max) = (78441.933, 84708.356, 105672.487), stdev = 11753.134
[info]   CI (99.9%): [39451.220, 129965.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.982 ±(99.9%) 9.702 B/op [Average]
[info]   (min, avg, max) = (1.634, 5.982, 8.215), stdev = 2.520
[info]   CI (99.9%): [≈ 0, 15.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 35.45% complete, ETA 00:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14757.806 ops/s
[info] # Warmup Iteration   2: 21769.713 ops/s
[info] # Warmup Iteration   3: 21966.868 ops/s
[info] Iteration   1: 21601.909 ops/s
[info]                  ·gc.alloc.rate:                   915.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47658.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21764.609 ops/s
[info]                  ·gc.alloc.rate:                   922.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71051.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22393.075 ops/s
[info]                  ·gc.alloc.rate:                   949.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69386.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22234.847 ops/s
[info]                  ·gc.alloc.rate:                   942.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70159.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22426.389 ops/s
[info]                  ·gc.alloc.rate:                   950.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69912.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.461 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   22084.166 ±(99.9%) 1453.503 ops/s [Average]
[info]   (min, avg, max) = (21601.909, 22084.166, 22426.389), stdev = 377.470
[info]   CI (99.9%): [20630.663, 23537.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   936.075 ±(99.9%) 61.767 MB/sec [Average]
[info]   (min, avg, max) = (915.441, 936.075, 950.380), stdev = 16.041
[info]   CI (99.9%): [874.307, 997.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.022 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (66696.019, 66696.022, 66696.027), stdev = 0.003
[info]   CI (99.9%): [66696.009, 66696.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   922.482 ±(99.9%) 577.944 MB/sec [Average]
[info]   (min, avg, max) = (654.135, 922.482, 996.218), stdev = 150.090
[info]   CI (99.9%): [344.537, 1500.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   65633.825 ±(99.9%) 38763.393 B/op [Average]
[info]   (min, avg, max) = (47658.133, 65633.825, 71051.525), stdev = 10066.730
[info]   CI (99.9%): [26870.432, 104397.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.151 ±(99.9%) 10.202 B/op [Average]
[info]   (min, avg, max) = (1.461, 4.151, 7.367), stdev = 2.649
[info]   CI (99.9%): [≈ 0, 14.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 35.76% complete, ETA 00:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604455.528 ops/s
[info] # Warmup Iteration   2: 695787.357 ops/s
[info] # Warmup Iteration   3: 692422.947 ops/s
[info] Iteration   1: 709721.436 ops/s
[info]                  ·gc.alloc.rate:                   1280.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2945.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 711251.766 ops/s
[info]                  ·gc.alloc.rate:                   1283.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2947.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 706767.293 ops/s
[info]                  ·gc.alloc.rate:                   1275.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2235.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 712336.804 ops/s
[info]                  ·gc.alloc.rate:                   1285.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2967.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 711900.661 ops/s
[info]                  ·gc.alloc.rate:                   1284.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2977.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   710395.592 ±(99.9%) 8692.912 ops/s [Average]
[info]   (min, avg, max) = (706767.293, 710395.592, 712336.804), stdev = 2257.522
[info]   CI (99.9%): [701702.680, 719088.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1281.955 ±(99.9%) 15.231 MB/sec [Average]
[info]   (min, avg, max) = (1275.659, 1281.955, 1285.425), stdev = 3.955
[info]   CI (99.9%): [1266.724, 1297.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1270.927 ±(99.9%) 574.997 MB/sec [Average]
[info]   (min, avg, max) = (1004.155, 1270.927, 1346.953), stdev = 149.325
[info]   CI (99.9%): [695.930, 1845.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2814.846 ±(99.9%) 1248.053 B/op [Average]
[info]   (min, avg, max) = (2235.551, 2814.846, 2977.897), stdev = 324.115
[info]   CI (99.9%): [1566.793, 4062.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.166 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.166, 0.276), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 36.06% complete, ETA 00:44:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 508476.338 ops/s
[info] # Warmup Iteration   2: 550079.108 ops/s
[info] # Warmup Iteration   3: 533051.920 ops/s
[info] Iteration   1: 542871.614 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 542896.546 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 534528.998 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 544827.448 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 540615.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   541147.947 ±(99.9%) 15361.817 ops/s [Average]
[info]   (min, avg, max) = (534528.998, 541147.947, 544827.448), stdev = 3989.415
[info]   CI (99.9%): [525786.130, 556509.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 36.36% complete, ETA 00:44:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15400.919 ops/s
[info] # Warmup Iteration   2: 21387.674 ops/s
[info] # Warmup Iteration   3: 21618.187 ops/s
[info] Iteration   1: 21502.806 ops/s
[info]                  ·gc.alloc.rate:                   991.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72112.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.571 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21131.147 ops/s
[info]                  ·gc.alloc.rate:                   974.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73576.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 20558.711 ops/s
[info]                  ·gc.alloc.rate:                   947.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              72567.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75878.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21470.025 ops/s
[info]                  ·gc.alloc.rate:                   990.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73025.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21268.396 ops/s
[info]                  ·gc.alloc.rate:                   980.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73965.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   21186.217 ±(99.9%) 1471.740 ops/s [Average]
[info]   (min, avg, max) = (20558.711, 21186.217, 21502.806), stdev = 382.206
[info]   CI (99.9%): [19714.477, 22657.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   977.086 ±(99.9%) 68.099 MB/sec [Average]
[info]   (min, avg, max) = (947.933, 977.086, 991.681), stdev = 17.685
[info]   CI (99.9%): [908.987, 1045.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72567.906 ±(99.9%) 30.821 B/op [Average]
[info]   (min, avg, max) = (72560.020, 72567.906, 72576.020), stdev = 8.004
[info]   CI (99.9%): [72537.085, 72598.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   992.224 ±(99.9%) 22.730 MB/sec [Average]
[info]   (min, avg, max) = (985.343, 992.224, 999.834), stdev = 5.903
[info]   CI (99.9%): [969.493, 1014.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73711.443 ±(99.9%) 5379.025 B/op [Average]
[info]   (min, avg, max) = (72112.150, 73711.443, 75878.086), stdev = 1396.916
[info]   CI (99.9%): [68332.418, 79090.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.276 ±(99.9%) 7.138 B/op [Average]
[info]   (min, avg, max) = (3.101, 5.276, 7.968), stdev = 1.854
[info]   CI (99.9%): [≈ 0, 12.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 36.67% complete, ETA 00:44:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17117.506 ops/s
[info] # Warmup Iteration   2: 22791.065 ops/s
[info] # Warmup Iteration   3: 23297.307 ops/s
[info] Iteration   1: 23492.607 ops/s
[info]                  ·gc.alloc.rate:                   1315.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88894.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.184 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23474.177 ops/s
[info]                  ·gc.alloc.rate:                   1315.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              88143.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89320.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.978 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22983.006 ops/s
[info]                  ·gc.alloc.rate:                   1287.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68674.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23491.648 ops/s
[info]                  ·gc.alloc.rate:                   1315.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89928.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23486.934 ops/s
[info]                  ·gc.alloc.rate:                   1315.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90234.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.790 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   23385.674 ±(99.9%) 867.235 ops/s [Average]
[info]   (min, avg, max) = (22983.006, 23385.674, 23492.607), stdev = 225.218
[info]   CI (99.9%): [22518.439, 24252.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1309.716 ±(99.9%) 48.903 MB/sec [Average]
[info]   (min, avg, max) = (1287.001, 1309.716, 1315.709), stdev = 12.700
[info]   CI (99.9%): [1260.814, 1358.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   88134.335 ±(99.9%) 33.309 B/op [Average]
[info]   (min, avg, max) = (88128.018, 88134.335, 88144.020), stdev = 8.650
[info]   CI (99.9%): [88101.026, 88167.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1270.315 ±(99.9%) 576.378 MB/sec [Average]
[info]   (min, avg, max) = (1002.913, 1270.315, 1346.641), stdev = 149.683
[info]   CI (99.9%): [693.938, 1846.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   85410.706 ±(99.9%) 36080.796 B/op [Average]
[info]   (min, avg, max) = (68674.954, 85410.706, 90234.404), stdev = 9370.068
[info]   CI (99.9%): [49329.910, 121491.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.639 ±(99.9%) 8.129 B/op [Average]
[info]   (min, avg, max) = (1.395, 3.639, 6.978), stdev = 2.111
[info]   CI (99.9%): [≈ 0, 11.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 36.97% complete, ETA 00:44:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15498.507 ops/s
[info] # Warmup Iteration   2: 25145.875 ops/s
[info] # Warmup Iteration   3: 25531.652 ops/s
[info] Iteration   1: 25089.503 ops/s
[info]                  ·gc.alloc.rate:                   1162.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              72912.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82154.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.223 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25512.195 ops/s
[info]                  ·gc.alloc.rate:                   1182.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              72903.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81244.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.989 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25581.499 ops/s
[info]                  ·gc.alloc.rate:                   1184.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61104.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24815.493 ops/s
[info]                  ·gc.alloc.rate:                   1149.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84413.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.320 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24834.863 ops/s
[info]                  ·gc.alloc.rate:                   1150.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63575.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   25166.711 ±(99.9%) 1402.774 ops/s [Average]
[info]   (min, avg, max) = (24815.493, 25166.711, 25581.499), stdev = 364.296
[info]   CI (99.9%): [23763.937, 26569.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1165.675 ±(99.9%) 65.832 MB/sec [Average]
[info]   (min, avg, max) = (1149.113, 1165.675, 1184.910), stdev = 17.096
[info]   CI (99.9%): [1099.843, 1231.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72891.188 ±(99.9%) 59.937 B/op [Average]
[info]   (min, avg, max) = (72880.017, 72891.188, 72912.018), stdev = 15.565
[info]   CI (99.9%): [72831.251, 72951.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.903 ±(99.9%) 677.664 MB/sec [Average]
[info]   (min, avg, max) = (993.464, 1190.903, 1330.961), stdev = 175.987
[info]   CI (99.9%): [513.240, 1868.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   74498.535 ±(99.9%) 43099.964 B/op [Average]
[info]   (min, avg, max) = (61104.777, 74498.535, 84413.347), stdev = 11192.924
[info]   CI (99.9%): [31398.571, 117598.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.930 ±(99.9%) 10.702 B/op [Average]
[info]   (min, avg, max) = (1.320, 4.930, 8.989), stdev = 2.779
[info]   CI (99.9%): [≈ 0, 15.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 37.27% complete, ETA 00:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225011.563 ops/s
[info] # Warmup Iteration   2: 238561.952 ops/s
[info] # Warmup Iteration   3: 239151.761 ops/s
[info] Iteration   1: 237665.618 ops/s
[info]                  ·gc.alloc.rate:                   618.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2203.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 237703.282 ops/s
[info]                  ·gc.alloc.rate:                   618.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4401.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 241681.613 ops/s
[info]                  ·gc.alloc.rate:                   628.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4329.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 236730.231 ops/s
[info]                  ·gc.alloc.rate:               616.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4424.315 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 237163.056 ops/s
[info]                  ·gc.alloc.rate:                   617.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4420.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   238188.760 ±(99.9%) 7674.470 ops/s [Average]
[info]   (min, avg, max) = (236730.231, 238188.760, 241681.613), stdev = 1993.035
[info]   CI (99.9%): [230514.290, 245863.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   619.900 ±(99.9%) 19.978 MB/sec [Average]
[info]   (min, avg, max) = (616.085, 619.900, 628.989), stdev = 5.188
[info]   CI (99.9%): [599.921, 639.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   598.807 ±(99.9%) 572.783 MB/sec [Average]
[info]   (min, avg, max) = (332.717, 598.807, 666.166), stdev = 148.750
[info]   CI (99.9%): [26.024, 1171.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3955.886 ±(99.9%) 3775.111 B/op [Average]
[info]   (min, avg, max) = (2203.465, 3955.886, 4424.315), stdev = 980.384
[info]   CI (99.9%): [180.775, 7730.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.247 ±(99.9%) 0.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.247, 0.413), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 37.58% complete, ETA 00:43:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8672.418 ops/s
[info] # Warmup Iteration   2: 15203.010 ops/s
[info] # Warmup Iteration   3: 15264.248 ops/s
[info] Iteration   1: 15277.866 ops/s
[info]                  ·gc.alloc.rate:                   1562.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169707.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15196.411 ops/s
[info]                  ·gc.alloc.rate:                   1554.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171922.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.624 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15772.414 ops/s
[info]                  ·gc.alloc.rate:                   1613.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166708.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.463 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15811.142 ops/s
[info]                  ·gc.alloc.rate:                   1617.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133666.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.144 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15439.460 ops/s
[info]                  ·gc.alloc.rate:                   1579.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171854.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.366 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15499.459 ±(99.9%) 1082.627 ops/s [Average]
[info]   (min, avg, max) = (15196.411, 15499.459, 15811.142), stdev = 281.155
[info]   CI (99.9%): [14416.831, 16582.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1585.525 ±(99.9%) 110.605 MB/sec [Average]
[info]   (min, avg, max) = (1554.600, 1585.525, 1617.285), stdev = 28.724
[info]   CI (99.9%): [1474.920, 1696.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160984.047 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (160984.027, 160984.047, 160984.113), stdev = 0.037
[info]   CI (99.9%): [160983.905, 160984.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.506 ±(99.9%) 559.504 MB/sec [Average]
[info]   (min, avg, max) = (1342.842, 1601.506, 1686.309), stdev = 145.302
[info]   CI (99.9%): [1042.002, 2161.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   162771.791 ±(99.9%) 63183.761 B/op [Average]
[info]   (min, avg, max) = (133666.090, 162771.791, 171922.586), stdev = 16408.622
[info]   CI (99.9%): [99588.030, 225955.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.177 ±(99.9%) 13.372 B/op [Average]
[info]   (min, avg, max) = (4.144, 7.177, 12.463), stdev = 3.473
[info]   CI (99.9%): [≈ 0, 20.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 37.88% complete, ETA 00:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32755.962 ops/s
[info] # Warmup Iteration   2: 43120.001 ops/s
[info] # Warmup Iteration   3: 43244.829 ops/s
[info] Iteration   1: 43077.147 ops/s
[info]                  ·gc.alloc.rate:                   1370.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60514.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.042 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 42791.593 ops/s
[info]                  ·gc.alloc.rate:                   1360.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48963.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.359 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 43178.220 ops/s
[info]                  ·gc.alloc.rate:                   1372.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48752.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43489.874 ops/s
[info]                  ·gc.alloc.rate:                   1382.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48600.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.767 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43514.531 ops/s
[info]                  ·gc.alloc.rate:                   1383.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48751.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.753 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   43210.273 ±(99.9%) 1162.858 ops/s [Average]
[info]   (min, avg, max) = (42791.593, 43210.273, 43514.531), stdev = 301.990
[info]   CI (99.9%): [42047.415, 44373.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1374.036 ±(99.9%) 36.283 MB/sec [Average]
[info]   (min, avg, max) = (1360.851, 1374.036, 1383.544), stdev = 9.423
[info]   CI (99.9%): [1337.753, 1410.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (50040.010, 50040.010, 50040.011), stdev = 0.001
[info]   CI (99.9%): [50040.009, 50040.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.401 ±(99.9%) 546.530 MB/sec [Average]
[info]   (min, avg, max) = (1331.569, 1403.401, 1657.064), stdev = 141.932
[info]   CI (99.9%): [856.871, 1949.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51116.541 ±(99.9%) 20236.772 B/op [Average]
[info]   (min, avg, max) = (48600.543, 51116.541, 60514.894), stdev = 5255.425
[info]   CI (99.9%): [30879.769, 71353.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.191 ±(99.9%) 6.393 B/op [Average]
[info]   (min, avg, max) = (0.753, 3.191, 5.359), stdev = 1.660
[info]   CI (99.9%): [≈ 0, 9.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 38.18% complete, ETA 00:43:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81687.588 ops/s
[info] # Warmup Iteration   2: 125791.927 ops/s
[info] # Warmup Iteration   3: 125948.414 ops/s
[info] Iteration   1: 122668.325 ops/s
[info]                  ·gc.alloc.rate:                   959.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12589.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 124016.841 ops/s
[info]                  ·gc.alloc.rate:                   970.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12490.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 122398.761 ops/s
[info]                  ·gc.alloc.rate:                   957.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12706.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.338 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 125927.079 ops/s
[info]                  ·gc.alloc.rate:                   985.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12413.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 124639.588 ops/s
[info]                  ·gc.alloc.rate:                   975.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12591.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   123930.119 ±(99.9%) 5592.025 ops/s [Average]
[info]   (min, avg, max) = (122398.761, 123930.119, 125927.079), stdev = 1452.231
[info]   CI (99.9%): [118338.094, 129522.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   969.581 ±(99.9%) 43.904 MB/sec [Average]
[info]   (min, avg, max) = (957.483, 969.581, 985.108), stdev = 11.402
[info]   CI (99.9%): [925.677, 1013.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12312.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12312.003, 12312.004, 12312.004), stdev = 0.001
[info]   CI (99.9%): [12312.003, 12312.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   988.914 ±(99.9%) 25.463 MB/sec [Average]
[info]   (min, avg, max) = (981.326, 988.914, 997.647), stdev = 6.613
[info]   CI (99.9%): [963.451, 1014.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12558.361 ±(99.9%) 429.577 B/op [Average]
[info]   (min, avg, max) = (12413.174, 12558.361, 12706.768), stdev = 111.560
[info]   CI (99.9%): [12128.784, 12987.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.850 ±(99.9%) 1.703 B/op [Average]
[info]   (min, avg, max) = (0.260, 0.850, 1.338), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 2.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 38.48% complete, ETA 00:43:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 982280.435 ops/s
[info] # Warmup Iteration   2: 1159427.276 ops/s
[info] # Warmup Iteration   3: 1230066.655 ops/s
[info] Iteration   1: 1238022.356 ops/s
[info]                  ·gc.alloc.rate:                   1327.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1688.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1223657.673 ops/s
[info]                  ·gc.alloc.rate:                   1312.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1715.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1223781.586 ops/s
[info]                  ·gc.alloc.rate:                   1313.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1721.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1241860.568 ops/s
[info]                  ·gc.alloc.rate:                   1332.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1703.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1240469.925 ops/s
[info]                  ·gc.alloc.rate:                   1330.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1710.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1233558.422 ±(99.9%) 34987.531 ops/s [Average]
[info]   (min, avg, max) = (1223657.673, 1233558.422, 1241860.568), stdev = 9086.151
[info]   CI (99.9%): [1198570.890, 1268545.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1323.123 ±(99.9%) 37.206 MB/sec [Average]
[info]   (min, avg, max) = (1312.332, 1323.123, 1332.085), stdev = 9.662
[info]   CI (99.9%): [1285.917, 1360.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1338.768 ±(99.9%) 31.099 MB/sec [Average]
[info]   (min, avg, max) = (1328.217, 1338.768, 1348.268), stdev = 8.076
[info]   CI (99.9%): [1307.669, 1369.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1708.009 ±(99.9%) 49.070 B/op [Average]
[info]   (min, avg, max) = (1688.583, 1708.009, 1721.890), stdev = 12.743
[info]   CI (99.9%): [1658.939, 1757.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.106 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.106, 0.134), stdev = 0.027
[info]   CI (99.9%): [0.003, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 38.79% complete, ETA 00:42:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 642289.123 ops/s
[info] # Warmup Iteration   2: 693973.638 ops/s
[info] # Warmup Iteration   3: 695454.562 ops/s
[info] Iteration   1: 695523.158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 695629.135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 677496.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 677956.418 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 679000.349 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   685121.171 ±(99.9%) 36810.820 ops/s [Average]
[info]   (min, avg, max) = (677496.797, 685121.171, 695629.135), stdev = 9559.653
[info]   CI (99.9%): [648310.351, 721931.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 39.09% complete, ETA 00:42:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36915.023 ops/s
[info] # Warmup Iteration   2: 48262.534 ops/s
[info] # Warmup Iteration   3: 48675.255 ops/s
[info] Iteration   1: 49474.671 ops/s
[info]                  ·gc.alloc.rate:                   1312.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              41744.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41937.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.324 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 48035.525 ops/s
[info]                  ·gc.alloc.rate:                   1274.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              41744.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43414.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.410 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 49779.530 ops/s
[info]                  ·gc.alloc.rate:                   1320.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              41744.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42123.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.975 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 49324.719 ops/s
[info]                  ·gc.alloc.rate:                   1308.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              41744.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42723.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.993 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 49615.433 ops/s
[info]                  ·gc.alloc.rate:                   1316.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              41744.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31969.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   49245.976 ±(99.9%) 2685.028 ops/s [Average]
[info]   (min, avg, max) = (48035.525, 49245.976, 49779.530), stdev = 697.293
[info]   CI (99.9%): [46560.948, 51931.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1306.552 ±(99.9%) 71.328 MB/sec [Average]
[info]   (min, avg, max) = (1274.458, 1306.552, 1320.847), stdev = 18.524
[info]   CI (99.9%): [1235.223, 1377.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41744.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (41744.009, 41744.009, 41744.010), stdev = 0.001
[info]   CI (99.9%): [41744.007, 41744.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1264.866 ±(99.9%) 553.420 MB/sec [Average]
[info]   (min, avg, max) = (1008.126, 1264.866, 1339.001), stdev = 143.721
[info]   CI (99.9%): [711.446, 1818.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40433.739 ±(99.9%) 18354.682 B/op [Average]
[info]   (min, avg, max) = (31969.682, 40433.739, 43414.190), stdev = 4766.653
[info]   CI (99.9%): [22079.057, 58788.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.005 ±(99.9%) 3.283 B/op [Average]
[info]   (min, avg, max) = (1.321, 2.005, 3.410), stdev = 0.853
[info]   CI (99.9%): [≈ 0, 5.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 39.39% complete, ETA 00:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11197.047 ops/s
[info] # Warmup Iteration   2: 14960.067 ops/s
[info] # Warmup Iteration   3: 14622.661 ops/s
[info] Iteration   1: 15010.039 ops/s
[info]                  ·gc.alloc.rate:                   1362.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              142912.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139200.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.731 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15029.243 ops/s
[info]                  ·gc.alloc.rate:                   1364.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              142922.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139512.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.439 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14900.769 ops/s
[info]                  ·gc.alloc.rate:                   1353.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              142951.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141283.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.391 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14789.495 ops/s
[info]                  ·gc.alloc.rate:                   1343.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142910.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.646 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14996.848 ops/s
[info]                  ·gc.alloc.rate:                   1362.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              142921.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176694.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.730 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14945.279 ±(99.9%) 385.799 ops/s [Average]
[info]   (min, avg, max) = (14789.495, 14945.279, 15029.243), stdev = 100.191
[info]   CI (99.9%): [14559.480, 15331.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1357.481 ±(99.9%) 35.215 MB/sec [Average]
[info]   (min, avg, max) = (1343.172, 1357.481, 1364.813), stdev = 9.145
[info]   CI (99.9%): [1322.266, 1392.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142927.008 ±(99.9%) 56.718 B/op [Average]
[info]   (min, avg, max) = (142912.031, 142927.008, 142951.281), stdev = 14.729
[info]   CI (99.9%): [142870.290, 142983.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1405.113 ±(99.9%) 603.015 MB/sec [Average]
[info]   (min, avg, max) = (1327.550, 1405.113, 1685.058), stdev = 156.601
[info]   CI (99.9%): [802.097, 2008.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   147920.175 ±(99.9%) 62204.988 B/op [Average]
[info]   (min, avg, max) = (139200.158, 147920.175, 176694.903), stdev = 16154.438
[info]   CI (99.9%): [85715.188, 210125.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.387 ±(99.9%) 18.190 B/op [Average]
[info]   (min, avg, max) = (6.646, 11.387, 17.439), stdev = 4.724
[info]   CI (99.9%): [≈ 0, 29.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 39.70% complete, ETA 00:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9528.688 ops/s
[info] # Warmup Iteration   2: 15106.856 ops/s
[info] # Warmup Iteration   3: 15272.337 ops/s
[info] Iteration   1: 15715.371 ops/s
[info]                  ·gc.alloc.rate:                   1280.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              128176.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131322.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.339 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15716.058 ops/s
[info]                  ·gc.alloc.rate:                   1280.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              128196.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132089.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.508 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15728.864 ops/s
[info]                  ·gc.alloc.rate:                   1281.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132780.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.332 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15733.888 ops/s
[info]                  ·gc.alloc.rate:                   1281.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100046.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15540.798 ops/s
[info]                  ·gc.alloc.rate:                   1265.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              128192.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135726.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15686.996 ±(99.9%) 316.219 ops/s [Average]
[info]   (min, avg, max) = (15540.798, 15686.996, 15733.888), stdev = 82.121
[info]   CI (99.9%): [15370.777, 16003.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1277.828 ±(99.9%) 25.819 MB/sec [Average]
[info]   (min, avg, max) = (1265.903, 1277.828, 1281.702), stdev = 6.705
[info]   CI (99.9%): [1252.009, 1303.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   128196.233 ±(99.9%) 50.871 B/op [Average]
[info]   (min, avg, max) = (128176.027, 128196.233, 128208.040), stdev = 13.211
[info]   CI (99.9%): [128145.362, 128247.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1259.599 ±(99.9%) 559.943 MB/sec [Average]
[info]   (min, avg, max) = (1000.173, 1259.599, 1340.299), stdev = 145.415
[info]   CI (99.9%): [699.656, 1819.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   126393.013 ±(99.9%) 57074.603 B/op [Average]
[info]   (min, avg, max) = (100046.824, 126393.013, 135726.641), stdev = 14822.093
[info]   CI (99.9%): [69318.410, 183467.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.777 ±(99.9%) 11.977 B/op [Average]
[info]   (min, avg, max) = (4.164, 8.777, 12.508), stdev = 3.110
[info]   CI (99.9%): [≈ 0, 20.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 40.00% complete, ETA 00:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253148.524 ops/s
[info] # Warmup Iteration   2: 264768.786 ops/s
[info] # Warmup Iteration   3: 261160.835 ops/s
[info] Iteration   1: 272390.071 ops/s
[info]                  ·gc.alloc.rate:                   708.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3843.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 271165.414 ops/s
[info]                  ·gc.alloc.rate:                   705.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3858.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 270363.636 ops/s
[info]                  ·gc.alloc.rate:                   703.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3872.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 267256.019 ops/s
[info]                  ·gc.alloc.rate:                   695.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5882.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 272165.875 ops/s
[info]                  ·gc.alloc.rate:                   708.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3859.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   270668.203 ±(99.9%) 7982.736 ops/s [Average]
[info]   (min, avg, max) = (267256.019, 270668.203, 272390.071), stdev = 2073.091
[info]   CI (99.9%): [262685.466, 278650.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   704.498 ±(99.9%) 20.407 MB/sec [Average]
[info]   (min, avg, max) = (695.828, 704.498, 708.885), stdev = 5.300
[info]   CI (99.9%): [684.091, 724.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.415 ±(99.9%) 574.528 MB/sec [Average]
[info]   (min, avg, max) = (664.827, 732.415, 999.310), stdev = 149.203
[info]   CI (99.9%): [157.887, 1306.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4263.316 ±(99.9%) 3485.546 B/op [Average]
[info]   (min, avg, max) = (3843.299, 4263.316, 5882.457), stdev = 905.185
[info]   CI (99.9%): [777.770, 7748.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.338 ±(99.9%) 0.888 B/op [Average]
[info]   (min, avg, max) = (0.123, 0.338, 0.722), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 40.30% complete, ETA 00:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6808.452 ops/s
[info] # Warmup Iteration   2: 11569.382 ops/s
[info] # Warmup Iteration   3: 11802.127 ops/s
[info] Iteration   1: 11884.969 ops/s
[info]                  ·gc.alloc.rate:                   1633.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218545.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.270 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11989.900 ops/s
[info]                  ·gc.alloc.rate:                   1647.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218118.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.930 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12003.142 ops/s
[info]                  ·gc.alloc.rate:                   1649.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              216281.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219366.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.648 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12029.869 ops/s
[info]                  ·gc.alloc.rate:                   1653.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175851.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.893 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11905.323 ops/s
[info]                  ·gc.alloc.rate:                   1636.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223002.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.007 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11962.640 ±(99.9%) 245.214 ops/s [Average]
[info]   (min, avg, max) = (11884.969, 11962.640, 12029.869), stdev = 63.681
[info]   CI (99.9%): [11717.426, 12207.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1643.991 ±(99.9%) 33.422 MB/sec [Average]
[info]   (min, avg, max) = (1633.217, 1643.991, 1653.196), stdev = 8.680
[info]   CI (99.9%): [1610.569, 1677.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216280.253 ±(99.9%) 1.871 B/op [Average]
[info]   (min, avg, max) = (216280.036, 216280.253, 216281.123), stdev = 0.486
[info]   CI (99.9%): [216278.382, 216282.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.288 ±(99.9%) 560.256 MB/sec [Average]
[info]   (min, avg, max) = (1344.173, 1603.288, 1687.301), stdev = 145.497
[info]   CI (99.9%): [1043.032, 2163.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   210977.008 ±(99.9%) 75972.327 B/op [Average]
[info]   (min, avg, max) = (175851.938, 210977.008, 223002.916), stdev = 19729.772
[info]   CI (99.9%): [135004.681, 286949.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.949 ±(99.9%) 7.323 B/op [Average]
[info]   (min, avg, max) = (8.270, 10.949, 13.648), stdev = 1.902
[info]   CI (99.9%): [3.626, 18.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 40.61% complete, ETA 00:41:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31307.462 ops/s
[info] # Warmup Iteration   2: 40461.876 ops/s
[info] # Warmup Iteration   3: 40937.975 ops/s
[info] Iteration   1: 41248.676 ops/s
[info]                  ·gc.alloc.rate:                   1566.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63324.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.589 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 41695.163 ops/s
[info]                  ·gc.alloc.rate:                   1583.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50377.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.143 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41558.021 ops/s
[info]                  ·gc.alloc.rate:                   1578.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63470.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.577 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41117.919 ops/s
[info]                  ·gc.alloc.rate:                   1561.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64469.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.390 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 41602.942 ops/s
[info]                  ·gc.alloc.rate:                   1579.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51118.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.150 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   41444.544 ±(99.9%) 954.589 ops/s [Average]
[info]   (min, avg, max) = (41117.919, 41444.544, 41695.163), stdev = 247.904
[info]   CI (99.9%): [40489.955, 42399.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1574.074 ±(99.9%) 36.567 MB/sec [Average]
[info]   (min, avg, max) = (1561.472, 1574.074, 1583.980), stdev = 9.496
[info]   CI (99.9%): [1537.506, 1610.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59768.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (59768.010, 59768.011, 59768.011), stdev = 0.001
[info]   CI (99.9%): [59768.009, 59768.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1541.337 ±(99.9%) 697.693 MB/sec [Average]
[info]   (min, avg, max) = (1335.099, 1541.337, 1684.312), stdev = 181.189
[info]   CI (99.9%): [843.645, 2239.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   58552.127 ±(99.9%) 27504.630 B/op [Average]
[info]   (min, avg, max) = (50377.009, 58552.127, 64469.895), stdev = 7142.865
[info]   CI (99.9%): [31047.497, 86056.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.370 ±(99.9%) 3.011 B/op [Average]
[info]   (min, avg, max) = (1.577, 2.370, 3.150), stdev = 0.782
[info]   CI (99.9%): [≈ 0, 5.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 40.91% complete, ETA 00:41:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27446.847 ops/s
[info] # Warmup Iteration   2: 39990.117 ops/s
[info] # Warmup Iteration   3: 40660.806 ops/s
[info] Iteration   1: 40568.816 ops/s
[info]                  ·gc.alloc.rate:                   1208.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50873.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.230 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40150.624 ops/s
[info]                  ·gc.alloc.rate:                   1195.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38737.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40098.687 ops/s
[info]                  ·gc.alloc.rate:                   1194.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52003.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 40198.765 ops/s
[info]                  ·gc.alloc.rate:                   1197.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39121.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41202.157 ops/s
[info]                  ·gc.alloc.rate:                   1227.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51132.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.771 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   40443.810 ±(99.9%) 1781.137 ops/s [Average]
[info]   (min, avg, max) = (40098.687, 40443.810, 41202.157), stdev = 462.556
[info]   CI (99.9%): [38662.672, 42224.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1204.609 ±(99.9%) 53.626 MB/sec [Average]
[info]   (min, avg, max) = (1194.209, 1204.609, 1227.416), stdev = 13.926
[info]   CI (99.9%): [1150.983, 1258.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46872.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (46872.010, 46872.011, 46872.012), stdev = 0.001
[info]   CI (99.9%): [46872.009, 46872.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.601 ±(99.9%) 700.184 MB/sec [Average]
[info]   (min, avg, max) = (988.213, 1192.601, 1338.979), stdev = 181.836
[info]   CI (99.9%): [492.416, 1892.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46373.487 ±(99.9%) 26223.087 B/op [Average]
[info]   (min, avg, max) = (38737.020, 46373.487, 52003.931), stdev = 6810.052
[info]   CI (99.9%): [20150.400, 72596.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.232 ±(99.9%) 4.817 B/op [Average]
[info]   (min, avg, max) = (1.634, 3.232, 4.771), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 8.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 41.21% complete, ETA 00:41:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1129411.009 ops/s
[info] # Warmup Iteration   2: 1235723.182 ops/s
[info] # Warmup Iteration   3: 1227893.401 ops/s
[info] Iteration   1: 1275799.172 ops/s
[info]                  ·gc.alloc.rate:                   1160.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1227.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1253329.672 ops/s
[info]                  ·gc.alloc.rate:                   1140.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1670.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1251504.060 ops/s
[info]                  ·gc.alloc.rate:                   1138.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1262297.427 ops/s
[info]                  ·gc.alloc.rate:                   1148.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1671.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1267602.712 ops/s
[info]                  ·gc.alloc.rate:                   1153.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1262106.609 ±(99.9%) 38850.426 ops/s [Average]
[info]   (min, avg, max) = (1251504.060, 1262106.609, 1275799.172), stdev = 10089.332
[info]   CI (99.9%): [1223256.183, 1300957.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1148.427 ±(99.9%) 34.869 MB/sec [Average]
[info]   (min, avg, max) = (1138.727, 1148.427, 1160.755), stdev = 9.055
[info]   CI (99.9%): [1113.558, 1183.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1135.226 ±(99.9%) 704.577 MB/sec [Average]
[info]   (min, avg, max) = (995.186, 1135.226, 1340.277), stdev = 182.977
[info]   CI (99.9%): [430.649, 1839.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1416.153 ±(99.9%) 896.340 B/op [Average]
[info]   (min, avg, max) = (1227.741, 1416.153, 1671.108), stdev = 232.777
[info]   CI (99.9%): [519.813, 2312.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.167), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.099 ±(99.9%) 0.241 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.099, 0.209), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 41.52% complete, ETA 00:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1152079.779 ops/s
[info] # Warmup Iteration   2: 1253588.963 ops/s
[info] # Warmup Iteration   3: 1246939.913 ops/s
[info] Iteration   1: 1260030.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1260490.699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1266359.478 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1264596.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1248058.500 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1259907.316 ±(99.9%) 27524.212 ops/s [Average]
[info]   (min, avg, max) = (1248058.500, 1259907.316, 1266359.478), stdev = 7147.950
[info]   CI (99.9%): [1232383.104, 1287431.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 41.82% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2648.578 ops/s
[info] # Warmup Iteration   2: 3294.690 ops/s
[info] # Warmup Iteration   3: 3516.258 ops/s
[info] Iteration   1: 3526.829 ops/s
[info]                  ·gc.alloc.rate:               476.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          212496.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114130.721 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3552.194 ops/s
[info]                  ·gc.alloc.rate:                   479.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291287.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 923.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3592.379 ops/s
[info]                  ·gc.alloc.rate:                   485.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143876.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3572.430 ops/s
[info]                  ·gc.alloc.rate:                   482.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289363.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3508.950 ops/s
[info]                  ·gc.alloc.rate:               473.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          212496.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147278.623 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3550.556 ±(99.9%) 129.503 ops/s [Average]
[info]   (min, avg, max) = (3508.950, 3550.556, 3592.379), stdev = 33.632
[info]   CI (99.9%): [3421.053, 3680.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   479.466 ±(99.9%) 17.654 MB/sec [Average]
[info]   (min, avg, max) = (473.811, 479.466, 485.251), stdev = 4.585
[info]   CI (99.9%): [461.812, 497.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   212496.125 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (212496.120, 212496.125, 212496.132), stdev = 0.005
[info]   CI (99.9%): [212496.106, 212496.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   445.418 ±(99.9%) 753.073 MB/sec [Average]
[info]   (min, avg, max) = (255.795, 445.418, 657.526), stdev = 195.571
[info]   CI (99.9%): [≈ 0, 1198.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   197187.362 ±(99.9%) 331147.710 B/op [Average]
[info]   (min, avg, max) = (114130.721, 197187.362, 291287.507), stdev = 85998.009
[info]   CI (99.9%): [≈ 0, 528335.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.446 ±(99.9%) 3.532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.446, 2.084), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 3.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   197.481 ±(99.9%) 1564.759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 197.481, 923.258), stdev = 406.363
[info]   CI (99.9%): [≈ 0, 1762.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 42.12% complete, ETA 00:40:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98649.836 ops/s
[info] # Warmup Iteration   2: 118531.683 ops/s
[info] # Warmup Iteration   3: 116556.477 ops/s
[info] Iteration   1: 116517.010 ops/s
[info]                  ·gc.alloc.rate:                   2163.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27147.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.844 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 119061.504 ops/s
[info]                  ·gc.alloc.rate:                   2210.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31181.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.651 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 119303.222 ops/s
[info]                  ·gc.alloc.rate:                   2215.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26771.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.824 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 117297.093 ops/s
[info]                  ·gc.alloc.rate:                   2178.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31861.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.397 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 119285.655 ops/s
[info]                  ·gc.alloc.rate:                   2215.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26895.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.099 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   118292.897 ±(99.9%) 4999.347 ops/s [Average]
[info]   (min, avg, max) = (116517.010, 118292.897, 119303.222), stdev = 1298.315
[info]   CI (99.9%): [113293.549, 123292.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2196.519 ±(99.9%) 92.978 MB/sec [Average]
[info]   (min, avg, max) = (2163.459, 2196.519, 2215.243), stdev = 24.146
[info]   CI (99.9%): [2103.541, 2289.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29224.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29224.004, 29224.004, 29224.004), stdev = 0.001
[info]   CI (99.9%): [29224.003, 29224.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.231 ±(99.9%) 720.423 MB/sec [Average]
[info]   (min, avg, max) = (2009.701, 2162.231, 2374.598), stdev = 187.091
[info]   CI (99.9%): [1441.809, 2882.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28771.548 ±(99.9%) 9724.802 B/op [Average]
[info]   (min, avg, max) = (26771.761, 28771.548, 31861.300), stdev = 2525.500
[info]   CI (99.9%): [19046.747, 38496.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.163 ±(99.9%) 1.380 B/op [Average]
[info]   (min, avg, max) = (0.824, 1.163, 1.651), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 2.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 42.42% complete, ETA 00:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172632.318 ops/s
[info] # Warmup Iteration   2: 250318.916 ops/s
[info] # Warmup Iteration   3: 241885.110 ops/s
[info] Iteration   1: 242600.069 ops/s
[info]                  ·gc.alloc.rate:                   532.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3779.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 243978.849 ops/s
[info]                  ·gc.alloc.rate:                   535.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4217.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 253171.164 ops/s
[info]                  ·gc.alloc.rate:                   556.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2033.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 249579.817 ops/s
[info]                  ·gc.alloc.rate:                   548.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4125.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 251174.740 ops/s
[info]                  ·gc.alloc.rate:                   551.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4107.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   248100.927 ±(99.9%) 17708.118 ops/s [Average]
[info]   (min, avg, max) = (242600.069, 248100.927, 253171.164), stdev = 4598.742
[info]   CI (99.9%): [230392.810, 265809.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   544.812 ±(99.9%) 39.051 MB/sec [Average]
[info]   (min, avg, max) = (532.687, 544.812, 556.035), stdev = 10.141
[info]   CI (99.9%): [505.760, 583.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   574.611 ±(99.9%) 546.082 MB/sec [Average]
[info]   (min, avg, max) = (327.126, 574.611, 655.475), stdev = 141.816
[info]   CI (99.9%): [28.529, 1120.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3652.466 ±(99.9%) 3543.594 B/op [Average]
[info]   (min, avg, max) = (2033.232, 3652.466, 4217.681), stdev = 920.260
[info]   CI (99.9%): [108.873, 7196.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.473 ±(99.9%) 3.670 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.473, 2.177), stdev = 0.953
[info]   CI (99.9%): [≈ 0, 4.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.063 ±(99.9%) 23.821 B/op [Average]
[info]   (min, avg, max) = (0.129, 3.063, 14.127), stdev = 6.186
[info]   CI (99.9%): [≈ 0, 26.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 42.73% complete, ETA 00:40:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 466787.991 ops/s
[info] # Warmup Iteration   2: 485618.150 ops/s
[info] # Warmup Iteration   3: 490391.075 ops/s
[info] Iteration   1: 490242.631 ops/s
[info]                  ·gc.alloc.rate:                   617.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2134.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 490318.112 ops/s
[info]                  ·gc.alloc.rate:                   618.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2133.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 490090.948 ops/s
[info]                  ·gc.alloc.rate:                   618.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2134.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 484937.254 ops/s
[info]                  ·gc.alloc.rate:                   611.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2157.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 477844.595 ops/s
[info]                  ·gc.alloc.rate:                   602.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2194.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   486686.708 ±(99.9%) 20973.118 ops/s [Average]
[info]   (min, avg, max) = (477844.595, 486686.708, 490318.112), stdev = 5446.652
[info]   CI (99.9%): [465713.590, 507659.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   613.545 ±(99.9%) 26.580 MB/sec [Average]
[info]   (min, avg, max) = (602.353, 613.545, 618.080), stdev = 6.903
[info]   CI (99.9%): [586.965, 640.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.107 ±(99.9%) 2.249 MB/sec [Average]
[info]   (min, avg, max) = (664.764, 665.107, 666.131), stdev = 0.584
[info]   CI (99.9%): [662.858, 667.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2150.968 ±(99.9%) 100.555 B/op [Average]
[info]   (min, avg, max) = (2133.964, 2150.968, 2194.068), stdev = 26.114
[info]   CI (99.9%): [2050.413, 2251.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.613 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.381, 1.595), stdev = 0.679
[info]   CI (99.9%): [≈ 0, 2.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.226 ±(99.9%) 8.385 B/op [Average]
[info]   (min, avg, max) = (0.135, 1.226, 5.120), stdev = 2.178
[info]   CI (99.9%): [≈ 0, 9.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 43.03% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40875.917 ops/s
[info] # Warmup Iteration   2: 68486.371 ops/s
[info] # Warmup Iteration   3: 69502.715 ops/s
[info] Iteration   1: 69083.266 ops/s
[info]                  ·gc.alloc.rate:                   2992.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3020.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68806.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.371 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 69235.528 ops/s
[info]                  ·gc.alloc.rate:                   2998.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61461.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.098 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 69357.628 ops/s
[info]                  ·gc.alloc.rate:                   3004.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69292.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.362 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 69538.019 ops/s
[info]                  ·gc.alloc.rate:                   3012.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69217.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.298 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 68065.557 ops/s
[info]                  ·gc.alloc.rate:                   2948.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70836.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.888 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   69056.000 ±(99.9%) 2226.452 ops/s [Average]
[info]   (min, avg, max) = (68065.557, 69056.000, 69538.019), stdev = 578.203
[info]   CI (99.9%): [66829.548, 71282.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2991.324 ±(99.9%) 97.326 MB/sec [Average]
[info]   (min, avg, max) = (2948.162, 2991.324, 3012.618), stdev = 25.275
[info]   CI (99.9%): [2893.998, 3088.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68168.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68168.006, 68168.007), stdev = 0.001
[info]   CI (99.9%): [68168.005, 68168.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.198 ±(99.9%) 598.342 MB/sec [Average]
[info]   (min, avg, max) = (2703.920, 2980.198, 3063.566), stdev = 155.388
[info]   CI (99.9%): [2381.855, 3578.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67923.025 ±(99.9%) 14222.274 B/op [Average]
[info]   (min, avg, max) = (61461.826, 67923.025, 70836.409), stdev = 3693.479
[info]   CI (99.9%): [53700.751, 82145.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.338 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.158, 0.312), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.603 ±(99.9%) 7.672 B/op [Average]
[info]   (min, avg, max) = (2.362, 3.603, 7.098), stdev = 1.992
[info]   CI (99.9%): [≈ 0, 11.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 43.33% complete, ETA 00:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135304.459 ops/s
[info] # Warmup Iteration   2: 166906.272 ops/s
[info] # Warmup Iteration   3: 174053.616 ops/s
[info] Iteration   1: 169942.059 ops/s
[info]                  ·gc.alloc.rate:                   1734.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15404.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.578 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 170534.940 ops/s
[info]                  ·gc.alloc.rate:                   1739.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15437.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.153 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 171057.776 ops/s
[info]                  ·gc.alloc.rate:                   1745.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15469.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.149 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 169629.911 ops/s
[info]                  ·gc.alloc.rate:                   1731.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15656.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 169812.975 ops/s
[info]                  ·gc.alloc.rate:                   1732.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18831.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.772 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   170195.532 ±(99.9%) 2269.258 ops/s [Average]
[info]   (min, avg, max) = (169629.911, 170195.532, 171057.776), stdev = 589.319
[info]   CI (99.9%): [167926.274, 172464.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1736.675 ±(99.9%) 21.857 MB/sec [Average]
[info]   (min, avg, max) = (1731.218, 1736.675, 1745.093), stdev = 5.676
[info]   CI (99.9%): [1714.818, 1758.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   16056.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16056.003, 16056.003, 16056.003), stdev = 0.001
[info]   CI (99.9%): [16056.002, 16056.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1747.736 ±(99.9%) 613.980 MB/sec [Average]
[info]   (min, avg, max) = (1664.031, 1747.736, 2032.505), stdev = 159.449
[info]   CI (99.9%): [1133.756, 2361.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16159.819 ±(99.9%) 5763.045 B/op [Average]
[info]   (min, avg, max) = (15404.540, 16159.819, 18831.408), stdev = 1496.644
[info]   CI (99.9%): [10396.774, 21922.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.924 ±(99.9%) 0.958 B/op [Average]
[info]   (min, avg, max) = (0.578, 0.924, 1.153), stdev = 0.249
[info]   CI (99.9%): [≈ 0, 1.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 43.64% complete, ETA 00:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351059.489 ops/s
[info] # Warmup Iteration   2: 485064.106 ops/s
[info] # Warmup Iteration   3: 477775.030 ops/s
[info] Iteration   1: 478742.490 ops/s
[info]                  ·gc.alloc.rate:                   491.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1915.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 486892.255 ops/s
[info]                  ·gc.alloc.rate:               500.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1056.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 487151.005 ops/s
[info]                  ·gc.alloc.rate:                   500.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2113.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 486287.888 ops/s
[info]                  ·gc.alloc.rate:                   499.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1058.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 486750.412 ops/s
[info]                  ·gc.alloc.rate:                   499.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2117.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   485164.810 ±(99.9%) 13877.107 ops/s [Average]
[info]   (min, avg, max) = (478742.490, 485164.810, 487151.005), stdev = 3603.841
[info]   CI (99.9%): [471287.703, 499041.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   498.162 ±(99.9%) 14.314 MB/sec [Average]
[info]   (min, avg, max) = (491.539, 498.162, 500.188), stdev = 3.717
[info]   CI (99.9%): [483.848, 512.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.075 ±(99.9%) 650.167 MB/sec [Average]
[info]   (min, avg, max) = (326.792, 509.075, 654.822), stdev = 168.846
[info]   CI (99.9%): [≈ 0, 1159.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1652.134 ±(99.9%) 2114.164 B/op [Average]
[info]   (min, avg, max) = (1056.190, 1652.134, 2117.304), stdev = 549.042
[info]   CI (99.9%): [≈ 0, 3766.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.460 ±(99.9%) 3.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 2.178), stdev = 0.960
[info]   CI (99.9%): [≈ 0, 4.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.513 ±(99.9%) 12.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.513, 7.159), stdev = 3.157
[info]   CI (99.9%): [≈ 0, 13.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 43.94% complete, ETA 00:39:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 543927.003 ops/s
[info] # Warmup Iteration   2: 591458.077 ops/s
[info] # Warmup Iteration   3: 576249.667 ops/s
[info] Iteration   1: 573077.631 ops/s
[info]                  ·gc.alloc.rate:                   448.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 564917.184 ops/s
[info]                  ·gc.alloc.rate:                   442.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1848.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 578306.750 ops/s
[info]                  ·gc.alloc.rate:                   452.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     901.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 568812.045 ops/s
[info]                  ·gc.alloc.rate:               445.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 916.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 578585.993 ops/s
[info]                  ·gc.alloc.rate:                   452.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1803.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   572739.921 ±(99.9%) 22935.072 ops/s [Average]
[info]   (min, avg, max) = (564917.184, 572739.921, 578585.993), stdev = 5956.165
[info]   CI (99.9%): [549804.848, 595674.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   448.351 ±(99.9%) 17.892 MB/sec [Average]
[info]   (min, avg, max) = (442.272, 448.351, 452.935), stdev = 4.646
[info]   CI (99.9%): [430.459, 466.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.893 ±(99.9%) 762.705 MB/sec [Average]
[info]   (min, avg, max) = (255.795, 448.893, 663.593), stdev = 198.072
[info]   CI (99.9%): [≈ 0, 1211.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1234.254 ±(99.9%) 2105.443 B/op [Average]
[info]   (min, avg, max) = (702.535, 1234.254, 1848.516), stdev = 546.777
[info]   CI (99.9%): [≈ 0, 3339.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.397 ±(99.9%) 3.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.397, 1.803), stdev = 0.787
[info]   CI (99.9%): [≈ 0, 3.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.104 ±(99.9%) 8.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.104, 5.023), stdev = 2.194
[info]   CI (99.9%): [≈ 0, 9.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.24% complete, ETA 00:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 557323.087 ops/s
[info] # Warmup Iteration   2: 606796.008 ops/s
[info] # Warmup Iteration   3: 631030.824 ops/s
[info] Iteration   1: 635150.496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 641385.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 616410.997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 617706.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 642642.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   630659.226 ±(99.9%) 49071.261 ops/s [Average]
[info]   (min, avg, max) = (616410.997, 630659.226, 642642.494), stdev = 12743.651
[info]   CI (99.9%): [581587.966, 679730.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 44.55% complete, ETA 00:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19591.186 ops/s
[info] # Warmup Iteration   2: 26814.377 ops/s
[info] # Warmup Iteration   3: 26472.918 ops/s
[info] Iteration   1: 26969.691 ops/s
[info]                  ·gc.alloc.rate:                   1482.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              86528.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96328.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.644 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 26691.744 ops/s
[info]                  ·gc.alloc.rate:                   1467.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              86518.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78360.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26636.132 ops/s
[info]                  ·gc.alloc.rate:                   1464.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78915.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27184.847 ops/s
[info]                  ·gc.alloc.rate:                   1494.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97144.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.615 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27157.680 ops/s
[info]                  ·gc.alloc.rate:                   1492.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78116.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.619 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26928.019 ±(99.9%) 984.488 ops/s [Average]
[info]   (min, avg, max) = (26636.132, 26928.019, 27184.847), stdev = 255.668
[info]   CI (99.9%): [25943.531, 27912.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1480.423 ±(99.9%) 53.514 MB/sec [Average]
[info]   (min, avg, max) = (1464.206, 1480.423, 1494.296), stdev = 13.897
[info]   CI (99.9%): [1426.909, 1533.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86516.504 ±(99.9%) 27.004 B/op [Average]
[info]   (min, avg, max) = (86512.016, 86516.504, 86528.016), stdev = 7.013
[info]   CI (99.9%): [86489.499, 86543.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1468.378 ±(99.9%) 690.624 MB/sec [Average]
[info]   (min, avg, max) = (1329.459, 1468.378, 1677.951), stdev = 179.353
[info]   CI (99.9%): [777.754, 2159.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85773.158 ±(99.9%) 38570.506 B/op [Average]
[info]   (min, avg, max) = (78116.248, 85773.158, 97144.647), stdev = 10016.638
[info]   CI (99.9%): [47202.652, 124343.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.387 ±(99.9%) 6.411 B/op [Average]
[info]   (min, avg, max) = (3.615, 4.387, 7.365), stdev = 1.665
[info]   CI (99.9%): [≈ 0, 10.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 44.85% complete, ETA 00:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5250.532 ops/s
[info] # Warmup Iteration   2: 7015.432 ops/s
[info] # Warmup Iteration   3: 7313.639 ops/s
[info] Iteration   1: 7310.433 ops/s
[info]                  ·gc.alloc.rate:                   1156.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285232.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.370 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7144.526 ops/s
[info]                  ·gc.alloc.rate:                   1129.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219590.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.757 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7171.516 ops/s
[info]                  ·gc.alloc.rate:                   1134.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292659.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7401.531 ops/s
[info]                  ·gc.alloc.rate:                   1170.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213383.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7402.686 ops/s
[info]                  ·gc.alloc.rate:                   1170.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285511.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7286.138 ±(99.9%) 474.275 ops/s [Average]
[info]   (min, avg, max) = (7144.526, 7286.138, 7402.686), stdev = 123.168
[info]   CI (99.9%): [6811.864, 7760.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1152.139 ±(99.9%) 74.924 MB/sec [Average]
[info]   (min, avg, max) = (1129.763, 1152.139, 1170.518), stdev = 19.457
[info]   CI (99.9%): [1077.215, 1227.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248864.060 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (248864.058, 248864.060, 248864.063), stdev = 0.002
[info]   CI (99.9%): [248864.052, 248864.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1200.363 ±(99.9%) 704.092 MB/sec [Average]
[info]   (min, avg, max) = (996.871, 1200.363, 1342.889), stdev = 182.850
[info]   CI (99.9%): [496.271, 1904.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   259275.616 ±(99.9%) 151080.218 B/op [Average]
[info]   (min, avg, max) = (213383.729, 259275.616, 292659.857), stdev = 39235.053
[info]   CI (99.9%): [108195.397, 410355.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.164 ±(99.9%) 35.617 B/op [Average]
[info]   (min, avg, max) = (8.853, 16.164, 31.370), stdev = 9.250
[info]   CI (99.9%): [≈ 0, 51.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 45.15% complete, ETA 00:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3880.562 ops/s
[info] # Warmup Iteration   2: 7177.661 ops/s
[info] # Warmup Iteration   3: 7223.229 ops/s
[info] Iteration   1: 7100.248 ops/s
[info]                  ·gc.alloc.rate:                   1036.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217450.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7051.181 ops/s
[info]                  ·gc.alloc.rate:                   1029.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293071.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.587 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7122.288 ops/s
[info]                  ·gc.alloc.rate:                   1040.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218649.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7258.943 ops/s
[info]                  ·gc.alloc.rate:                   1060.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215535.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.539 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7196.319 ops/s
[info]                  ·gc.alloc.rate:                   1051.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218514.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.762 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   7145.796 ±(99.9%) 315.977 ops/s [Average]
[info]   (min, avg, max) = (7051.181, 7145.796, 7258.943), stdev = 82.058
[info]   CI (99.9%): [6829.818, 7461.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1043.617 ±(99.9%) 46.211 MB/sec [Average]
[info]   (min, avg, max) = (1029.744, 1043.617, 1060.093), stdev = 12.001
[info]   CI (99.9%): [997.406, 1089.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   229848.061 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (229848.059, 229848.061, 229848.065), stdev = 0.002
[info]   CI (99.9%): [229848.052, 229848.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1055.376 ±(99.9%) 555.141 MB/sec [Average]
[info]   (min, avg, max) = (981.023, 1055.376, 1312.993), stdev = 144.168
[info]   CI (99.9%): [500.236, 1610.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   232644.256 ±(99.9%) 130163.565 B/op [Average]
[info]   (min, avg, max) = (215535.006, 232644.256, 293071.936), stdev = 33803.064
[info]   CI (99.9%): [102480.691, 362807.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20.196 ±(99.9%) 29.874 B/op [Average]
[info]   (min, avg, max) = (13.539, 20.196, 32.293), stdev = 7.758
[info]   CI (99.9%): [≈ 0, 50.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 45.45% complete, ETA 00:38:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89996.293 ops/s
[info] # Warmup Iteration   2: 101787.901 ops/s
[info] # Warmup Iteration   3: 100658.438 ops/s
[info] Iteration   1: 103543.515 ops/s
[info]                  ·gc.alloc.rate:                   1003.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15162.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.266 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 100177.136 ops/s
[info]                  ·gc.alloc.rate:                   970.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10460.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 100204.956 ops/s
[info]                  ·gc.alloc.rate:                   970.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15715.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 103738.951 ops/s
[info]                  ·gc.alloc.rate:                   1005.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15230.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 103425.157 ops/s
[info]                  ·gc.alloc.rate:                   1002.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15306.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.634 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   102217.943 ±(99.9%) 7137.983 ops/s [Average]
[info]   (min, avg, max) = (100177.136, 102217.943, 103738.951), stdev = 1853.711
[info]   CI (99.9%): [95079.961, 109355.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   990.491 ±(99.9%) 68.982 MB/sec [Average]
[info]   (min, avg, max) = (970.858, 990.491, 1005.044), stdev = 17.914
[info]   CI (99.9%): [921.510, 1059.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   934.872 ±(99.9%) 578.709 MB/sec [Average]
[info]   (min, avg, max) = (666.081, 934.872, 1005.860), stdev = 150.289
[info]   CI (99.9%): [356.162, 1513.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14374.877 ±(99.9%) 8466.985 B/op [Average]
[info]   (min, avg, max) = (10460.329, 14374.877, 15715.509), stdev = 2198.849
[info]   CI (99.9%): [5907.892, 22841.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.901 ±(99.9%) 1.633 B/op [Average]
[info]   (min, avg, max) = (0.316, 0.901, 1.308), stdev = 0.424
[info]   CI (99.9%): [≈ 0, 2.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 45.76% complete, ETA 00:38:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3558.634 ops/s
[info] # Warmup Iteration   2: 6356.496 ops/s
[info] # Warmup Iteration   3: 6575.598 ops/s
[info] Iteration   1: 6474.946 ops/s
[info]                  ·gc.alloc.rate:                   1181.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318976.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.180 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6474.299 ops/s
[info]                  ·gc.alloc.rate:               1181.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          287232.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      988.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240204.215 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6438.592 ops/s
[info]                  ·gc.alloc.rate:                   1175.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323690.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6572.887 ops/s
[info]                  ·gc.alloc.rate:                   1199.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318958.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.984 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6493.109 ops/s
[info]                  ·gc.alloc.rate:                   1185.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243214.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6490.767 ±(99.9%) 192.464 ops/s [Average]
[info]   (min, avg, max) = (6438.592, 6490.767, 6572.887), stdev = 49.982
[info]   CI (99.9%): [6298.302, 6683.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1184.735 ±(99.9%) 34.974 MB/sec [Average]
[info]   (min, avg, max) = (1175.295, 1184.735, 1199.605), stdev = 9.083
[info]   CI (99.9%): [1149.761, 1219.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   287232.069 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (287232.066, 287232.069, 287232.072), stdev = 0.003
[info]   CI (99.9%): [287232.057, 287232.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1192.166 ±(99.9%) 690.494 MB/sec [Average]
[info]   (min, avg, max) = (988.134, 1192.166, 1332.109), stdev = 179.319
[info]   CI (99.9%): [501.672, 1882.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   289009.047 ±(99.9%) 166480.813 B/op [Average]
[info]   (min, avg, max) = (240204.215, 289009.047, 323690.852), stdev = 43234.539
[info]   CI (99.9%): [122528.234, 455489.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.059 ±(99.9%) 21.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.059, 15.180), stdev = 5.546
[info]   CI (99.9%): [≈ 0, 27.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 46.06% complete, ETA 00:37:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12313.561 ops/s
[info] # Warmup Iteration   2: 16286.538 ops/s
[info] # Warmup Iteration   3: 16359.519 ops/s
[info] Iteration   1: 16187.947 ops/s
[info]                  ·gc.alloc.rate:                   954.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96237.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16340.622 ops/s
[info]                  ·gc.alloc.rate:                   964.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              92870.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95535.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16458.198 ops/s
[info]                  ·gc.alloc.rate:               971.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          92872.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      995.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95162.954 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 16391.537 ops/s
[info]                  ·gc.alloc.rate:                   967.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              92868.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95941.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.995 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16366.459 ops/s
[info]                  ·gc.alloc.rate:                   965.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96402.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   16348.952 ±(99.9%) 385.288 ops/s [Average]
[info]   (min, avg, max) = (16187.947, 16348.952, 16458.198), stdev = 100.058
[info]   CI (99.9%): [15963.664, 16734.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   964.461 ±(99.9%) 23.676 MB/sec [Average]
[info]   (min, avg, max) = (954.570, 964.461, 971.188), stdev = 6.149
[info]   CI (99.9%): [940.785, 988.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92845.592 ±(99.9%) 132.112 B/op [Average]
[info]   (min, avg, max) = (92808.028, 92845.592, 92872.026), stdev = 34.309
[info]   CI (99.9%): [92713.480, 92977.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   995.715 ±(99.9%) 19.975 MB/sec [Average]
[info]   (min, avg, max) = (989.845, 995.715, 1002.481), stdev = 5.187
[info]   CI (99.9%): [975.740, 1015.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   95855.900 ±(99.9%) 1958.534 B/op [Average]
[info]   (min, avg, max) = (95162.954, 95855.900, 96402.375), stdev = 508.625
[info]   CI (99.9%): [93897.366, 97814.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.817 ±(99.9%) 11.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.817, 7.995), stdev = 3.040
[info]   CI (99.9%): [≈ 0, 16.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 46.36% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12081.075 ops/s
[info] # Warmup Iteration   2: 18400.757 ops/s
[info] # Warmup Iteration   3: 18844.857 ops/s
[info] Iteration   1: 19054.209 ops/s
[info]                  ·gc.alloc.rate:                   893.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81044.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19032.861 ops/s
[info]                  ·gc.alloc.rate:                   892.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81248.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19075.083 ops/s
[info]                  ·gc.alloc.rate:               894.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          73808.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54248.061 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 19052.860 ops/s
[info]                  ·gc.alloc.rate:                   893.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81745.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18934.637 ops/s
[info]                  ·gc.alloc.rate:                   888.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82638.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   19029.930 ±(99.9%) 213.036 ops/s [Average]
[info]   (min, avg, max) = (18934.637, 19029.930, 19075.083), stdev = 55.325
[info]   CI (99.9%): [18816.894, 19242.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   892.585 ±(99.9%) 9.361 MB/sec [Average]
[info]   (min, avg, max) = (888.371, 892.585, 894.590), stdev = 2.431
[info]   CI (99.9%): [883.225, 901.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   73808.025 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (73808.023, 73808.025, 73808.033), stdev = 0.004
[info]   CI (99.9%): [73808.007, 73808.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   921.169 ±(99.9%) 567.920 MB/sec [Average]
[info]   (min, avg, max) = (657.513, 921.169, 994.652), stdev = 147.487
[info]   CI (99.9%): [353.249, 1489.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   76185.016 ±(99.9%) 47280.227 B/op [Average]
[info]   (min, avg, max) = (54248.061, 76185.016, 82638.065), stdev = 12278.525
[info]   CI (99.9%): [28904.789, 123465.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.512 ±(99.9%) 12.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.512, 8.597), stdev = 3.313
[info]   CI (99.9%): [≈ 0, 18.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 46.67% complete, ETA 00:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 386494.936 ops/s
[info] # Warmup Iteration   2: 421287.353 ops/s
[info] # Warmup Iteration   3: 434323.960 ops/s
[info] Iteration   1: 435140.901 ops/s
[info]                  ·gc.alloc.rate:                   986.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2397.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 419002.451 ops/s
[info]                  ·gc.alloc.rate:                   950.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3739.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 432406.191 ops/s
[info]                  ·gc.alloc.rate:                   980.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3630.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 430313.298 ops/s
[info]                  ·gc.alloc.rate:                   975.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3660.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 433458.151 ops/s
[info]                  ·gc.alloc.rate:                   982.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3646.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   430064.198 ±(99.9%) 24746.272 ops/s [Average]
[info]   (min, avg, max) = (419002.451, 430064.198, 435140.901), stdev = 6426.528
[info]   CI (99.9%): [405317.926, 454810.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   975.078 ±(99.9%) 55.511 MB/sec [Average]
[info]   (min, avg, max) = (950.304, 975.078, 986.558), stdev = 14.416
[info]   CI (99.9%): [919.567, 1030.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   932.309 ±(99.9%) 580.082 MB/sec [Average]
[info]   (min, avg, max) = (662.886, 932.309, 1004.252), stdev = 150.645
[info]   CI (99.9%): [352.227, 1512.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3414.931 ±(99.9%) 2196.229 B/op [Average]
[info]   (min, avg, max) = (2397.403, 3414.931, 3739.508), stdev = 570.354
[info]   CI (99.9%): [1218.701, 5611.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.244 ±(99.9%) 0.387 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.244, 0.379), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 46.97% complete, ETA 00:37:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380224.608 ops/s
[info] # Warmup Iteration   2: 412615.028 ops/s
[info] # Warmup Iteration   3: 413503.745 ops/s
[info] Iteration   1: 414304.321 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 417580.461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 417523.844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 417638.949 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 418127.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   417034.969 ±(99.9%) 5950.120 ops/s [Average]
[info]   (min, avg, max) = (414304.321, 417034.969, 418127.270), stdev = 1545.227
[info]   CI (99.9%): [411084.849, 422985.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 47.27% complete, ETA 00:37:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13225.020 ops/s
[info] # Warmup Iteration   2: 17954.774 ops/s
[info] # Warmup Iteration   3: 18114.532 ops/s
[info] Iteration   1: 17750.505 ops/s
[info]                  ·gc.alloc.rate:                   898.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58234.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18293.352 ops/s
[info]                  ·gc.alloc.rate:                   926.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84874.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.954 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17731.083 ops/s
[info]                  ·gc.alloc.rate:               897.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      990.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87893.776 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 17712.740 ops/s
[info]                  ·gc.alloc.rate:                   896.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              79678.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88338.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.549 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18061.186 ops/s
[info]                  ·gc.alloc.rate:                   914.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              79672.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57986.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   17909.773 ±(99.9%) 993.319 ops/s [Average]
[info]   (min, avg, max) = (17712.740, 17909.773, 18293.352), stdev = 257.962
[info]   CI (99.9%): [16916.454, 18903.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   906.842 ±(99.9%) 50.422 MB/sec [Average]
[info]   (min, avg, max) = (896.720, 906.842, 926.230), stdev = 13.094
[info]   CI (99.9%): [856.420, 957.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79682.975 ±(99.9%) 28.182 B/op [Average]
[info]   (min, avg, max) = (79672.024, 79682.975, 79688.035), stdev = 7.319
[info]   CI (99.9%): [79654.792, 79711.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   858.689 ±(99.9%) 694.105 MB/sec [Average]
[info]   (min, avg, max) = (656.860, 858.689, 994.175), stdev = 180.257
[info]   CI (99.9%): [164.585, 1552.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75465.434 ±(99.9%) 61221.276 B/op [Average]
[info]   (min, avg, max) = (57986.572, 75465.434, 88338.207), stdev = 15898.971
[info]   CI (99.9%): [14244.158, 136686.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.633 ±(99.9%) 13.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.633, 8.954), stdev = 3.595
[info]   CI (99.9%): [≈ 0, 17.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 47.58% complete, ETA 00:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8613.110 ops/s
[info] # Warmup Iteration   2: 11737.366 ops/s
[info] # Warmup Iteration   3: 11940.400 ops/s
[info] Iteration   1: 11897.370 ops/s
[info]                  ·gc.alloc.rate:                   1226.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175232.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.508 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11906.154 ops/s
[info]                  ·gc.alloc.rate:                   1228.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175613.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.998 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11911.328 ops/s
[info]                  ·gc.alloc.rate:                   1228.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              162256.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132293.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11676.818 ops/s
[info]                  ·gc.alloc.rate:                   1203.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180643.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.611 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11908.273 ops/s
[info]                  ·gc.alloc.rate:                   1227.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133295.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11859.989 ±(99.9%) 394.795 ops/s [Average]
[info]   (min, avg, max) = (11676.818, 11859.989, 11911.328), stdev = 102.527
[info]   CI (99.9%): [11465.194, 12254.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1222.916 ±(99.9%) 40.939 MB/sec [Average]
[info]   (min, avg, max) = (1203.931, 1222.916, 1228.215), stdev = 10.632
[info]   CI (99.9%): [1181.977, 1263.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   162256.206 ±(99.9%) 30.840 B/op [Average]
[info]   (min, avg, max) = (162248.036, 162256.206, 162264.039), stdev = 8.009
[info]   CI (99.9%): [162225.366, 162287.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1200.862 ±(99.9%) 689.153 MB/sec [Average]
[info]   (min, avg, max) = (1001.285, 1200.862, 1340.299), stdev = 178.971
[info]   CI (99.9%): [511.709, 1890.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   159415.520 ±(99.9%) 93948.334 B/op [Average]
[info]   (min, avg, max) = (132293.270, 159415.520, 180643.455), stdev = 24398.084
[info]   CI (99.9%): [65467.185, 253363.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.725 ±(99.9%) 8.750 B/op [Average]
[info]   (min, avg, max) = (5.508, 7.725, 10.998), stdev = 2.272
[info]   CI (99.9%): [≈ 0, 16.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 47.88% complete, ETA 00:36:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7639.885 ops/s
[info] # Warmup Iteration   2: 12762.002 ops/s
[info] # Warmup Iteration   3: 13064.763 ops/s
[info] Iteration   1: 13086.115 ops/s
[info]                  ·gc.alloc.rate:                   1171.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              140928.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157498.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.510 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12999.565 ops/s
[info]                  ·gc.alloc.rate:                   1164.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              140928.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119478.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13058.500 ops/s
[info]                  ·gc.alloc.rate:                   1169.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              140955.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159401.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.527 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13057.633 ops/s
[info]                  ·gc.alloc.rate:                   1169.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              140960.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120192.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13061.973 ops/s
[info]                  ·gc.alloc.rate:                   1169.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              140960.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160998.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13052.757 ±(99.9%) 123.036 ops/s [Average]
[info]   (min, avg, max) = (12999.565, 13052.757, 13086.115), stdev = 31.952
[info]   CI (99.9%): [12929.721, 13175.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1168.992 ±(99.9%) 11.062 MB/sec [Average]
[info]   (min, avg, max) = (1164.141, 1168.992, 1171.826), stdev = 2.873
[info]   CI (99.9%): [1157.930, 1180.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   140946.313 ±(99.9%) 64.660 B/op [Average]
[info]   (min, avg, max) = (140928.033, 140946.313, 140960.036), stdev = 16.792
[info]   CI (99.9%): [140881.654, 141010.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.526 ±(99.9%) 698.617 MB/sec [Average]
[info]   (min, avg, max) = (986.960, 1190.526, 1336.227), stdev = 181.429
[info]   CI (99.9%): [491.909, 1889.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   143514.136 ±(99.9%) 83374.644 B/op [Average]
[info]   (min, avg, max) = (119478.953, 143514.136, 160998.351), stdev = 21652.130
[info]   CI (99.9%): [60139.492, 226888.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.034 ±(99.9%) 8.125 B/op [Average]
[info]   (min, avg, max) = (5.018, 8.034, 10.081), stdev = 2.110
[info]   CI (99.9%): [≈ 0, 16.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 48.18% complete, ETA 00:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161983.328 ops/s
[info] # Warmup Iteration   2: 170513.827 ops/s
[info] # Warmup Iteration   3: 166905.464 ops/s
[info] Iteration   1: 166766.981 ops/s
[info]                  ·gc.alloc.rate:                   964.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9411.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 167023.604 ops/s
[info]                  ·gc.alloc.rate:                   966.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9409.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 167550.787 ops/s
[info]                  ·gc.alloc.rate:                   969.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6263.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 167428.114 ops/s
[info]                  ·gc.alloc.rate:                   968.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9427.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.587 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 167531.399 ops/s
[info]                  ·gc.alloc.rate:                   969.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9446.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   167260.177 ±(99.9%) 1341.421 ops/s [Average]
[info]   (min, avg, max) = (166766.981, 167260.177, 167550.787), stdev = 348.363
[info]   CI (99.9%): [165918.756, 168601.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   967.514 ±(99.9%) 7.775 MB/sec [Average]
[info]   (min, avg, max) = (964.646, 967.514, 969.204), stdev = 2.019
[info]   CI (99.9%): [959.740, 975.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.003, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   934.188 ±(99.9%) 575.719 MB/sec [Average]
[info]   (min, avg, max) = (666.798, 934.188, 1005.525), stdev = 149.512
[info]   CI (99.9%): [358.469, 1509.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8791.496 ±(99.9%) 5442.168 B/op [Average]
[info]   (min, avg, max) = (6263.424, 8791.496, 9446.377), stdev = 1413.314
[info]   CI (99.9%): [3349.328, 14233.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.705 ±(99.9%) 1.146 B/op [Average]
[info]   (min, avg, max) = (0.391, 0.705, 1.177), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 48.48% complete, ETA 00:36:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4685.727 ops/s
[info] # Warmup Iteration   2: 10899.204 ops/s
[info] # Warmup Iteration   3: 11249.200 ops/s
[info] Iteration   1: 11215.324 ops/s
[info]                  ·gc.alloc.rate:                   1439.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183409.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.685 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11083.262 ops/s
[info]                  ·gc.alloc.rate:                   1422.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186823.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.824 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11230.158 ops/s
[info]                  ·gc.alloc.rate:                   1442.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232389.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.503 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 11100.373 ops/s
[info]                  ·gc.alloc.rate:                   1425.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189353.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.854 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11179.896 ops/s
[info]                  ·gc.alloc.rate:                   1435.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188859.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.861 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   11161.803 ±(99.9%) 256.918 ops/s [Average]
[info]   (min, avg, max) = (11083.262, 11161.803, 11230.158), stdev = 66.721
[info]   CI (99.9%): [10904.885, 11418.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1433.010 ±(99.9%) 33.467 MB/sec [Average]
[info]   (min, avg, max) = (1422.807, 1433.010, 1442.285), stdev = 8.691
[info]   CI (99.9%): [1399.543, 1466.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202040.074 ±(99.9%) 0.285 B/op [Average]
[info]   (min, avg, max) = (202040.038, 202040.074, 202040.206), stdev = 0.074
[info]   CI (99.9%): [202039.789, 202040.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1391.736 ±(99.9%) 577.752 MB/sec [Average]
[info]   (min, avg, max) = (1306.900, 1391.736, 1658.937), stdev = 150.040
[info]   CI (99.9%): [813.984, 1969.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   196167.237 ±(99.9%) 78489.084 B/op [Average]
[info]   (min, avg, max) = (183409.656, 196167.237, 232389.384), stdev = 20383.366
[info]   CI (99.9%): [117678.153, 274656.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.145 ±(99.9%) 16.601 B/op [Average]
[info]   (min, avg, max) = (5.861, 11.145, 17.503), stdev = 4.311
[info]   CI (99.9%): [≈ 0, 27.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 48.79% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20738.765 ops/s
[info] # Warmup Iteration   2: 27000.969 ops/s
[info] # Warmup Iteration   3: 27518.740 ops/s
[info] Iteration   1: 27366.261 ops/s
[info]                  ·gc.alloc.rate:                   1202.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              69120.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76009.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.592 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27175.287 ops/s
[info]                  ·gc.alloc.rate:                   1192.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              69072.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57596.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27068.951 ops/s
[info]                  ·gc.alloc.rate:                   1188.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77459.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.631 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27427.197 ops/s
[info]                  ·gc.alloc.rate:                   1203.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57566.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26932.022 ops/s
[info]                  ·gc.alloc.rate:                   1181.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78476.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.866 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27193.943 ±(99.9%) 790.730 ops/s [Average]
[info]   (min, avg, max) = (26932.022, 27193.943, 27427.197), stdev = 205.350
[info]   CI (99.9%): [26403.214, 27984.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1193.720 ±(99.9%) 35.473 MB/sec [Average]
[info]   (min, avg, max) = (1181.936, 1193.720, 1203.447), stdev = 9.212
[info]   CI (99.9%): [1158.247, 1229.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   69072.080 ±(99.9%) 106.723 B/op [Average]
[info]   (min, avg, max) = (69056.016, 69072.080, 69120.022), stdev = 27.716
[info]   CI (99.9%): [68965.357, 69178.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1199.176 ±(99.9%) 704.773 MB/sec [Average]
[info]   (min, avg, max) = (994.535, 1199.176, 1343.179), stdev = 183.027
[info]   CI (99.9%): [494.404, 1903.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69421.707 ±(99.9%) 41757.734 B/op [Average]
[info]   (min, avg, max) = (57566.180, 69421.707, 78476.787), stdev = 10844.351
[info]   CI (99.9%): [27663.973, 111179.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.581 ±(99.9%) 6.086 B/op [Average]
[info]   (min, avg, max) = (3.584, 4.581, 7.233), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 10.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 49.09% complete, ETA 00:35:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57505.159 ops/s
[info] # Warmup Iteration   2: 84332.049 ops/s
[info] # Warmup Iteration   3: 84506.244 ops/s
[info] Iteration   1: 86002.435 ops/s
[info]                  ·gc.alloc.rate:                   1757.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36249.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.286 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 86381.474 ops/s
[info]                  ·gc.alloc.rate:                   1766.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30329.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 87009.604 ops/s
[info]                  ·gc.alloc.rate:                   1778.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30323.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.130 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 87110.415 ops/s
[info]                  ·gc.alloc.rate:                   1781.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30419.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 86400.466 ops/s
[info]                  ·gc.alloc.rate:                   1765.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36962.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.275 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   86580.879 ±(99.9%) 1796.978 ops/s [Average]
[info]   (min, avg, max) = (86002.435, 86580.879, 87110.415), stdev = 466.670
[info]   CI (99.9%): [84783.900, 88377.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1769.885 ±(99.9%) 37.482 MB/sec [Average]
[info]   (min, avg, max) = (1757.618, 1769.885, 1781.236), stdev = 9.734
[info]   CI (99.9%): [1732.404, 1807.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   32168.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32168.005, 32168.005, 32168.005), stdev = 0.001
[info]   CI (99.9%): [32168.004, 32168.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1807.186 ±(99.9%) 698.566 MB/sec [Average]
[info]   (min, avg, max) = (1665.363, 1807.186, 2029.142), stdev = 181.415
[info]   CI (99.9%): [1108.620, 2505.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32857.016 ±(99.9%) 13214.870 B/op [Average]
[info]   (min, avg, max) = (30323.740, 32857.016, 36962.453), stdev = 3431.860
[info]   CI (99.9%): [19642.146, 46071.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.668 ±(99.9%) 3.378 B/op [Average]
[info]   (min, avg, max) = (0.376, 1.668, 2.286), stdev = 0.877
[info]   CI (99.9%): [≈ 0, 5.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 49.39% complete, ETA 00:35:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 615118.625 ops/s
[info] # Warmup Iteration   2: 669066.675 ops/s
[info] # Warmup Iteration   3: 666133.153 ops/s
[info] Iteration   1: 666610.194 ops/s
[info]                  ·gc.alloc.rate:                   914.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2348.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 661141.831 ops/s
[info]                  ·gc.alloc.rate:                   907.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2370.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 683082.051 ops/s
[info]                  ·gc.alloc.rate:               937.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1532.575 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 667395.457 ops/s
[info]                  ·gc.alloc.rate:                   915.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2357.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 676499.904 ops/s
[info]                  ·gc.alloc.rate:                   928.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2333.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   670945.887 ±(99.9%) 33660.492 ops/s [Average]
[info]   (min, avg, max) = (661141.831, 670945.887, 683082.051), stdev = 8741.523
[info]   CI (99.9%): [637285.395, 704606.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   920.973 ±(99.9%) 45.976 MB/sec [Average]
[info]   (min, avg, max) = (907.764, 920.973, 937.457), stdev = 11.940
[info]   CI (99.9%): [874.997, 966.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   931.846 ±(99.9%) 574.235 MB/sec [Average]
[info]   (min, avg, max) = (665.150, 931.846, 1003.596), stdev = 149.127
[info]   CI (99.9%): [357.611, 1506.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2188.520 ±(99.9%) 1412.919 B/op [Average]
[info]   (min, avg, max) = (1532.575, 2188.520, 2370.805), stdev = 366.931
[info]   CI (99.9%): [775.601, 3601.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.167 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.297), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 49.70% complete, ETA 00:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 696097.673 ops/s
[info] # Warmup Iteration   2: 757232.363 ops/s
[info] # Warmup Iteration   3: 762335.189 ops/s
[info] Iteration   1: 762025.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 761967.321 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 761977.193 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 762065.794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 759999.811 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   761607.113 ±(99.9%) 3463.183 ops/s [Average]
[info]   (min, avg, max) = (759999.811, 761607.113, 762065.794), stdev = 899.378
[info]   CI (99.9%): [758143.930, 765070.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 50.00% complete, ETA 00:35:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42668.117 ops/s
[info] # Warmup Iteration   2: 79675.383 ops/s
[info] # Warmup Iteration   3: 78221.799 ops/s
[info] Iteration   1: 78524.544 ops/s
[info]                  ·gc.alloc.rate:                   1742.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32943.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.086 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 79240.050 ops/s
[info]                  ·gc.alloc.rate:                   1757.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32945.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.481 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 79736.535 ops/s
[info]                  ·gc.alloc.rate:                   1768.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39602.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.822 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 78451.906 ops/s
[info]                  ·gc.alloc.rate:                   1740.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33757.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.088 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 80162.093 ops/s
[info]                  ·gc.alloc.rate:                   1778.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33153.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.270 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   79223.025 ±(99.9%) 2874.043 ops/s [Average]
[info]   (min, avg, max) = (78451.906, 79223.025, 80162.093), stdev = 746.380
[info]   CI (99.9%): [76348.982, 82097.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1757.504 ±(99.9%) 63.279 MB/sec [Average]
[info]   (min, avg, max) = (1740.489, 1757.504, 1778.260), stdev = 16.433
[info]   CI (99.9%): [1694.225, 1820.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34912.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (34912.005, 34912.006, 34912.006), stdev = 0.001
[info]   CI (99.9%): [34912.005, 34912.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1736.164 ±(99.9%) 585.860 MB/sec [Average]
[info]   (min, avg, max) = (1644.005, 1736.164, 2006.398), stdev = 152.146
[info]   CI (99.9%): [1150.304, 2322.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34480.654 ±(99.9%) 11099.796 B/op [Average]
[info]   (min, avg, max) = (32943.649, 34480.654, 39602.645), stdev = 2882.582
[info]   CI (99.9%): [23380.857, 45580.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.149 ±(99.9%) 3.409 B/op [Average]
[info]   (min, avg, max) = (0.822, 2.149, 3.270), stdev = 0.885
[info]   CI (99.9%): [≈ 0, 5.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 50.30% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5627.892 ops/s
[info] # Warmup Iteration   2: 17059.777 ops/s
[info] # Warmup Iteration   3: 17439.585 ops/s
[info] Iteration   1: 17541.328 ops/s
[info]                  ·gc.alloc.rate:                   871.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89114.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18143.122 ops/s
[info]                  ·gc.alloc.rate:                   901.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57435.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18029.487 ops/s
[info]                  ·gc.alloc.rate:                   895.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86843.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.268 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17974.442 ops/s
[info]                  ·gc.alloc.rate:                   892.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87342.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.936 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 18177.197 ops/s
[info]                  ·gc.alloc.rate:                   903.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57731.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   17973.115 ±(99.9%) 982.048 ops/s [Average]
[info]   (min, avg, max) = (17541.328, 17973.115, 18177.197), stdev = 255.035
[info]   CI (99.9%): [16991.067, 18955.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   892.990 ±(99.9%) 48.844 MB/sec [Average]
[info]   (min, avg, max) = (871.511, 892.990, 903.028), stdev = 12.685
[info]   CI (99.9%): [844.146, 941.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78184.026 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (78184.024, 78184.026, 78184.033), stdev = 0.004
[info]   CI (99.9%): [78184.011, 78184.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   863.031 ±(99.9%) 697.764 MB/sec [Average]
[info]   (min, avg, max) = (662.281, 863.031, 997.563), stdev = 181.207
[info]   CI (99.9%): [165.267, 1560.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   75693.624 ±(99.9%) 63742.782 B/op [Average]
[info]   (min, avg, max) = (57435.639, 75693.624, 89114.616), stdev = 16553.798
[info]   CI (99.9%): [11950.842, 139436.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.110 ±(99.9%) 15.203 B/op [Average]
[info]   (min, avg, max) = (1.802, 5.110, 10.936), stdev = 3.948
[info]   CI (99.9%): [≈ 0, 20.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 50.61% complete, ETA 00:34:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4549.789 ops/s
[info] # Warmup Iteration   2: 17912.712 ops/s
[info] # Warmup Iteration   3: 18328.070 ops/s
[info] Iteration   1: 18369.934 ops/s
[info]                  ·gc.alloc.rate:                   733.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55987.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18065.610 ops/s
[info]                  ·gc.alloc.rate:               721.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          62828.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56990.349 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 18650.334 ops/s
[info]                  ·gc.alloc.rate:                   744.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              62832.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82856.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.540 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18595.748 ops/s
[info]                  ·gc.alloc.rate:               742.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          62826.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55560.603 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 18606.331 ops/s
[info]                  ·gc.alloc.rate:                   742.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55668.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18457.591 ±(99.9%) 942.608 ops/s [Average]
[info]   (min, avg, max) = (18065.610, 18457.591, 18650.334), stdev = 244.792
[info]   CI (99.9%): [17514.983, 19400.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   736.831 ±(99.9%) 37.095 MB/sec [Average]
[info]   (min, avg, max) = (721.456, 736.831, 744.615), stdev = 9.634
[info]   CI (99.9%): [699.736, 773.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   62817.275 ±(99.9%) 61.196 B/op [Average]
[info]   (min, avg, max) = (62800.025, 62817.275, 62832.023), stdev = 15.892
[info]   CI (99.9%): [62756.079, 62878.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   720.943 ±(99.9%) 561.812 MB/sec [Average]
[info]   (min, avg, max) = (653.755, 720.943, 981.920), stdev = 145.901
[info]   CI (99.9%): [159.131, 1282.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61412.613 ±(99.9%) 46210.199 B/op [Average]
[info]   (min, avg, max) = (55560.603, 61412.613, 82856.279), stdev = 12000.642
[info]   CI (99.9%): [15202.414, 107622.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.471 ±(99.9%) 3.658 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.168), stdev = 0.950
[info]   CI (99.9%): [≈ 0, 4.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.299 ±(99.9%) 313.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.299, 185.675), stdev = 81.385
[info]   CI (99.9%): [≈ 0, 353.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 50.91% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168458.151 ops/s
[info] # Warmup Iteration   2: 177512.115 ops/s
[info] # Warmup Iteration   3: 171759.891 ops/s
[info] Iteration   1: 177087.880 ops/s
[info]                  ·gc.alloc.rate:               460.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2273.310 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 172233.962 ops/s
[info]                  ·gc.alloc.rate:                   448.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6081.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 172617.839 ops/s
[info]                  ·gc.alloc.rate:                   449.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3030.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 177577.461 ops/s
[info]                  ·gc.alloc.rate:                   462.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5892.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 178300.027 ops/s
[info]                  ·gc.alloc.rate:               464.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2934.058 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   175563.434 ±(99.9%) 11165.389 ops/s [Average]
[info]   (min, avg, max) = (172233.962, 175563.434, 178300.027), stdev = 2899.616
[info]   CI (99.9%): [164398.044, 186728.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   456.903 ±(99.9%) 29.068 MB/sec [Average]
[info]   (min, avg, max) = (448.230, 456.903, 464.038), stdev = 7.549
[info]   CI (99.9%): [427.834, 485.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.170 ±(99.9%) 765.162 MB/sec [Average]
[info]   (min, avg, max) = (255.783, 450.170, 665.463), stdev = 198.710
[info]   CI (99.9%): [≈ 0, 1215.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4042.279 ±(99.9%) 6931.097 B/op [Average]
[info]   (min, avg, max) = (2273.310, 4042.279, 6081.119), stdev = 1799.984
[info]   CI (99.9%): [≈ 0, 10973.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.333 ±(99.9%) 2.647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.561), stdev = 0.687
[info]   CI (99.9%): [≈ 0, 2.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.039 ±(99.9%) 24.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.039, 14.267), stdev = 6.284
[info]   CI (99.9%): [≈ 0, 27.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 51.21% complete, ETA 00:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3051.032 ops/s
[info] # Warmup Iteration   2: 15175.542 ops/s
[info] # Warmup Iteration   3: 15966.628 ops/s
[info] Iteration   1: 15888.506 ops/s
[info]                  ·gc.alloc.rate:                   1193.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129933.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.373 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16076.958 ops/s
[info]                  ·gc.alloc.rate:                   1206.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              118140.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96647.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16083.851 ops/s
[info]                  ·gc.alloc.rate:                   1207.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129450.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.148 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15748.427 ops/s
[info]                  ·gc.alloc.rate:                   1182.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99651.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15384.928 ops/s
[info]                  ·gc.alloc.rate:                   1154.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              118148.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136668.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.518 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15836.534 ±(99.9%) 1111.665 ops/s [Average]
[info]   (min, avg, max) = (15384.928, 15836.534, 16083.851), stdev = 288.696
[info]   CI (99.9%): [14724.869, 16948.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1188.977 ±(99.9%) 83.730 MB/sec [Average]
[info]   (min, avg, max) = (1154.943, 1188.977, 1207.635), stdev = 21.744
[info]   CI (99.9%): [1105.247, 1272.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118145.775 ±(99.9%) 27.485 B/op [Average]
[info]   (min, avg, max) = (118136.027, 118145.775, 118152.029), stdev = 7.138
[info]   CI (99.9%): [118118.291, 118173.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1191.175 ±(99.9%) 700.156 MB/sec [Average]
[info]   (min, avg, max) = (987.350, 1191.175, 1335.989), stdev = 181.828
[info]   CI (99.9%): [491.019, 1891.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   118470.401 ±(99.9%) 72386.243 B/op [Average]
[info]   (min, avg, max) = (96647.157, 118470.401, 136668.562), stdev = 18798.478
[info]   CI (99.9%): [46084.157, 190856.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.669 ±(99.9%) 16.119 B/op [Average]
[info]   (min, avg, max) = (2.080, 8.669, 12.373), stdev = 4.186
[info]   CI (99.9%): [≈ 0, 24.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 51.52% complete, ETA 00:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67118.525 ops/s
[info] # Warmup Iteration   2: 81915.741 ops/s
[info] # Warmup Iteration   3: 87381.770 ops/s
[info] Iteration   1: 87112.789 ops/s
[info]                  ·gc.alloc.rate:                   1551.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              28024.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29985.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.504 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 88651.573 ops/s
[info]                  ·gc.alloc.rate:                   1578.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              28024.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29631.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.848 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 87187.801 ops/s
[info]                  ·gc.alloc.rate:                   1552.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              28024.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24217.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.127 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 87855.614 ops/s
[info]                  ·gc.alloc.rate:                   1564.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              28024.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30172.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.237 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 87100.388 ops/s
[info]                  ·gc.alloc.rate:                   1550.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              28024.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24415.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.505 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   87581.633 ±(99.9%) 2601.930 ops/s [Average]
[info]   (min, avg, max) = (87100.388, 87581.633, 88651.573), stdev = 675.713
[info]   CI (99.9%): [84979.703, 90183.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1559.455 ±(99.9%) 46.226 MB/sec [Average]
[info]   (min, avg, max) = (1550.926, 1559.455, 1578.459), stdev = 12.005
[info]   CI (99.9%): [1513.229, 1605.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28024.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28024.005, 28024.005, 28024.005), stdev = 0.001
[info]   CI (99.9%): [28024.004, 28024.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1541.171 ±(99.9%) 685.569 MB/sec [Average]
[info]   (min, avg, max) = (1341.580, 1541.171, 1684.292), stdev = 178.040
[info]   CI (99.9%): [855.602, 2226.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27684.887 ±(99.9%) 11865.573 B/op [Average]
[info]   (min, avg, max) = (24217.980, 27684.887, 30172.917), stdev = 3081.452
[info]   CI (99.9%): [15819.314, 39550.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.644 ±(99.9%) 1.610 B/op [Average]
[info]   (min, avg, max) = (1.127, 1.644, 2.237), stdev = 0.418
[info]   CI (99.9%): [0.034, 3.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 51.82% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87367.534 ops/s
[info] # Warmup Iteration   2: 126420.610 ops/s
[info] # Warmup Iteration   3: 127244.019 ops/s
[info] Iteration   1: 121874.101 ops/s
[info]                  ·gc.alloc.rate:                   1287.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16955.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.806 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 126172.869 ops/s
[info]                  ·gc.alloc.rate:                   1332.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16477.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.818 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 125710.619 ops/s
[info]                  ·gc.alloc.rate:                   1327.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16638.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 124471.102 ops/s
[info]                  ·gc.alloc.rate:                   1314.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16904.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 123081.137 ops/s
[info]                  ·gc.alloc.rate:                   1300.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17171.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   124261.965 ±(99.9%) 6912.452 ops/s [Average]
[info]   (min, avg, max) = (121874.101, 124261.965, 126172.869), stdev = 1795.142
[info]   CI (99.9%): [117349.513, 131174.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1312.624 ±(99.9%) 72.930 MB/sec [Average]
[info]   (min, avg, max) = (1287.215, 1312.624, 1332.683), stdev = 18.940
[info]   CI (99.9%): [1239.694, 1385.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16624.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16624.003, 16624.004, 16624.004), stdev = 0.001
[info]   CI (99.9%): [16624.003, 16624.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1328.639 ±(99.9%) 46.920 MB/sec [Average]
[info]   (min, avg, max) = (1312.875, 1328.639, 1343.249), stdev = 12.185
[info]   CI (99.9%): [1281.719, 1375.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16829.447 ±(99.9%) 1053.077 B/op [Average]
[info]   (min, avg, max) = (16477.480, 16829.447, 17171.897), stdev = 273.481
[info]   CI (99.9%): [15776.370, 17882.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.893 ±(99.9%) 2.055 B/op [Average]
[info]   (min, avg, max) = (0.526, 0.893, 1.818), stdev = 0.534
[info]   CI (99.9%): [≈ 0, 2.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 52.12% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 415166.185 ops/s
[info] # Warmup Iteration   2: 455170.194 ops/s
[info] # Warmup Iteration   3: 450516.123 ops/s
[info] Iteration   1: 467981.898 ops/s
[info]                  ·gc.alloc.rate:                   518.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1975.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 470010.898 ops/s
[info]                  ·gc.alloc.rate:                   520.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2221.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 450140.466 ops/s
[info]                  ·gc.alloc.rate:               498.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1159.909 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 469882.014 ops/s
[info]                  ·gc.alloc.rate:                   520.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2222.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 470301.445 ops/s
[info]                  ·gc.alloc.rate:               521.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1110.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   465663.344 ±(99.9%) 33599.258 ops/s [Average]
[info]   (min, avg, max) = (450140.466, 465663.344, 470301.445), stdev = 8725.621
[info]   CI (99.9%): [432064.086, 499262.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   516.054 ±(99.9%) 37.372 MB/sec [Average]
[info]   (min, avg, max) = (498.800, 516.054, 521.360), stdev = 9.705
[info]   CI (99.9%): [478.683, 553.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.631 ±(99.9%) 657.137 MB/sec [Average]
[info]   (min, avg, max) = (331.745, 515.631, 663.579), stdev = 170.656
[info]   CI (99.9%): [≈ 0, 1172.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1737.993 ±(99.9%) 2155.657 B/op [Average]
[info]   (min, avg, max) = (1110.111, 1737.993, 2222.320), stdev = 559.817
[info]   CI (99.9%): [≈ 0, 3893.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.772), stdev = 0.775
[info]   CI (99.9%): [≈ 0, 3.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.303 ±(99.9%) 10.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.303, 5.958), stdev = 2.606
[info]   CI (99.9%): [≈ 0, 11.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 52.42% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462344.150 ops/s
[info] # Warmup Iteration   2: 512514.990 ops/s
[info] # Warmup Iteration   3: 531053.706 ops/s
[info] Iteration   1: 531168.545 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 530802.135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 530781.996 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 531157.484 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 513481.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   527478.259 ±(99.9%) 30138.348 ops/s [Average]
[info]   (min, avg, max) = (513481.133, 527478.259, 531168.545), stdev = 7826.833
[info]   CI (99.9%): [497339.910, 557616.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 52.73% complete, ETA 00:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89576.133 ops/s
[info] # Warmup Iteration   2: 116473.792 ops/s
[info] # Warmup Iteration   3: 119521.886 ops/s
[info] Iteration   1: 117367.505 ops/s
[info]                  ·gc.alloc.rate:               1449.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1651.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22140.495 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 120746.981 ops/s
[info]                  ·gc.alloc.rate:                   1490.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17322.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.357 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 121501.709 ops/s
[info]                  ·gc.alloc.rate:                   1500.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21641.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.618 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 121839.896 ops/s
[info]                  ·gc.alloc.rate:                   1504.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17346.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.538 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 121379.426 ops/s
[info]                  ·gc.alloc.rate:                   1499.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21860.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.810 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   120567.103 ±(99.9%) 7053.919 ops/s [Average]
[info]   (min, avg, max) = (117367.505, 120567.103, 121839.896), stdev = 1831.880
[info]   CI (99.9%): [113513.184, 127621.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1488.733 ±(99.9%) 87.260 MB/sec [Average]
[info]   (min, avg, max) = (1449.178, 1488.733, 1504.524), stdev = 22.661
[info]   CI (99.9%): [1401.473, 1575.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19432.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19432.004, 19432.004, 19432.004), stdev = 0.001
[info]   CI (99.9%): [19432.003, 19432.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1536.069 ±(99.9%) 705.086 MB/sec [Average]
[info]   (min, avg, max) = (1328.975, 1536.069, 1686.397), stdev = 183.109
[info]   CI (99.9%): [830.983, 2241.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20062.532 ±(99.9%) 9612.985 B/op [Average]
[info]   (min, avg, max) = (17322.578, 20062.532, 22140.495), stdev = 2496.462
[info]   CI (99.9%): [10449.547, 29675.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.864 ±(99.9%) 2.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.864, 1.618), stdev = 0.646
[info]   CI (99.9%): [≈ 0, 3.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 53.03% complete, ETA 00:32:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122217.615 ops/s
[info] # Warmup Iteration   2: 146102.138 ops/s
[info] # Warmup Iteration   3: 150409.347 ops/s
[info] Iteration   1: 150174.204 ops/s
[info]                  ·gc.alloc.rate:                   2590.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2353.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24650.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.309 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 147584.611 ops/s
[info]                  ·gc.alloc.rate:                   2545.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28819.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.776 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 149178.167 ops/s
[info]                  ·gc.alloc.rate:                   2572.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28625.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.318 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 150563.850 ops/s
[info]                  ·gc.alloc.rate:                   2595.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24859.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.088 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 148620.359 ops/s
[info]                  ·gc.alloc.rate:                   2562.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28832.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.882 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   149224.238 ±(99.9%) 4617.628 ops/s [Average]
[info]   (min, avg, max) = (147584.611, 149224.238, 150563.850), stdev = 1199.183
[info]   CI (99.9%): [144606.610, 153841.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2573.345 ±(99.9%) 78.821 MB/sec [Average]
[info]   (min, avg, max) = (2545.793, 2573.345, 2595.922), stdev = 20.469
[info]   CI (99.9%): [2494.525, 2652.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27136.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27136.003, 27136.003, 27136.003), stdev = 0.001
[info]   CI (99.9%): [27136.003, 27136.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2574.218 ±(99.9%) 734.455 MB/sec [Average]
[info]   (min, avg, max) = (2353.136, 2574.218, 2722.759), stdev = 190.736
[info]   CI (99.9%): [1839.763, 3308.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27157.658 ±(99.9%) 8455.867 B/op [Average]
[info]   (min, avg, max) = (24650.940, 27157.658, 28832.383), stdev = 2195.962
[info]   CI (99.9%): [18701.791, 35613.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.031
[info]   CI (99.9%): [0.002, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.275 ±(99.9%) 1.282 B/op [Average]
[info]   (min, avg, max) = (0.882, 1.275, 1.776), stdev = 0.333
[info]   CI (99.9%): [≈ 0, 2.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 53.33% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245570.788 ops/s
[info] # Warmup Iteration   2: 351406.614 ops/s
[info] # Warmup Iteration   3: 358363.520 ops/s
[info] Iteration   1: 359916.754 ops/s
[info]                  ·gc.alloc.rate:               367.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1118.577 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 360578.869 ops/s
[info]                  ·gc.alloc.rate:               368.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1116.505 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 357675.376 ops/s
[info]                  ·gc.alloc.rate:                   365.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1437.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.694 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 360591.793 ops/s
[info]                  ·gc.alloc.rate:                   368.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2850.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 360822.214 ops/s
[info]                  ·gc.alloc.rate:               368.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1423.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   359917.001 ±(99.9%) 4997.576 ops/s [Average]
[info]   (min, avg, max) = (357675.376, 359917.001, 360822.214), stdev = 1297.855
[info]   CI (99.9%): [354919.425, 364914.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   367.730 ±(99.9%) 5.048 MB/sec [Average]
[info]   (min, avg, max) = (365.469, 367.730, 368.654), stdev = 1.311
[info]   CI (99.9%): [362.683, 372.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.590 ±(99.9%) 638.049 MB/sec [Average]
[info]   (min, avg, max) = (255.798, 363.590, 653.158), stdev = 165.699
[info]   CI (99.9%): [≈ 0, 1001.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1589.499 ±(99.9%) 2781.458 B/op [Average]
[info]   (min, avg, max) = (1116.505, 1589.499, 2850.885), stdev = 722.336
[info]   CI (99.9%): [≈ 0, 4370.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.457 ±(99.9%) 3.761 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 2.203), stdev = 0.977
[info]   CI (99.9%): [≈ 0, 4.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.011 ±(99.9%) 16.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.011, 9.694), stdev = 4.297
[info]   CI (99.9%): [≈ 0, 18.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 53.64% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 831162.058 ops/s
[info] # Warmup Iteration   2: 850552.280 ops/s
[info] # Warmup Iteration   3: 863529.441 ops/s
[info] Iteration   1: 878544.634 ops/s
[info]                  ·gc.alloc.rate:               303.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 458.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 865444.705 ops/s
[info]                  ·gc.alloc.rate:               299.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 465.200 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 880606.548 ops/s
[info]                  ·gc.alloc.rate:                   304.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 882641.071 ops/s
[info]                  ·gc.alloc.rate:                   305.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     593.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.899 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 866505.235 ops/s
[info]                  ·gc.alloc.rate:                   299.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     604.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   874748.439 ±(99.9%) 31373.418 ops/s [Average]
[info]   (min, avg, max) = (865444.705, 874748.439, 882641.071), stdev = 8147.577
[info]   CI (99.9%): [843375.020, 906121.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   302.417 ±(99.9%) 10.812 MB/sec [Average]
[info]   (min, avg, max) = (299.221, 302.417, 305.128), stdev = 2.808
[info]   CI (99.9%): [291.604, 313.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.636 ±(99.9%) 162.270 MB/sec [Average]
[info]   (min, avg, max) = (255.791, 286.636, 332.808), stdev = 42.141
[info]   CI (99.9%): [124.366, 448.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   515.662 ±(99.9%) 292.984 B/op [Average]
[info]   (min, avg, max) = (457.180, 515.662, 604.348), stdev = 76.087
[info]   CI (99.9%): [222.678, 808.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.338 ±(99.9%) 2.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 1.626), stdev = 0.720
[info]   CI (99.9%): [≈ 0, 3.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.602 ±(99.9%) 4.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.602, 2.899), stdev = 1.284
[info]   CI (99.9%): [≈ 0, 5.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 53.94% complete, ETA 00:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44859.507 ops/s
[info] # Warmup Iteration   2: 75492.187 ops/s
[info] # Warmup Iteration   3: 75397.285 ops/s
[info] Iteration   1: 76623.800 ops/s
[info]                  ·gc.alloc.rate:                   3286.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3025.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62153.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.138 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 75840.973 ops/s
[info]                  ·gc.alloc.rate:                   3253.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70253.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.480 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 75643.284 ops/s
[info]                  ·gc.alloc.rate:                   3244.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63605.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.733 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 75461.265 ops/s
[info]                  ·gc.alloc.rate:                   3237.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70953.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.473 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 75351.011 ops/s
[info]                  ·gc.alloc.rate:                   3232.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63988.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.218 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   75784.067 ±(99.9%) 1944.431 ops/s [Average]
[info]   (min, avg, max) = (75351.011, 75784.067, 76623.800), stdev = 504.962
[info]   CI (99.9%): [73839.636, 77728.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3250.868 ±(99.9%) 82.743 MB/sec [Average]
[info]   (min, avg, max) = (3232.537, 3250.868, 3286.666), stdev = 21.488
[info]   CI (99.9%): [3168.124, 3333.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67512.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67512.006, 67512.006, 67512.006), stdev = 0.001
[info]   CI (99.9%): [67512.005, 67512.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3186.823 ±(99.9%) 729.955 MB/sec [Average]
[info]   (min, avg, max) = (3025.814, 3186.823, 3402.262), stdev = 189.567
[info]   CI (99.9%): [2456.868, 3916.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66190.798 ±(99.9%) 15762.248 B/op [Average]
[info]   (min, avg, max) = (62153.800, 66190.798, 70953.555), stdev = 4093.406
[info]   CI (99.9%): [50428.550, 81953.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.183 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.183, 0.312), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.808 ±(99.9%) 7.782 B/op [Average]
[info]   (min, avg, max) = (1.733, 3.808, 6.480), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 11.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 10.000), stdev = 1.095
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 54.24% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189821.555 ops/s
[info] # Warmup Iteration   2: 235250.009 ops/s
[info] # Warmup Iteration   3: 239726.495 ops/s
[info] Iteration   1: 238989.128 ops/s
[info]                  ·gc.alloc.rate:                   1830.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13151.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.960 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 237240.286 ops/s
[info]                  ·gc.alloc.rate:                   1817.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11109.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.967 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 235770.782 ops/s
[info]                  ·gc.alloc.rate:                   1805.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13485.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.834 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 239353.711 ops/s
[info]                  ·gc.alloc.rate:                   1833.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11110.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 235795.685 ops/s
[info]                  ·gc.alloc.rate:                   1806.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13556.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.694 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   237429.918 ±(99.9%) 6555.015 ops/s [Average]
[info]   (min, avg, max) = (235770.782, 237429.918, 239353.711), stdev = 1702.317
[info]   CI (99.9%): [230874.903, 243984.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1818.910 ±(99.9%) 49.601 MB/sec [Average]
[info]   (min, avg, max) = (1805.995, 1818.910, 1833.485), stdev = 12.881
[info]   CI (99.9%): [1769.309, 1868.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12056.002, 12056.002, 12056.002), stdev = 0.001
[info]   CI (99.9%): [12056.002, 12056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1882.681 ±(99.9%) 706.076 MB/sec [Average]
[info]   (min, avg, max) = (1675.059, 1882.681, 2031.634), stdev = 183.366
[info]   CI (99.9%): [1176.605, 2588.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12482.702 ±(99.9%) 4860.623 B/op [Average]
[info]   (min, avg, max) = (11109.884, 12482.702, 13556.320), stdev = 1262.288
[info]   CI (99.9%): [7622.078, 17343.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.746 ±(99.9%) 1.102 B/op [Average]
[info]   (min, avg, max) = (0.274, 0.746, 0.967), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 54.55% complete, ETA 00:31:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 867928.291 ops/s
[info] # Warmup Iteration   2: 1186939.692 ops/s
[info] # Warmup Iteration   3: 1237700.617 ops/s
[info] Iteration   1: 1245078.811 ops/s
[info]                  ·gc.alloc.rate:                   816.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     826.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1242020.239 ops/s
[info]                  ·gc.alloc.rate:                   814.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1244.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1242891.199 ops/s
[info]                  ·gc.alloc.rate:                   814.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1232290.330 ops/s
[info]                  ·gc.alloc.rate:                   808.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1262.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1207134.339 ops/s
[info]                  ·gc.alloc.rate:                   791.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     862.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1233882.984 ±(99.9%) 60601.353 ops/s [Average]
[info]   (min, avg, max) = (1207134.339, 1233882.984, 1245078.811), stdev = 15737.979
[info]   CI (99.9%): [1173281.630, 1294484.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   809.184 ±(99.9%) 39.299 MB/sec [Average]
[info]   (min, avg, max) = (791.772, 809.184, 816.382), stdev = 10.206
[info]   CI (99.9%): [769.885, 848.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.583 ±(99.9%) 691.638 MB/sec [Average]
[info]   (min, avg, max) = (654.116, 788.583, 988.698), stdev = 179.616
[info]   CI (99.9%): [96.945, 1480.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1005.422 ±(99.9%) 873.023 B/op [Average]
[info]   (min, avg, max) = (826.878, 1005.422, 1262.217), stdev = 226.721
[info]   CI (99.9%): [132.399, 1878.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.085, 0.106), stdev = 0.012
[info]   CI (99.9%): [0.041, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 54.85% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1203722.533 ops/s
[info] # Warmup Iteration   2: 1322634.888 ops/s
[info] # Warmup Iteration   3: 1330426.554 ops/s
[info] Iteration   1: 1298203.094 ops/s
[info]                  ·gc.alloc.rate:                   534.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1336178.334 ops/s
[info]                  ·gc.alloc.rate:                   550.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1336448.812 ops/s
[info]                  ·gc.alloc.rate:                   550.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1337892.739 ops/s
[info]                  ·gc.alloc.rate:               551.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 390.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1329236.356 ops/s
[info]                  ·gc.alloc.rate:                   547.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     785.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1327591.867 ±(99.9%) 64568.226 ops/s [Average]
[info]   (min, avg, max) = (1298203.094, 1327591.867, 1337892.739), stdev = 16768.163
[info]   CI (99.9%): [1263023.641, 1392160.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   546.657 ±(99.9%) 26.818 MB/sec [Average]
[info]   (min, avg, max) = (534.453, 546.657, 551.019), stdev = 6.965
[info]   CI (99.9%): [519.839, 573.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.837 ±(99.9%) 699.713 MB/sec [Average]
[info]   (min, avg, max) = (331.714, 530.837, 663.592), stdev = 181.713
[info]   CI (99.9%): [≈ 0, 1230.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   628.177 ±(99.9%) 815.549 B/op [Average]
[info]   (min, avg, max) = (390.253, 628.177, 785.588), stdev = 211.795
[info]   CI (99.9%): [≈ 0, 1443.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.730), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.469 ±(99.9%) 3.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.469, 2.097), stdev = 0.911
[info]   CI (99.9%): [≈ 0, 3.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.15% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1240611.602 ops/s
[info] # Warmup Iteration   2: 1357698.579 ops/s
[info] # Warmup Iteration   3: 1355660.214 ops/s
[info] Iteration   1: 1361678.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1361266.189 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1358071.601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1361861.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1382516.461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1365078.899 ±(99.9%) 38003.553 ops/s [Average]
[info]   (min, avg, max) = (1358071.601, 1365078.899, 1382516.461), stdev = 9869.402
[info]   CI (99.9%): [1327075.346, 1403082.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 55.45% complete, ETA 00:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23349.325 ops/s
[info] # Warmup Iteration   2: 33824.188 ops/s
[info] # Warmup Iteration   3: 33744.669 ops/s
[info] Iteration   1: 33686.096 ops/s
[info]                  ·gc.alloc.rate:                   1704.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              79641.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77323.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.863 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34013.612 ops/s
[info]                  ·gc.alloc.rate:                   1721.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77119.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.853 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34350.658 ops/s
[info]                  ·gc.alloc.rate:                   1738.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92200.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.723 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34341.745 ops/s
[info]                  ·gc.alloc.rate:                   1738.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77238.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.678 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34192.682 ops/s
[info]                  ·gc.alloc.rate:                   1730.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77830.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.916 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   34116.959 ±(99.9%) 1067.125 ops/s [Average]
[info]   (min, avg, max) = (33686.096, 34116.959, 34350.658), stdev = 277.129
[info]   CI (99.9%): [33049.834, 35184.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1726.630 ±(99.9%) 54.596 MB/sec [Average]
[info]   (min, avg, max) = (1704.555, 1726.630, 1738.822), stdev = 14.179
[info]   CI (99.9%): [1672.034, 1781.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79633.881 ±(99.9%) 16.087 B/op [Average]
[info]   (min, avg, max) = (79632.013, 79633.881, 79641.354), stdev = 4.178
[info]   CI (99.9%): [79617.794, 79649.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.459 ±(99.9%) 585.590 MB/sec [Average]
[info]   (min, avg, max) = (1654.948, 1742.459, 2013.274), stdev = 152.076
[info]   CI (99.9%): [1156.869, 2328.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80342.627 ±(99.9%) 25547.287 B/op [Average]
[info]   (min, avg, max) = (77119.761, 80342.627, 92200.952), stdev = 6634.549
[info]   CI (99.9%): [54795.341, 105889.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.607 ±(99.9%) 7.050 B/op [Average]
[info]   (min, avg, max) = (1.916, 4.607, 6.678), stdev = 1.831
[info]   CI (99.9%): [≈ 0, 11.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 55.76% complete, ETA 00:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14894.257 ops/s
[info] # Warmup Iteration   2: 18400.311 ops/s
[info] # Warmup Iteration   3: 18431.089 ops/s
[info] Iteration   1: 18392.757 ops/s
[info]                  ·gc.alloc.rate:                   1930.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              165167.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171428.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.688 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18422.269 ops/s
[info]                  ·gc.alloc.rate:                   1933.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172230.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.448 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 18420.461 ops/s
[info]                  ·gc.alloc.rate:                   1933.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173017.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.671 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17971.742 ops/s
[info]                  ·gc.alloc.rate:                   1886.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              165175.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148200.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.823 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18028.856 ops/s
[info]                  ·gc.alloc.rate:                   1892.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177708.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.720 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   18247.217 ±(99.9%) 872.590 ops/s [Average]
[info]   (min, avg, max) = (17971.742, 18247.217, 18422.269), stdev = 226.609
[info]   CI (99.9%): [17374.627, 19119.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1915.272 ±(99.9%) 92.463 MB/sec [Average]
[info]   (min, avg, max) = (1886.043, 1915.272, 1933.922), stdev = 24.012
[info]   CI (99.9%): [1822.808, 2007.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165174.176 ±(99.9%) 14.112 B/op [Average]
[info]   (min, avg, max) = (165167.656, 165174.176, 165176.032), stdev = 3.665
[info]   CI (99.9%): [165160.063, 165188.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1954.733 ±(99.9%) 566.830 MB/sec [Average]
[info]   (min, avg, max) = (1692.222, 1954.733, 2035.730), stdev = 147.204
[info]   CI (99.9%): [1387.903, 2521.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   168517.084 ±(99.9%) 44730.546 B/op [Average]
[info]   (min, avg, max) = (148200.686, 168517.084, 177708.976), stdev = 11616.381
[info]   CI (99.9%): [123786.538, 213247.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.112, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.670 ±(99.9%) 17.289 B/op [Average]
[info]   (min, avg, max) = (1.823, 9.670, 12.720), stdev = 4.490
[info]   CI (99.9%): [≈ 0, 26.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 56.06% complete, ETA 00:30:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67322.460 ops/s
[info] # Warmup Iteration   2: 97782.600 ops/s
[info] # Warmup Iteration   3: 101599.919 ops/s
[info] Iteration   1: 100295.623 ops/s
[info]                  ·gc.alloc.rate:                   1316.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20603.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 101405.852 ops/s
[info]                  ·gc.alloc.rate:                   1331.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20491.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 101234.891 ops/s
[info]                  ·gc.alloc.rate:                   1328.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20660.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.295 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 100136.861 ops/s
[info]                  ·gc.alloc.rate:                   1314.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20992.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 99568.518 ops/s
[info]                  ·gc.alloc.rate:                   1307.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21227.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.645 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   100528.349 ±(99.9%) 2981.398 ops/s [Average]
[info]   (min, avg, max) = (99568.518, 100528.349, 101405.852), stdev = 774.260
[info]   CI (99.9%): [97546.951, 103509.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1319.666 ±(99.9%) 39.192 MB/sec [Average]
[info]   (min, avg, max) = (1307.110, 1319.666, 1331.361), stdev = 10.178
[info]   CI (99.9%): [1280.473, 1358.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.004, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1328.447 ±(99.9%) 45.269 MB/sec [Average]
[info]   (min, avg, max) = (1313.549, 1328.447, 1343.294), stdev = 11.756
[info]   CI (99.9%): [1283.179, 1373.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20795.086 ±(99.9%) 1175.816 B/op [Average]
[info]   (min, avg, max) = (20491.591, 20795.086, 21227.812), stdev = 305.356
[info]   CI (99.9%): [19619.270, 21970.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.236 ±(99.9%) 2.975 B/op [Average]
[info]   (min, avg, max) = (0.327, 1.236, 2.262), stdev = 0.773
[info]   CI (99.9%): [≈ 0, 4.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 56.36% complete, ETA 00:30:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258003.788 ops/s
[info] # Warmup Iteration   2: 272562.336 ops/s
[info] # Warmup Iteration   3: 276047.916 ops/s
[info] Iteration   1: 274491.072 ops/s
[info]                  ·gc.alloc.rate:               892.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      997.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5717.735 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 279946.946 ops/s
[info]                  ·gc.alloc.rate:                   910.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3737.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 280937.371 ops/s
[info]                  ·gc.alloc.rate:                   913.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5601.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 281476.277 ops/s
[info]                  ·gc.alloc.rate:                   915.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5601.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 281903.309 ops/s
[info]                  ·gc.alloc.rate:                   917.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5610.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   279750.995 ±(99.9%) 11667.155 ops/s [Average]
[info]   (min, avg, max) = (274491.072, 279750.995, 281903.309), stdev = 3029.923
[info]   CI (99.9%): [268083.840, 291418.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   910.119 ±(99.9%) 38.147 MB/sec [Average]
[info]   (min, avg, max) = (892.941, 910.119, 917.267), stdev = 9.907
[info]   CI (99.9%): [871.972, 948.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   933.774 ±(99.9%) 579.033 MB/sec [Average]
[info]   (min, avg, max) = (664.828, 933.774, 1005.055), stdev = 150.373
[info]   CI (99.9%): [354.742, 1512.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5253.753 ±(99.9%) 3269.151 B/op [Average]
[info]   (min, avg, max) = (3737.585, 5253.753, 5717.735), stdev = 848.988
[info]   CI (99.9%): [1984.602, 8522.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.327 ±(99.9%) 1.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.327, 0.702), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 56.67% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9904.297 ops/s
[info] # Warmup Iteration   2: 16192.311 ops/s
[info] # Warmup Iteration   3: 16385.242 ops/s
[info] Iteration   1: 16167.854 ops/s
[info]                  ·gc.alloc.rate:                   2061.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194022.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.079 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 15977.481 ops/s
[info]                  ·gc.alloc.rate:                   2036.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197903.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.202 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16096.450 ops/s
[info]                  ·gc.alloc.rate:                   2052.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197613.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.106 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 16237.660 ops/s
[info]                  ·gc.alloc.rate:                   2070.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196660.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.088 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16302.718 ops/s
[info]                  ·gc.alloc.rate:                   2078.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196390.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.048 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16156.433 ±(99.9%) 486.117 ops/s [Average]
[info]   (min, avg, max) = (15977.481, 16156.433, 16302.718), stdev = 126.243
[info]   CI (99.9%): [15670.315, 16642.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2059.800 ±(99.9%) 62.349 MB/sec [Average]
[info]   (min, avg, max) = (2036.836, 2059.800, 2078.548), stdev = 16.192
[info]   CI (99.9%): [1997.451, 2122.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200640.206 ±(99.9%) 1.516 B/op [Average]
[info]   (min, avg, max) = (200640.026, 200640.206, 200640.910), stdev = 0.394
[info]   CI (99.9%): [200638.690, 200641.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2017.438 ±(99.9%) 63.764 MB/sec [Average]
[info]   (min, avg, max) = (1993.290, 2017.438, 2034.529), stdev = 16.559
[info]   CI (99.9%): [1953.675, 2081.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   196518.219 ±(99.9%) 5898.620 B/op [Average]
[info]   (min, avg, max) = (194022.226, 196518.219, 197903.956), stdev = 1531.853
[info]   CI (99.9%): [190619.599, 202416.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.105 ±(99.9%) 7.657 B/op [Average]
[info]   (min, avg, max) = (6.079, 8.105, 10.088), stdev = 1.988
[info]   CI (99.9%): [0.448, 15.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 56.97% complete, ETA 00:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15587.186 ops/s
[info] # Warmup Iteration   2: 20739.256 ops/s
[info] # Warmup Iteration   3: 20581.117 ops/s
[info] Iteration   1: 20710.289 ops/s
[info]                  ·gc.alloc.rate:                   1676.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              127383.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126224.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.746 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20579.539 ops/s
[info]                  ·gc.alloc.rate:                   1665.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127817.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.960 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20305.116 ops/s
[info]                  ·gc.alloc.rate:                   1643.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              127374.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130162.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.840 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 20829.776 ops/s
[info]                  ·gc.alloc.rate:                   1685.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127441.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.292 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 20915.002 ops/s
[info]                  ·gc.alloc.rate:                   1692.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127268.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.965 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   20667.944 ±(99.9%) 920.294 ops/s [Average]
[info]   (min, avg, max) = (20305.116, 20667.944, 20915.002), stdev = 238.998
[info]   CI (99.9%): [19747.650, 21588.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1672.832 ±(99.9%) 74.370 MB/sec [Average]
[info]   (min, avg, max) = (1643.340, 1672.832, 1692.767), stdev = 19.314
[info]   CI (99.9%): [1598.462, 1747.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.751 ±(99.9%) 70.072 B/op [Average]
[info]   (min, avg, max) = (127352.021, 127370.751, 127392.021), stdev = 18.197
[info]   CI (99.9%): [127300.679, 127440.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1678.106 ±(99.9%) 46.231 MB/sec [Average]
[info]   (min, avg, max) = (1661.583, 1678.106, 1691.659), stdev = 12.006
[info]   CI (99.9%): [1631.875, 1724.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127783.089 ±(99.9%) 5603.054 B/op [Average]
[info]   (min, avg, max) = (126224.981, 127783.089, 130162.002), stdev = 1455.095
[info]   CI (99.9%): [122180.035, 133386.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.961 ±(99.9%) 9.982 B/op [Average]
[info]   (min, avg, max) = (4.746, 6.961, 10.965), stdev = 2.592
[info]   CI (99.9%): [≈ 0, 16.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 57.27% complete, ETA 00:30:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54867.174 ops/s
[info] # Warmup Iteration   2: 86179.510 ops/s
[info] # Warmup Iteration   3: 88100.408 ops/s
[info] Iteration   1: 88528.171 ops/s
[info]                  ·gc.alloc.rate:                   1212.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17450.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 88493.610 ops/s
[info]                  ·gc.alloc.rate:                   1212.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23385.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.221 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 88666.753 ops/s
[info]                  ·gc.alloc.rate:                   1214.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23494.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 88781.171 ops/s
[info]                  ·gc.alloc.rate:                   1216.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17708.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88380.098 ops/s
[info]                  ·gc.alloc.rate:                   1210.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23815.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.483 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   88569.961 ±(99.9%) 601.496 ops/s [Average]
[info]   (min, avg, max) = (88380.098, 88569.961, 88781.171), stdev = 156.207
[info]   CI (99.9%): [87968.465, 89171.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1213.313 ±(99.9%) 8.318 MB/sec [Average]
[info]   (min, avg, max) = (1210.728, 1213.313, 1216.269), stdev = 2.160
[info]   CI (99.9%): [1204.996, 1221.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.000 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.000, 21560.027), stdev = 0.019
[info]   CI (99.9%): [21559.928, 21560.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.282 ±(99.9%) 707.643 MB/sec [Average]
[info]   (min, avg, max) = (981.575, 1191.282, 1337.382), stdev = 183.773
[info]   CI (99.9%): [483.639, 1898.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21170.864 ±(99.9%) 12644.129 B/op [Average]
[info]   (min, avg, max) = (17450.607, 21170.864, 23815.365), stdev = 3283.640
[info]   CI (99.9%): [8526.735, 33814.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.332 ±(99.9%) 2.592 B/op [Average]
[info]   (min, avg, max) = (0.369, 1.332, 2.221), stdev = 0.673
[info]   CI (99.9%): [≈ 0, 3.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 57.58% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302382.222 ops/s
[info] # Warmup Iteration   2: 326830.536 ops/s
[info] # Warmup Iteration   3: 317764.033 ops/s
[info] Iteration   1: 307514.662 ops/s
[info]                  ·gc.alloc.rate:                   980.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5090.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 323536.318 ops/s
[info]                  ·gc.alloc.rate:                   1031.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4844.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.608 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 322070.491 ops/s
[info]                  ·gc.alloc.rate:                   1026.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4881.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 319856.545 ops/s
[info]                  ·gc.alloc.rate:                   1019.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4928.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 322137.354 ops/s
[info]                  ·gc.alloc.rate:                   1026.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4914.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   319023.074 ±(99.9%) 25286.529 ops/s [Average]
[info]   (min, avg, max) = (307514.662, 319023.074, 323536.318), stdev = 6566.831
[info]   CI (99.9%): [293736.545, 344309.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1016.837 ±(99.9%) 80.864 MB/sec [Average]
[info]   (min, avg, max) = (980.070, 1016.837, 1031.530), stdev = 21.000
[info]   CI (99.9%): [935.973, 1097.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.445 ±(99.9%) 17.240 MB/sec [Average]
[info]   (min, avg, max) = (994.615, 999.445, 1005.914), stdev = 4.477
[info]   CI (99.9%): [982.205, 1016.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4931.735 ±(99.9%) 363.617 B/op [Average]
[info]   (min, avg, max) = (4844.482, 4931.735, 5090.440), stdev = 94.430
[info]   CI (99.9%): [4568.118, 5295.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.368 ±(99.9%) 0.801 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.368, 0.608), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 1.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 57.88% complete, ETA 00:29:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342574.295 ops/s
[info] # Warmup Iteration   2: 366886.040 ops/s
[info] # Warmup Iteration   3: 382645.319 ops/s
[info] Iteration   1: 382542.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 382613.019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 382526.935 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 382732.107 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 383781.887 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   382839.388 ±(99.9%) 2052.552 ops/s [Average]
[info]   (min, avg, max) = (382526.935, 382839.388, 383781.887), stdev = 533.041
[info]   CI (99.9%): [380786.836, 384891.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 58.18% complete, ETA 00:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17916.623 ops/s
[info] # Warmup Iteration   2: 25961.381 ops/s
[info] # Warmup Iteration   3: 25891.331 ops/s
[info] Iteration   1: 25975.018 ops/s
[info]                  ·gc.alloc.rate:                   1771.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100438.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.568 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25493.394 ops/s
[info]                  ·gc.alloc.rate:                   1739.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102994.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.426 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25431.640 ops/s
[info]                  ·gc.alloc.rate:                   1734.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              107311.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103847.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.730 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26062.081 ops/s
[info]                  ·gc.alloc.rate:                   1776.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122211.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.514 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 26089.938 ops/s
[info]                  ·gc.alloc.rate:                   1778.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102068.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.512 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   25810.414 ±(99.9%) 1236.613 ops/s [Average]
[info]   (min, avg, max) = (25431.640, 25810.414, 26089.938), stdev = 321.145
[info]   CI (99.9%): [24573.801, 27047.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1760.102 ±(99.9%) 83.655 MB/sec [Average]
[info]   (min, avg, max) = (1734.121, 1760.102, 1778.960), stdev = 21.725
[info]   CI (99.9%): [1676.448, 1843.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107312.006 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (107311.938, 107312.006, 107312.041), stdev = 0.039
[info]   CI (99.9%): [107311.855, 107312.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1744.180 ±(99.9%) 603.578 MB/sec [Average]
[info]   (min, avg, max) = (1657.973, 1744.180, 2023.687), stdev = 156.747
[info]   CI (99.9%): [1140.602, 2347.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106312.195 ±(99.9%) 34569.620 B/op [Average]
[info]   (min, avg, max) = (100438.082, 106312.195, 122211.843), stdev = 8977.621
[info]   CI (99.9%): [71742.575, 140881.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.350 ±(99.9%) 10.158 B/op [Average]
[info]   (min, avg, max) = (2.512, 5.350, 7.730), stdev = 2.638
[info]   CI (99.9%): [≈ 0, 15.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 58.48% complete, ETA 00:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51007.461 ops/s
[info] # Warmup Iteration   2: 67453.428 ops/s
[info] # Warmup Iteration   3: 68582.686 ops/s
[info] Iteration   1: 69038.782 ops/s
[info]                  ·gc.alloc.rate:                   1552.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30158.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.424 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 68838.570 ops/s
[info]                  ·gc.alloc.rate:                   1547.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38030.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.856 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 69166.511 ops/s
[info]                  ·gc.alloc.rate:                   1554.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38076.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.895 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 69411.513 ops/s
[info]                  ·gc.alloc.rate:                   1560.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30481.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.888 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 68496.403 ops/s
[info]                  ·gc.alloc.rate:                   1540.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38778.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   68990.356 ±(99.9%) 1330.810 ops/s [Average]
[info]   (min, avg, max) = (68496.403, 68990.356, 69411.513), stdev = 345.607
[info]   CI (99.9%): [67659.546, 70321.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1551.199 ±(99.9%) 28.891 MB/sec [Average]
[info]   (min, avg, max) = (1540.666, 1551.199, 1560.494), stdev = 7.503
[info]   CI (99.9%): [1522.309, 1580.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35384.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35384.006, 35384.006, 35384.007), stdev = 0.001
[info]   CI (99.9%): [35384.005, 35384.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1538.474 ±(99.9%) 721.576 MB/sec [Average]
[info]   (min, avg, max) = (1322.927, 1538.474, 1688.471), stdev = 187.391
[info]   CI (99.9%): [816.897, 2260.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35104.759 ±(99.9%) 16865.170 B/op [Average]
[info]   (min, avg, max) = (30158.025, 35104.759, 38778.608), stdev = 4379.831
[info]   CI (99.9%): [18239.589, 51969.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.091 ±(99.9%) 2.109 B/op [Average]
[info]   (min, avg, max) = (1.424, 2.091, 2.856), stdev = 0.548
[info]   CI (99.9%): [≈ 0, 4.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 58.79% complete, ETA 00:28:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60077.352 ops/s
[info] # Warmup Iteration   2: 88907.642 ops/s
[info] # Warmup Iteration   3: 89919.187 ops/s
[info] Iteration   1: 91861.635 ops/s
[info]                  ·gc.alloc.rate:                   1144.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22346.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.713 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 89250.658 ops/s
[info]                  ·gc.alloc.rate:                   1112.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17338.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 91902.437 ops/s
[info]                  ·gc.alloc.rate:                   1145.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22571.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.783 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 91759.065 ops/s
[info]                  ·gc.alloc.rate:                   1143.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17064.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 91209.810 ops/s
[info]                  ·gc.alloc.rate:                   1136.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17241.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.718 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   91196.721 ±(99.9%) 4323.928 ops/s [Average]
[info]   (min, avg, max) = (89250.658, 91196.721, 91902.437), stdev = 1122.910
[info]   CI (99.9%): [86872.793, 95520.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1136.365 ±(99.9%) 53.968 MB/sec [Average]
[info]   (min, avg, max) = (1112.126, 1136.365, 1145.408), stdev = 14.015
[info]   CI (99.9%): [1082.397, 1190.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   19608.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19608.005, 19608.005, 19608.005), stdev = 0.001
[info]   CI (99.9%): [19608.004, 19608.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1120.126 ±(99.9%) 673.486 MB/sec [Average]
[info]   (min, avg, max) = (983.401, 1120.126, 1318.503), stdev = 174.902
[info]   CI (99.9%): [446.640, 1793.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19312.473 ±(99.9%) 11071.111 B/op [Average]
[info]   (min, avg, max) = (17064.740, 19312.473, 22571.182), stdev = 2875.132
[info]   CI (99.9%): [8241.362, 30383.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.004 ±(99.9%) 1.775 B/op [Average]
[info]   (min, avg, max) = (0.713, 1.004, 1.783), stdev = 0.461
[info]   CI (99.9%): [≈ 0, 2.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 59.09% complete, ETA 00:28:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89864.010 ops/s
[info] # Warmup Iteration   2: 103380.215 ops/s
[info] # Warmup Iteration   3: 103518.693 ops/s
[info] Iteration   1: 104262.887 ops/s
[info]                  ·gc.alloc.rate:                   1220.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14997.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 105621.841 ops/s
[info]                  ·gc.alloc.rate:                   1235.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19793.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 105728.919 ops/s
[info]                  ·gc.alloc.rate:                   1236.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19856.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 105802.721 ops/s
[info]                  ·gc.alloc.rate:                   1237.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14942.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 105876.101 ops/s
[info]                  ·gc.alloc.rate:                   1238.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19982.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.857 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   105458.494 ±(99.9%) 2598.954 ops/s [Average]
[info]   (min, avg, max) = (104262.887, 105458.494, 105876.101), stdev = 674.940
[info]   CI (99.9%): [102859.540, 108057.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1233.694 ±(99.9%) 29.663 MB/sec [Average]
[info]   (min, avg, max) = (1220.086, 1233.694, 1238.802), stdev = 7.703
[info]   CI (99.9%): [1204.031, 1263.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18408.004, 18408.004, 18408.004), stdev = 0.001
[info]   CI (99.9%): [18408.004, 18408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1201.142 ±(99.9%) 710.079 MB/sec [Average]
[info]   (min, avg, max) = (994.035, 1201.142, 1344.774), stdev = 184.405
[info]   CI (99.9%): [491.062, 1911.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17914.502 ±(99.9%) 10353.622 B/op [Average]
[info]   (min, avg, max) = (14942.711, 17914.502, 19982.684), stdev = 2688.803
[info]   CI (99.9%): [7560.880, 28268.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.243 ±(99.9%) 3.043 B/op [Average]
[info]   (min, avg, max) = (0.310, 1.243, 2.171), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 4.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 59.39% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28151.736 ops/s
[info] # Warmup Iteration   2: 45412.163 ops/s
[info] # Warmup Iteration   3: 45257.640 ops/s
[info] Iteration   1: 45857.143 ops/s
[info]                  ·gc.alloc.rate:                   2198.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2319.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79609.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.858 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 45915.373 ops/s
[info]                  ·gc.alloc.rate:                   2201.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2342.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80280.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.995 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 46039.503 ops/s
[info]                  ·gc.alloc.rate:                   2207.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69089.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.135 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 45381.102 ops/s
[info]                  ·gc.alloc.rate:                   2176.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82129.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.166 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 45765.725 ops/s
[info]                  ·gc.alloc.rate:                   2194.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70005.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.727 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   45791.769 ±(99.9%) 963.141 ops/s [Average]
[info]   (min, avg, max) = (45381.102, 45791.769, 46039.503), stdev = 250.125
[info]   CI (99.9%): [44828.628, 46754.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2195.380 ±(99.9%) 44.892 MB/sec [Average]
[info]   (min, avg, max) = (2176.360, 2195.380, 2207.118), stdev = 11.658
[info]   CI (99.9%): [2150.487, 2240.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75448.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75448.009, 75448.010, 75448.010), stdev = 0.001
[info]   CI (99.9%): [75448.008, 75448.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2217.522 ±(99.9%) 668.390 MB/sec [Average]
[info]   (min, avg, max) = (2021.120, 2217.522, 2369.089), stdev = 173.579
[info]   CI (99.9%): [1549.132, 2885.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76223.024 ±(99.9%) 23764.423 B/op [Average]
[info]   (min, avg, max) = (69089.834, 76223.024, 82129.366), stdev = 6171.545
[info]   CI (99.9%): [52458.601, 99987.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.576 ±(99.9%) 6.449 B/op [Average]
[info]   (min, avg, max) = (2.135, 3.576, 5.727), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 10.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 59.70% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94624.696 ops/s
[info] # Warmup Iteration   2: 117663.959 ops/s
[info] # Warmup Iteration   3: 120328.689 ops/s
[info] Iteration   1: 119670.508 ops/s
[info]                  ·gc.alloc.rate:                   1123.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12965.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.821 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 120443.939 ops/s
[info]                  ·gc.alloc.rate:                   1130.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12926.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 119567.033 ops/s
[info]                  ·gc.alloc.rate:                   1122.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17445.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.822 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 120052.709 ops/s
[info]                  ·gc.alloc.rate:                   1126.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13094.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 117759.427 ops/s
[info]                  ·gc.alloc.rate:                   1104.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13403.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   119498.723 ±(99.9%) 3973.661 ops/s [Average]
[info]   (min, avg, max) = (117759.427, 119498.723, 120443.939), stdev = 1031.947
[info]   CI (99.9%): [115525.062, 123472.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1121.348 ±(99.9%) 37.253 MB/sec [Average]
[info]   (min, avg, max) = (1104.996, 1121.348, 1130.139), stdev = 9.675
[info]   CI (99.9%): [1084.095, 1158.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14768.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14768.004, 14768.004, 14768.004), stdev = 0.001
[info]   CI (99.9%): [14768.003, 14768.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1060.491 ±(99.9%) 571.022 MB/sec [Average]
[info]   (min, avg, max) = (986.019, 1060.491, 1325.479), stdev = 148.293
[info]   CI (99.9%): [489.470, 1631.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13967.175 ±(99.9%) 7521.288 B/op [Average]
[info]   (min, avg, max) = (12926.040, 13967.175, 17445.138), stdev = 1953.255
[info]   CI (99.9%): [6445.886, 21488.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.824 ±(99.9%) 0.772 B/op [Average]
[info]   (min, avg, max) = (0.546, 0.824, 1.113), stdev = 0.201
[info]   CI (99.9%): [0.051, 1.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 60.00% complete, ETA 00:28:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242053.271 ops/s
[info] # Warmup Iteration   2: 337994.897 ops/s
[info] # Warmup Iteration   3: 344671.938 ops/s
[info] Iteration   1: 344913.741 ops/s
[info]                  ·gc.alloc.rate:                   511.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2653.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 350012.977 ops/s
[info]                  ·gc.alloc.rate:                   519.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1464.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 344467.774 ops/s
[info]                  ·gc.alloc.rate:                   511.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2976.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 343248.079 ops/s
[info]                  ·gc.alloc.rate:                   509.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2986.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.477 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 343174.588 ops/s
[info]                  ·gc.alloc.rate:               509.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1496.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   345163.432 ±(99.9%) 10838.117 ops/s [Average]
[info]   (min, avg, max) = (343174.588, 345163.432, 350012.977), stdev = 2814.625
[info]   CI (99.9%): [334325.314, 356001.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   512.325 ±(99.9%) 16.147 MB/sec [Average]
[info]   (min, avg, max) = (509.364, 512.325, 519.562), stdev = 4.193
[info]   CI (99.9%): [496.177, 528.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2336.001, 2336.001), stdev = 0.001
[info]   CI (99.9%): [2336.001, 2336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507.302 ±(99.9%) 646.393 MB/sec [Average]
[info]   (min, avg, max) = (325.779, 507.302, 651.513), stdev = 167.866
[info]   CI (99.9%): [≈ 0, 1153.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2315.617 ±(99.9%) 2979.674 B/op [Average]
[info]   (min, avg, max) = (1464.734, 2315.617, 2986.152), stdev = 773.812
[info]   CI (99.9%): [≈ 0, 5295.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.542 ±(99.9%) 4.308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.542, 2.542), stdev = 1.119
[info]   CI (99.9%): [≈ 0, 4.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.472 ±(99.9%) 19.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.472, 11.599), stdev = 5.105
[info]   CI (99.9%): [≈ 0, 22.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 2.280
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 60.30% complete, ETA 00:27:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 606038.444 ops/s
[info] # Warmup Iteration   2: 646497.113 ops/s
[info] # Warmup Iteration   3: 666536.980 ops/s
[info] Iteration   1: 657098.864 ops/s
[info]                  ·gc.alloc.rate:                   815.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2374.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 667823.547 ops/s
[info]                  ·gc.alloc.rate:                   828.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1558.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 662585.265 ops/s
[info]                  ·gc.alloc.rate:                   821.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2360.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 659195.441 ops/s
[info]                  ·gc.alloc.rate:                   817.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1585.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 646084.015 ops/s
[info]                  ·gc.alloc.rate:                   801.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2433.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   658557.426 ±(99.9%) 31057.116 ops/s [Average]
[info]   (min, avg, max) = (646084.015, 658557.426, 667823.547), stdev = 8065.434
[info]   CI (99.9%): [627500.310, 689614.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   816.804 ±(99.9%) 38.505 MB/sec [Average]
[info]   (min, avg, max) = (801.324, 816.804, 828.274), stdev = 10.000
[info]   CI (99.9%): [778.300, 855.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   861.957 ±(99.9%) 700.077 MB/sec [Average]
[info]   (min, avg, max) = (661.484, 861.957, 998.875), stdev = 181.808
[info]   CI (99.9%): [161.880, 1562.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2062.584 ±(99.9%) 1726.903 B/op [Average]
[info]   (min, avg, max) = (1558.923, 2062.584, 2433.228), stdev = 448.471
[info]   CI (99.9%): [335.681, 3789.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.189, 0.254), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 60.61% complete, ETA 00:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 669372.529 ops/s
[info] # Warmup Iteration   2: 720136.543 ops/s
[info] # Warmup Iteration   3: 708089.252 ops/s
[info] Iteration   1: 678690.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 717331.438 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 705593.669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 710349.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 704644.380 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   703321.904 ±(99.9%) 56436.589 ops/s [Average]
[info]   (min, avg, max) = (678690.973, 703321.904, 717331.438), stdev = 14656.403
[info]   CI (99.9%): [646885.315, 759758.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 60.91% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195821.165 ops/s
[info] # Warmup Iteration   2: 253066.389 ops/s
[info] # Warmup Iteration   3: 229111.975 ops/s
[info] Iteration   1: 225057.410 ops/s
[info]                  ·gc.alloc.rate:                   735.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4574.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 229286.582 ops/s
[info]                  ·gc.alloc.rate:                   749.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4490.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 234227.232 ops/s
[info]                  ·gc.alloc.rate:                   765.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6611.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 223853.869 ops/s
[info]                  ·gc.alloc.rate:               731.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4625.148 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 230614.998 ops/s
[info]                  ·gc.alloc.rate:                   753.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4503.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   228608.018 ±(99.9%) 16254.180 ops/s [Average]
[info]   (min, avg, max) = (223853.869, 228608.018, 234227.232), stdev = 4221.159
[info]   CI (99.9%): [212353.838, 244862.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   747.169 ±(99.9%) 53.146 MB/sec [Average]
[info]   (min, avg, max) = (731.667, 747.169, 765.542), stdev = 13.802
[info]   CI (99.9%): [694.022, 800.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   721.970 ±(99.9%) 563.962 MB/sec [Average]
[info]   (min, avg, max) = (654.111, 721.970, 983.927), stdev = 146.459
[info]   CI (99.9%): [158.009, 1285.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4960.890 ±(99.9%) 3559.181 B/op [Average]
[info]   (min, avg, max) = (4490.122, 4960.890, 6611.428), stdev = 924.308
[info]   CI (99.9%): [1401.708, 8520.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.343 ±(99.9%) 1.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.343, 0.710), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 61.21% complete, ETA 00:27:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99469.571 ops/s
[info] # Warmup Iteration   2: 129428.071 ops/s
[info] # Warmup Iteration   3: 129347.298 ops/s
[info] Iteration   1: 127878.621 ops/s
[info]                  ·gc.alloc.rate:                   1751.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20459.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.281 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 128166.007 ops/s
[info]                  ·gc.alloc.rate:                   1755.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20526.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.534 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 128283.055 ops/s
[info]                  ·gc.alloc.rate:                   1757.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24762.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.022 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 130387.697 ops/s
[info]                  ·gc.alloc.rate:                   1786.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20383.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 130537.777 ops/s
[info]                  ·gc.alloc.rate:                   1788.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20416.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.753 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   129050.631 ±(99.9%) 5000.165 ops/s [Average]
[info]   (min, avg, max) = (127878.621, 129050.631, 130537.777), stdev = 1298.527
[info]   CI (99.9%): [124050.467, 134050.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1767.857 ±(99.9%) 68.356 MB/sec [Average]
[info]   (min, avg, max) = (1751.794, 1767.857, 1788.203), stdev = 17.752
[info]   CI (99.9%): [1699.501, 1836.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21560.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21560.003, 21560.003, 21560.004), stdev = 0.001
[info]   CI (99.9%): [21560.003, 21560.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1746.886 ±(99.9%) 586.490 MB/sec [Average]
[info]   (min, avg, max) = (1662.397, 1746.886, 2018.422), stdev = 152.310
[info]   CI (99.9%): [1160.396, 2333.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21309.695 ±(99.9%) 7435.012 B/op [Average]
[info]   (min, avg, max) = (20383.260, 21309.695, 24762.369), stdev = 1930.849
[info]   CI (99.9%): [13874.683, 28744.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.069 ±(99.9%) 1.309 B/op [Average]
[info]   (min, avg, max) = (0.753, 1.069, 1.534), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 2.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 61.52% complete, ETA 00:27:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120582.185 ops/s
[info] # Warmup Iteration   2: 184667.525 ops/s
[info] # Warmup Iteration   3: 187022.967 ops/s
[info] Iteration   1: 186597.528 ops/s
[info]                  ·gc.alloc.rate:                   1112.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8281.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 186431.221 ops/s
[info]                  ·gc.alloc.rate:                   1112.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11098.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.879 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 186267.094 ops/s
[info]                  ·gc.alloc.rate:                   1110.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8372.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 183769.176 ops/s
[info]                  ·gc.alloc.rate:                   1095.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8531.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 180510.173 ops/s
[info]                  ·gc.alloc.rate:                   1076.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11636.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   184715.038 ±(99.9%) 10091.604 ops/s [Average]
[info]   (min, avg, max) = (180510.173, 184715.038, 186597.528), stdev = 2620.757
[info]   CI (99.9%): [174623.435, 194806.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1101.510 ±(99.9%) 60.656 MB/sec [Average]
[info]   (min, avg, max) = (1076.307, 1101.510, 1112.851), stdev = 15.752
[info]   CI (99.9%): [1040.853, 1162.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.002, 9384.002, 9384.002), stdev = 0.001
[info]   CI (99.9%): [9384.002, 9384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.828 ±(99.9%) 707.699 MB/sec [Average]
[info]   (min, avg, max) = (982.131, 1123.828, 1334.602), stdev = 183.787
[info]   CI (99.9%): [416.129, 1831.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9584.185 ±(99.9%) 6319.754 B/op [Average]
[info]   (min, avg, max) = (8281.721, 9584.185, 11636.002), stdev = 1641.220
[info]   CI (99.9%): [3264.431, 15903.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.531 ±(99.9%) 1.068 B/op [Average]
[info]   (min, avg, max) = (0.178, 0.531, 0.879), stdev = 0.277
[info]   CI (99.9%): [≈ 0, 1.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 61.82% complete, ETA 00:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312868.283 ops/s
[info] # Warmup Iteration   2: 326441.520 ops/s
[info] # Warmup Iteration   3: 330971.618 ops/s
[info] Iteration   1: 331509.919 ops/s
[info]                  ·gc.alloc.rate:                   643.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3156.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 329672.124 ops/s
[info]                  ·gc.alloc.rate:               640.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3173.677 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 330951.831 ops/s
[info]                  ·gc.alloc.rate:                   642.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3158.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 330721.183 ops/s
[info]                  ·gc.alloc.rate:               642.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1581.873 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 327583.079 ops/s
[info]                  ·gc.alloc.rate:                   636.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3197.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   330087.627 ±(99.9%) 5970.535 ops/s [Average]
[info]   (min, avg, max) = (327583.079, 330087.627, 331509.919), stdev = 1550.529
[info]   CI (99.9%): [324117.093, 336058.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   641.046 ±(99.9%) 11.891 MB/sec [Average]
[info]   (min, avg, max) = (636.115, 641.046, 643.925), stdev = 3.088
[info]   CI (99.9%): [629.155, 652.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   598.442 ±(99.9%) 572.691 MB/sec [Average]
[info]   (min, avg, max) = (332.394, 598.442, 665.510), stdev = 148.726
[info]   CI (99.9%): [25.751, 1171.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2853.508 ±(99.9%) 2738.012 B/op [Average]
[info]   (min, avg, max) = (1581.873, 2853.508, 3197.220), stdev = 711.053
[info]   CI (99.9%): [115.496, 5591.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.218 ±(99.9%) 0.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.218, 0.494), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 1.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 62.12% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30545.392 ops/s
[info] # Warmup Iteration   2: 67682.722 ops/s
[info] # Warmup Iteration   3: 67364.974 ops/s
[info] Iteration   1: 68404.527 ops/s
[info]                  ·gc.alloc.rate:                   2842.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3002.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69084.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.437 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 68395.108 ops/s
[info]                  ·gc.alloc.rate:                   2843.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62012.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.790 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 68641.428 ops/s
[info]                  ·gc.alloc.rate:                   2852.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62103.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.909 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 68638.927 ops/s
[info]                  ·gc.alloc.rate:                   2852.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70082.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.432 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 68028.208 ops/s
[info]                  ·gc.alloc.rate:                   2826.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62941.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.408 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   68421.640 ±(99.9%) 965.172 ops/s [Average]
[info]   (min, avg, max) = (68028.208, 68421.640, 68641.428), stdev = 250.652
[info]   CI (99.9%): [67456.467, 69386.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2843.409 ±(99.9%) 39.938 MB/sec [Average]
[info]   (min, avg, max) = (2826.876, 2843.409, 2852.267), stdev = 10.372
[info]   CI (99.9%): [2803.471, 2883.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65400.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65400.006, 65400.006, 65400.007), stdev = 0.001
[info]   CI (99.9%): [65400.006, 65400.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2836.812 ±(99.9%) 682.070 MB/sec [Average]
[info]   (min, avg, max) = (2696.029, 2836.812, 3056.472), stdev = 177.132
[info]   CI (99.9%): [2154.741, 3518.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65244.772 ±(99.9%) 15373.971 B/op [Average]
[info]   (min, avg, max) = (62012.312, 65244.772, 70082.258), stdev = 3992.571
[info]   CI (99.9%): [49870.801, 80618.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.208), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.395 ±(99.9%) 5.384 B/op [Average]
[info]   (min, avg, max) = (1.432, 2.395, 4.790), stdev = 1.398
[info]   CI (99.9%): [≈ 0, 7.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 62.42% complete, ETA 00:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133277.289 ops/s
[info] # Warmup Iteration   2: 166992.685 ops/s
[info] # Warmup Iteration   3: 169418.977 ops/s
[info] Iteration   1: 166398.809 ops/s
[info]                  ·gc.alloc.rate:                   1063.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9368.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 167804.639 ops/s
[info]                  ·gc.alloc.rate:                   1072.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12423.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.781 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 168659.393 ops/s
[info]                  ·gc.alloc.rate:                   1078.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9308.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.583 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 167644.005 ops/s
[info]                  ·gc.alloc.rate:                   1071.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9399.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 167286.867 ops/s
[info]                  ·gc.alloc.rate:                   1069.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9450.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   167558.743 ±(99.9%) 3162.765 ops/s [Average]
[info]   (min, avg, max) = (166398.809, 167558.743, 168659.393), stdev = 821.360
[info]   CI (99.9%): [164395.978, 170721.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1071.432 ±(99.9%) 20.275 MB/sec [Average]
[info]   (min, avg, max) = (1063.989, 1071.432, 1078.488), stdev = 5.265
[info]   CI (99.9%): [1051.157, 1091.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10064.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10064.003, 10064.003, 10064.003), stdev = 0.001
[info]   CI (99.9%): [10064.002, 10064.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1063.658 ±(99.9%) 562.044 MB/sec [Average]
[info]   (min, avg, max) = (990.462, 1063.658, 1324.593), stdev = 145.961
[info]   CI (99.9%): [501.614, 1625.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9990.188 ±(99.9%) 5242.391 B/op [Average]
[info]   (min, avg, max) = (9308.340, 9990.188, 12423.842), stdev = 1361.432
[info]   CI (99.9%): [4747.797, 15232.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.625 ±(99.9%) 0.627 B/op [Average]
[info]   (min, avg, max) = (0.394, 0.625, 0.783), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 1.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 62.73% complete, ETA 00:26:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369187.028 ops/s
[info] # Warmup Iteration   2: 519989.704 ops/s
[info] # Warmup Iteration   3: 519266.937 ops/s
[info] Iteration   1: 519234.374 ops/s
[info]                  ·gc.alloc.rate:                   512.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1765.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 524224.335 ops/s
[info]                  ·gc.alloc.rate:               517.025 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 980.972 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 521018.197 ops/s
[info]                  ·gc.alloc.rate:                   513.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1975.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 522867.423 ops/s
[info]                  ·gc.alloc.rate:                   515.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1968.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 525276.613 ops/s
[info]                  ·gc.alloc.rate:               518.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 981.962 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   522524.189 ±(99.9%) 9368.040 ops/s [Average]
[info]   (min, avg, max) = (519234.374, 522524.189, 525276.613), stdev = 2432.850
[info]   CI (99.9%): [513156.149, 531892.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   515.279 ±(99.9%) 9.349 MB/sec [Average]
[info]   (min, avg, max) = (512.003, 515.279, 518.000), stdev = 2.428
[info]   CI (99.9%): [505.931, 524.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.065 ±(99.9%) 648.874 MB/sec [Average]
[info]   (min, avg, max) = (326.796, 509.065, 654.132), stdev = 168.510
[info]   CI (99.9%): [≈ 0, 1157.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1534.742 ±(99.9%) 1971.813 B/op [Average]
[info]   (min, avg, max) = (980.972, 1534.742, 1975.977), stdev = 512.073
[info]   CI (99.9%): [≈ 0, 3506.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.465 ±(99.9%) 3.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.157), stdev = 0.947
[info]   CI (99.9%): [≈ 0, 4.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.408 ±(99.9%) 11.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.408, 6.538), stdev = 2.870
[info]   CI (99.9%): [≈ 0, 12.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 63.03% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1009834.738 ops/s
[info] # Warmup Iteration   2: 1110694.970 ops/s
[info] # Warmup Iteration   3: 1117817.791 ops/s
[info] Iteration   1: 1105193.046 ops/s
[info]                  ·gc.alloc.rate:                   820.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1414.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1119994.058 ops/s
[info]                  ·gc.alloc.rate:                   831.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1121883.336 ops/s
[info]                  ·gc.alloc.rate:                   832.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1397.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1105927.633 ops/s
[info]                  ·gc.alloc.rate:                   820.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     947.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1101502.954 ops/s
[info]                  ·gc.alloc.rate:                   817.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1430.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1110900.205 ±(99.9%) 35964.570 ops/s [Average]
[info]   (min, avg, max) = (1101502.954, 1110900.205, 1121883.336), stdev = 9339.885
[info]   CI (99.9%): [1074935.635, 1146864.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   824.418 ±(99.9%) 26.792 MB/sec [Average]
[info]   (min, avg, max) = (817.419, 824.418, 832.642), stdev = 6.958
[info]   CI (99.9%): [797.626, 851.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   863.656 ±(99.9%) 701.436 MB/sec [Average]
[info]   (min, avg, max) = (662.792, 863.656, 1000.846), stdev = 182.161
[info]   CI (99.9%): [162.220, 1565.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1224.023 ±(99.9%) 1002.314 B/op [Average]
[info]   (min, avg, max) = (931.418, 1224.023, 1430.097), stdev = 260.298
[info]   CI (99.9%): [221.709, 2226.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.124 ±(99.9%) 0.189 B/op [Average]
[info]   (min, avg, max) = (0.088, 0.124, 0.208), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.33% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1004621.726 ops/s
[info] # Warmup Iteration   2: 1090300.788 ops/s
[info] # Warmup Iteration   3: 1097279.997 ops/s
[info] Iteration   1: 1131701.675 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1132367.056 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1133000.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1133284.966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1130879.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1132246.734 ±(99.9%) 3765.608 ops/s [Average]
[info]   (min, avg, max) = (1130879.892, 1132246.734, 1133284.966), stdev = 977.917
[info]   CI (99.9%): [1128481.126, 1136012.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 63.64% complete, ETA 00:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184339.928 ops/s
[info] # Warmup Iteration   2: 321579.253 ops/s
[info] # Warmup Iteration   3: 313630.476 ops/s
[info] Iteration   1: 314605.810 ops/s
[info]                  ·gc.alloc.rate:                   859.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4879.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.520 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 326302.748 ops/s
[info]                  ·gc.alloc.rate:                   890.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3145.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 323954.532 ops/s
[info]                  ·gc.alloc.rate:                   884.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4766.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 325273.787 ops/s
[info]                  ·gc.alloc.rate:                   888.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4776.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 326688.119 ops/s
[info]                  ·gc.alloc.rate:                   891.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3181.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   323364.999 ±(99.9%) 19290.526 ops/s [Average]
[info]   (min, avg, max) = (314605.810, 323364.999, 326688.119), stdev = 5009.688
[info]   CI (99.9%): [304074.473, 342655.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   882.883 ±(99.9%) 52.061 MB/sec [Average]
[info]   (min, avg, max) = (859.269, 882.883, 891.954), stdev = 13.520
[info]   CI (99.9%): [830.822, 934.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   851.542 ±(99.9%) 686.291 MB/sec [Average]
[info]   (min, avg, max) = (652.116, 851.542, 987.685), stdev = 178.228
[info]   CI (99.9%): [165.251, 1537.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4150.201 ±(99.9%) 3472.188 B/op [Average]
[info]   (min, avg, max) = (3145.461, 4150.201, 4879.823), stdev = 901.716
[info]   CI (99.9%): [678.013, 7622.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.386 ±(99.9%) 0.346 B/op [Average]
[info]   (min, avg, max) = (0.302, 0.386, 0.520), stdev = 0.090
[info]   CI (99.9%): [0.040, 0.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 63.94% complete, ETA 00:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457.364 ops/s
[info] # Warmup Iteration   2: 676.997 ops/s
[info] # Warmup Iteration   3: 665.374 ops/s
[info] Iteration   1: 661.024 ops/s
[info]                  ·gc.alloc.rate:                   1380.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3921072.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.997 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 670.959 ops/s
[info]                  ·gc.alloc.rate:                   1401.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284913.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3105938.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 684.295 ops/s
[info]                  ·gc.alloc.rate:                   1428.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3063831.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.509 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 684.312 ops/s
[info]                  ·gc.alloc.rate:                   1428.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3079139.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.509 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 676.567 ops/s
[info]                  ·gc.alloc.rate:                   1412.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3910863.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.607 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   675.431 ±(99.9%) 37.841 ops/s [Average]
[info]   (min, avg, max) = (661.024, 675.431, 684.312), stdev = 9.827
[info]   CI (99.9%): [637.590, 713.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1410.297 ±(99.9%) 78.835 MB/sec [Average]
[info]   (min, avg, max) = (1380.289, 1410.297, 1428.954), stdev = 20.473
[info]   CI (99.9%): [1331.461, 1489.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3284912.748 ±(99.9%) 0.628 B/op [Average]
[info]   (min, avg, max) = (3284912.631, 3284912.748, 3284913.000), stdev = 0.163
[info]   CI (99.9%): [3284912.120, 3284913.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1465.192 ±(99.9%) 702.951 MB/sec [Average]
[info]   (min, avg, max) = (1324.704, 1465.192, 1681.705), stdev = 182.554
[info]   CI (99.9%): [762.241, 2168.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3416169.072 ±(99.9%) 1757875.981 B/op [Average]
[info]   (min, avg, max) = (3063831.918, 3416169.072, 3921072.338), stdev = 456514.810
[info]   CI (99.9%): [1658293.091, 5174045.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   145.182 ±(99.9%) 128.937 B/op [Average]
[info]   (min, avg, max) = (98.997, 145.182, 193.607), stdev = 33.485
[info]   CI (99.9%): [16.245, 274.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 64.24% complete, ETA 00:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 376.711 ops/s
[info] # Warmup Iteration   2: 659.117 ops/s
[info] # Warmup Iteration   3: 670.574 ops/s
[info] Iteration   1: 669.548 ops/s
[info]                  ·gc.alloc.rate:                   1389.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264568.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3069041.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.907 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 674.214 ops/s
[info]                  ·gc.alloc.rate:                   1398.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264596.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3066502.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242.726 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 676.787 ops/s
[info]                  ·gc.alloc.rate:                   1404.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264568.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3851232.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.804 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 680.336 ops/s
[info]                  ·gc.alloc.rate:                   1411.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264568.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3083367.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240.587 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 677.925 ops/s
[info]                  ·gc.alloc.rate:                   1406.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264568.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3109437.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.518 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   675.762 ±(99.9%) 15.836 ops/s [Average]
[info]   (min, avg, max) = (669.548, 675.762, 680.336), stdev = 4.113
[info]   CI (99.9%): [659.926, 691.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1402.119 ±(99.9%) 33.254 MB/sec [Average]
[info]   (min, avg, max) = (1389.058, 1402.119, 1411.718), stdev = 8.636
[info]   CI (99.9%): [1368.865, 1435.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3264574.306 ±(99.9%) 48.522 B/op [Average]
[info]   (min, avg, max) = (3264568.634, 3264574.306, 3264596.847), stdev = 12.601
[info]   CI (99.9%): [3264525.784, 3264622.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1389.924 ±(99.9%) 576.051 MB/sec [Average]
[info]   (min, avg, max) = (1305.862, 1389.924, 1656.385), stdev = 149.599
[info]   CI (99.9%): [813.872, 1965.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3235916.085 ±(99.9%) 1326140.476 B/op [Average]
[info]   (min, avg, max) = (3066502.258, 3235916.085, 3851232.236), stdev = 344394.470
[info]   CI (99.9%): [1909775.609, 4562056.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   145.109 ±(99.9%) 347.596 B/op [Average]
[info]   (min, avg, max) = (48.907, 145.109, 242.726), stdev = 90.270
[info]   CI (99.9%): [≈ 0, 492.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 64.55% complete, ETA 00:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13589.904 ops/s
[info] # Warmup Iteration   2: 27062.239 ops/s
[info] # Warmup Iteration   3: 26784.912 ops/s
[info] Iteration   1: 26622.876 ops/s
[info]                  ·gc.alloc.rate:                   480.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30243.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 26486.662 ops/s
[info]                  ·gc.alloc.rate:                   478.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39346.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 26442.655 ops/s
[info]                  ·gc.alloc.rate:               477.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          28432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      330.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19664.765 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 26629.530 ops/s
[info]                  ·gc.alloc.rate:               481.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          28432.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39015.318 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 26652.911 ops/s
[info]                  ·gc.alloc.rate:                   481.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          330.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19510.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.229 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   26566.927 ±(99.9%) 366.967 ops/s [Average]
[info]   (min, avg, max) = (26442.655, 26566.927, 26652.911), stdev = 95.300
[info]   CI (99.9%): [26199.960, 26933.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   480.005 ±(99.9%) 6.859 MB/sec [Average]
[info]   (min, avg, max) = (477.703, 480.005, 481.490), stdev = 1.781
[info]   CI (99.9%): [473.146, 486.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28432.018 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (28432.016, 28432.018, 28432.024), stdev = 0.003
[info]   CI (99.9%): [28432.006, 28432.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   499.032 ±(99.9%) 637.827 MB/sec [Average]
[info]   (min, avg, max) = (330.400, 499.032, 662.155), stdev = 165.642
[info]   CI (99.9%): [≈ 0, 1136.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29556.197 ±(99.9%) 37755.443 B/op [Average]
[info]   (min, avg, max) = (19510.586, 29556.197, 39346.340), stdev = 9804.969
[info]   CI (99.9%): [≈ 0, 67311.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.451 ±(99.9%) 3.784 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.451, 2.209), stdev = 0.983
[info]   CI (99.9%): [≈ 0, 4.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26.812 ±(99.9%) 224.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.812, 131.254), stdev = 58.389
[info]   CI (99.9%): [≈ 0, 251.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.789
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 64.85% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 372.481 ops/s
[info] # Warmup Iteration   2: 636.350 ops/s
[info] # Warmup Iteration   3: 675.663 ops/s
[info] Iteration   1: 672.637 ops/s
[info]                  ·gc.alloc.rate:                   1439.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368480.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3058476.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 668.980 ops/s
[info]                  ·gc.alloc.rate:                   1432.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368504.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3867993.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195.630 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 676.533 ops/s
[info]                  ·gc.alloc.rate:                   1448.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368464.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3085322.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 676.551 ops/s
[info]                  ·gc.alloc.rate:                   1448.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368464.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3882209.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.804 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 666.582 ops/s
[info]                  ·gc.alloc.rate:                   1426.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368466.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3169309.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   672.256 ±(99.9%) 17.200 ops/s [Average]
[info]   (min, avg, max) = (666.582, 672.256, 676.551), stdev = 4.467
[info]   CI (99.9%): [655.056, 689.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1439.179 ±(99.9%) 36.460 MB/sec [Average]
[info]   (min, avg, max) = (1426.884, 1439.179, 1448.311), stdev = 9.469
[info]   CI (99.9%): [1402.719, 1475.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3368476.075 ±(99.9%) 65.778 B/op [Average]
[info]   (min, avg, max) = (3368464.638, 3368476.075, 3368504.167), stdev = 17.082
[info]   CI (99.9%): [3368410.297, 3368541.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1458.126 ±(99.9%) 702.067 MB/sec [Average]
[info]   (min, avg, max) = (1307.297, 1458.126, 1669.202), stdev = 182.325
[info]   CI (99.9%): [756.059, 2160.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3412662.208 ±(99.9%) 1633259.237 B/op [Average]
[info]   (min, avg, max) = (3058476.505, 3412662.208, 3882209.371), stdev = 424152.237
[info]   CI (99.9%): [1779402.972, 5045921.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   117.119 ±(99.9%) 216.153 B/op [Average]
[info]   (min, avg, max) = (48.402, 117.119, 195.630), stdev = 56.134
[info]   CI (99.9%): [≈ 0, 333.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 65.15% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9387.862 ops/s
[info] # Warmup Iteration   2: 12961.089 ops/s
[info] # Warmup Iteration   3: 13113.751 ops/s
[info] Iteration   1: 13177.722 ops/s
[info]                  ·gc.alloc.rate:                   1061.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117586.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13146.101 ops/s
[info]                  ·gc.alloc.rate:                   1058.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              126713.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118183.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13081.423 ops/s
[info]                  ·gc.alloc.rate:                   1053.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119251.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12787.299 ops/s
[info]                  ·gc.alloc.rate:                   1030.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122484.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12879.971 ops/s
[info]                  ·gc.alloc.rate:                   1037.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162959.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13014.503 ±(99.9%) 661.811 ops/s [Average]
[info]   (min, avg, max) = (12787.299, 13014.503, 13177.722), stdev = 171.870
[info]   CI (99.9%): [12352.692, 13676.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1048.250 ±(99.9%) 51.997 MB/sec [Average]
[info]   (min, avg, max) = (1030.493, 1048.250, 1061.092), stdev = 13.503
[info]   CI (99.9%): [996.253, 1100.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126750.786 ±(99.9%) 133.186 B/op [Average]
[info]   (min, avg, max) = (126712.035, 126750.786, 126776.058), stdev = 34.588
[info]   CI (99.9%): [126617.600, 126883.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1058.454 ±(99.9%) 592.556 MB/sec [Average]
[info]   (min, avg, max) = (984.678, 1058.454, 1333.632), stdev = 153.885
[info]   CI (99.9%): [465.898, 1651.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128093.026 ±(99.9%) 75405.843 B/op [Average]
[info]   (min, avg, max) = (117586.899, 128093.026, 162959.878), stdev = 19582.658
[info]   CI (99.9%): [52687.183, 203498.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.044 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.044, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.277 ±(99.9%) 8.561 B/op [Average]
[info]   (min, avg, max) = (2.486, 5.277, 7.513), stdev = 2.223
[info]   CI (99.9%): [≈ 0, 13.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 65.45% complete, ETA 00:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10245.882 ops/s
[info] # Warmup Iteration   2: 15407.204 ops/s
[info] # Warmup Iteration   3: 15588.823 ops/s
[info] Iteration   1: 15103.360 ops/s
[info]                  ·gc.alloc.rate:                   944.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              98399.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101831.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.338 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15682.313 ops/s
[info]                  ·gc.alloc.rate:                   980.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98272.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15718.133 ops/s
[info]                  ·gc.alloc.rate:                   983.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98447.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15672.160 ops/s
[info]                  ·gc.alloc.rate:                   979.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99372.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15686.116 ops/s
[info]                  ·gc.alloc.rate:                   980.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              98399.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99690.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   15572.416 ±(99.9%) 1011.850 ops/s [Average]
[info]   (min, avg, max) = (15103.360, 15572.416, 15718.133), stdev = 262.774
[info]   CI (99.9%): [14560.567, 16584.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   973.709 ±(99.9%) 63.636 MB/sec [Average]
[info]   (min, avg, max) = (944.223, 973.709, 983.042), stdev = 16.526
[info]   CI (99.9%): [910.074, 1037.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98400.005 ±(99.9%) 0.393 B/op [Average]
[info]   (min, avg, max) = (98399.899, 98400.005, 98400.137), stdev = 0.102
[info]   CI (99.9%): [98399.611, 98400.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   984.646 ±(99.9%) 26.534 MB/sec [Average]
[info]   (min, avg, max) = (977.148, 984.646, 993.631), stdev = 6.891
[info]   CI (99.9%): [958.112, 1011.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99522.950 ±(99.9%) 5478.795 B/op [Average]
[info]   (min, avg, max) = (98272.663, 99522.950, 101831.126), stdev = 1422.826
[info]   CI (99.9%): [94044.156, 105001.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.462 ±(99.9%) 15.639 B/op [Average]
[info]   (min, avg, max) = (2.090, 5.462, 12.535), stdev = 4.061
[info]   CI (99.9%): [≈ 0, 21.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 65.76% complete, ETA 00:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257161.929 ops/s
[info] # Warmup Iteration   2: 273763.847 ops/s
[info] # Warmup Iteration   3: 274061.841 ops/s
[info] Iteration   1: 269946.525 ops/s
[info]                  ·gc.alloc.rate:                   952.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3852.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 276106.200 ops/s
[info]                  ·gc.alloc.rate:                   974.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3770.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 274901.368 ops/s
[info]                  ·gc.alloc.rate:                   969.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5693.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 274810.542 ops/s
[info]                  ·gc.alloc.rate:                   969.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5720.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 276765.816 ops/s
[info]                  ·gc.alloc.rate:                   976.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5695.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.355 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   274506.090 ±(99.9%) 10315.356 ops/s [Average]
[info]   (min, avg, max) = (269946.525, 274506.090, 276765.816), stdev = 2678.865
[info]   CI (99.9%): [264190.734, 284821.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   968.444 ±(99.9%) 35.847 MB/sec [Average]
[info]   (min, avg, max) = (952.634, 968.444, 976.334), stdev = 9.309
[info]   CI (99.9%): [932.597, 1004.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   863.511 ±(99.9%) 710.855 MB/sec [Average]
[info]   (min, avg, max) = (661.069, 863.511, 1001.523), stdev = 184.607
[info]   CI (99.9%): [152.657, 1574.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4946.653 ±(99.9%) 3991.420 B/op [Average]
[info]   (min, avg, max) = (3770.586, 4946.653, 5720.699), stdev = 1036.559
[info]   CI (99.9%): [955.234, 8938.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.286 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (0.121, 0.286, 0.358), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.06% complete, ETA 00:23:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270611.851 ops/s
[info] # Warmup Iteration   2: 290729.259 ops/s
[info] # Warmup Iteration   3: 298759.593 ops/s
[info] Iteration   1: 297787.048 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 299299.528 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 298547.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 298162.088 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 299103.244 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   298579.954 ±(99.9%) 2432.286 ops/s [Average]
[info]   (min, avg, max) = (297787.048, 298579.954, 299299.528), stdev = 631.657
[info]   CI (99.9%): [296147.668, 301012.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 66.36% complete, ETA 00:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10825.556 ops/s
[info] # Warmup Iteration   2: 14614.541 ops/s
[info] # Warmup Iteration   3: 14541.875 ops/s
[info] Iteration   1: 14838.532 ops/s
[info]                  ·gc.alloc.rate:                   983.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104073.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14570.149 ops/s
[info]                  ·gc.alloc.rate:                   965.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106167.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14766.342 ops/s
[info]                  ·gc.alloc.rate:               978.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          104280.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      986.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105106.078 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14584.153 ops/s
[info]                  ·gc.alloc.rate:                   966.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107007.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.493 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14871.569 ops/s
[info]                  ·gc.alloc.rate:                   985.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              104276.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105358.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14726.149 ±(99.9%) 544.192 ops/s [Average]
[info]   (min, avg, max) = (14570.149, 14726.149, 14871.569), stdev = 141.325
[info]   CI (99.9%): [14181.957, 15270.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   975.722 ±(99.9%) 36.136 MB/sec [Average]
[info]   (min, avg, max) = (965.315, 975.722, 985.372), stdev = 9.384
[info]   CI (99.9%): [939.585, 1011.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   104279.378 ±(99.9%) 5.610 B/op [Average]
[info]   (min, avg, max) = (104276.772, 104279.378, 104280.047), stdev = 1.457
[info]   CI (99.9%): [104273.768, 104284.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   987.474 ±(99.9%) 23.249 MB/sec [Average]
[info]   (min, avg, max) = (981.213, 987.474, 995.591), stdev = 6.038
[info]   CI (99.9%): [964.225, 1010.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105542.357 ±(99.9%) 4269.742 B/op [Average]
[info]   (min, avg, max) = (104073.341, 105542.357, 107007.087), stdev = 1108.838
[info]   CI (99.9%): [101272.616, 109812.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.811 ±(99.9%) 22.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.811, 15.740), stdev = 5.874
[info]   CI (99.9%): [≈ 0, 28.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 66.67% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603064.005 ops/s
[info] # Warmup Iteration   2: 889358.191 ops/s
[info] # Warmup Iteration   3: 886163.999 ops/s
[info] Iteration   1: 904045.072 ops/s
[info]                  ·gc.alloc.rate:                   2955.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3029.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5272.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 903197.595 ops/s
[info]                  ·gc.alloc.rate:                   2952.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3046.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5308.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 896724.766 ops/s
[info]                  ·gc.alloc.rate:                   2931.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5364.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 904979.875 ops/s
[info]                  ·gc.alloc.rate:                   2958.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4732.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 892824.253 ops/s
[info]                  ·gc.alloc.rate:                   2918.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5400.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.330 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   900354.312 ±(99.9%) 20464.388 ops/s [Average]
[info]   (min, avg, max) = (892824.253, 900354.312, 904979.875), stdev = 5314.537
[info]   CI (99.9%): [879889.924, 920818.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2943.262 ±(99.9%) 67.259 MB/sec [Average]
[info]   (min, avg, max) = (2918.142, 2943.262, 2958.204), stdev = 17.467
[info]   CI (99.9%): [2876.003, 3010.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.000, 5144.000, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.000, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2983.762 ±(99.9%) 566.615 MB/sec [Average]
[info]   (min, avg, max) = (2721.553, 2983.762, 3063.750), stdev = 147.148
[info]   CI (99.9%): [2417.147, 3550.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5215.600 ±(99.9%) 1057.234 B/op [Average]
[info]   (min, avg, max) = (4732.489, 5215.600, 5400.673), stdev = 274.560
[info]   CI (99.9%): [4158.367, 6272.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.187), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.182 ±(99.9%) 0.334 B/op [Average]
[info]   (min, avg, max) = (0.109, 0.182, 0.330), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 66.97% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 784055.269 ops/s
[info] # Warmup Iteration   2: 1588122.456 ops/s
[info] # Warmup Iteration   3: 1624240.806 ops/s
[info] Iteration   1: 1633113.706 ops/s
[info]                  ·gc.alloc.rate:                   1536.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1263.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1587026.446 ops/s
[info]                  ·gc.alloc.rate:                   1492.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1637.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1618021.267 ops/s
[info]                  ·gc.alloc.rate:                   1521.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1294.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1639848.280 ops/s
[info]                  ·gc.alloc.rate:                   1542.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1606.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1637643.630 ops/s
[info]                  ·gc.alloc.rate:                   1539.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1617.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1623130.666 ±(99.9%) 84349.901 ops/s [Average]
[info]   (min, avg, max) = (1587026.446, 1623130.666, 1639848.280), stdev = 21905.401
[info]   CI (99.9%): [1538780.765, 1707480.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1526.454 ±(99.9%) 79.713 MB/sec [Average]
[info]   (min, avg, max) = (1492.341, 1526.454, 1542.050), stdev = 20.701
[info]   CI (99.9%): [1446.741, 1606.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1530.049 ±(99.9%) 735.880 MB/sec [Average]
[info]   (min, avg, max) = (1311.525, 1530.049, 1682.713), stdev = 191.106
[info]   CI (99.9%): [794.169, 2265.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1483.850 ±(99.9%) 722.568 B/op [Average]
[info]   (min, avg, max) = (1263.370, 1483.850, 1637.406), stdev = 187.649
[info]   CI (99.9%): [761.281, 2206.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.081, 0.145), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 67.27% complete, ETA 00:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7209389.961 ops/s
[info] # Warmup Iteration   2: 8477620.242 ops/s
[info] # Warmup Iteration   3: 8503758.746 ops/s
[info] Iteration   1: 8621802.157 ops/s
[info]                  ·gc.alloc.rate:                   2586.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2356.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     430.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8513275.430 ops/s
[info]                  ·gc.alloc.rate:                   2553.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     500.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8561959.430 ops/s
[info]                  ·gc.alloc.rate:                   2567.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     499.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8578129.029 ops/s
[info]                  ·gc.alloc.rate:                   2572.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8414680.982 ops/s
[info]                  ·gc.alloc.rate:                   2524.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     509.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   8537969.406 ±(99.9%) 304578.843 ops/s [Average]
[info]   (min, avg, max) = (8414680.982, 8537969.406, 8621802.157), stdev = 79098.158
[info]   CI (99.9%): [8233390.562, 8842548.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2560.824 ±(99.9%) 90.274 MB/sec [Average]
[info]   (min, avg, max) = (2524.484, 2560.824, 2586.105), stdev = 23.444
[info]   CI (99.9%): [2470.550, 2651.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2576.067 ±(99.9%) 734.526 MB/sec [Average]
[info]   (min, avg, max) = (2356.017, 2576.067, 2724.213), stdev = 190.754
[info]   CI (99.9%): [1841.541, 3310.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   475.033 ±(99.9%) 147.999 B/op [Average]
[info]   (min, avg, max) = (430.006, 475.033, 509.343), stdev = 38.435
[info]   CI (99.9%): [327.034, 623.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.020, 0.030), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 67.58% complete, ETA 00:22:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86384.166 ops/s
[info] # Warmup Iteration   2: 310533.233 ops/s
[info] # Warmup Iteration   3: 312231.775 ops/s
[info] Iteration   1: 319955.774 ops/s
[info]                  ·gc.alloc.rate:                   1949.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9692.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 318043.474 ops/s
[info]                  ·gc.alloc.rate:                   1938.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9853.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.030 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 320387.214 ops/s
[info]                  ·gc.alloc.rate:                   1952.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9866.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 320576.265 ops/s
[info]                  ·gc.alloc.rate:                   1953.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9919.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 314831.003 ops/s
[info]                  ·gc.alloc.rate:                   1919.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8453.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   318758.746 ±(99.9%) 9298.913 ops/s [Average]
[info]   (min, avg, max) = (314831.003, 318758.746, 320576.265), stdev = 2414.898
[info]   CI (99.9%): [309459.833, 328057.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1942.855 ±(99.9%) 55.625 MB/sec [Average]
[info]   (min, avg, max) = (1919.487, 1942.855, 1953.941), stdev = 14.446
[info]   CI (99.9%): [1887.230, 1998.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1936.477 ±(99.9%) 531.899 MB/sec [Average]
[info]   (min, avg, max) = (1691.699, 1936.477, 2020.705), stdev = 138.132
[info]   CI (99.9%): [1404.578, 2468.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9557.174 ±(99.9%) 2397.551 B/op [Average]
[info]   (min, avg, max) = (8453.707, 9557.174, 9919.749), stdev = 622.636
[info]   CI (99.9%): [7159.624, 11954.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.208), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.432 ±(99.9%) 1.299 B/op [Average]
[info]   (min, avg, max) = (0.208, 0.432, 1.030), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 1.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 67.88% complete, ETA 00:22:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638804.705 ops/s
[info] # Warmup Iteration   2: 1050269.707 ops/s
[info] # Warmup Iteration   3: 1072992.305 ops/s
[info] Iteration   1: 1043848.067 ops/s
[info]                  ·gc.alloc.rate:                   2403.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2342.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3531.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1078632.017 ops/s
[info]                  ·gc.alloc.rate:                   2483.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3933.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1074722.123 ops/s
[info]                  ·gc.alloc.rate:                   2474.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3470.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1063377.063 ops/s
[info]                  ·gc.alloc.rate:                   2448.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3516.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1053811.058 ops/s
[info]                  ·gc.alloc.rate:                   2427.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4062.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1062878.065 ±(99.9%) 55570.448 ops/s [Average]
[info]   (min, avg, max) = (1043848.067, 1062878.065, 1078632.017), stdev = 14431.469
[info]   CI (99.9%): [1007307.618, 1118448.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2447.567 ±(99.9%) 127.222 MB/sec [Average]
[info]   (min, avg, max) = (2403.628, 2447.567, 2483.540), stdev = 33.039
[info]   CI (99.9%): [2320.344, 2574.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3624.000, 3624.000, 3624.000), stdev = 0.001
[info]   CI (99.9%): [3624.000, 3624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2501.029 ±(99.9%) 731.331 MB/sec [Average]
[info]   (min, avg, max) = (2342.112, 2501.029, 2720.995), stdev = 189.924
[info]   CI (99.9%): [1769.697, 3232.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3702.984 ±(99.9%) 1055.014 B/op [Average]
[info]   (min, avg, max) = (3470.830, 3702.984, 4062.231), stdev = 273.984
[info]   CI (99.9%): [2647.969, 4757.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.167 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.167, 0.249), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 68.18% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1566219.868 ops/s
[info] # Warmup Iteration   2: 3410029.202 ops/s
[info] # Warmup Iteration   3: 3430421.481 ops/s
[info] Iteration   1: 3422396.365 ops/s
[info]                  ·gc.alloc.rate:                   1983.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     909.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3449806.392 ops/s
[info]                  ·gc.alloc.rate:                   1999.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     911.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3426805.375 ops/s
[info]                  ·gc.alloc.rate:                   1985.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3451277.604 ops/s
[info]                  ·gc.alloc.rate:                   2000.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     923.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3449682.196 ops/s
[info]                  ·gc.alloc.rate:                   1998.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     927.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3439993.587 ±(99.9%) 54493.092 ops/s [Average]
[info]   (min, avg, max) = (3422396.365, 3439993.587, 3451277.604), stdev = 14151.683
[info]   CI (99.9%): [3385500.495, 3494486.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1993.432 ±(99.9%) 31.953 MB/sec [Average]
[info]   (min, avg, max) = (1983.112, 1993.432, 2000.349), stdev = 8.298
[info]   CI (99.9%): [1961.479, 2025.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2009.586 ±(99.9%) 83.197 MB/sec [Average]
[info]   (min, avg, max) = (1978.458, 2009.586, 2032.411), stdev = 21.606
[info]   CI (99.9%): [1926.388, 2092.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   919.382 ±(99.9%) 30.799 B/op [Average]
[info]   (min, avg, max) = (909.860, 919.382, 927.262), stdev = 7.998
[info]   CI (99.9%): [888.583, 950.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.040, 0.057), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 68.48% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7971688.806 ops/s
[info] # Warmup Iteration   2: 9420475.471 ops/s
[info] # Warmup Iteration   3: 10144990.744 ops/s
[info] Iteration   1: 10182077.630 ops/s
[info]                  ·gc.alloc.rate:                   621.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10291629.882 ops/s
[info]                  ·gc.alloc.rate:               627.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 10152796.431 ops/s
[info]                  ·gc.alloc.rate:                   619.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9773850.142 ops/s
[info]                  ·gc.alloc.rate:               596.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106.839 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 10197281.219 ops/s
[info]                  ·gc.alloc.rate:                   621.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   10119527.061 ±(99.9%) 770554.758 ops/s [Average]
[info]   (min, avg, max) = (9773850.142, 10119527.061, 10291629.882), stdev = 200110.624
[info]   CI (99.9%): [9348972.302, 10890081.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   617.308 ±(99.9%) 47.068 MB/sec [Average]
[info]   (min, avg, max) = (596.180, 617.308, 627.764), stdev = 12.223
[info]   CI (99.9%): [570.241, 664.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.525 ±(99.9%) 572.072 MB/sec [Average]
[info]   (min, avg, max) = (331.765, 597.525, 664.799), stdev = 148.565
[info]   CI (99.9%): [25.453, 1169.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   93.128 ±(99.9%) 91.517 B/op [Average]
[info]   (min, avg, max) = (50.735, 93.128, 106.839), stdev = 23.767
[info]   CI (99.9%): [1.611, 184.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.016), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 68.79% complete, ETA 00:21:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144382.226 ops/s
[info] # Warmup Iteration   2: 437473.797 ops/s
[info] # Warmup Iteration   3: 447818.729 ops/s
[info] Iteration   1: 450433.635 ops/s
[info]                  ·gc.alloc.rate:                   1607.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5714.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 444165.349 ops/s
[info]                  ·gc.alloc.rate:                   1585.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5842.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.516 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 452288.600 ops/s
[info]                  ·gc.alloc.rate:                   1613.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5789.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 447560.091 ops/s
[info]                  ·gc.alloc.rate:                   1597.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5887.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 447946.273 ops/s
[info]                  ·gc.alloc.rate:                   1598.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4732.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   448478.790 ±(99.9%) 11879.318 ops/s [Average]
[info]   (min, avg, max) = (444165.349, 448478.790, 452288.600), stdev = 3085.021
[info]   CI (99.9%): [436599.471, 460358.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1600.397 ±(99.9%) 41.543 MB/sec [Average]
[info]   (min, avg, max) = (1585.497, 1600.397, 1613.899), stdev = 10.789
[info]   CI (99.9%): [1558.854, 1641.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5616.001, 5616.001, 5616.001), stdev = 0.001
[info]   CI (99.9%): [5616.001, 5616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1593.928 ±(99.9%) 534.651 MB/sec [Average]
[info]   (min, avg, max) = (1346.956, 1593.928, 1674.349), stdev = 138.847
[info]   CI (99.9%): [1059.277, 2128.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5593.242 ±(99.9%) 1869.448 B/op [Average]
[info]   (min, avg, max) = (4732.498, 5593.242, 5887.994), stdev = 485.490
[info]   CI (99.9%): [3723.794, 7462.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.234 ±(99.9%) 0.679 B/op [Average]
[info]   (min, avg, max) = (0.073, 0.234, 0.516), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 69.09% complete, ETA 00:21:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1141061.215 ops/s
[info] # Warmup Iteration   2: 2034743.525 ops/s
[info] # Warmup Iteration   3: 2124787.766 ops/s
[info] Iteration   1: 2125073.819 ops/s
[info]                  ·gc.alloc.rate:                   1285.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2087909.918 ops/s
[info]                  ·gc.alloc.rate:                   1262.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     989.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2112118.054 ops/s
[info]                  ·gc.alloc.rate:                   1277.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2133703.457 ops/s
[info]                  ·gc.alloc.rate:                   1290.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     735.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2135849.167 ops/s
[info]                  ·gc.alloc.rate:                   1292.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2118930.883 ±(99.9%) 75822.197 ops/s [Average]
[info]   (min, avg, max) = (2087909.918, 2118930.883, 2135849.167), stdev = 19690.784
[info]   CI (99.9%): [2043108.686, 2194753.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1281.762 ±(99.9%) 46.179 MB/sec [Average]
[info]   (min, avg, max) = (1262.912, 1281.762, 1292.261), stdev = 11.993
[info]   CI (99.9%): [1235.582, 1327.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1255.002 ±(99.9%) 556.826 MB/sec [Average]
[info]   (min, avg, max) = (997.223, 1255.002, 1337.298), stdev = 144.606
[info]   CI (99.9%): [698.176, 1811.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   932.495 ±(99.9%) 425.306 B/op [Average]
[info]   (min, avg, max) = (735.572, 932.495, 989.722), stdev = 110.451
[info]   CI (99.9%): [507.189, 1357.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.053, 0.062), stdev = 0.014
[info]   CI (99.9%): [≈ 10⁻⁴, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 69.39% complete, ETA 00:21:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7512772.467 ops/s
[info] # Warmup Iteration   2: 5070603.293 ops/s
[info] # Warmup Iteration   3: 5159105.482 ops/s
[info] Iteration   1: 5160531.489 ops/s
[info]                  ·gc.alloc.rate:                   682.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5113424.688 ops/s
[info]                  ·gc.alloc.rate:                   675.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5062032.747 ops/s
[info]                  ·gc.alloc.rate:               669.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 206.695 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5154984.539 ops/s
[info]                  ·gc.alloc.rate:                   681.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5152504.092 ops/s
[info]                  ·gc.alloc.rate:                   680.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5128695.511 ±(99.9%) 160491.647 ops/s [Average]
[info]   (min, avg, max) = (5062032.747, 5128695.511, 5160531.489), stdev = 41679.171
[info]   CI (99.9%): [4968203.864, 5289187.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   677.822 ±(99.9%) 21.195 MB/sec [Average]
[info]   (min, avg, max) = (669.003, 677.822, 682.015), stdev = 5.504
[info]   CI (99.9%): [656.627, 699.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.505 ±(99.9%) 3.598 MB/sec [Average]
[info]   (min, avg, max) = (664.806, 665.505, 666.854), stdev = 0.935
[info]   CI (99.9%): [661.907, 669.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   204.230 ±(99.9%) 5.906 B/op [Average]
[info]   (min, avg, max) = (202.766, 204.230, 206.695), stdev = 1.534
[info]   CI (99.9%): [198.324, 210.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.044), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 69.70% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137475.114 ops/s
[info] # Warmup Iteration   2: 404256.378 ops/s
[info] # Warmup Iteration   3: 420252.418 ops/s
[info] Iteration   1: 423704.178 ops/s
[info]                  ·gc.alloc.rate:                   1987.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7329.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 423784.534 ops/s
[info]                  ·gc.alloc.rate:                   1988.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7407.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.541 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 411456.161 ops/s
[info]                  ·gc.alloc.rate:                   1930.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7690.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 420657.656 ops/s
[info]                  ·gc.alloc.rate:                   1973.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7565.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 423694.885 ops/s
[info]                  ·gc.alloc.rate:                   1987.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6282.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   420659.483 ±(99.9%) 20462.007 ops/s [Average]
[info]   (min, avg, max) = (411456.161, 420659.483, 423784.534), stdev = 5313.918
[info]   CI (99.9%): [400197.476, 441121.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1973.561 ±(99.9%) 95.956 MB/sec [Average]
[info]   (min, avg, max) = (1930.394, 1973.561, 1988.192), stdev = 24.919
[info]   CI (99.9%): [1877.605, 2069.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1938.257 ±(99.9%) 536.276 MB/sec [Average]
[info]   (min, avg, max) = (1691.306, 1938.257, 2022.093), stdev = 139.269
[info]   CI (99.9%): [1401.980, 2474.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7254.881 ±(99.9%) 2160.854 B/op [Average]
[info]   (min, avg, max) = (6282.721, 7254.881, 7690.089), stdev = 561.167
[info]   CI (99.9%): [5094.026, 9415.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.342 ±(99.9%) 0.534 B/op [Average]
[info]   (min, avg, max) = (0.159, 0.342, 0.541), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 70.00% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1561655.651 ops/s
[info] # Warmup Iteration   2: 2553325.147 ops/s
[info] # Warmup Iteration   3: 2621559.124 ops/s
[info] Iteration   1: 2655932.883 ops/s
[info]                  ·gc.alloc.rate:                   1403.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     774.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2570889.872 ops/s
[info]                  ·gc.alloc.rate:                   1359.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2601537.639 ops/s
[info]                  ·gc.alloc.rate:                   1375.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2632074.828 ops/s
[info]                  ·gc.alloc.rate:                   1392.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     997.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2649213.728 ops/s
[info]                  ·gc.alloc.rate:                   1401.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     797.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2621929.790 ±(99.9%) 136473.395 ops/s [Average]
[info]   (min, avg, max) = (2570889.872, 2621929.790, 2655932.883), stdev = 35441.707
[info]   CI (99.9%): [2485456.394, 2758403.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1386.286 ±(99.9%) 72.793 MB/sec [Average]
[info]   (min, avg, max) = (1359.038, 1386.286, 1403.928), stdev = 18.904
[info]   CI (99.9%): [1313.493, 1459.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1391.527 ±(99.9%) 598.387 MB/sec [Average]
[info]   (min, avg, max) = (1306.898, 1391.527, 1668.507), stdev = 155.399
[info]   CI (99.9%): [793.140, 1989.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   835.074 ±(99.9%) 352.019 B/op [Average]
[info]   (min, avg, max) = (774.498, 835.074, 997.215), stdev = 91.418
[info]   CI (99.9%): [483.055, 1187.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.057, 0.087), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 70.30% complete, ETA 00:20:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7912209.563 ops/s
[info] # Warmup Iteration   2: 6635189.579 ops/s
[info] # Warmup Iteration   3: 6824985.569 ops/s
[info] Iteration   1: 6805304.285 ops/s
[info]                  ·gc.alloc.rate:                   1037.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6700003.951 ops/s
[info]                  ·gc.alloc.rate:                   1021.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6850246.641 ops/s
[info]                  ·gc.alloc.rate:                   1044.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6871287.406 ops/s
[info]                  ·gc.alloc.rate:                   1047.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6688630.947 ops/s
[info]                  ·gc.alloc.rate:                   1019.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6783094.646 ±(99.9%) 325647.452 ops/s [Average]
[info]   (min, avg, max) = (6688630.947, 6783094.646, 6871287.406), stdev = 84569.609
[info]   CI (99.9%): [6457447.194, 7108742.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1034.371 ±(99.9%) 49.731 MB/sec [Average]
[info]   (min, avg, max) = (1019.997, 1034.371, 1047.926), stdev = 12.915
[info]   CI (99.9%): [984.639, 1084.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1000.556 ±(99.9%) 18.006 MB/sec [Average]
[info]   (min, avg, max) = (995.175, 1000.556, 1006.609), stdev = 4.676
[info]   CI (99.9%): [982.550, 1018.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   232.185 ±(99.9%) 12.473 B/op [Average]
[info]   (min, avg, max) = (229.647, 232.185, 236.850), stdev = 3.239
[info]   CI (99.9%): [219.711, 244.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.012, 0.015), stdev = 0.003
[info]   CI (99.9%): [0.001, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 70.61% complete, ETA 00:20:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261021.747 ops/s
[info] # Warmup Iteration   2: 652529.628 ops/s
[info] # Warmup Iteration   3: 656552.789 ops/s
[info] Iteration   1: 644442.192 ops/s
[info]                  ·gc.alloc.rate:                   1912.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4823.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 653654.481 ops/s
[info]                  ·gc.alloc.rate:                   1941.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4803.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 650704.432 ops/s
[info]                  ·gc.alloc.rate:                   1932.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4865.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 648385.863 ops/s
[info]                  ·gc.alloc.rate:                   1924.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4090.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 650160.632 ops/s
[info]                  ·gc.alloc.rate:                   1929.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4913.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   649469.520 ±(99.9%) 13053.184 ops/s [Average]
[info]   (min, avg, max) = (644442.192, 649469.520, 653654.481), stdev = 3389.870
[info]   CI (99.9%): [636416.336, 662522.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1928.275 ±(99.9%) 40.192 MB/sec [Average]
[info]   (min, avg, max) = (1912.981, 1928.275, 1941.262), stdev = 10.438
[info]   CI (99.9%): [1888.082, 1968.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4672.001, 4672.001, 4672.001), stdev = 0.001
[info]   CI (99.9%): [4672.001, 4672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.724 ±(99.9%) 552.994 MB/sec [Average]
[info]   (min, avg, max) = (1685.363, 1939.724, 2029.647), stdev = 143.611
[info]   CI (99.9%): [1386.730, 2492.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4699.464 ±(99.9%) 1319.717 B/op [Average]
[info]   (min, avg, max) = (4090.997, 4699.464, 4913.474), stdev = 342.726
[info]   CI (99.9%): [3379.747, 6019.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.202 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.202, 0.301), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.91% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 449579.837 ops/s
[info] # Warmup Iteration   2: 788869.516 ops/s
[info] # Warmup Iteration   3: 807788.322 ops/s
[info] Iteration   1: 835273.141 ops/s
[info]                  ·gc.alloc.rate:                   2772.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5060.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 834565.956 ops/s
[info]                  ·gc.alloc.rate:                   2770.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5096.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 822648.765 ops/s
[info]                  ·gc.alloc.rate:                   2730.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5190.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 830124.215 ops/s
[info]                  ·gc.alloc.rate:                   2755.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5152.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 820594.072 ops/s
[info]                  ·gc.alloc.rate:                   2723.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5222.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   828641.230 ±(99.9%) 25970.464 ops/s [Average]
[info]   (min, avg, max) = (820594.072, 828641.230, 835273.141), stdev = 6744.447
[info]   CI (99.9%): [802670.766, 854611.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2750.428 ±(99.9%) 86.091 MB/sec [Average]
[info]   (min, avg, max) = (2723.822, 2750.428, 2772.339), stdev = 22.358
[info]   CI (99.9%): [2664.337, 2836.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2708.504 ±(99.9%) 57.002 MB/sec [Average]
[info]   (min, avg, max) = (2685.798, 2708.504, 2723.211), stdev = 14.803
[info]   CI (99.9%): [2651.502, 2765.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5144.791 ±(99.9%) 255.707 B/op [Average]
[info]   (min, avg, max) = (5060.928, 5144.791, 5222.828), stdev = 66.406
[info]   CI (99.9%): [4889.083, 5400.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.100, 0.167), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 0.419 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.189, 0.314), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 71.21% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320740.990 ops/s
[info] # Warmup Iteration   2: 965980.695 ops/s
[info] # Warmup Iteration   3: 992388.735 ops/s
[info] Iteration   1: 998238.520 ops/s
[info]                  ·gc.alloc.rate:                   1238.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1543.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 997934.275 ops/s
[info]                  ·gc.alloc.rate:                   1237.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2066.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 998955.061 ops/s
[info]                  ·gc.alloc.rate:                   1238.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2079.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 997428.986 ops/s
[info]                  ·gc.alloc.rate:                   1237.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2096.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 965143.135 ops/s
[info]                  ·gc.alloc.rate:                   1197.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1633.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   991539.995 ±(99.9%) 56861.076 ops/s [Average]
[info]   (min, avg, max) = (965143.135, 991539.995, 998955.061), stdev = 14766.641
[info]   CI (99.9%): [934678.920, 1048401.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1229.792 ±(99.9%) 70.511 MB/sec [Average]
[info]   (min, avg, max) = (1197.059, 1229.792, 1238.906), stdev = 18.312
[info]   CI (99.9%): [1159.281, 1300.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1187.888 ±(99.9%) 695.690 MB/sec [Average]
[info]   (min, avg, max) = (979.047, 1187.888, 1328.572), stdev = 180.669
[info]   CI (99.9%): [492.198, 1883.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1883.847 ±(99.9%) 1046.944 B/op [Average]
[info]   (min, avg, max) = (1543.375, 1883.847, 2096.490), stdev = 271.888
[info]   CI (99.9%): [836.902, 2930.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.119, 0.164), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 71.52% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5790862.691 ops/s
[info] # Warmup Iteration   2: 7688000.615 ops/s
[info] # Warmup Iteration   3: 7775539.136 ops/s
[info] Iteration   1: 7860689.393 ops/s
[info]                  ·gc.alloc.rate:               359.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102.433 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 7864153.499 ops/s
[info]                  ·gc.alloc.rate:               359.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.194 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7314735.358 ops/s
[info]                  ·gc.alloc.rate:                   334.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7002723.208 ops/s
[info]                  ·gc.alloc.rate:                   320.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6997974.483 ops/s
[info]                  ·gc.alloc.rate:               320.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7408055.188 ±(99.9%) 1671898.182 ops/s [Average]
[info]   (min, avg, max) = (6997974.483, 7408055.188, 7864153.499), stdev = 434186.649
[info]   CI (99.9%): [5736157.006, 9079953.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   338.908 ±(99.9%) 76.537 MB/sec [Average]
[info]   (min, avg, max) = (320.141, 338.908, 359.830), stdev = 19.876
[info]   CI (99.9%): [262.371, 415.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   353.195 ±(99.9%) 364.312 MB/sec [Average]
[info]   (min, avg, max) = (255.848, 353.195, 511.581), stdev = 94.611
[info]   CI (99.9%): [≈ 0, 717.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   74.982 ±(99.9%) 70.228 B/op [Average]
[info]   (min, avg, max) = (51.194, 74.982, 102.433), stdev = 18.238
[info]   CI (99.9%): [4.754, 145.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.340 ±(99.9%) 2.750 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.340, 1.616), stdev = 0.714
[info]   CI (99.9%): [≈ 0, 3.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.348), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.82% complete, ETA 00:19:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34629.443 ops/s
[info] # Warmup Iteration   2: 251129.910 ops/s
[info] # Warmup Iteration   3: 254673.079 ops/s
[info] Iteration   1: 265308.744 ops/s
[info]                  ·gc.alloc.rate:                   1380.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7729.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 260685.304 ops/s
[info]                  ·gc.alloc.rate:                   1356.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7919.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 259896.577 ops/s
[info]                  ·gc.alloc.rate:                   1353.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7995.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 267495.209 ops/s
[info]                  ·gc.alloc.rate:                   1392.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7823.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 268395.699 ops/s
[info]                  ·gc.alloc.rate:                   1397.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9810.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.855 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   264356.307 ±(99.9%) 14968.309 ops/s [Average]
[info]   (min, avg, max) = (259896.577, 264356.307, 268395.699), stdev = 3887.222
[info]   CI (99.9%): [249387.998, 279324.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1376.112 ±(99.9%) 77.387 MB/sec [Average]
[info]   (min, avg, max) = (1353.328, 1376.112, 1397.042), stdev = 20.097
[info]   CI (99.9%): [1298.724, 1453.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8192.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8192.002, 8192.002, 8192.002), stdev = 0.001
[info]   CI (99.9%): [8192.001, 8192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1387.680 ±(99.9%) 615.636 MB/sec [Average]
[info]   (min, avg, max) = (1302.967, 1387.680, 1673.118), stdev = 159.879
[info]   CI (99.9%): [772.045, 2003.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8255.728 ±(99.9%) 3369.644 B/op [Average]
[info]   (min, avg, max) = (7729.498, 8255.728, 9810.856), stdev = 875.086
[info]   CI (99.9%): [4886.085, 11625.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.146), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.495 ±(99.9%) 0.805 B/op [Average]
[info]   (min, avg, max) = (0.367, 0.495, 0.855), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 72.12% complete, ETA 00:19:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5317.018 ops/s
[info] # Warmup Iteration   2: 7688.679 ops/s
[info] # Warmup Iteration   3: 7980.383 ops/s
[info] Iteration   1: 7874.394 ops/s
[info]                  ·gc.alloc.rate:                   2026.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399140.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.802 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8035.399 ops/s
[info]                  ·gc.alloc.rate:                   2067.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     394145.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.231 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8006.833 ops/s
[info]                  ·gc.alloc.rate:                   2061.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     397487.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8046.599 ops/s
[info]                  ·gc.alloc.rate:                   2070.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     396814.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.853 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7874.989 ops/s
[info]                  ·gc.alloc.rate:                   2026.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406596.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.135 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7967.643 ±(99.9%) 331.474 ops/s [Average]
[info]   (min, avg, max) = (7874.394, 7967.643, 8046.599), stdev = 86.083
[info]   CI (99.9%): [7636.169, 8299.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2050.522 ±(99.9%) 85.830 MB/sec [Average]
[info]   (min, avg, max) = (2026.336, 2050.522, 2070.722), stdev = 22.290
[info]   CI (99.9%): [1964.692, 2136.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405000.055 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (405000.054, 405000.055, 405000.059), stdev = 0.002
[info]   CI (99.9%): [405000.046, 405000.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2019.154 ±(99.9%) 57.033 MB/sec [Average]
[info]   (min, avg, max) = (1997.019, 2019.154, 2034.453), stdev = 14.811
[info]   CI (99.9%): [1962.121, 2076.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   398836.898 ±(99.9%) 18083.285 B/op [Average]
[info]   (min, avg, max) = (394145.589, 398836.898, 406596.128), stdev = 4696.172
[info]   CI (99.9%): [380753.613, 416920.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 0.284 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.154, 0.250), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30.418 ±(99.9%) 55.783 B/op [Average]
[info]   (min, avg, max) = (12.231, 30.418, 48.853), stdev = 14.487
[info]   CI (99.9%): [≈ 0, 86.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 72.42% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7433.489 ops/s
[info] # Warmup Iteration   2: 13551.688 ops/s
[info] # Warmup Iteration   3: 13423.415 ops/s
[info] Iteration   1: 13717.693 ops/s
[info]                  ·gc.alloc.rate:                   369.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58695.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13370.242 ops/s
[info]                  ·gc.alloc.rate:               360.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          42424.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30109.413 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 13787.349 ops/s
[info]                  ·gc.alloc.rate:                   371.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36878.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13828.924 ops/s
[info]                  ·gc.alloc.rate:                   372.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36766.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.369 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13737.856 ops/s
[info]                  ·gc.alloc.rate:               370.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          42424.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      646.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74020.720 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13688.413 ±(99.9%) 704.958 ops/s [Average]
[info]   (min, avg, max) = (13370.242, 13688.413, 13828.924), stdev = 183.075
[info]   CI (99.9%): [12983.455, 14393.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   369.000 ±(99.9%) 19.051 MB/sec [Average]
[info]   (min, avg, max) = (360.392, 369.000, 372.781), stdev = 4.948
[info]   CI (99.9%): [349.949, 388.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42424.035 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (42424.031, 42424.035, 42424.043), stdev = 0.005
[info]   CI (99.9%): [42424.017, 42424.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   411.955 ±(99.9%) 623.849 MB/sec [Average]
[info]   (min, avg, max) = (255.779, 411.955, 646.162), stdev = 162.012
[info]   CI (99.9%): [≈ 0, 1035.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47294.331 ±(99.9%) 70974.283 B/op [Average]
[info]   (min, avg, max) = (30109.413, 47294.331, 74020.720), stdev = 18431.796
[info]   CI (99.9%): [≈ 0, 118268.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.557 ±(99.9%) 4.549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.557, 2.669), stdev = 1.181
[info]   CI (99.9%): [≈ 0, 5.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   63.559 ±(99.9%) 519.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.559, 304.679), stdev = 134.862
[info]   CI (99.9%): [≈ 0, 582.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.600, 6.000), stdev = 2.302
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.73% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18141.368 ops/s
[info] # Warmup Iteration   2: 22195.524 ops/s
[info] # Warmup Iteration   3: 21914.526 ops/s
[info] Iteration   1: 21530.997 ops/s
[info]                  ·gc.alloc.rate:                   402.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37398.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21550.413 ops/s
[info]                  ·gc.alloc.rate:                   403.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24252.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22309.689 ops/s
[info]                  ·gc.alloc.rate:                   417.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23426.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22312.892 ops/s
[info]                  ·gc.alloc.rate:                   417.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46797.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22316.466 ops/s
[info]                  ·gc.alloc.rate:                   417.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23395.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22004.091 ±(99.9%) 1629.110 ops/s [Average]
[info]   (min, avg, max) = (21530.997, 22004.091, 22316.466), stdev = 423.075
[info]   CI (99.9%): [20374.982, 23633.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   411.716 ±(99.9%) 30.476 MB/sec [Average]
[info]   (min, avg, max) = (402.867, 411.716, 417.552), stdev = 7.915
[info]   CI (99.9%): [381.240, 442.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29448.022 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (29448.019, 29448.022, 29448.029), stdev = 0.004
[info]   CI (99.9%): [29448.006, 29448.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.203 ±(99.9%) 577.370 MB/sec [Average]
[info]   (min, avg, max) = (331.734, 434.203, 663.492), stdev = 149.941
[info]   CI (99.9%): [≈ 0, 1011.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   31054.194 ±(99.9%) 40896.889 B/op [Average]
[info]   (min, avg, max) = (23395.647, 31054.194, 46797.585), stdev = 10620.792
[info]   CI (99.9%): [≈ 0, 71951.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.367 ±(99.9%) 2.850 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.367, 1.691), stdev = 0.740
[info]   CI (99.9%): [≈ 0, 3.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26.763 ±(99.9%) 208.245 B/op [Average]
[info]   (min, avg, max) = (1.468, 26.763, 123.481), stdev = 54.081
[info]   CI (99.9%): [≈ 0, 235.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 73.03% complete, ETA 00:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 859.356 ops/s
[info] # Warmup Iteration   2: 2214.502 ops/s
[info] # Warmup Iteration   3: 2261.742 ops/s
[info] Iteration   1: 2265.690 ops/s
[info]                  ·gc.alloc.rate:                   1419.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              985536.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     911604.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.921 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2274.342 ops/s
[info]                  ·gc.alloc.rate:                   1424.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1145598.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.404 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2262.950 ops/s
[info]                  ·gc.alloc.rate:               1417.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          985528.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 928156.495 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2294.175 ops/s
[info]                  ·gc.alloc.rate:                   1436.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     920188.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.278 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2288.089 ops/s
[info]                  ·gc.alloc.rate:                   1433.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1158289.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.631 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2277.049 ±(99.9%) 52.738 ops/s [Average]
[info]   (min, avg, max) = (2262.950, 2277.049, 2294.175), stdev = 13.696
[info]   CI (99.9%): [2224.311, 2329.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1426.136 ±(99.9%) 33.460 MB/sec [Average]
[info]   (min, avg, max) = (1417.179, 1426.136, 1436.873), stdev = 8.690
[info]   CI (99.9%): [1392.676, 1459.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   985529.863 ±(99.9%) 14.350 B/op [Average]
[info]   (min, avg, max) = (985528.188, 985529.863, 985536.530), stdev = 3.727
[info]   CI (99.9%): [985515.513, 985544.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1465.810 ±(99.9%) 720.320 MB/sec [Average]
[info]   (min, avg, max) = (1312.601, 1465.810, 1684.658), stdev = 187.065
[info]   CI (99.9%): [745.491, 2186.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1012767.252 ±(99.9%) 490048.609 B/op [Average]
[info]   (min, avg, max) = (911604.025, 1012767.252, 1158289.391), stdev = 127264.068
[info]   CI (99.9%): [522718.643, 1502815.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.247 ±(99.9%) 46.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.247, 28.921), stdev = 12.044
[info]   CI (99.9%): [≈ 0, 63.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 73.33% complete, ETA 00:18:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6218.555 ops/s
[info] # Warmup Iteration   2: 8369.395 ops/s
[info] # Warmup Iteration   3: 8536.253 ops/s
[info] Iteration   1: 8639.397 ops/s
[info]                  ·gc.alloc.rate:                   1988.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363075.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.017 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8652.283 ops/s
[info]                  ·gc.alloc.rate:                   1992.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365214.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.716 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8583.172 ops/s
[info]                  ·gc.alloc.rate:                   1975.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370452.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.718 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8670.389 ops/s
[info]                  ·gc.alloc.rate:                   1996.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368307.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.503 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8593.693 ops/s
[info]                  ·gc.alloc.rate:                   1978.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              362299.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372417.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.744 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8627.787 ±(99.9%) 145.393 ops/s [Average]
[info]   (min, avg, max) = (8583.172, 8627.787, 8670.389), stdev = 37.758
[info]   CI (99.9%): [8482.394, 8773.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1986.232 ±(99.9%) 34.023 MB/sec [Average]
[info]   (min, avg, max) = (1975.698, 1986.232, 1996.002), stdev = 8.836
[info]   CI (99.9%): [1952.209, 2020.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362277.448 ±(99.9%) 46.473 B/op [Average]
[info]   (min, avg, max) = (362272.050, 362277.448, 362299.038), stdev = 12.069
[info]   CI (99.9%): [362230.975, 362323.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2016.974 ±(99.9%) 62.878 MB/sec [Average]
[info]   (min, avg, max) = (1993.403, 2016.974, 2033.549), stdev = 16.329
[info]   CI (99.9%): [1954.096, 2079.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   367893.562 ±(99.9%) 14608.513 B/op [Average]
[info]   (min, avg, max) = (363075.963, 367893.562, 372417.698), stdev = 3793.784
[info]   CI (99.9%): [353285.050, 382502.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.156 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (0.110, 0.156, 0.250), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28.540 ±(99.9%) 38.839 B/op [Average]
[info]   (min, avg, max) = (20.017, 28.540, 45.744), stdev = 10.086
[info]   CI (99.9%): [≈ 0, 67.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.64% complete, ETA 00:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25194.867 ops/s
[info] # Warmup Iteration   2: 41971.647 ops/s
[info] # Warmup Iteration   3: 42508.753 ops/s
[info] Iteration   1: 41966.251 ops/s
[info]                  ·gc.alloc.rate:                   608.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24282.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 42516.112 ops/s
[info]                  ·gc.alloc.rate:                   616.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23968.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.853 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43206.419 ops/s
[info]                  ·gc.alloc.rate:                   626.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23610.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42166.739 ops/s
[info]                  ·gc.alloc.rate:                   611.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24242.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41616.188 ops/s
[info]                  ·gc.alloc.rate:               603.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          22807.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12331.891 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   42294.342 ±(99.9%) 2330.264 ops/s [Average]
[info]   (min, avg, max) = (41616.188, 42294.342, 43206.419), stdev = 605.162
[info]   CI (99.9%): [39964.077, 44624.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   612.929 ±(99.9%) 33.881 MB/sec [Average]
[info]   (min, avg, max) = (603.102, 612.929, 626.221), stdev = 8.799
[info]   CI (99.9%): [579.048, 646.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.855 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (22807.760, 22807.855, 22807.944), stdev = 0.086
[info]   CI (99.9%): [22807.524, 22808.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   583.756 ±(99.9%) 554.658 MB/sec [Average]
[info]   (min, avg, max) = (326.089, 583.756, 649.478), stdev = 144.043
[info]   CI (99.9%): [29.098, 1138.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21687.177 ±(99.9%) 20164.482 B/op [Average]
[info]   (min, avg, max) = (12331.891, 21687.177, 24282.655), stdev = 5236.652
[info]   CI (99.9%): [1522.695, 41851.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.705), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 5.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.828 ±(99.9%) 171.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.828, 101.440), stdev = 44.526
[info]   CI (99.9%): [≈ 0, 193.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 73.94% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56992.776 ops/s
[info] # Warmup Iteration   2: 65505.953 ops/s
[info] # Warmup Iteration   3: 65849.455 ops/s
[info] Iteration   1: 65784.082 ops/s
[info]                  ·gc.alloc.rate:                   495.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14048.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 66201.248 ops/s
[info]                  ·gc.alloc.rate:               498.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7878.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 66001.814 ops/s
[info]                  ·gc.alloc.rate:                   497.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15789.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 66021.557 ops/s
[info]                  ·gc.alloc.rate:               497.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7892.508 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 66124.910 ops/s
[info]                  ·gc.alloc.rate:                   498.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15759.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   66026.722 ±(99.9%) 607.687 ops/s [Average]
[info]   (min, avg, max) = (65784.082, 66026.722, 66201.248), stdev = 157.814
[info]   CI (99.9%): [65419.035, 66634.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   497.430 ±(99.9%) 4.584 MB/sec [Average]
[info]   (min, avg, max) = (495.561, 497.430, 498.693), stdev = 1.190
[info]   CI (99.9%): [492.846, 502.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11856.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11856.007, 11856.007, 11856.007), stdev = 0.001
[info]   CI (99.9%): [11856.006, 11856.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.823 ±(99.9%) 655.781 MB/sec [Average]
[info]   (min, avg, max) = (331.207, 514.823, 662.164), stdev = 170.304
[info]   CI (99.9%): [≈ 0, 1170.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12273.589 ±(99.9%) 15661.434 B/op [Average]
[info]   (min, avg, max) = (7878.612, 12273.589, 15789.080), stdev = 4067.225
[info]   CI (99.9%): [≈ 0, 27935.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.415 ±(99.9%) 3.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 1.909), stdev = 0.836
[info]   CI (99.9%): [≈ 0, 3.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.929 ±(99.9%) 77.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.929, 45.679), stdev = 20.012
[info]   CI (99.9%): [≈ 0, 86.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 74.24% complete, ETA 00:18:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69563.991 ops/s
[info] # Warmup Iteration   2: 78630.236 ops/s
[info] # Warmup Iteration   3: 78633.882 ops/s
[info] Iteration   1: 78982.192 ops/s
[info]                  ·gc.alloc.rate:      1.205 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 79019.481 ops/s
[info]                  ·gc.alloc.rate:      1.205 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 78969.345 ops/s
[info]                  ·gc.alloc.rate:      1.205 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78936.735 ops/s
[info]                  ·gc.alloc.rate:      1.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 78939.604 ops/s
[info]                  ·gc.alloc.rate:      1.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   78969.471 ±(99.9%) 130.958 ops/s [Average]
[info]   (min, avg, max) = (78936.735, 78969.471, 79019.481), stdev = 34.009
[info]   CI (99.9%): [78838.513, 79100.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.205 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (1.204, 1.205, 1.205), stdev = 0.001
[info]   CI (99.9%): [1.203, 1.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.55% complete, ETA 00:17:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2779.398 ops/s
[info] # Warmup Iteration   2: 5785.185 ops/s
[info] # Warmup Iteration   3: 5831.881 ops/s
[info] Iteration   1: 5932.546 ops/s
[info]                  ·gc.alloc.rate:                   1771.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              470023.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     521283.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.088 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5899.505 ops/s
[info]                  ·gc.alloc.rate:                   1761.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              470023.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441571.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.765 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5968.013 ops/s
[info]                  ·gc.alloc.rate:                   1782.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              470023.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     439804.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.910 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5962.875 ops/s
[info]                  ·gc.alloc.rate:                   1781.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              470024.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     531583.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.440 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5934.053 ops/s
[info]                  ·gc.alloc.rate:               1772.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          470023.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1687.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 447534.922 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5939.398 ±(99.9%) 106.102 ops/s [Average]
[info]   (min, avg, max) = (5899.505, 5939.398, 5968.013), stdev = 27.554
[info]   CI (99.9%): [5833.297, 6045.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1774.021 ±(99.9%) 32.551 MB/sec [Average]
[info]   (min, avg, max) = (1761.922, 1774.021, 1782.525), stdev = 8.453
[info]   CI (99.9%): [1741.470, 1806.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   470023.922 ±(99.9%) 0.560 B/op [Average]
[info]   (min, avg, max) = (470023.752, 470023.922, 470024.153), stdev = 0.145
[info]   CI (99.9%): [470023.362, 470024.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1798.124 ±(99.9%) 679.311 MB/sec [Average]
[info]   (min, avg, max) = (1655.265, 1798.124, 2015.032), stdev = 176.415
[info]   CI (99.9%): [1118.813, 2477.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   476355.602 ±(99.9%) 176932.830 B/op [Average]
[info]   (min, avg, max) = (439804.741, 476355.602, 531583.206), stdev = 45948.894
[info]   CI (99.9%): [299422.772, 653288.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.187), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28.641 ±(99.9%) 75.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.641, 49.440), stdev = 19.556
[info]   CI (99.9%): [≈ 0, 103.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 74.85% complete, ETA 00:17:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4677016.329 ops/s
[info] # Warmup Iteration   2: 5235133.151 ops/s
[info] # Warmup Iteration   3: 5225366.125 ops/s
[info] Iteration   1: 5335346.968 ops/s
[info]                  ·gc.alloc.rate:                   1600.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     393.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5309134.802 ops/s
[info]                  ·gc.alloc.rate:                   1592.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5362440.784 ops/s
[info]                  ·gc.alloc.rate:                   1608.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     493.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5309188.435 ops/s
[info]                  ·gc.alloc.rate:                   1592.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     500.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5373258.680 ops/s
[info]                  ·gc.alloc.rate:                   1611.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     396.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5337873.934 ±(99.9%) 114079.048 ops/s [Average]
[info]   (min, avg, max) = (5309134.802, 5337873.934, 5373258.680), stdev = 29625.966
[info]   CI (99.9%): [5223794.886, 5451952.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1600.987 ±(99.9%) 34.070 MB/sec [Average]
[info]   (min, avg, max) = (1592.267, 1600.987, 1611.496), stdev = 8.848
[info]   CI (99.9%): [1566.917, 1635.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1546.842 ±(99.9%) 712.548 MB/sec [Average]
[info]   (min, avg, max) = (1334.323, 1546.842, 1688.819), stdev = 185.047
[info]   CI (99.9%): [834.294, 2259.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   456.169 ±(99.9%) 214.930 B/op [Average]
[info]   (min, avg, max) = (393.499, 456.169, 500.621), stdev = 55.817
[info]   CI (99.9%): [241.238, 671.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.023, 0.037), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 75.15% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128404.570 ops/s
[info] # Warmup Iteration   2: 338972.013 ops/s
[info] # Warmup Iteration   3: 345308.882 ops/s
[info] Iteration   1: 346033.442 ops/s
[info]                  ·gc.alloc.rate:                   1866.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8959.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.757 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 349913.360 ops/s
[info]                  ·gc.alloc.rate:                   1887.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8955.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.562 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 350453.246 ops/s
[info]                  ·gc.alloc.rate:                   1890.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7513.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 342804.464 ops/s
[info]                  ·gc.alloc.rate:                   1848.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9272.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.573 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 346006.019 ops/s
[info]                  ·gc.alloc.rate:                   1866.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9224.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   347042.106 ±(99.9%) 12165.912 ops/s [Average]
[info]   (min, avg, max) = (342804.464, 347042.106, 350453.246), stdev = 3159.449
[info]   CI (99.9%): [334876.195, 359208.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1871.740 ±(99.9%) 66.011 MB/sec [Average]
[info]   (min, avg, max) = (1848.768, 1871.740, 1890.395), stdev = 17.143
[info]   CI (99.9%): [1805.729, 1937.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8488.001, 8488.001, 8488.001), stdev = 0.001
[info]   CI (99.9%): [8488.001, 8488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1936.469 ±(99.9%) 573.307 MB/sec [Average]
[info]   (min, avg, max) = (1673.399, 1936.469, 2028.266), stdev = 148.886
[info]   CI (99.9%): [1363.163, 2509.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8785.349 ±(99.9%) 2794.946 B/op [Average]
[info]   (min, avg, max) = (7513.677, 8785.349, 9272.884), stdev = 725.839
[info]   CI (99.9%): [5990.402, 11580.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.167), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.473 ±(99.9%) 0.896 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.473, 0.757), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 75.45% complete, ETA 00:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2969825.885 ops/s
[info] # Warmup Iteration   2: 3476726.449 ops/s
[info] # Warmup Iteration   3: 3450222.113 ops/s
[info] Iteration   1: 3438487.798 ops/s
[info]                  ·gc.alloc.rate:                   506.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3353533.927 ops/s
[info]                  ·gc.alloc.rate:               494.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.543 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3437975.634 ops/s
[info]                  ·gc.alloc.rate:                   506.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3365704.890 ops/s
[info]                  ·gc.alloc.rate:               496.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.820 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3443299.048 ops/s
[info]                  ·gc.alloc.rate:                   507.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3407800.259 ±(99.9%) 170358.872 ops/s [Average]
[info]   (min, avg, max) = (3353533.927, 3407800.259, 3443299.048), stdev = 44241.658
[info]   CI (99.9%): [3237441.388, 3578159.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   502.384 ±(99.9%) 24.850 MB/sec [Average]
[info]   (min, avg, max) = (494.359, 502.384, 507.551), stdev = 6.454
[info]   CI (99.9%): [477.534, 527.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.972 ±(99.9%) 656.242 MB/sec [Average]
[info]   (min, avg, max) = (331.243, 514.972, 662.796), stdev = 170.424
[info]   CI (99.9%): [≈ 0, 1171.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   237.048 ±(99.9%) 292.771 B/op [Average]
[info]   (min, avg, max) = (154.820, 237.048, 303.130), stdev = 76.032
[info]   CI (99.9%): [≈ 0, 529.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.398 ±(99.9%) 3.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.398, 1.824), stdev = 0.798
[info]   CI (99.9%): [≈ 0, 3.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.182 ±(99.9%) 1.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.835), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 75.76% complete, ETA 00:17:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95309.606 ops/s
[info] # Warmup Iteration   2: 331934.404 ops/s
[info] # Warmup Iteration   3: 334469.188 ops/s
[info] Iteration   1: 336000.582 ops/s
[info]                  ·gc.alloc.rate:                   1316.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6103.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 333080.054 ops/s
[info]                  ·gc.alloc.rate:                   1305.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6194.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 341380.974 ops/s
[info]                  ·gc.alloc.rate:                   1338.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6087.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 342092.181 ops/s
[info]                  ·gc.alloc.rate:                   1340.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6117.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 343224.819 ops/s
[info]                  ·gc.alloc.rate:                   1345.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6133.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   339155.722 ±(99.9%) 16894.713 ops/s [Average]
[info]   (min, avg, max) = (333080.054, 339155.722, 343224.819), stdev = 4387.503
[info]   CI (99.9%): [322261.009, 356050.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1329.484 ±(99.9%) 66.825 MB/sec [Average]
[info]   (min, avg, max) = (1305.596, 1329.484, 1345.758), stdev = 17.354
[info]   CI (99.9%): [1262.660, 1396.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6168.001, 6168.001, 6168.001), stdev = 0.001
[info]   CI (99.9%): [6168.001, 6168.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.657 ±(99.9%) 54.352 MB/sec [Average]
[info]   (min, avg, max) = (1302.992, 1320.657, 1338.337), stdev = 14.115
[info]   CI (99.9%): [1266.305, 1375.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6127.298 ±(99.9%) 159.479 B/op [Average]
[info]   (min, avg, max) = (6087.087, 6127.298, 6194.590), stdev = 41.416
[info]   CI (99.9%): [5967.819, 6286.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.310 ±(99.9%) 0.486 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.310, 0.393), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 76.06% complete, ETA 00:16:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4153925.983 ops/s
[info] # Warmup Iteration   2: 6035502.516 ops/s
[info] # Warmup Iteration   3: 6088722.180 ops/s
[info] Iteration   1: 6089281.968 ops/s
[info]                  ·gc.alloc.rate:                   3868.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3724.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 6101351.242 ops/s
[info]                  ·gc.alloc.rate:                   3878.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1051.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 5973425.310 ops/s
[info]                  ·gc.alloc.rate:                   3797.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3746.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6138838.458 ops/s
[info]                  ·gc.alloc.rate:                   3900.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 6112377.701 ops/s
[info]                  ·gc.alloc.rate:                   3883.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1051.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6083054.936 ±(99.9%) 246289.332 ops/s [Average]
[info]   (min, avg, max) = (5973425.310, 6083054.936, 6138838.458), stdev = 63960.557
[info]   CI (99.9%): [5836765.604, 6329344.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3865.698 ±(99.9%) 154.270 MB/sec [Average]
[info]   (min, avg, max) = (3797.068, 3865.698, 3900.625), stdev = 40.063
[info]   CI (99.9%): [3711.428, 4019.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3875.896 ±(99.9%) 725.911 MB/sec [Average]
[info]   (min, avg, max) = (3724.519, 3875.896, 4084.897), stdev = 188.517
[info]   CI (99.9%): [3149.985, 4601.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1002.587 ±(99.9%) 177.687 B/op [Average]
[info]   (min, avg, max) = (959.992, 1002.587, 1051.888), stdev = 46.145
[info]   CI (99.9%): [824.900, 1180.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.031
[info]   CI (99.9%): [0.002, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.031, 0.043), stdev = 0.008
[info]   CI (99.9%): [≈ 10⁻⁴, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   57.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 10.000), stdev = 1.225
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 76.36% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3507160.262 ops/s
[info] # Warmup Iteration   2: 7486428.817 ops/s
[info] # Warmup Iteration   3: 7543808.158 ops/s
[info] Iteration   1: 7590885.294 ops/s
[info]                  ·gc.alloc.rate:                   3202.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     626.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7363889.116 ops/s
[info]                  ·gc.alloc.rate:                   3107.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 7572739.199 ops/s
[info]                  ·gc.alloc.rate:                   3195.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     635.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7566730.695 ops/s
[info]                  ·gc.alloc.rate:                   3192.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7456143.828 ops/s
[info]                  ·gc.alloc.rate:                   3145.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7510077.627 ±(99.9%) 375046.874 ops/s [Average]
[info]   (min, avg, max) = (7363889.116, 7510077.627, 7590885.294), stdev = 97398.482
[info]   CI (99.9%): [7135030.753, 7885124.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3168.652 ±(99.9%) 157.534 MB/sec [Average]
[info]   (min, avg, max) = (3107.383, 3168.652, 3202.292), stdev = 40.911
[info]   CI (99.9%): [3011.117, 3326.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3184.205 ±(99.9%) 734.449 MB/sec [Average]
[info]   (min, avg, max) = (3019.399, 3184.205, 3404.056), stdev = 190.734
[info]   CI (99.9%): [2449.756, 3918.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   667.734 ±(99.9%) 185.952 B/op [Average]
[info]   (min, avg, max) = (626.077, 667.734, 722.326), stdev = 48.291
[info]   CI (99.9%): [481.783, 853.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.146, 0.187), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.031, 0.040), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 76.67% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36422415.022 ops/s
[info] # Warmup Iteration   2: 45618819.033 ops/s
[info] # Warmup Iteration   3: 47673634.184 ops/s
[info] Iteration   1: 47620426.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47746061.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 47623614.451 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47705521.735 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47254157.935 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   47589956.361 ±(99.9%) 751975.660 ops/s [Average]
[info]   (min, avg, max) = (47254157.935, 47589956.361, 47746061.396), stdev = 195285.691
[info]   CI (99.9%): [46837980.701, 48341932.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 76.97% complete, ETA 00:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13556256.202 ops/s
[info] # Warmup Iteration   2: 16969925.703 ops/s
[info] # Warmup Iteration   3: 17182257.889 ops/s
[info] Iteration   1: 16921130.007 ops/s
[info]                  ·gc.alloc.rate:                   1118.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16927239.673 ops/s
[info]                  ·gc.alloc.rate:                   1118.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17167202.896 ops/s
[info]                  ·gc.alloc.rate:                   1134.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16726073.394 ops/s
[info]                  ·gc.alloc.rate:                   1105.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16896695.557 ops/s
[info]                  ·gc.alloc.rate:                   1116.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   16927668.305 ±(99.9%) 605848.295 ops/s [Average]
[info]   (min, avg, max) = (16726073.394, 16927668.305, 17167202.896), stdev = 157336.878
[info]   CI (99.9%): [16321820.010, 17533516.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1118.672 ±(99.9%) 40.014 MB/sec [Average]
[info]   (min, avg, max) = (1105.211, 1118.672, 1134.363), stdev = 10.392
[info]   CI (99.9%): [1078.658, 1158.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1138.693 ±(99.9%) 697.258 MB/sec [Average]
[info]   (min, avg, max) = (1002.024, 1138.693, 1339.917), stdev = 181.076
[info]   CI (99.9%): [441.435, 1835.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   105.783 ±(99.9%) 62.150 B/op [Average]
[info]   (min, avg, max) = (93.151, 105.783, 124.046), stdev = 16.140
[info]   CI (99.9%): [43.634, 167.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.006, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 77.27% complete, ETA 00:15:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4246487.074 ops/s
[info] # Warmup Iteration   2: 7411118.063 ops/s
[info] # Warmup Iteration   3: 7582400.596 ops/s
[info] Iteration   1: 7559055.236 ops/s
[info]                  ·gc.alloc.rate:                   3650.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3709.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     772.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 7496550.496 ops/s
[info]                  ·gc.alloc.rate:                   3621.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3733.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     783.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 7571091.380 ops/s
[info]                  ·gc.alloc.rate:                   3656.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     706.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7510856.220 ops/s
[info]                  ·gc.alloc.rate:                   3626.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     784.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 7582431.254 ops/s
[info]                  ·gc.alloc.rate:                   3661.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     777.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7543996.917 ±(99.9%) 146470.441 ops/s [Average]
[info]   (min, avg, max) = (7496550.496, 7543996.917, 7582431.254), stdev = 38037.908
[info]   CI (99.9%): [7397526.477, 7690467.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3643.263 ±(99.9%) 69.235 MB/sec [Average]
[info]   (min, avg, max) = (3621.434, 3643.263, 3661.508), stdev = 17.980
[info]   CI (99.9%): [3574.028, 3712.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3666.529 ±(99.9%) 574.882 MB/sec [Average]
[info]   (min, avg, max) = (3400.645, 3666.529, 3744.384), stdev = 149.295
[info]   CI (99.9%): [3091.648, 4241.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   764.919 ±(99.9%) 126.360 B/op [Average]
[info]   (min, avg, max) = (706.885, 764.919, 784.618), stdev = 32.815
[info]   CI (99.9%): [638.559, 891.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.187), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.026, 0.039), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   54.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 77.58% complete, ETA 00:15:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8539204.776 ops/s
[info] # Warmup Iteration   2: 12605978.680 ops/s
[info] # Warmup Iteration   3: 12369692.585 ops/s
[info] Iteration   1: 12162244.901 ops/s
[info]                  ·gc.alloc.rate:                   2349.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2343.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12252105.514 ops/s
[info]                  ·gc.alloc.rate:                   2366.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12440854.255 ops/s
[info]                  ·gc.alloc.rate:                   2402.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12288173.644 ops/s
[info]                  ·gc.alloc.rate:                   2373.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12364676.386 ops/s
[info]                  ·gc.alloc.rate:                   2388.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   12301610.940 ±(99.9%) 410324.879 ops/s [Average]
[info]   (min, avg, max) = (12162244.901, 12301610.940, 12440854.255), stdev = 106560.068
[info]   CI (99.9%): [11891286.061, 12711935.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2376.121 ±(99.9%) 79.149 MB/sec [Average]
[info]   (min, avg, max) = (2349.136, 2376.121, 2402.989), stdev = 20.555
[info]   CI (99.9%): [2296.972, 2455.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2365.222 ±(99.9%) 56.028 MB/sec [Average]
[info]   (min, avg, max) = (2343.119, 2365.222, 2378.746), stdev = 14.550
[info]   CI (99.9%): [2309.194, 2421.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   302.614 ±(99.9%) 6.566 B/op [Average]
[info]   (min, avg, max) = (299.758, 302.614, 304.331), stdev = 1.705
[info]   CI (99.9%): [296.048, 309.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.013, 0.019), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 77.88% complete, ETA 00:15:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4912516.806 ops/s
[info] # Warmup Iteration   2: 11933810.561 ops/s
[info] # Warmup Iteration   3: 11889987.874 ops/s
[info] Iteration   1: 11939866.950 ops/s
[info]                  ·gc.alloc.rate:                   2366.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 12068519.978 ops/s
[info]                  ·gc.alloc.rate:                   2393.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12028722.715 ops/s
[info]                  ·gc.alloc.rate:                   2384.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 11877447.763 ops/s
[info]                  ·gc.alloc.rate:                   2355.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12037583.375 ops/s
[info]                  ·gc.alloc.rate:                   2386.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11990428.156 ±(99.9%) 305085.630 ops/s [Average]
[info]   (min, avg, max) = (11877447.763, 11990428.156, 12068519.978), stdev = 79229.769
[info]   CI (99.9%): [11685342.526, 12295513.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2377.232 ±(99.9%) 59.966 MB/sec [Average]
[info]   (min, avg, max) = (2355.459, 2377.232, 2393.068), stdev = 15.573
[info]   CI (99.9%): [2317.265, 2437.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2423.726 ±(99.9%) 502.682 MB/sec [Average]
[info]   (min, avg, max) = (2349.116, 2423.726, 2656.428), stdev = 130.545
[info]   CI (99.9%): [1921.045, 2926.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   318.150 ±(99.9%) 69.864 B/op [Average]
[info]   (min, avg, max) = (306.270, 318.150, 350.183), stdev = 18.143
[info]   CI (99.9%): [248.287, 388.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.005, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.015, 0.019), stdev = 0.004
[info]   CI (99.9%): [0.001, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 78.18% complete, ETA 00:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31475045.318 ops/s
[info] # Warmup Iteration   2: 43129027.448 ops/s
[info] # Warmup Iteration   3: 45187607.175 ops/s
[info] Iteration   1: 44333470.560 ops/s
[info]                  ·gc.alloc.rate:                   901.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45359291.989 ops/s
[info]                  ·gc.alloc.rate:                   922.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45233349.182 ops/s
[info]                  ·gc.alloc.rate:                   919.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 44501693.642 ops/s
[info]                  ·gc.alloc.rate:                   904.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 44607294.261 ops/s
[info]                  ·gc.alloc.rate:                   906.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   44807019.927 ±(99.9%) 1768913.640 ops/s [Average]
[info]   (min, avg, max) = (44333470.560, 44807019.927, 45359291.989), stdev = 459381.255
[info]   CI (99.9%): [43038106.287, 46575933.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   911.018 ±(99.9%) 35.934 MB/sec [Average]
[info]   (min, avg, max) = (901.360, 911.018, 922.216), stdev = 9.332
[info]   CI (99.9%): [875.084, 946.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   931.551 ±(99.9%) 569.909 MB/sec [Average]
[info]   (min, avg, max) = (666.849, 931.551, 1002.562), stdev = 148.004
[info]   CI (99.9%): [361.642, 1501.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   32.708 ±(99.9%) 19.694 B/op [Average]
[info]   (min, avg, max) = (23.583, 32.708, 35.372), stdev = 5.114
[info]   CI (99.9%): [13.015, 52.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 78.48% complete, ETA 00:15:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45605017.875 ops/s
[info] # Warmup Iteration   2: 57397995.644 ops/s
[info] # Warmup Iteration   3: 58956336.738 ops/s
[info] Iteration   1: 57996882.926 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 58932690.491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 58948010.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 58965569.874 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 58900541.919 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   58748739.156 ±(99.9%) 1621041.770 ops/s [Average]
[info]   (min, avg, max) = (57996882.926, 58748739.156, 58965569.874), stdev = 420979.400
[info]   CI (99.9%): [57127697.386, 60369780.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 78.79% complete, ETA 00:14:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13043729.237 ops/s
[info] # Warmup Iteration   2: 13076384.586 ops/s
[info] # Warmup Iteration   3: 13234895.135 ops/s
[info] Iteration   1: 13362082.053 ops/s
[info]                  ·gc.alloc.rate:                   2242.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13352109.594 ops/s
[info]                  ·gc.alloc.rate:                   2239.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13472820.426 ops/s
[info]                  ·gc.alloc.rate:                   2259.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13355814.330 ops/s
[info]                  ·gc.alloc.rate:                   2241.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13348828.260 ops/s
[info]                  ·gc.alloc.rate:                   2239.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   13378330.933 ±(99.9%) 204277.062 ops/s [Average]
[info]   (min, avg, max) = (13348828.260, 13378330.933, 13472820.426), stdev = 53050.104
[info]   CI (99.9%): [13174053.871, 13582607.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2244.467 ±(99.9%) 33.587 MB/sec [Average]
[info]   (min, avg, max) = (2239.066, 2244.467, 2259.909), stdev = 8.722
[info]   CI (99.9%): [2210.880, 2278.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2237.259 ±(99.9%) 699.488 MB/sec [Average]
[info]   (min, avg, max) = (2035.081, 2237.259, 2379.372), stdev = 181.655
[info]   CI (99.9%): [1537.771, 2936.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   263.191 ±(99.9%) 84.363 B/op [Average]
[info]   (min, avg, max) = (237.736, 263.191, 280.249), stdev = 21.909
[info]   CI (99.9%): [178.828, 347.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.011, 0.017), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 79.09% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1566018.111 ops/s
[info] # Warmup Iteration   2: 2182620.125 ops/s
[info] # Warmup Iteration   3: 2253635.798 ops/s
[info] Iteration   1: 2233005.421 ops/s
[info]                  ·gc.alloc.rate:                   1930.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1408.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2220868.552 ops/s
[info]                  ·gc.alloc.rate:                   1919.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1188.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2251081.194 ops/s
[info]                  ·gc.alloc.rate:                   1945.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1413.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2266208.751 ops/s
[info]                  ·gc.alloc.rate:                   1958.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1409.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2270535.356 ops/s
[info]                  ·gc.alloc.rate:                   1962.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1410.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2248339.855 ±(99.9%) 81894.560 ops/s [Average]
[info]   (min, avg, max) = (2220868.552, 2248339.855, 2270535.356), stdev = 21267.757
[info]   CI (99.9%): [2166445.294, 2330234.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1943.207 ±(99.9%) 71.232 MB/sec [Average]
[info]   (min, avg, max) = (1919.121, 1943.207, 1962.861), stdev = 18.499
[info]   CI (99.9%): [1871.976, 2014.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1360.000, 1360.000, 1360.000), stdev = 0.001
[info]   CI (99.9%): [1360.000, 1360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1952.757 ±(99.9%) 596.462 MB/sec [Average]
[info]   (min, avg, max) = (1676.770, 1952.757, 2035.977), stdev = 154.899
[info]   CI (99.9%): [1356.295, 2549.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1366.131 ±(99.9%) 382.974 B/op [Average]
[info]   (min, avg, max) = (1188.256, 1366.131, 1413.970), stdev = 99.457
[info]   CI (99.9%): [983.158, 1749.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.067, 0.087), stdev = 0.016
[info]   CI (99.9%): [0.004, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 79.39% complete, ETA 00:14:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447482.312 ops/s
[info] # Warmup Iteration   2: 657773.283 ops/s
[info] # Warmup Iteration   3: 663458.391 ops/s
[info] Iteration   1: 650593.070 ops/s
[info]                  ·gc.alloc.rate:                   2372.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6484.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 668028.863 ops/s
[info]                  ·gc.alloc.rate:                   2435.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5563.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 668421.400 ops/s
[info]                  ·gc.alloc.rate:                   2436.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5581.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.441 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 662704.032 ops/s
[info]                  ·gc.alloc.rate:                   2415.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5643.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 661014.472 ops/s
[info]                  ·gc.alloc.rate:                   2410.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5664.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   662152.368 ±(99.9%) 27837.417 ops/s [Average]
[info]   (min, avg, max) = (650593.070, 662152.368, 668421.400), stdev = 7229.289
[info]   CI (99.9%): [634314.951, 689989.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2413.991 ±(99.9%) 100.642 MB/sec [Average]
[info]   (min, avg, max) = (2372.179, 2413.991, 2436.468), stdev = 26.136
[info]   CI (99.9%): [2313.350, 2514.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2434.287 ±(99.9%) 533.645 MB/sec [Average]
[info]   (min, avg, max) = (2362.040, 2434.287, 2681.901), stdev = 138.586
[info]   CI (99.9%): [1900.641, 2967.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5787.405 ±(99.9%) 1510.047 B/op [Average]
[info]   (min, avg, max) = (5563.147, 5787.405, 6484.917), stdev = 392.154
[info]   CI (99.9%): [4277.358, 7297.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.187), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.316 ±(99.9%) 0.411 B/op [Average]
[info]   (min, avg, max) = (0.148, 0.316, 0.441), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 79.70% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273154.516 ops/s
[info] # Warmup Iteration   2: 622776.595 ops/s
[info] # Warmup Iteration   3: 626125.291 ops/s
[info] Iteration   1: 636431.078 ops/s
[info]                  ·gc.alloc.rate:                   740.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2403.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 641153.965 ops/s
[info]                  ·gc.alloc.rate:                   746.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1590.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 641507.992 ops/s
[info]                  ·gc.alloc.rate:               746.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1591.857 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 623710.552 ops/s
[info]                  ·gc.alloc.rate:                   726.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2465.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 641392.337 ops/s
[info]                  ·gc.alloc.rate:                   746.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1606.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   636839.185 ±(99.9%) 29431.229 ops/s [Average]
[info]   (min, avg, max) = (623710.552, 636839.185, 641507.992), stdev = 7643.197
[info]   CI (99.9%): [607407.955, 666270.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   741.458 ±(99.9%) 34.034 MB/sec [Average]
[info]   (min, avg, max) = (726.338, 741.458, 746.926), stdev = 8.839
[info]   CI (99.9%): [707.424, 775.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   780.237 ±(99.9%) 683.375 MB/sec [Average]
[info]   (min, avg, max) = (647.872, 780.237, 977.357), stdev = 177.470
[info]   CI (99.9%): [96.862, 1463.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1931.506 ±(99.9%) 1769.603 B/op [Average]
[info]   (min, avg, max) = (1590.250, 1931.506, 2465.131), stdev = 459.560
[info]   CI (99.9%): [161.903, 3701.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.592 ±(99.9%) 4.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.592, 2.688), stdev = 1.173
[info]   CI (99.9%): [≈ 0, 5.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.463 ±(99.9%) 11.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.463, 6.646), stdev = 2.900
[info]   CI (99.9%): [≈ 0, 12.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.483
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.00% complete, ETA 00:14:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2661804.967 ops/s
[info] # Warmup Iteration   2: 3162626.182 ops/s
[info] # Warmup Iteration   3: 3166608.508 ops/s
[info] Iteration   1: 3164517.195 ops/s
[info]                  ·gc.alloc.rate:                   1319.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     661.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3123828.201 ops/s
[info]                  ·gc.alloc.rate:                   1302.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     672.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3152367.143 ops/s
[info]                  ·gc.alloc.rate:                   1314.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     669.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3181878.628 ops/s
[info]                  ·gc.alloc.rate:                   1326.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     665.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3195335.388 ops/s
[info]                  ·gc.alloc.rate:                   1332.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     664.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3163585.311 ±(99.9%) 106330.362 ops/s [Average]
[info]   (min, avg, max) = (3123828.201, 3163585.311, 3195335.388), stdev = 27613.657
[info]   CI (99.9%): [3057254.949, 3269915.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1318.997 ±(99.9%) 45.191 MB/sec [Average]
[info]   (min, avg, max) = (1302.190, 1318.997, 1332.468), stdev = 11.736
[info]   CI (99.9%): [1273.806, 1364.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1340.593 ±(99.9%) 29.433 MB/sec [Average]
[info]   (min, avg, max) = (1331.462, 1340.593, 1350.320), stdev = 7.644
[info]   CI (99.9%): [1311.160, 1370.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   666.764 ±(99.9%) 15.971 B/op [Average]
[info]   (min, avg, max) = (661.969, 666.764, 672.585), stdev = 4.148
[info]   CI (99.9%): [650.793, 682.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.063), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 80.30% complete, ETA 00:13:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64652.051 ops/s
[info] # Warmup Iteration   2: 225151.037 ops/s
[info] # Warmup Iteration   3: 236179.550 ops/s
[info] Iteration   1: 237413.003 ops/s
[info]                  ·gc.alloc.rate:                   1652.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10841.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 236496.630 ops/s
[info]                  ·gc.alloc.rate:                   1646.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10972.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.693 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 234293.182 ops/s
[info]                  ·gc.alloc.rate:                   1630.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11175.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 234380.813 ops/s
[info]                  ·gc.alloc.rate:                   1630.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11243.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 233976.534 ops/s
[info]                  ·gc.alloc.rate:                   1628.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11329.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   235312.032 ±(99.9%) 5936.154 ops/s [Average]
[info]   (min, avg, max) = (233976.534, 235312.032, 237413.003), stdev = 1541.600
[info]   CI (99.9%): [229375.878, 241248.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1637.629 ±(99.9%) 41.835 MB/sec [Average]
[info]   (min, avg, max) = (1628.206, 1637.629, 1652.112), stdev = 10.864
[info]   CI (99.9%): [1595.794, 1679.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1661.459 ±(99.9%) 74.911 MB/sec [Average]
[info]   (min, avg, max) = (1635.439, 1661.459, 1684.339), stdev = 19.454
[info]   CI (99.9%): [1586.549, 1736.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11112.416 ±(99.9%) 772.967 B/op [Average]
[info]   (min, avg, max) = (10841.475, 11112.416, 11329.575), stdev = 200.737
[info]   CI (99.9%): [10339.449, 11885.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.528 ±(99.9%) 0.954 B/op [Average]
[info]   (min, avg, max) = (0.140, 0.528, 0.700), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.61% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635995.362 ops/s
[info] # Warmup Iteration   2: 905771.520 ops/s
[info] # Warmup Iteration   3: 918072.849 ops/s
[info] Iteration   1: 915739.174 ops/s
[info]                  ·gc.alloc.rate:                   2207.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2339.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4019.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 910833.897 ops/s
[info]                  ·gc.alloc.rate:                   2195.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3487.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 927444.217 ops/s
[info]                  ·gc.alloc.rate:                   2234.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2365.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4014.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 917498.317 ops/s
[info]                  ·gc.alloc.rate:                   2210.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3489.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 900829.150 ops/s
[info]                  ·gc.alloc.rate:                   2170.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4154.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   914468.951 ±(99.9%) 37452.627 ops/s [Average]
[info]   (min, avg, max) = (900829.150, 914468.951, 927444.217), stdev = 9726.328
[info]   CI (99.9%): [877016.324, 951921.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2203.595 ±(99.9%) 89.976 MB/sec [Average]
[info]   (min, avg, max) = (2170.443, 2203.595, 2234.524), stdev = 23.366
[info]   CI (99.9%): [2113.619, 2293.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3792.000, 3792.000, 3792.001), stdev = 0.001
[info]   CI (99.9%): [3792.000, 3792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2227.154 ±(99.9%) 707.252 MB/sec [Average]
[info]   (min, avg, max) = (2019.207, 2227.154, 2377.762), stdev = 183.671
[info]   CI (99.9%): [1519.902, 2934.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3832.900 ±(99.9%) 1230.035 B/op [Average]
[info]   (min, avg, max) = (3487.714, 3832.900, 4154.209), stdev = 319.436
[info]   CI (99.9%): [2602.865, 5062.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 0.268 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.151, 0.218), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 80.91% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 607881.285 ops/s
[info] # Warmup Iteration   2: 1506909.388 ops/s
[info] # Warmup Iteration   3: 1558847.769 ops/s
[info] Iteration   1: 1561144.564 ops/s
[info]                  ·gc.alloc.rate:                   1055.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1567619.131 ops/s
[info]                  ·gc.alloc.rate:                   1059.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1586441.767 ops/s
[info]                  ·gc.alloc.rate:                   1072.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     973.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1549356.733 ops/s
[info]                  ·gc.alloc.rate:                   1047.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1338.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1586292.595 ops/s
[info]                  ·gc.alloc.rate:                   1072.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     987.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1570170.958 ±(99.9%) 62264.626 ops/s [Average]
[info]   (min, avg, max) = (1549356.733, 1570170.958, 1586441.767), stdev = 16169.926
[info]   CI (99.9%): [1507906.332, 1632435.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1061.595 ±(99.9%) 42.437 MB/sec [Average]
[info]   (min, avg, max) = (1047.502, 1061.595, 1072.895), stdev = 11.021
[info]   CI (99.9%): [1019.157, 1104.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1049.137 ±(99.9%) 579.005 MB/sec [Average]
[info]   (min, avg, max) = (973.839, 1049.137, 1317.724), stdev = 150.366
[info]   CI (99.9%): [470.132, 1628.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1052.467 ±(99.9%) 615.956 B/op [Average]
[info]   (min, avg, max) = (973.477, 1052.467, 1338.478), stdev = 159.962
[info]   CI (99.9%): [436.511, 1668.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 81.21% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6038530.414 ops/s
[info] # Warmup Iteration   2: 7413452.403 ops/s
[info] # Warmup Iteration   3: 7398119.720 ops/s
[info] Iteration   1: 7295230.431 ops/s
[info]                  ·gc.alloc.rate:                   815.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7451428.975 ops/s
[info]                  ·gc.alloc.rate:                   833.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7585646.077 ops/s
[info]                  ·gc.alloc.rate:                   848.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7623322.858 ops/s
[info]                  ·gc.alloc.rate:                   852.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7576708.714 ops/s
[info]                  ·gc.alloc.rate:                   847.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   7506467.411 ±(99.9%) 518439.509 ops/s [Average]
[info]   (min, avg, max) = (7295230.431, 7506467.411, 7623322.858), stdev = 134637.094
[info]   CI (99.9%): [6988027.902, 8024906.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   839.547 ±(99.9%) 57.944 MB/sec [Average]
[info]   (min, avg, max) = (815.983, 839.547, 852.533), stdev = 15.048
[info]   CI (99.9%): [781.603, 897.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   863.692 ±(99.9%) 702.002 MB/sec [Average]
[info]   (min, avg, max) = (662.481, 863.692, 1001.384), stdev = 182.308
[info]   CI (99.9%): [161.690, 1565.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   181.217 ±(99.9%) 150.043 B/op [Average]
[info]   (min, avg, max) = (137.397, 181.217, 214.278), stdev = 38.966
[info]   CI (99.9%): [31.173, 331.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.014, 0.026), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.52% complete, ETA 00:12:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183131.731 ops/s
[info] # Warmup Iteration   2: 476204.543 ops/s
[info] # Warmup Iteration   3: 476823.146 ops/s
[info] Iteration   1: 475868.991 ops/s
[info]                  ·gc.alloc.rate:                   1666.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5419.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 476898.213 ops/s
[info]                  ·gc.alloc.rate:                   1670.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5452.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 470095.697 ops/s
[info]                  ·gc.alloc.rate:                   1646.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5576.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 481554.516 ops/s
[info]                  ·gc.alloc.rate:                   1686.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5480.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 482482.627 ops/s
[info]                  ·gc.alloc.rate:                   1689.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5495.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   477380.009 ±(99.9%) 19160.555 ops/s [Average]
[info]   (min, avg, max) = (470095.697, 477380.009, 482482.627), stdev = 4975.935
[info]   CI (99.9%): [458219.454, 496540.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1671.954 ±(99.9%) 67.153 MB/sec [Average]
[info]   (min, avg, max) = (1646.366, 1671.954, 1689.832), stdev = 17.439
[info]   CI (99.9%): [1604.801, 1739.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5512.001, 5512.001, 5512.001), stdev = 0.001
[info]   CI (99.9%): [5512.001, 5512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1663.704 ±(99.9%) 71.098 MB/sec [Average]
[info]   (min, avg, max) = (1638.992, 1663.704, 1684.843), stdev = 18.464
[info]   CI (99.9%): [1592.606, 1734.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5485.023 ±(99.9%) 226.300 B/op [Average]
[info]   (min, avg, max) = (5419.772, 5485.023, 5576.618), stdev = 58.770
[info]   CI (99.9%): [5258.723, 5711.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 0.340 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.260, 0.343), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.82% complete, ETA 00:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 418872.189 ops/s
[info] # Warmup Iteration   2: 644837.971 ops/s
[info] # Warmup Iteration   3: 653407.782 ops/s
[info] Iteration   1: 646817.812 ops/s
[info]                  ·gc.alloc.rate:                   2298.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4885.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 652425.141 ops/s
[info]                  ·gc.alloc.rate:                   2318.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5686.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 650031.526 ops/s
[info]                  ·gc.alloc.rate:                   2309.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5733.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 647584.236 ops/s
[info]                  ·gc.alloc.rate:                   2301.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5771.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 650290.911 ops/s
[info]                  ·gc.alloc.rate:                   2310.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5755.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   649429.925 ±(99.9%) 8675.544 ops/s [Average]
[info]   (min, avg, max) = (646817.812, 649429.925, 652425.141), stdev = 2253.011
[info]   CI (99.9%): [640754.381, 658105.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2307.698 ±(99.9%) 30.046 MB/sec [Average]
[info]   (min, avg, max) = (2298.311, 2307.698, 2318.150), stdev = 7.803
[info]   CI (99.9%): [2277.651, 2337.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5592.001, 5592.001, 5592.001), stdev = 0.001
[info]   CI (99.9%): [5592.001, 5592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2297.496 ±(99.9%) 624.445 MB/sec [Average]
[info]   (min, avg, max) = (2007.770, 2297.496, 2378.373), stdev = 162.166
[info]   CI (99.9%): [1673.052, 2921.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5566.647 ±(99.9%) 1472.268 B/op [Average]
[info]   (min, avg, max) = (4885.089, 5566.647, 5771.725), stdev = 382.343
[info]   CI (99.9%): [4094.379, 7038.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.252 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (0.202, 0.252, 0.301), stdev = 0.035
[info]   CI (99.9%): [0.117, 0.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 82.12% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77008.162 ops/s
[info] # Warmup Iteration   2: 622768.368 ops/s
[info] # Warmup Iteration   3: 640064.721 ops/s
[info] Iteration   1: 637575.068 ops/s
[info]                  ·gc.alloc.rate:                   966.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2401.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 646727.810 ops/s
[info]                  ·gc.alloc.rate:                   980.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2370.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 646972.297 ops/s
[info]                  ·gc.alloc.rate:                   980.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2377.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 651451.817 ops/s
[info]                  ·gc.alloc.rate:                   986.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2376.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 630912.273 ops/s
[info]                  ·gc.alloc.rate:                   955.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2466.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   642727.853 ±(99.9%) 32002.166 ops/s [Average]
[info]   (min, avg, max) = (630912.273, 642727.853, 651451.817), stdev = 8310.861
[info]   CI (99.9%): [610725.687, 674730.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   973.756 ±(99.9%) 48.392 MB/sec [Average]
[info]   (min, avg, max) = (955.732, 973.756, 986.808), stdev = 12.567
[info]   CI (99.9%): [925.364, 1022.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2384.001, 2384.001, 2384.001), stdev = 0.001
[info]   CI (99.9%): [2384.001, 2384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   979.513 ±(99.9%) 25.590 MB/sec [Average]
[info]   (min, avg, max) = (973.329, 979.513, 989.001), stdev = 6.646
[info]   CI (99.9%): [953.923, 1005.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2398.477 ±(99.9%) 154.606 B/op [Average]
[info]   (min, avg, max) = (2370.140, 2398.477, 2466.989), stdev = 40.151
[info]   CI (99.9%): [2243.871, 2553.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.184 ±(99.9%) 0.297 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.184, 0.304), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 82.42% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4454621.822 ops/s
[info] # Warmup Iteration   2: 5070060.298 ops/s
[info] # Warmup Iteration   3: 5193120.957 ops/s
[info] Iteration   1: 5186139.978 ops/s
[info]                  ·gc.alloc.rate:                   1291.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5158781.429 ops/s
[info]                  ·gc.alloc.rate:                   1284.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5167438.912 ops/s
[info]                  ·gc.alloc.rate:                   1287.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5213460.399 ops/s
[info]                  ·gc.alloc.rate:                   1298.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5214162.366 ops/s
[info]                  ·gc.alloc.rate:                   1298.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5187996.617 ±(99.9%) 98410.966 ops/s [Average]
[info]   (min, avg, max) = (5158781.429, 5187996.617, 5214162.366), stdev = 25557.015
[info]   CI (99.9%): [5089585.651, 5286407.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1292.326 ±(99.9%) 24.674 MB/sec [Average]
[info]   (min, avg, max) = (1284.871, 1292.326, 1298.854), stdev = 6.408
[info]   CI (99.9%): [1267.653, 1317.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1272.767 ±(99.9%) 568.792 MB/sec [Average]
[info]   (min, avg, max) = (1008.798, 1272.767, 1348.529), stdev = 147.713
[info]   CI (99.9%): [703.976, 1841.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   386.171 ±(99.9%) 175.986 B/op [Average]
[info]   (min, avg, max) = (304.466, 386.171, 408.214), stdev = 45.703
[info]   CI (99.9%): [210.185, 562.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.025, 0.038), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.73% complete, ETA 00:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134855.861 ops/s
[info] # Warmup Iteration   2: 347158.028 ops/s
[info] # Warmup Iteration   3: 349114.749 ops/s
[info] Iteration   1: 348418.477 ops/s
[info]                  ·gc.alloc.rate:                   1818.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8903.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 350650.347 ops/s
[info]                  ·gc.alloc.rate:                   1830.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7444.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 351613.871 ops/s
[info]                  ·gc.alloc.rate:                   1835.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8979.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 344762.546 ops/s
[info]                  ·gc.alloc.rate:                   1799.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7680.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 351150.236 ops/s
[info]                  ·gc.alloc.rate:                   1833.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9085.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   349319.095 ±(99.9%) 10885.233 ops/s [Average]
[info]   (min, avg, max) = (344762.546, 349319.095, 351613.871), stdev = 2826.861
[info]   CI (99.9%): [338433.862, 360204.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1823.540 ±(99.9%) 56.900 MB/sec [Average]
[info]   (min, avg, max) = (1799.752, 1823.540, 1835.452), stdev = 14.777
[info]   CI (99.9%): [1766.639, 1880.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8216.001, 8216.001, 8216.001), stdev = 0.001
[info]   CI (99.9%): [8216.001, 8216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1869.078 ±(99.9%) 702.856 MB/sec [Average]
[info]   (min, avg, max) = (1658.714, 1869.078, 2027.234), stdev = 182.530
[info]   CI (99.9%): [1166.221, 2571.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8418.801 ±(99.9%) 3036.816 B/op [Average]
[info]   (min, avg, max) = (7444.979, 8418.801, 9085.366), stdev = 788.652
[info]   CI (99.9%): [5381.985, 11455.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.413 ±(99.9%) 0.604 B/op [Average]
[info]   (min, avg, max) = (0.280, 0.413, 0.654), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 1.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 83.03% complete, ETA 00:11:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248937.203 ops/s
[info] # Warmup Iteration   2: 475367.439 ops/s
[info] # Warmup Iteration   3: 481876.507 ops/s
[info] Iteration   1: 483208.420 ops/s
[info]                  ·gc.alloc.rate:                   1321.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4304.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 495670.028 ops/s
[info]                  ·gc.alloc.rate:                   1356.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4214.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 486279.442 ops/s
[info]                  ·gc.alloc.rate:                   1329.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4317.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 484680.906 ops/s
[info]                  ·gc.alloc.rate:                   1325.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4352.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 488688.453 ops/s
[info]                  ·gc.alloc.rate:                   1336.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4333.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   487705.450 ±(99.9%) 18845.100 ops/s [Average]
[info]   (min, avg, max) = (483208.420, 487705.450, 495670.028), stdev = 4894.013
[info]   CI (99.9%): [468860.349, 506550.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1333.933 ±(99.9%) 51.870 MB/sec [Average]
[info]   (min, avg, max) = (1321.903, 1333.933, 1356.001), stdev = 13.470
[info]   CI (99.9%): [1282.062, 1385.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4304.001, 4304.001, 4304.001), stdev = 0.001
[info]   CI (99.9%): [4304.001, 4304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1333.970 ±(99.9%) 36.175 MB/sec [Average]
[info]   (min, avg, max) = (1322.144, 1333.970, 1345.579), stdev = 9.395
[info]   CI (99.9%): [1297.795, 1370.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4304.477 ±(99.9%) 205.488 B/op [Average]
[info]   (min, avg, max) = (4214.491, 4304.477, 4352.257), stdev = 53.365
[info]   CI (99.9%): [4098.989, 4509.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.228 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.228, 0.397), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 83.33% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2786035.114 ops/s
[info] # Warmup Iteration   2: 3299344.694 ops/s
[info] # Warmup Iteration   3: 3293823.729 ops/s
[info] Iteration   1: 3312387.269 ops/s
[info]                  ·gc.alloc.rate:                   505.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.854 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3321407.734 ops/s
[info]                  ·gc.alloc.rate:                   506.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3278300.517 ops/s
[info]                  ·gc.alloc.rate:                   499.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3209664.986 ops/s
[info]                  ·gc.alloc.rate:               489.440 MB/sec
[info]                  ·gc.alloc.rate.norm:          240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.342 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3196770.168 ops/s
[info]                  ·gc.alloc.rate:                   487.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     326.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3263706.135 ±(99.9%) 222149.058 ops/s [Average]
[info]   (min, avg, max) = (3196770.168, 3263706.135, 3321407.734), stdev = 57691.405
[info]   CI (99.9%): [3041557.077, 3485855.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   497.735 ±(99.9%) 33.707 MB/sec [Average]
[info]   (min, avg, max) = (487.684, 497.735, 506.565), stdev = 8.753
[info]   CI (99.9%): [464.029, 531.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.113 ±(99.9%) 656.377 MB/sec [Average]
[info]   (min, avg, max) = (331.069, 515.113, 663.072), stdev = 170.459
[info]   CI (99.9%): [≈ 0, 1171.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   248.579 ±(99.9%) 319.677 B/op [Average]
[info]   (min, avg, max) = (157.197, 248.579, 326.312), stdev = 83.019
[info]   CI (99.9%): [≈ 0, 568.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.389 ±(99.9%) 3.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.797), stdev = 0.788
[info]   CI (99.9%): [≈ 0, 3.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.185 ±(99.9%) 1.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.854), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 1.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.64% complete, ETA 00:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101730.862 ops/s
[info] # Warmup Iteration   2: 324687.389 ops/s
[info] # Warmup Iteration   3: 336487.165 ops/s
[info] Iteration   1: 335321.303 ops/s
[info]                  ·gc.alloc.rate:                   1236.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6107.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 330406.742 ops/s
[info]                  ·gc.alloc.rate:                   1217.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4683.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 335967.710 ops/s
[info]                  ·gc.alloc.rate:                   1238.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6174.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 331490.528 ops/s
[info]                  ·gc.alloc.rate:               1221.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6303.481 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 336902.843 ops/s
[info]                  ·gc.alloc.rate:                   1241.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4675.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   334017.825 ±(99.9%) 11102.213 ops/s [Average]
[info]   (min, avg, max) = (330406.742, 334017.825, 336902.843), stdev = 2883.209
[info]   CI (99.9%): [322915.612, 345120.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1231.124 ±(99.9%) 41.505 MB/sec [Average]
[info]   (min, avg, max) = (1217.600, 1231.124, 1241.551), stdev = 10.779
[info]   CI (99.9%): [1189.619, 1272.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5800.001, 5800.001, 5800.001), stdev = 0.001
[info]   CI (99.9%): [5800.001, 5800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1186.397 ±(99.9%) 684.500 MB/sec [Average]
[info]   (min, avg, max) = (983.208, 1186.397, 1327.592), stdev = 177.763
[info]   CI (99.9%): [501.897, 1870.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5588.812 ±(99.9%) 3207.619 B/op [Average]
[info]   (min, avg, max) = (4675.683, 5588.812, 6303.481), stdev = 833.009
[info]   CI (99.9%): [2381.193, 8796.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.235 ±(99.9%) 0.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.235, 0.389), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.94% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1193789.614 ops/s
[info] # Warmup Iteration   2: 2078965.797 ops/s
[info] # Warmup Iteration   3: 2160433.417 ops/s
[info] Iteration   1: 2146589.200 ops/s
[info]                  ·gc.alloc.rate:                   3284.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2471.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2156881.658 ops/s
[info]                  ·gc.alloc.rate:                   3301.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2473.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2155994.338 ops/s
[info]                  ·gc.alloc.rate:                   3299.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2232.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2136582.039 ops/s
[info]                  ·gc.alloc.rate:                   3268.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2507.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2135292.985 ops/s
[info]                  ·gc.alloc.rate:                   3267.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2258.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2146268.044 ±(99.9%) 39533.539 ops/s [Average]
[info]   (min, avg, max) = (2135292.985, 2146268.044, 2156881.658), stdev = 10266.735
[info]   CI (99.9%): [2106734.505, 2185801.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3284.281 ±(99.9%) 63.002 MB/sec [Average]
[info]   (min, avg, max) = (3267.017, 3284.281, 3301.385), stdev = 16.361
[info]   CI (99.9%): [3221.279, 3347.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.000, 2408.000, 2408.000), stdev = 0.001
[info]   CI (99.9%): [2408.000, 2408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3257.949 ±(99.9%) 691.642 MB/sec [Average]
[info]   (min, avg, max) = (3059.509, 3257.949, 3403.973), stdev = 179.617
[info]   CI (99.9%): [2566.307, 3949.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2388.728 ±(99.9%) 508.095 B/op [Average]
[info]   (min, avg, max) = (2232.580, 2388.728, 2507.489), stdev = 131.951
[info]   CI (99.9%): [1880.633, 2896.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.016, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.089 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.089, 0.107), stdev = 0.020
[info]   CI (99.9%): [0.012, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 84.24% complete, ETA 00:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55216.913 ops/s
[info] # Warmup Iteration   2: 308517.088 ops/s
[info] # Warmup Iteration   3: 311679.566 ops/s
[info] Iteration   1: 318527.441 ops/s
[info]                  ·gc.alloc.rate:                   749.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3215.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 310526.914 ops/s
[info]                  ·gc.alloc.rate:                   731.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3301.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 309320.820 ops/s
[info]                  ·gc.alloc.rate:                   728.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4977.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 310395.553 ops/s
[info]                  ·gc.alloc.rate:               730.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3316.974 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 313912.297 ops/s
[info]                  ·gc.alloc.rate:               738.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3289.637 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   312536.605 ±(99.9%) 14503.552 ops/s [Average]
[info]   (min, avg, max) = (309320.820, 312536.605, 318527.441), stdev = 3766.526
[info]   CI (99.9%): [298033.053, 327040.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   735.642 ±(99.9%) 34.047 MB/sec [Average]
[info]   (min, avg, max) = (728.031, 735.642, 749.643), stdev = 8.842
[info]   CI (99.9%): [701.596, 769.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3704.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3704.001, 3704.001, 3704.001), stdev = 0.001
[info]   CI (99.9%): [3704.001, 3704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   718.264 ±(99.9%) 559.798 MB/sec [Average]
[info]   (min, avg, max) = (650.830, 718.264, 978.295), stdev = 145.378
[info]   CI (99.9%): [158.467, 1278.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3620.329 ±(99.9%) 2924.771 B/op [Average]
[info]   (min, avg, max) = (3215.764, 3620.329, 4977.273), stdev = 759.554
[info]   CI (99.9%): [695.558, 6545.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.482 ±(99.9%) 3.974 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.482, 2.328), stdev = 1.032
[info]   CI (99.9%): [≈ 0, 4.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.385 ±(99.9%) 19.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.385, 11.502), stdev = 5.098
[info]   CI (99.9%): [≈ 0, 22.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.55% complete, ETA 00:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 544529.359 ops/s
[info] # Warmup Iteration   2: 689365.135 ops/s
[info] # Warmup Iteration   3: 729470.869 ops/s
[info] Iteration   1: 725607.028 ops/s
[info]                  ·gc.alloc.rate:                   649.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1443.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.527 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 722612.863 ops/s
[info]                  ·gc.alloc.rate:                   646.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1447.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 716004.074 ops/s
[info]                  ·gc.alloc.rate:                   640.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1461.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 712661.198 ops/s
[info]                  ·gc.alloc.rate:                   637.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1468.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 712467.152 ops/s
[info]                  ·gc.alloc.rate:                   637.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1471.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   717870.463 ±(99.9%) 22955.815 ops/s [Average]
[info]   (min, avg, max) = (712467.152, 717870.463, 725607.028), stdev = 5961.552
[info]   CI (99.9%): [694914.648, 740826.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   642.207 ±(99.9%) 20.494 MB/sec [Average]
[info]   (min, avg, max) = (637.383, 642.207, 649.106), stdev = 5.322
[info]   CI (99.9%): [621.713, 662.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1408.001, 1408.001, 1408.001), stdev = 0.001
[info]   CI (99.9%): [1408.001, 1408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.212 ±(99.9%) 2.310 MB/sec [Average]
[info]   (min, avg, max) = (664.789, 665.212, 666.165), stdev = 0.600
[info]   CI (99.9%): [662.901, 667.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1458.519 ±(99.9%) 47.602 B/op [Average]
[info]   (min, avg, max) = (1443.450, 1458.519, 1471.582), stdev = 12.362
[info]   CI (99.9%): [1410.917, 1506.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 2.693 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.375, 1.626), stdev = 0.699
[info]   CI (99.9%): [≈ 0, 3.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.815 ±(99.9%) 5.838 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.815, 3.527), stdev = 1.516
[info]   CI (99.9%): [≈ 0, 6.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.85% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2823468.407 ops/s
[info] # Warmup Iteration   2: 3832676.295 ops/s
[info] # Warmup Iteration   3: 3964514.993 ops/s
[info] Iteration   1: 4005928.536 ops/s
[info]                  ·gc.alloc.rate:                   2341.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     923.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3925029.048 ops/s
[info]                  ·gc.alloc.rate:                   2294.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     811.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3908710.797 ops/s
[info]                  ·gc.alloc.rate:                   2284.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     954.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3885482.850 ops/s
[info]                  ·gc.alloc.rate:                   2271.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3899689.236 ops/s
[info]                  ·gc.alloc.rate:                   2280.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     960.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3924968.093 ±(99.9%) 182824.519 ops/s [Average]
[info]   (min, avg, max) = (3885482.850, 3924968.093, 4005928.536), stdev = 47478.947
[info]   CI (99.9%): [3742143.574, 4107792.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2294.488 ±(99.9%) 106.220 MB/sec [Average]
[info]   (min, avg, max) = (2271.199, 2294.488, 2341.534), stdev = 27.585
[info]   CI (99.9%): [2188.268, 2400.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2300.397 ±(99.9%) 595.889 MB/sec [Average]
[info]   (min, avg, max) = (2024.393, 2300.397, 2380.547), stdev = 154.750
[info]   CI (99.9%): [1704.508, 2896.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   922.520 ±(99.9%) 246.137 B/op [Average]
[info]   (min, avg, max) = (811.757, 922.520, 962.782), stdev = 63.921
[info]   CI (99.9%): [676.382, 1168.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.027, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 85.15% complete, ETA 00:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6012465.400 ops/s
[info] # Warmup Iteration   2: 7635931.240 ops/s
[info] # Warmup Iteration   3: 8078319.777 ops/s
[info] Iteration   1: 8107851.681 ops/s
[info]                  ·gc.alloc.rate:                   865.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7788503.599 ops/s
[info]                  ·gc.alloc.rate:                   831.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7619963.168 ops/s
[info]                  ·gc.alloc.rate:                   813.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7963061.095 ops/s
[info]                  ·gc.alloc.rate:                   850.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7996641.416 ops/s
[info]                  ·gc.alloc.rate:                   853.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7895204.192 ±(99.9%) 738821.231 ops/s [Average]
[info]   (min, avg, max) = (7619963.168, 7895204.192, 8107851.681), stdev = 191869.527
[info]   CI (99.9%): [7156382.961, 8634025.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   842.830 ±(99.9%) 78.634 MB/sec [Average]
[info]   (min, avg, max) = (813.375, 842.830, 865.416), stdev = 20.421
[info]   CI (99.9%): [764.196, 921.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   866.587 ±(99.9%) 703.506 MB/sec [Average]
[info]   (min, avg, max) = (665.448, 866.587, 1003.911), stdev = 182.698
[info]   CI (99.9%): [163.080, 1570.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   172.764 ±(99.9%) 140.353 B/op [Average]
[info]   (min, avg, max) = (131.925, 172.764, 206.321), stdev = 36.449
[info]   CI (99.9%): [32.411, 313.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.016, 0.025), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.45% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19325.891 ops/s
[info] # Warmup Iteration   2: 167095.898 ops/s
[info] # Warmup Iteration   3: 173959.138 ops/s
[info] Iteration   1: 179870.741 ops/s
[info]                  ·gc.alloc.rate:                   1545.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11412.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 179050.871 ops/s
[info]                  ·gc.alloc.rate:                   1538.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14433.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.915 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 178915.519 ops/s
[info]                  ·gc.alloc.rate:                   1536.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14582.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 177792.585 ops/s
[info]                  ·gc.alloc.rate:                   1527.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11817.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 176754.193 ops/s
[info]                  ·gc.alloc.rate:                   1518.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14938.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.741 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   178476.782 ±(99.9%) 4676.839 ops/s [Average]
[info]   (min, avg, max) = (176754.193, 178476.782, 179870.741), stdev = 1214.560
[info]   CI (99.9%): [173799.942, 183153.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1533.187 ±(99.9%) 40.006 MB/sec [Average]
[info]   (min, avg, max) = (1518.430, 1533.187, 1545.065), stdev = 10.389
[info]   CI (99.9%): [1493.181, 1573.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13520.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13520.002, 13520.002, 13520.003), stdev = 0.001
[info]   CI (99.9%): [13520.002, 13520.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1523.371 ±(99.9%) 719.089 MB/sec [Average]
[info]   (min, avg, max) = (1304.243, 1523.371, 1677.796), stdev = 186.745
[info]   CI (99.9%): [804.282, 2242.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13437.025 ±(99.9%) 6466.927 B/op [Average]
[info]   (min, avg, max) = (11412.707, 13437.025, 14938.983), stdev = 1679.440
[info]   CI (99.9%): [6970.098, 19903.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.734 ±(99.9%) 1.105 B/op [Average]
[info]   (min, avg, max) = (0.366, 0.734, 1.093), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.76% complete, ETA 00:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497402.379 ops/s
[info] # Warmup Iteration   2: 748544.441 ops/s
[info] # Warmup Iteration   3: 748135.045 ops/s
[info] Iteration   1: 753661.795 ops/s
[info]                  ·gc.alloc.rate:                   2903.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3028.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6323.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 759266.714 ops/s
[info]                  ·gc.alloc.rate:                   2925.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5611.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 741224.418 ops/s
[info]                  ·gc.alloc.rate:                   2857.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6487.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 755948.374 ops/s
[info]                  ·gc.alloc.rate:                   2912.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5662.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 746631.853 ops/s
[info]                  ·gc.alloc.rate:                   2876.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6457.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   751346.631 ±(99.9%) 28161.877 ops/s [Average]
[info]   (min, avg, max) = (741224.418, 751346.631, 759266.714), stdev = 7313.550
[info]   CI (99.9%): [723184.754, 779508.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2895.276 ±(99.9%) 107.181 MB/sec [Average]
[info]   (min, avg, max) = (2857.241, 2895.276, 2925.858), stdev = 27.835
[info]   CI (99.9%): [2788.095, 3002.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.001, 6064.001, 6064.001), stdev = 0.001
[info]   CI (99.9%): [6064.001, 6064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2915.253 ±(99.9%) 710.310 MB/sec [Average]
[info]   (min, avg, max) = (2707.643, 2915.253, 3063.569), stdev = 184.465
[info]   CI (99.9%): [2204.943, 3625.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6108.741 ±(99.9%) 1675.893 B/op [Average]
[info]   (min, avg, max) = (5611.737, 6108.741, 6487.892), stdev = 435.224
[info]   CI (99.9%): [4432.848, 7784.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.117, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.073, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.244 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (0.216, 0.244, 0.265), stdev = 0.026
[info]   CI (99.9%): [0.145, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 86.06% complete, ETA 00:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2432519.697 ops/s
[info] # Warmup Iteration   2: 2901427.361 ops/s
[info] # Warmup Iteration   3: 2905380.065 ops/s
[info] Iteration   1: 2869262.768 ops/s
[info]                  ·gc.alloc.rate:                   1852.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1100.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2925215.935 ops/s
[info]                  ·gc.alloc.rate:                   1888.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     904.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2912260.415 ops/s
[info]                  ·gc.alloc.rate:                   1880.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1094.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2908234.282 ops/s
[info]                  ·gc.alloc.rate:                   1877.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     915.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2887913.210 ops/s
[info]                  ·gc.alloc.rate:                   1864.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1109.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   2900577.322 ±(99.9%) 84870.804 ops/s [Average]
[info]   (min, avg, max) = (2869262.768, 2900577.322, 2925215.935), stdev = 22040.678
[info]   CI (99.9%): [2815706.518, 2985448.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1872.650 ±(99.9%) 55.779 MB/sec [Average]
[info]   (min, avg, max) = (1852.063, 1872.650, 1888.660), stdev = 14.486
[info]   CI (99.9%): [1816.871, 1928.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1888.243 ±(99.9%) 709.974 MB/sec [Average]
[info]   (min, avg, max) = (1680.627, 1888.243, 2035.739), stdev = 184.378
[info]   CI (99.9%): [1178.269, 2598.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1024.904 ±(99.9%) 404.602 B/op [Average]
[info]   (min, avg, max) = (904.089, 1024.904, 1109.441), stdev = 105.074
[info]   CI (99.9%): [620.302, 1429.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.045, 0.068), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.36% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63374.939 ops/s
[info] # Warmup Iteration   2: 251751.120 ops/s
[info] # Warmup Iteration   3: 259842.305 ops/s
[info] Iteration   1: 260850.257 ops/s
[info]                  ·gc.alloc.rate:                   1865.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1640.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9897.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.879 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 260421.036 ops/s
[info]                  ·gc.alloc.rate:                   1862.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12013.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 261720.860 ops/s
[info]                  ·gc.alloc.rate:                   1871.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12061.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.751 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 257408.403 ops/s
[info]                  ·gc.alloc.rate:               1841.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1681.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10277.961 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 261506.706 ops/s
[info]                  ·gc.alloc.rate:                   1870.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12199.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   260381.452 ±(99.9%) 6702.935 ops/s [Average]
[info]   (min, avg, max) = (257408.403, 260381.452, 261720.860), stdev = 1740.731
[info]   CI (99.9%): [253678.517, 267084.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1862.232 ±(99.9%) 47.902 MB/sec [Average]
[info]   (min, avg, max) = (1841.003, 1862.232, 1871.732), stdev = 12.440
[info]   CI (99.9%): [1814.330, 1910.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11256.002, 11256.002, 11256.002), stdev = 0.001
[info]   CI (99.9%): [11256.001, 11256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1868.427 ±(99.9%) 734.287 MB/sec [Average]
[info]   (min, avg, max) = (1640.350, 1868.427, 2027.286), stdev = 190.692
[info]   CI (99.9%): [1134.140, 2602.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11290.022 ±(99.9%) 4266.233 B/op [Average]
[info]   (min, avg, max) = (9897.383, 11290.022, 12199.923), stdev = 1107.927
[info]   CI (99.9%): [7023.788, 15556.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.477 ±(99.9%) 1.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 0.879), stdev = 0.348
[info]   CI (99.9%): [≈ 0, 1.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.67% complete, ETA 00:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569562.464 ops/s
[info] # Warmup Iteration   2: 821914.267 ops/s
[info] # Warmup Iteration   3: 820914.027 ops/s
[info] Iteration   1: 823690.183 ops/s
[info]                  ·gc.alloc.rate:                   1914.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3179.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 818206.600 ops/s
[info]                  ·gc.alloc.rate:                   1900.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3866.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 828775.660 ops/s
[info]                  ·gc.alloc.rate:                   1926.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3839.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 824916.779 ops/s
[info]                  ·gc.alloc.rate:                   1916.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3225.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 827948.158 ops/s
[info]                  ·gc.alloc.rate:                   1923.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3866.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   824707.476 ±(99.9%) 16153.466 ops/s [Average]
[info]   (min, avg, max) = (818206.600, 824707.476, 828775.660), stdev = 4195.004
[info]   CI (99.9%): [808554.011, 840860.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1916.182 ±(99.9%) 38.328 MB/sec [Average]
[info]   (min, avg, max) = (1900.560, 1916.182, 1926.075), stdev = 9.954
[info]   CI (99.9%): [1877.853, 1954.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3656.001, 3656.001, 3656.001), stdev = 0.001
[info]   CI (99.9%): [3656.000, 3656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1884.508 ±(99.9%) 727.624 MB/sec [Average]
[info]   (min, avg, max) = (1664.793, 1884.508, 2034.114), stdev = 188.962
[info]   CI (99.9%): [1156.883, 2612.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3595.495 ±(99.9%) 1383.034 B/op [Average]
[info]   (min, avg, max) = (3179.632, 3595.495, 3866.726), stdev = 359.169
[info]   CI (99.9%): [2212.461, 4978.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.183 ±(99.9%) 0.303 B/op [Average]
[info]   (min, avg, max) = (0.119, 0.183, 0.320), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.97% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733976.404 ops/s
[info] # Warmup Iteration   2: 1552495.292 ops/s
[info] # Warmup Iteration   3: 1573439.160 ops/s
[info] Iteration   1: 1571315.815 ops/s
[info]                  ·gc.alloc.rate:                   902.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1518615.354 ops/s
[info]                  ·gc.alloc.rate:                   872.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1519980.541 ops/s
[info]                  ·gc.alloc.rate:               873.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      977.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1011.903 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1569773.999 ops/s
[info]                  ·gc.alloc.rate:                   901.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1502851.022 ops/s
[info]                  ·gc.alloc.rate:                   863.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     689.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1536507.346 ±(99.9%) 122440.585 ops/s [Average]
[info]   (min, avg, max) = (1502851.022, 1536507.346, 1571315.815), stdev = 31797.431
[info]   CI (99.9%): [1414066.761, 1658947.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   882.657 ±(99.9%) 69.887 MB/sec [Average]
[info]   (min, avg, max) = (863.409, 882.657, 902.518), stdev = 18.150
[info]   CI (99.9%): [812.769, 952.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   848.562 ±(99.9%) 682.957 MB/sec [Average]
[info]   (min, avg, max) = (649.746, 848.562, 983.563), stdev = 177.362
[info]   CI (99.9%): [165.605, 1531.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   867.183 ±(99.9%) 655.066 B/op [Average]
[info]   (min, avg, max) = (673.122, 867.183, 1011.903), stdev = 170.119
[info]   CI (99.9%): [212.117, 1522.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.109), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.27% complete, ETA 00:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5099945.891 ops/s
[info] # Warmup Iteration   2: 6015336.750 ops/s
[info] # Warmup Iteration   3: 6335203.450 ops/s
[info] Iteration   1: 6283773.535 ops/s
[info]                  ·gc.alloc.rate:               479.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64.069 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6450983.206 ops/s
[info]                  ·gc.alloc.rate:                   491.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6305582.911 ops/s
[info]                  ·gc.alloc.rate:               480.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82.638 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 6293638.005 ops/s
[info]                  ·gc.alloc.rate:                   480.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6399710.695 ops/s
[info]                  ·gc.alloc.rate:               487.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81.425 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   6346737.670 ±(99.9%) 286550.034 ops/s [Average]
[info]   (min, avg, max) = (6283773.535, 6346737.670, 6450983.206), stdev = 74416.134
[info]   CI (99.9%): [6060187.636, 6633287.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   484.017 ±(99.9%) 21.511 MB/sec [Average]
[info]   (min, avg, max) = (479.295, 484.017, 491.859), stdev = 5.586
[info]   CI (99.9%): [462.506, 505.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.824 ±(99.9%) 762.023 MB/sec [Average]
[info]   (min, avg, max) = (255.900, 448.824, 663.485), stdev = 197.895
[info]   CI (99.9%): [≈ 0, 1210.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   111.118 ±(99.9%) 187.157 B/op [Average]
[info]   (min, avg, max) = (64.069, 111.118, 165.588), stdev = 48.604
[info]   CI (99.9%): [≈ 0, 298.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.383 ±(99.9%) 3.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.855), stdev = 0.823
[info]   CI (99.9%): [≈ 0, 3.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.094 ±(99.9%) 0.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.453), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.58% complete, ETA 00:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182810.267 ops/s
[info] # Warmup Iteration   2: 489326.725 ops/s
[info] # Warmup Iteration   3: 497176.235 ops/s
[info] Iteration   1: 500954.013 ops/s
[info]                  ·gc.alloc.rate:                   1733.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1640.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5155.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 496467.525 ops/s
[info]                  ·gc.alloc.rate:                   1718.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5246.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 502454.825 ops/s
[info]                  ·gc.alloc.rate:                   1739.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5226.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 499360.735 ops/s
[info]                  ·gc.alloc.rate:                   1728.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5289.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 502441.965 ops/s
[info]                  ·gc.alloc.rate:                   1739.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5281.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   500335.813 ±(99.9%) 9669.389 ops/s [Average]
[info]   (min, avg, max) = (496467.525, 500335.813, 502454.825), stdev = 2511.110
[info]   CI (99.9%): [490666.423, 510005.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1732.128 ±(99.9%) 34.073 MB/sec [Average]
[info]   (min, avg, max) = (1718.626, 1732.128, 1739.980), stdev = 8.849
[info]   CI (99.9%): [1698.055, 1766.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1665.992 ±(99.9%) 69.815 MB/sec [Average]
[info]   (min, avg, max) = (1640.997, 1665.992, 1686.224), stdev = 18.131
[info]   CI (99.9%): [1596.178, 1735.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5240.014 ±(99.9%) 206.524 B/op [Average]
[info]   (min, avg, max) = (5155.878, 5240.014, 5289.815), stdev = 53.634
[info]   CI (99.9%): [5033.490, 5446.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.236 ±(99.9%) 0.558 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.236, 0.462), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 87.88% complete, ETA 00:08:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62548.590 ops/s
[info] # Warmup Iteration   2: 567579.089 ops/s
[info] # Warmup Iteration   3: 578514.553 ops/s
[info] Iteration   1: 593244.875 ops/s
[info]                  ·gc.alloc.rate:                   968.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2581.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 592180.241 ops/s
[info]                  ·gc.alloc.rate:                   966.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2588.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 586684.390 ops/s
[info]                  ·gc.alloc.rate:                   957.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2621.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 593297.681 ops/s
[info]                  ·gc.alloc.rate:                   968.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2609.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 592813.818 ops/s
[info]                  ·gc.alloc.rate:                   967.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2625.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   591644.201 ±(99.9%) 10814.626 ops/s [Average]
[info]   (min, avg, max) = (586684.390, 591644.201, 593297.681), stdev = 2808.524
[info]   CI (99.9%): [580829.575, 602458.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   965.521 ±(99.9%) 18.033 MB/sec [Average]
[info]   (min, avg, max) = (957.246, 965.521, 968.288), stdev = 4.683
[info]   CI (99.9%): [947.488, 983.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2568.001, 2568.001, 2568.001), stdev = 0.001
[info]   CI (99.9%): [2568.001, 2568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   979.462 ±(99.9%) 26.045 MB/sec [Average]
[info]   (min, avg, max) = (973.228, 979.462, 989.103), stdev = 6.764
[info]   CI (99.9%): [953.417, 1005.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2605.114 ±(99.9%) 75.854 B/op [Average]
[info]   (min, avg, max) = (2581.102, 2605.114, 2625.340), stdev = 19.699
[info]   CI (99.9%): [2529.259, 2680.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.199 ±(99.9%) 0.189 B/op [Average]
[info]   (min, avg, max) = (0.166, 0.199, 0.276), stdev = 0.049
[info]   CI (99.9%): [0.010, 0.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 88.18% complete, ETA 00:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2870824.717 ops/s
[info] # Warmup Iteration   2: 3343234.261 ops/s
[info] # Warmup Iteration   3: 3256619.417 ops/s
[info] Iteration   1: 3230725.023 ops/s
[info]                  ·gc.alloc.rate:                   1527.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     812.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3310480.678 ops/s
[info]                  ·gc.alloc.rate:                   1565.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     796.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3388665.128 ops/s
[info]                  ·gc.alloc.rate:                   1601.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3254492.942 ops/s
[info]                  ·gc.alloc.rate:                   1538.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3250180.620 ops/s
[info]                  ·gc.alloc.rate:                   1536.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     819.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3286908.878 ±(99.9%) 247059.754 ops/s [Average]
[info]   (min, avg, max) = (3230725.023, 3286908.878, 3388665.128), stdev = 64160.634
[info]   CI (99.9%): [3039849.124, 3533968.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1553.836 ±(99.9%) 116.807 MB/sec [Average]
[info]   (min, avg, max) = (1527.197, 1553.836, 1601.881), stdev = 30.334
[info]   CI (99.9%): [1437.029, 1670.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.575 ±(99.9%) 567.185 MB/sec [Average]
[info]   (min, avg, max) = (1350.601, 1613.575, 1692.360), stdev = 147.296
[info]   CI (99.9%): [1046.390, 2180.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   772.521 ±(99.9%) 263.205 B/op [Average]
[info]   (min, avg, max) = (653.120, 772.521, 819.488), stdev = 68.354
[info]   CI (99.9%): [509.316, 1035.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.028, 0.059), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.48% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108250.163 ops/s
[info] # Warmup Iteration   2: 291580.805 ops/s
[info] # Warmup Iteration   3: 300457.157 ops/s
[info] Iteration   1: 302617.923 ops/s
[info]                  ·gc.alloc.rate:                   1596.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              8304.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8508.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 300740.400 ops/s
[info]                  ·gc.alloc.rate:                   1586.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              8304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8628.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 303590.150 ops/s
[info]                  ·gc.alloc.rate:                   1601.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              8304.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8625.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 301836.895 ops/s
[info]                  ·gc.alloc.rate:                   1592.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              8304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8730.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 297587.539 ops/s
[info]                  ·gc.alloc.rate:                   1570.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              8304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7123.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   301274.582 ±(99.9%) 8898.707 ops/s [Average]
[info]   (min, avg, max) = (297587.539, 301274.582, 303590.150), stdev = 2310.966
[info]   CI (99.9%): [292375.875, 310173.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1589.577 ±(99.9%) 47.017 MB/sec [Average]
[info]   (min, avg, max) = (1570.106, 1589.577, 1601.827), stdev = 12.210
[info]   CI (99.9%): [1542.561, 1636.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8304.001, 8304.001, 8304.002), stdev = 0.001
[info]   CI (99.9%): [8304.001, 8304.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1593.955 ±(99.9%) 534.783 MB/sec [Average]
[info]   (min, avg, max) = (1346.896, 1593.955, 1674.439), stdev = 138.881
[info]   CI (99.9%): [1059.172, 2128.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8323.259 ±(99.9%) 2600.305 B/op [Average]
[info]   (min, avg, max) = (7123.488, 8323.259, 8730.810), stdev = 675.291
[info]   CI (99.9%): [5722.954, 10923.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.348 ±(99.9%) 0.358 B/op [Average]
[info]   (min, avg, max) = (0.217, 0.348, 0.440), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.79% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261311.597 ops/s
[info] # Warmup Iteration   2: 473533.051 ops/s
[info] # Warmup Iteration   3: 480933.854 ops/s
[info] Iteration   1: 469013.506 ops/s
[info]                  ·gc.alloc.rate:                   1268.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4435.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 486897.379 ops/s
[info]                  ·gc.alloc.rate:                   1316.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4292.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 484880.188 ops/s
[info]                  ·gc.alloc.rate:                   1311.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4329.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 481772.682 ops/s
[info]                  ·gc.alloc.rate:                   1302.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4378.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 477241.721 ops/s
[info]                  ·gc.alloc.rate:                   1290.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3325.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   479961.095 ±(99.9%) 27420.536 ops/s [Average]
[info]   (min, avg, max) = (469013.506, 479961.095, 486897.379), stdev = 7121.026
[info]   CI (99.9%): [452540.559, 507381.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1298.011 ±(99.9%) 73.391 MB/sec [Average]
[info]   (min, avg, max) = (1268.813, 1298.011, 1316.667), stdev = 19.059
[info]   CI (99.9%): [1224.620, 1371.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4256.001, 4256.001, 4256.001), stdev = 0.001
[info]   CI (99.9%): [4256.001, 4256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1266.589 ±(99.9%) 556.137 MB/sec [Average]
[info]   (min, avg, max) = (1008.512, 1266.589, 1340.287), stdev = 144.427
[info]   CI (99.9%): [710.453, 1822.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4152.366 ±(99.9%) 1790.999 B/op [Average]
[info]   (min, avg, max) = (3325.842, 4152.366, 4435.011), stdev = 465.117
[info]   CI (99.9%): [2361.367, 5943.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.259 ±(99.9%) 0.469 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.259, 0.404), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 89.09% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2573201.831 ops/s
[info] # Warmup Iteration   2: 2981840.355 ops/s
[info] # Warmup Iteration   3: 3070741.879 ops/s
[info] Iteration   1: 3041969.695 ops/s
[info]                  ·gc.alloc.rate:                   572.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2994176.197 ops/s
[info]                  ·gc.alloc.rate:                   563.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3048501.232 ops/s
[info]                  ·gc.alloc.rate:                   573.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     341.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2966696.168 ops/s
[info]                  ·gc.alloc.rate:                   557.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2969320.404 ops/s
[info]                  ·gc.alloc.rate:               558.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   3004132.739 ±(99.9%) 150529.235 ops/s [Average]
[info]   (min, avg, max) = (2966696.168, 3004132.739, 3048501.232), stdev = 39091.964
[info]   CI (99.9%): [2853603.504, 3154661.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   565.003 ±(99.9%) 28.285 MB/sec [Average]
[info]   (min, avg, max) = (557.925, 565.003, 573.324), stdev = 7.345
[info]   CI (99.9%): [536.718, 593.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.243 ±(99.9%) 698.855 MB/sec [Average]
[info]   (min, avg, max) = (331.137, 530.243, 663.452), stdev = 181.491
[info]   CI (99.9%): [≈ 0, 1229.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   277.319 ±(99.9%) 360.218 B/op [Average]
[info]   (min, avg, max) = (174.026, 277.319, 351.630), stdev = 93.547
[info]   CI (99.9%): [≈ 0, 637.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.772), stdev = 0.774
[info]   CI (99.9%): [≈ 0, 3.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.201 ±(99.9%) 1.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.917), stdev = 0.401
[info]   CI (99.9%): [≈ 0, 1.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 89.39% complete, ETA 00:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96704.864 ops/s
[info] # Warmup Iteration   2: 332701.174 ops/s
[info] # Warmup Iteration   3: 338835.052 ops/s
[info] Iteration   1: 342731.910 ops/s
[info]                  ·gc.alloc.rate:                   1325.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5983.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 340891.702 ops/s
[info]                  ·gc.alloc.rate:                   1318.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6055.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.673 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 344592.945 ops/s
[info]                  ·gc.alloc.rate:                   1333.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6030.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 339739.396 ops/s
[info]                  ·gc.alloc.rate:                   1314.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6159.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 339259.441 ops/s
[info]                  ·gc.alloc.rate:                   1312.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6205.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   341443.079 ±(99.9%) 8514.533 ops/s [Average]
[info]   (min, avg, max) = (339259.441, 341443.079, 344592.945), stdev = 2211.197
[info]   CI (99.9%): [332928.546, 349957.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1320.906 ±(99.9%) 33.650 MB/sec [Average]
[info]   (min, avg, max) = (1312.363, 1320.906, 1333.498), stdev = 8.739
[info]   CI (99.9%): [1287.256, 1354.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.527 ±(99.9%) 53.078 MB/sec [Average]
[info]   (min, avg, max) = (1302.996, 1320.527, 1337.614), stdev = 13.784
[info]   CI (99.9%): [1267.449, 1373.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6086.657 ±(99.9%) 355.934 B/op [Average]
[info]   (min, avg, max) = (5983.350, 6086.657, 6205.140), stdev = 92.435
[info]   CI (99.9%): [5730.723, 6442.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.403 ±(99.9%) 0.800 B/op [Average]
[info]   (min, avg, max) = (0.193, 0.403, 0.673), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 1.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.70% complete, ETA 00:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239157.004 ops/s
[info] # Warmup Iteration   2: 686407.428 ops/s
[info] # Warmup Iteration   3: 712225.682 ops/s
[info] Iteration   1: 728863.476 ops/s
[info]                  ·gc.alloc.rate:                   2160.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4319.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 717351.037 ops/s
[info]                  ·gc.alloc.rate:                   2125.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5154.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 713689.894 ops/s
[info]                  ·gc.alloc.rate:                   2114.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4464.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 732280.207 ops/s
[info]                  ·gc.alloc.rate:                   2169.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4366.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 727482.182 ops/s
[info]                  ·gc.alloc.rate:                   2155.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5140.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   723933.359 ±(99.9%) 30734.411 ops/s [Average]
[info]   (min, avg, max) = (713689.894, 723933.359, 732280.207), stdev = 7981.629
[info]   CI (99.9%): [693198.948, 754667.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2145.505 ±(99.9%) 91.647 MB/sec [Average]
[info]   (min, avg, max) = (2114.953, 2145.505, 2169.986), stdev = 23.801
[info]   CI (99.9%): [2053.858, 2237.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4664.001, 4664.001, 4664.001), stdev = 0.001
[info]   CI (99.9%): [4664.001, 4664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2156.490 ±(99.9%) 726.868 MB/sec [Average]
[info]   (min, avg, max) = (2001.378, 2156.490, 2376.125), stdev = 188.765
[info]   CI (99.9%): [1429.622, 2883.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4688.926 ±(99.9%) 1623.829 B/op [Average]
[info]   (min, avg, max) = (4319.668, 4688.926, 5154.085), stdev = 421.703
[info]   CI (99.9%): [3065.097, 6312.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.190 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.190, 0.274), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 90.00% complete, ETA 00:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 482033.611 ops/s
[info] # Warmup Iteration   2: 1453142.742 ops/s
[info] # Warmup Iteration   3: 1446130.598 ops/s
[info] Iteration   1: 1447168.566 ops/s
[info]                  ·gc.alloc.rate:                   1096.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1063.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1468547.377 ops/s
[info]                  ·gc.alloc.rate:                   1112.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1488334.351 ops/s
[info]                  ·gc.alloc.rate:                   1127.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1488466.863 ops/s
[info]                  ·gc.alloc.rate:                   1127.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1049.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1486453.945 ops/s
[info]                  ·gc.alloc.rate:                   1125.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1409.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1475794.221 ±(99.9%) 69509.865 ops/s [Average]
[info]   (min, avg, max) = (1447168.566, 1475794.221, 1488466.863), stdev = 18051.491
[info]   CI (99.9%): [1406284.356, 1545304.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1117.819 ±(99.9%) 52.570 MB/sec [Average]
[info]   (min, avg, max) = (1096.026, 1117.819, 1127.421), stdev = 13.652
[info]   CI (99.9%): [1065.249, 1170.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.633 ±(99.9%) 705.962 MB/sec [Average]
[info]   (min, avg, max) = (977.853, 1119.633, 1330.988), stdev = 183.336
[info]   CI (99.9%): [413.671, 1825.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1193.813 ±(99.9%) 746.575 B/op [Average]
[info]   (min, avg, max) = (1044.330, 1193.813, 1409.270), stdev = 193.883
[info]   CI (99.9%): [447.237, 1940.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.085, 0.113), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 90.30% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3947750.905 ops/s
[info] # Warmup Iteration   2: 5223242.362 ops/s
[info] # Warmup Iteration   3: 5442765.668 ops/s
[info] Iteration   1: 5094060.340 ops/s
[info]                  ·gc.alloc.rate:                   155.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5251574.517 ops/s
[info]                  ·gc.alloc.rate:               160.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76.662 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 5449674.910 ops/s
[info]                  ·gc.alloc.rate:      166.215 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5434746.777 ops/s
[info]                  ·gc.alloc.rate:                   165.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5395121.911 ops/s
[info]                  ·gc.alloc.rate:               164.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.621 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   5325035.691 ±(99.9%) 581529.124 ops/s [Average]
[info]   (min, avg, max) = (5094060.340, 5325035.691, 5449674.910), stdev = 151021.267
[info]   CI (99.9%): [4743506.567, 5906564.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   162.421 ±(99.9%) 17.717 MB/sec [Average]
[info]   (min, avg, max) = (155.352, 162.421, 166.215), stdev = 4.601
[info]   CI (99.9%): [144.704, 180.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.663 ±(99.9%) 440.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.663, 255.932), stdev = 114.410
[info]   CI (99.9%): [≈ 0, 645.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   60.878 ±(99.9%) 131.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.878, 79.029), stdev = 34.088
[info]   CI (99.9%): [≈ 0, 192.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.496 ±(99.9%) 4.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.496, 2.432), stdev = 1.083
[info]   CI (99.9%): [≈ 0, 4.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.153 ±(99.9%) 1.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.752), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 1.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.61% complete, ETA 00:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37857.018 ops/s
[info] # Warmup Iteration   2: 216371.495 ops/s
[info] # Warmup Iteration   3: 220082.703 ops/s
[info] Iteration   1: 221379.363 ops/s
[info]                  ·gc.alloc.rate:                   1559.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11605.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.444 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 222521.643 ops/s
[info]                  ·gc.alloc.rate:                   1567.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11640.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 221929.058 ops/s
[info]                  ·gc.alloc.rate:                   1563.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11774.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 220865.794 ops/s
[info]                  ·gc.alloc.rate:                   1556.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9531.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 221991.840 ops/s
[info]                  ·gc.alloc.rate:                   1564.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11913.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.590 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   221737.539 ±(99.9%) 2438.705 ops/s [Average]
[info]   (min, avg, max) = (220865.794, 221737.539, 222521.643), stdev = 633.324
[info]   CI (99.9%): [219298.835, 224176.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1562.321 ±(99.9%) 16.352 MB/sec [Average]
[info]   (min, avg, max) = (1556.703, 1562.321, 1567.659), stdev = 4.246
[info]   CI (99.9%): [1545.969, 1578.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11088.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11088.002, 11088.002, 11088.002), stdev = 0.001
[info]   CI (99.9%): [11088.002, 11088.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1591.444 ±(99.9%) 549.390 MB/sec [Average]
[info]   (min, avg, max) = (1338.228, 1591.444, 1680.532), stdev = 142.675
[info]   CI (99.9%): [1042.054, 2140.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11293.079 ±(99.9%) 3819.904 B/op [Average]
[info]   (min, avg, max) = (9531.862, 11293.079, 11913.007), stdev = 992.017
[info]   CI (99.9%): [7473.176, 15112.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.591 ±(99.9%) 1.059 B/op [Average]
[info]   (min, avg, max) = (0.295, 0.591, 1.031), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.91% complete, ETA 00:06:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480834.717 ops/s
[info] # Warmup Iteration   2: 966341.183 ops/s
[info] # Warmup Iteration   3: 995973.226 ops/s
[info] Iteration   1: 994444.002 ops/s
[info]                  ·gc.alloc.rate:                   1749.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2626.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 986055.076 ops/s
[info]                  ·gc.alloc.rate:                   1734.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3198.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 999963.861 ops/s
[info]                  ·gc.alloc.rate:                   1758.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2643.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 990666.543 ops/s
[info]                  ·gc.alloc.rate:                   1742.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2680.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 999353.443 ops/s
[info]                  ·gc.alloc.rate:                   1757.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2664.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   994096.585 ±(99.9%) 22667.447 ops/s [Average]
[info]   (min, avg, max) = (986055.076, 994096.585, 999963.861), stdev = 5886.664
[info]   CI (99.9%): [971429.138, 1016764.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1748.697 ±(99.9%) 38.725 MB/sec [Average]
[info]   (min, avg, max) = (1734.840, 1748.697, 1758.613), stdev = 10.057
[info]   CI (99.9%): [1709.972, 1787.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2768.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2768.000, 2768.000, 2768.000), stdev = 0.001
[info]   CI (99.9%): [2768.000, 2768.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1744.880 ±(99.9%) 561.423 MB/sec [Average]
[info]   (min, avg, max) = (1660.394, 1744.880, 2004.787), stdev = 145.800
[info]   CI (99.9%): [1183.456, 2306.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2762.843 ±(99.9%) 941.565 B/op [Average]
[info]   (min, avg, max) = (2626.769, 2762.843, 3198.710), stdev = 244.521
[info]   CI (99.9%): [1821.279, 3704.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.171 ±(99.9%) 0.290 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.171, 0.264), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 91.21% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 809122.076 ops/s
[info] # Warmup Iteration   2: 2423933.105 ops/s
[info] # Warmup Iteration   3: 2411467.260 ops/s
[info] Iteration   1: 2425482.551 ops/s
[info]                  ·gc.alloc.rate:                   1073.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2402348.288 ops/s
[info]                  ·gc.alloc.rate:                   1062.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2475255.328 ops/s
[info]                  ·gc.alloc.rate:                   1094.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2451535.712 ops/s
[info]                  ·gc.alloc.rate:                   1084.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     637.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2477814.400 ops/s
[info]                  ·gc.alloc.rate:                   1095.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2446487.256 ±(99.9%) 125130.006 ops/s [Average]
[info]   (min, avg, max) = (2402348.288, 2446487.256, 2477814.400), stdev = 32495.865
[info]   CI (99.9%): [2321357.250, 2571617.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1081.983 ±(99.9%) 55.180 MB/sec [Average]
[info]   (min, avg, max) = (1062.362, 1081.983, 1095.725), stdev = 14.330
[info]   CI (99.9%): [1026.803, 1137.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1052.956 ±(99.9%) 565.900 MB/sec [Average]
[info]   (min, avg, max) = (978.278, 1052.956, 1315.474), stdev = 146.962
[info]   CI (99.9%): [487.057, 1618.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   676.884 ±(99.9%) 343.529 B/op [Average]
[info]   (min, avg, max) = (633.645, 676.884, 836.345), stdev = 89.213
[info]   CI (99.9%): [333.355, 1020.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.037, 0.053), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.52% complete, ETA 00:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4547049.909 ops/s
[info] # Warmup Iteration   2: 7002296.519 ops/s
[info] # Warmup Iteration   3: 6871005.607 ops/s
[info] Iteration   1: 7091100.256 ops/s
[info]                  ·gc.alloc.rate:                   576.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7090767.953 ops/s
[info]                  ·gc.alloc.rate:                   576.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7081720.633 ops/s
[info]                  ·gc.alloc.rate:                   575.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7089695.420 ops/s
[info]                  ·gc.alloc.rate:                   576.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7097652.718 ops/s
[info]                  ·gc.alloc.rate:               577.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.559 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   7090187.396 ±(99.9%) 21852.998 ops/s [Average]
[info]   (min, avg, max) = (7081720.633, 7090187.396, 7097652.718), stdev = 5675.154
[info]   CI (99.9%): [7068334.398, 7112040.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   576.695 ±(99.9%) 1.888 MB/sec [Average]
[info]   (min, avg, max) = (575.932, 576.695, 577.259), stdev = 0.490
[info]   CI (99.9%): [574.806, 578.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.966 ±(99.9%) 699.486 MB/sec [Average]
[info]   (min, avg, max) = (331.741, 530.966, 663.810), stdev = 181.654
[info]   CI (99.9%): [≈ 0, 1230.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   117.871 ±(99.9%) 155.509 B/op [Average]
[info]   (min, avg, max) = (73.559, 117.871, 147.457), stdev = 40.385
[info]   CI (99.9%): [≈ 0, 273.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.393 ±(99.9%) 2.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.777), stdev = 0.775
[info]   CI (99.9%): [≈ 0, 3.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.394), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.82% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4128368.650 ops/s
[info] # Warmup Iteration   2: 6187749.506 ops/s
[info] # Warmup Iteration   3: 6171795.591 ops/s
[info] Iteration   1: 6233753.070 ops/s
[info]                  ·gc.alloc.rate:                   380.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6394866.311 ops/s
[info]                  ·gc.alloc.rate:                   390.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6222621.805 ops/s
[info]                  ·gc.alloc.rate:                   379.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6436658.707 ops/s
[info]                  ·gc.alloc.rate:                   392.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6360897.481 ops/s
[info]                  ·gc.alloc.rate:               388.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82.080 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6329759.475 ±(99.9%) 371999.067 ops/s [Average]
[info]   (min, avg, max) = (6222621.805, 6329759.475, 6436658.707), stdev = 96606.976
[info]   CI (99.9%): [5957760.408, 6701758.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   386.108 ±(99.9%) 22.683 MB/sec [Average]
[info]   (min, avg, max) = (379.551, 386.108, 392.601), stdev = 5.891
[info]   CI (99.9%): [363.425, 408.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.857 ±(99.9%) 654.294 MB/sec [Average]
[info]   (min, avg, max) = (255.830, 367.857, 664.136), stdev = 169.918
[info]   CI (99.9%): [≈ 0, 1022.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   91.744 ±(99.9%) 167.676 B/op [Average]
[info]   (min, avg, max) = (62.958, 91.744, 167.980), stdev = 43.545
[info]   CI (99.9%): [≈ 0, 259.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 3.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.792), stdev = 0.791
[info]   CI (99.9%): [≈ 0, 3.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.453), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 92.12% complete, ETA 00:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52697.586 ops/s
[info] # Warmup Iteration   2: 312958.707 ops/s
[info] # Warmup Iteration   3: 312994.640 ops/s
[info] Iteration   1: 313179.082 ops/s
[info]                  ·gc.alloc.rate:                   1595.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8223.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 313945.652 ops/s
[info]                  ·gc.alloc.rate:                   1599.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6612.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 320049.190 ops/s
[info]                  ·gc.alloc.rate:                   1630.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8168.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 320675.564 ops/s
[info]                  ·gc.alloc.rate:                   1633.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8212.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 320214.482 ops/s
[info]                  ·gc.alloc.rate:                   1630.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8270.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   317612.794 ±(99.9%) 14303.354 ops/s [Average]
[info]   (min, avg, max) = (313179.082, 317612.794, 320675.564), stdev = 3714.536
[info]   CI (99.9%): [303309.440, 331916.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1617.727 ±(99.9%) 73.044 MB/sec [Average]
[info]   (min, avg, max) = (1595.096, 1617.727, 1633.570), stdev = 18.969
[info]   CI (99.9%): [1544.682, 1690.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8016.001, 8016.001, 8016.001), stdev = 0.001
[info]   CI (99.9%): [8016.001, 8016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.569 ±(99.9%) 596.935 MB/sec [Average]
[info]   (min, avg, max) = (1319.007, 1594.569, 1682.693), stdev = 155.022
[info]   CI (99.9%): [997.634, 2191.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7897.552 ±(99.9%) 2770.053 B/op [Average]
[info]   (min, avg, max) = (6612.335, 7897.552, 8270.451), stdev = 719.374
[info]   CI (99.9%): [5127.499, 10667.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.330 ±(99.9%) 0.338 B/op [Average]
[info]   (min, avg, max) = (0.204, 0.330, 0.418), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.42% complete, ETA 00:05:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2369133.031 ops/s
[info] # Warmup Iteration   2: 3331269.534 ops/s
[info] # Warmup Iteration   3: 3351096.766 ops/s
[info] Iteration   1: 3396850.584 ops/s
[info]                  ·gc.alloc.rate:                   3142.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3035.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1406.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3400056.935 ops/s
[info]                  ·gc.alloc.rate:                   3145.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1569.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3368861.956 ops/s
[info]                  ·gc.alloc.rate:                   3116.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1428.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3367387.359 ops/s
[info]                  ·gc.alloc.rate:                   3115.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1431.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3381179.258 ops/s
[info]                  ·gc.alloc.rate:                   3128.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1426.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3382867.219 ±(99.9%) 58703.174 ops/s [Average]
[info]   (min, avg, max) = (3367387.359, 3382867.219, 3400056.935), stdev = 15245.028
[info]   CI (99.9%): [3324164.045, 3441570.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3129.600 ±(99.9%) 54.383 MB/sec [Average]
[info]   (min, avg, max) = (3115.109, 3129.600, 3145.429), stdev = 14.123
[info]   CI (99.9%): [3075.217, 3183.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3122.284 ±(99.9%) 578.075 MB/sec [Average]
[info]   (min, avg, max) = (3035.518, 3122.284, 3390.020), stdev = 150.124
[info]   CI (99.9%): [2544.209, 3700.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1452.476 ±(99.9%) 254.192 B/op [Average]
[info]   (min, avg, max) = (1406.472, 1452.476, 1569.220), stdev = 66.013
[info]   CI (99.9%): [1198.284, 1706.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.187), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.060 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.060, 0.087), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.73% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1733963.786 ops/s
[info] # Warmup Iteration   2: 3935492.084 ops/s
[info] # Warmup Iteration   3: 3918659.863 ops/s
[info] Iteration   1: 3981981.942 ops/s
[info]                  ·gc.alloc.rate:                   2388.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2327.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     920.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4001104.693 ops/s
[info]                  ·gc.alloc.rate:                   2399.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4030483.167 ops/s
[info]                  ·gc.alloc.rate:                   2417.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     923.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3933728.388 ops/s
[info]                  ·gc.alloc.rate:                   2360.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     949.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3928114.154 ops/s
[info]                  ·gc.alloc.rate:                   2356.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3975082.469 ±(99.9%) 169057.947 ops/s [Average]
[info]   (min, avg, max) = (3928114.154, 3975082.469, 4030483.167), stdev = 43903.812
[info]   CI (99.9%): [3806024.522, 4144140.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2384.393 ±(99.9%) 100.596 MB/sec [Average]
[info]   (min, avg, max) = (2356.069, 2384.393, 2417.488), stdev = 26.124
[info]   CI (99.9%): [2283.797, 2484.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2358.353 ±(99.9%) 78.467 MB/sec [Average]
[info]   (min, avg, max) = (2327.626, 2358.353, 2377.737), stdev = 20.378
[info]   CI (99.9%): [2279.886, 2436.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   933.814 ±(99.9%) 60.726 B/op [Average]
[info]   (min, avg, max) = (920.052, 933.814, 952.682), stdev = 15.770
[info]   CI (99.9%): [873.088, 994.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.035, 0.049), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.03% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5524898.973 ops/s
[info] # Warmup Iteration   2: 7143994.036 ops/s
[info] # Warmup Iteration   3: 7217078.262 ops/s
[info] Iteration   1: 7193160.545 ops/s
[info]                  ·gc.alloc.rate:                   1353.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7305762.407 ops/s
[info]                  ·gc.alloc.rate:                   1374.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7206722.673 ops/s
[info]                  ·gc.alloc.rate:                   1355.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7322407.952 ops/s
[info]                  ·gc.alloc.rate:                   1377.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7303238.710 ops/s
[info]                  ·gc.alloc.rate:                   1373.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7266258.458 ±(99.9%) 235556.523 ops/s [Average]
[info]   (min, avg, max) = (7193160.545, 7266258.458, 7322407.952), stdev = 61173.281
[info]   CI (99.9%): [7030701.935, 7501814.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1366.691 ±(99.9%) 43.782 MB/sec [Average]
[info]   (min, avg, max) = (1353.344, 1366.691, 1377.170), stdev = 11.370
[info]   CI (99.9%): [1322.909, 1410.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1408.577 ±(99.9%) 590.807 MB/sec [Average]
[info]   (min, avg, max) = (1332.191, 1408.577, 1682.771), stdev = 153.431
[info]   CI (99.9%): [817.770, 1999.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   304.971 ±(99.9%) 122.279 B/op [Average]
[info]   (min, avg, max) = (287.889, 304.971, 361.684), stdev = 31.755
[info]   CI (99.9%): [182.692, 427.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.018, 0.027), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 93.33% complete, ETA 00:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2691500.091 ops/s
[info] # Warmup Iteration   2: 4861334.257 ops/s
[info] # Warmup Iteration   3: 4919095.737 ops/s
[info] Iteration   1: 4952459.059 ops/s
[info]                  ·gc.alloc.rate:                   3070.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3356.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1066.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 4972614.893 ops/s
[info]                  ·gc.alloc.rate:                   3083.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3044.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4980571.376 ops/s
[info]                  ·gc.alloc.rate:                   3088.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5021030.195 ops/s
[info]                  ·gc.alloc.rate:                   3113.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 5003089.033 ops/s
[info]                  ·gc.alloc.rate:                   3102.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4985952.911 ±(99.9%) 102833.901 ops/s [Average]
[info]   (min, avg, max) = (4952459.059, 4985952.911, 5021030.195), stdev = 26705.637
[info]   CI (99.9%): [4883119.010, 5088786.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3091.933 ±(99.9%) 64.250 MB/sec [Average]
[info]   (min, avg, max) = (3070.963, 3091.933, 3113.879), stdev = 16.685
[info]   CI (99.9%): [3027.684, 3156.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3116.218 ±(99.9%) 518.034 MB/sec [Average]
[info]   (min, avg, max) = (3044.272, 3116.218, 3356.508), stdev = 134.532
[info]   CI (99.9%): [2598.184, 3634.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   983.812 ±(99.9%) 178.739 B/op [Average]
[info]   (min, avg, max) = (959.463, 983.812, 1066.751), stdev = 46.418
[info]   CI (99.9%): [805.072, 1162.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.125, 0.146), stdev = 0.021
[info]   CI (99.9%): [0.045, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.039, 0.046), stdev = 0.007
[info]   CI (99.9%): [0.014, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.64% complete, ETA 00:04:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1748108.290 ops/s
[info] # Warmup Iteration   2: 2710754.205 ops/s
[info] # Warmup Iteration   3: 2737461.087 ops/s
[info] Iteration   1: 2774525.067 ops/s
[info]                  ·gc.alloc.rate:                   1720.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2775185.264 ops/s
[info]                  ·gc.alloc.rate:                   1720.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2776888.050 ops/s
[info]                  ·gc.alloc.rate:                   1721.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2775706.779 ops/s
[info]                  ·gc.alloc.rate:                   1721.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2725506.944 ops/s
[info]                  ·gc.alloc.rate:                   1690.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     977.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2765562.421 ±(99.9%) 86286.804 ops/s [Average]
[info]   (min, avg, max) = (2725506.944, 2765562.421, 2776888.050), stdev = 22408.409
[info]   CI (99.9%): [2679275.616, 2851849.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1714.999 ±(99.9%) 53.590 MB/sec [Average]
[info]   (min, avg, max) = (1690.119, 1714.999, 1721.965), stdev = 13.917
[info]   CI (99.9%): [1661.409, 1768.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1678.887 ±(99.9%) 46.821 MB/sec [Average]
[info]   (min, avg, max) = (1661.820, 1678.887, 1692.260), stdev = 12.159
[info]   CI (99.9%): [1632.066, 1725.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   955.526 ±(99.9%) 50.917 B/op [Average]
[info]   (min, avg, max) = (942.643, 955.526, 977.236), stdev = 13.223
[info]   CI (99.9%): [904.610, 1006.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.047, 0.071), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.94% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2352747.419 ops/s
[info] # Warmup Iteration   2: 4671661.981 ops/s
[info] # Warmup Iteration   3: 4724523.153 ops/s
[info] Iteration   1: 4860632.991 ops/s
[info]                  ·gc.alloc.rate:                   1284.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4825658.715 ops/s
[info]                  ·gc.alloc.rate:                   1275.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4896464.635 ops/s
[info]                  ·gc.alloc.rate:                   1294.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     426.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4901371.542 ops/s
[info]                  ·gc.alloc.rate:                   1295.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4790414.093 ops/s
[info]                  ·gc.alloc.rate:                   1266.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4854908.395 ±(99.9%) 181976.793 ops/s [Average]
[info]   (min, avg, max) = (4790414.093, 4854908.395, 4901371.542), stdev = 47258.795
[info]   CI (99.9%): [4672931.602, 5036885.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1283.294 ±(99.9%) 47.596 MB/sec [Average]
[info]   (min, avg, max) = (1266.416, 1283.294, 1295.464), stdev = 12.361
[info]   CI (99.9%): [1235.698, 1330.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1260.295 ±(99.9%) 595.865 MB/sec [Average]
[info]   (min, avg, max) = (983.898, 1260.295, 1340.528), stdev = 154.744
[info]   CI (99.9%): [664.430, 1856.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   408.606 ±(99.9%) 194.912 B/op [Average]
[info]   (min, avg, max) = (318.592, 408.606, 440.345), stdev = 50.618
[info]   CI (99.9%): [213.695, 603.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.146), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.027, 0.048), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.24% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7002705.376 ops/s
[info] # Warmup Iteration   2: 9261428.632 ops/s
[info] # Warmup Iteration   3: 9903662.914 ops/s
[info] Iteration   1: 9998926.190 ops/s
[info]                  ·gc.alloc.rate:                   965.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9656112.281 ops/s
[info]                  ·gc.alloc.rate:                   932.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9958766.822 ops/s
[info]                  ·gc.alloc.rate:                   961.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9873237.217 ops/s
[info]                  ·gc.alloc.rate:                   953.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9943718.014 ops/s
[info]                  ·gc.alloc.rate:                   960.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9886152.105 ±(99.9%) 525121.958 ops/s [Average]
[info]   (min, avg, max) = (9656112.281, 9886152.105, 9998926.190), stdev = 136372.505
[info]   CI (99.9%): [9361030.146, 10411274.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   955.035 ±(99.9%) 50.407 MB/sec [Average]
[info]   (min, avg, max) = (932.971, 955.035, 965.885), stdev = 13.091
[info]   CI (99.9%): [904.628, 1005.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   932.480 ±(99.9%) 578.495 MB/sec [Average]
[info]   (min, avg, max) = (663.799, 932.480, 1004.369), stdev = 150.233
[info]   CI (99.9%): [353.985, 1510.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   148.183 ±(99.9%) 86.284 B/op [Average]
[info]   (min, avg, max) = (108.147, 148.183, 159.500), stdev = 22.408
[info]   CI (99.9%): [61.899, 234.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.011, 0.016), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.55% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5398168.588 ops/s
[info] # Warmup Iteration   2: 7467847.313 ops/s
[info] # Warmup Iteration   3: 7443286.150 ops/s
[info] Iteration   1: 7442228.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7440724.160 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7450178.966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7450336.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7432853.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7443264.385 ±(99.9%) 28148.032 ops/s [Average]
[info]   (min, avg, max) = (7432853.631, 7443264.385, 7450336.886), stdev = 7309.955
[info]   CI (99.9%): [7415116.353, 7471412.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.85% complete, ETA 00:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3646022.480 ops/s
[info] # Warmup Iteration   2: 4950190.638 ops/s
[info] # Warmup Iteration   3: 5055770.371 ops/s
[info] Iteration   1: 5070308.535 ops/s
[info]                  ·gc.alloc.rate:                   1623.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     515.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4986530.726 ops/s
[info]                  ·gc.alloc.rate:                   1596.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     526.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5075387.247 ops/s
[info]                  ·gc.alloc.rate:                   1625.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4967519.700 ops/s
[info]                  ·gc.alloc.rate:                   1591.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5043188.776 ops/s
[info]                  ·gc.alloc.rate:                   1615.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     422.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   5028586.997 ±(99.9%) 189055.507 ops/s [Average]
[info]   (min, avg, max) = (4967519.700, 5028586.997, 5075387.247), stdev = 49097.115
[info]   CI (99.9%): [4839531.490, 5217642.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1610.549 ±(99.9%) 60.269 MB/sec [Average]
[info]   (min, avg, max) = (1591.323, 1610.549, 1625.719), stdev = 15.652
[info]   CI (99.9%): [1550.280, 1670.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1609.254 ±(99.9%) 553.999 MB/sec [Average]
[info]   (min, avg, max) = (1352.482, 1609.254, 1686.007), stdev = 143.872
[info]   CI (99.9%): [1055.254, 2163.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   503.704 ±(99.9%) 177.909 B/op [Average]
[info]   (min, avg, max) = (422.016, 503.704, 533.988), stdev = 46.202
[info]   CI (99.9%): [325.795, 681.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.029, 0.053), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 95.15% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 949694.044 ops/s
[info] # Warmup Iteration   2: 1286682.194 ops/s
[info] # Warmup Iteration   3: 1340452.379 ops/s
[info] Iteration   1: 1344997.719 ops/s
[info]                  ·gc.alloc.rate:                   1852.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1951.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1350453.213 ops/s
[info]                  ·gc.alloc.rate:                   1860.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2345.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1348266.728 ops/s
[info]                  ·gc.alloc.rate:                   1857.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1967.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1347148.981 ops/s
[info]                  ·gc.alloc.rate:                   1855.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2370.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1358543.343 ops/s
[info]                  ·gc.alloc.rate:                   1871.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1964.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1349881.997 ±(99.9%) 20126.739 ops/s [Average]
[info]   (min, avg, max) = (1344997.719, 1349881.997, 1358543.343), stdev = 5226.850
[info]   CI (99.9%): [1329755.258, 1370008.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1859.433 ±(99.9%) 27.722 MB/sec [Average]
[info]   (min, avg, max) = (1852.678, 1859.433, 1871.350), stdev = 7.199
[info]   CI (99.9%): [1831.711, 1887.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2168.000, 2168.000, 2168.000), stdev = 0.001
[info]   CI (99.9%): [2168.000, 2168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1818.063 ±(99.9%) 713.643 MB/sec [Average]
[info]   (min, avg, max) = (1667.964, 1818.063, 2029.037), stdev = 185.331
[info]   CI (99.9%): [1104.421, 2531.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2119.887 ±(99.9%) 837.627 B/op [Average]
[info]   (min, avg, max) = (1951.848, 2119.887, 2370.525), stdev = 217.529
[info]   CI (99.9%): [1282.260, 2957.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.126 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.126, 0.171), stdev = 0.032
[info]   CI (99.9%): [0.003, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.45% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492790.185 ops/s
[info] # Warmup Iteration   2: 1083795.140 ops/s
[info] # Warmup Iteration   3: 1084257.398 ops/s
[info] Iteration   1: 1085393.600 ops/s
[info]                  ·gc.alloc.rate:                   650.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1056622.074 ops/s
[info]                  ·gc.alloc.rate:                   633.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1079679.375 ops/s
[info]                  ·gc.alloc.rate:                   647.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     954.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1063749.331 ops/s
[info]                  ·gc.alloc.rate:                   638.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     970.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1057347.791 ops/s
[info]                  ·gc.alloc.rate:                   634.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     978.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1068558.434 ±(99.9%) 50880.283 ops/s [Average]
[info]   (min, avg, max) = (1056622.074, 1068558.434, 1085393.600), stdev = 13213.448
[info]   CI (99.9%): [1017678.151, 1119438.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   640.965 ±(99.9%) 30.385 MB/sec [Average]
[info]   (min, avg, max) = (633.848, 640.965, 650.967), stdev = 7.891
[info]   CI (99.9%): [610.580, 671.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.405 ±(99.9%) 5.588 MB/sec [Average]
[info]   (min, avg, max) = (654.123, 655.405, 657.568), stdev = 1.451
[info]   CI (99.9%): [649.817, 660.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   965.394 ±(99.9%) 50.412 B/op [Average]
[info]   (min, avg, max) = (948.577, 965.394, 978.635), stdev = 13.092
[info]   CI (99.9%): [914.982, 1015.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.471 ±(99.9%) 3.652 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.471, 2.167), stdev = 0.948
[info]   CI (99.9%): [≈ 0, 4.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.684 ±(99.9%) 5.294 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.684, 3.143), stdev = 1.375
[info]   CI (99.9%): [≈ 0, 5.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.76% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1409439.968 ops/s
[info] # Warmup Iteration   2: 1802592.096 ops/s
[info] # Warmup Iteration   3: 1781217.717 ops/s
[info] Iteration   1: 1743797.629 ops/s
[info]                  ·gc.alloc.rate:               327.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 461.757 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1807737.255 ops/s
[info]                  ·gc.alloc.rate:               339.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 222.717 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1840104.231 ops/s
[info]                  ·gc.alloc.rate:                   346.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.395 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1843060.558 ops/s
[info]                  ·gc.alloc.rate:                   346.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1819955.400 ops/s
[info]                  ·gc.alloc.rate:               342.329 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 287.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1810931.015 ±(99.9%) 155008.330 ops/s [Average]
[info]   (min, avg, max) = (1743797.629, 1810931.015, 1843060.558), stdev = 40255.171
[info]   CI (99.9%): [1655922.685, 1965939.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   340.608 ±(99.9%) 29.221 MB/sec [Average]
[info]   (min, avg, max) = (327.956, 340.608, 346.635), stdev = 7.589
[info]   CI (99.9%): [311.387, 369.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   353.093 ±(99.9%) 364.497 MB/sec [Average]
[info]   (min, avg, max) = (255.810, 353.093, 511.608), stdev = 94.659
[info]   CI (99.9%): [≈ 0, 717.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   308.141 ±(99.9%) 346.833 B/op [Average]
[info]   (min, avg, max) = (222.717, 308.141, 461.757), stdev = 90.071
[info]   CI (99.9%): [≈ 0, 654.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.335 ±(99.9%) 2.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 1.631), stdev = 0.725
[info]   CI (99.9%): [≈ 0, 3.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.286 ±(99.9%) 2.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 1.395), stdev = 0.620
[info]   CI (99.9%): [≈ 0, 2.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 96.06% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 702239.771 ops/s
[info] # Warmup Iteration   2: 1147221.049 ops/s
[info] # Warmup Iteration   3: 1156991.138 ops/s
[info] Iteration   1: 1165830.356 ops/s
[info]                  ·gc.alloc.rate:                   723.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     886.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1112568.824 ops/s
[info]                  ·gc.alloc.rate:                   690.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1113483.856 ops/s
[info]                  ·gc.alloc.rate:               690.805 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 929.371 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 1110934.480 ops/s
[info]                  ·gc.alloc.rate:                   688.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     933.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1115725.137 ops/s
[info]                  ·gc.alloc.rate:               691.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931.656 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1123708.530 ±(99.9%) 90915.085 ops/s [Average]
[info]   (min, avg, max) = (1110934.480, 1123708.530, 1165830.356), stdev = 23610.359
[info]   CI (99.9%): [1032793.446, 1214623.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   696.995 ±(99.9%) 56.673 MB/sec [Average]
[info]   (min, avg, max) = (688.937, 696.995, 723.252), stdev = 14.718
[info]   CI (99.9%): [640.322, 753.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   658.163 ±(99.9%) 5.907 MB/sec [Average]
[info]   (min, avg, max) = (656.727, 658.163, 660.470), stdev = 1.534
[info]   CI (99.9%): [652.256, 664.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   921.961 ±(99.9%) 77.209 B/op [Average]
[info]   (min, avg, max) = (886.227, 921.961, 933.375), stdev = 20.051
[info]   CI (99.9%): [844.752, 999.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.118), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.000, 6.000), stdev = 2.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.36% complete, ETA 00:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 806398.247 ops/s
[info] # Warmup Iteration   2: 1226769.952 ops/s
[info] # Warmup Iteration   3: 1265577.690 ops/s
[info] Iteration   1: 1228922.659 ops/s
[info]                  ·gc.alloc.rate:                   931.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1273240.047 ops/s
[info]                  ·gc.alloc.rate:                   964.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1234313.262 ops/s
[info]                  ·gc.alloc.rate:                   934.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1268.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1262477.340 ops/s
[info]                  ·gc.alloc.rate:                   956.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1244.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1237646.385 ops/s
[info]                  ·gc.alloc.rate:                   937.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1274.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1247319.938 ±(99.9%) 74637.212 ops/s [Average]
[info]   (min, avg, max) = (1228922.659, 1247319.938, 1273240.047), stdev = 19383.047
[info]   CI (99.9%): [1172682.727, 1321957.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   944.797 ±(99.9%) 56.199 MB/sec [Average]
[info]   (min, avg, max) = (931.131, 944.797, 964.360), stdev = 14.595
[info]   CI (99.9%): [888.598, 1000.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   929.654 ±(99.9%) 578.228 MB/sec [Average]
[info]   (min, avg, max) = (661.117, 929.654, 1002.049), stdev = 150.164
[info]   CI (99.9%): [351.426, 1507.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1171.916 ±(99.9%) 704.733 B/op [Average]
[info]   (min, avg, max) = (846.339, 1171.916, 1274.058), stdev = 183.017
[info]   CI (99.9%): [467.184, 1876.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.068, 0.080), stdev = 0.014
[info]   CI (99.9%): [0.015, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.67% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1070858.901 ops/s
[info] # Warmup Iteration   2: 2300663.903 ops/s
[info] # Warmup Iteration   3: 2286091.553 ops/s
[info] Iteration   1: 2279517.709 ops/s
[info]                  ·gc.alloc.rate:                   915.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2335228.266 ops/s
[info]                  ·gc.alloc.rate:                   938.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     662.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2319785.786 ops/s
[info]                  ·gc.alloc.rate:               931.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 446.071 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2250535.663 ops/s
[info]                  ·gc.alloc.rate:                   903.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     692.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2254363.764 ops/s
[info]                  ·gc.alloc.rate:                   905.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2287886.238 ±(99.9%) 147229.898 ops/s [Average]
[info]   (min, avg, max) = (2250535.663, 2287886.238, 2335228.266), stdev = 38235.137
[info]   CI (99.9%): [2140656.339, 2435116.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   918.835 ±(99.9%) 59.495 MB/sec [Average]
[info]   (min, avg, max) = (903.714, 918.835, 938.167), stdev = 15.451
[info]   CI (99.9%): [859.340, 978.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   921.797 ±(99.9%) 569.340 MB/sec [Average]
[info]   (min, avg, max) = (657.480, 921.797, 995.066), stdev = 147.856
[info]   CI (99.9%): [352.457, 1491.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   634.839 ±(99.9%) 409.341 B/op [Average]
[info]   (min, avg, max) = (446.071, 634.839, 694.549), stdev = 106.304
[info]   CI (99.9%): [225.498, 1044.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.97% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1851735.648 ops/s
[info] # Warmup Iteration   2: 2502111.752 ops/s
[info] # Warmup Iteration   3: 2541391.709 ops/s
[info] Iteration   1: 2578814.038 ops/s
[info]                  ·gc.alloc.rate:                   602.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     405.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2589820.135 ops/s
[info]                  ·gc.alloc.rate:                   605.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2561014.065 ops/s
[info]                  ·gc.alloc.rate:                   598.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2589968.114 ops/s
[info]                  ·gc.alloc.rate:                   605.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2594040.948 ops/s
[info]                  ·gc.alloc.rate:                   606.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2582731.460 ±(99.9%) 51572.561 ops/s [Average]
[info]   (min, avg, max) = (2561014.065, 2582731.460, 2594040.948), stdev = 13393.230
[info]   CI (99.9%): [2531158.899, 2634304.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   603.922 ±(99.9%) 12.124 MB/sec [Average]
[info]   (min, avg, max) = (598.831, 603.922, 606.551), stdev = 3.148
[info]   CI (99.9%): [591.799, 616.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.424 ±(99.9%) 571.868 MB/sec [Average]
[info]   (min, avg, max) = (331.757, 597.424, 664.141), stdev = 148.512
[info]   CI (99.9%): [25.555, 1169.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   363.705 ±(99.9%) 344.066 B/op [Average]
[info]   (min, avg, max) = (203.875, 363.705, 405.317), stdev = 89.353
[info]   CI (99.9%): [19.639, 707.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.411 ±(99.9%) 3.042 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.411, 1.824), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 3.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.250 ±(99.9%) 1.857 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.250, 1.113), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.27% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1871043.686 ops/s
[info] # Warmup Iteration   2: 2612541.329 ops/s
[info] # Warmup Iteration   3: 2648432.992 ops/s
[info] Iteration   1: 2646505.356 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2648187.640 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2647477.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2647760.650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2648482.189 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2647682.619 ±(99.9%) 2937.973 ops/s [Average]
[info]   (min, avg, max) = (2646505.356, 2647682.619, 2648482.189), stdev = 762.982
[info]   CI (99.9%): [2644744.646, 2650620.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.58% complete, ETA 00:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1848841.247 ops/s
[info] # Warmup Iteration   2: 2334596.278 ops/s
[info] # Warmup Iteration   3: 2425281.608 ops/s
[info] Iteration   1: 2399364.985 ops/s
[info]                  ·gc.alloc.rate:                   1097.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2402609.229 ops/s
[info]                  ·gc.alloc.rate:                   1099.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     869.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2411892.982 ops/s
[info]                  ·gc.alloc.rate:                   1103.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2412091.400 ops/s
[info]                  ·gc.alloc.rate:                   1103.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2444560.130 ops/s
[info]                  ·gc.alloc.rate:                   1118.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     863.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2414103.745 ±(99.9%) 69040.535 ops/s [Average]
[info]   (min, avg, max) = (2399364.985, 2414103.745, 2444560.130), stdev = 17929.608
[info]   CI (99.9%): [2345063.210, 2483144.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1104.380 ±(99.9%) 31.561 MB/sec [Average]
[info]   (min, avg, max) = (1097.661, 1104.380, 1118.307), stdev = 8.196
[info]   CI (99.9%): [1072.818, 1135.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1132.331 ±(99.9%) 709.117 MB/sec [Average]
[info]   (min, avg, max) = (993.266, 1132.331, 1340.976), stdev = 184.156
[info]   CI (99.9%): [423.213, 1841.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   737.897 ±(99.9%) 451.456 B/op [Average]
[info]   (min, avg, max) = (651.523, 737.897, 869.247), stdev = 117.242
[info]   CI (99.9%): [286.441, 1189.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.041, 0.055), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.88% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5467.307 ops/s
[info] # Warmup Iteration   2: 10065.420 ops/s
[info] # Warmup Iteration   3: 11115.272 ops/s
[info] Iteration   1: 11915.819 ops/s
[info]                  ·gc.alloc.rate:                   1680.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              221952.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261924.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.996 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11807.916 ops/s
[info]                  ·gc.alloc.rate:                   1665.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              221952.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221834.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11949.846 ops/s
[info]                  ·gc.alloc.rate:                   1685.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              221956.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220496.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.673 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11912.024 ops/s
[info]                  ·gc.alloc.rate:                   1680.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222318.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.501 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11924.969 ops/s
[info]                  ·gc.alloc.rate:                   1682.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222867.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.484 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11902.115 ±(99.9%) 210.556 ops/s [Average]
[info]   (min, avg, max) = (11807.916, 11902.115, 11949.846), stdev = 54.681
[info]   CI (99.9%): [11691.558, 12112.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1678.715 ±(99.9%) 30.014 MB/sec [Average]
[info]   (min, avg, max) = (1665.231, 1678.715, 1685.211), stdev = 7.795
[info]   CI (99.9%): [1648.700, 1708.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221975.271 ±(99.9%) 115.364 B/op [Average]
[info]   (min, avg, max) = (221952.036, 221975.271, 222008.039), stdev = 29.960
[info]   CI (99.9%): [221859.907, 222090.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1738.622 ±(99.9%) 527.394 MB/sec [Average]
[info]   (min, avg, max) = (1664.350, 1738.622, 1983.070), stdev = 136.963
[info]   CI (99.9%): [1211.227, 2266.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   229888.254 ±(99.9%) 69042.273 B/op [Average]
[info]   (min, avg, max) = (220496.593, 229888.254, 261924.044), stdev = 17930.059
[info]   CI (99.9%): [160845.981, 298930.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.137, 0.187), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.131 ±(99.9%) 29.512 B/op [Average]
[info]   (min, avg, max) = (5.501, 18.131, 24.673), stdev = 7.664
[info]   CI (99.9%): [≈ 0, 47.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.18% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5545.857 ops/s
[info] # Warmup Iteration   2: 14630.614 ops/s
[info] # Warmup Iteration   3: 15254.722 ops/s
[info] Iteration   1: 15229.258 ops/s
[info]                  ·gc.alloc.rate:                   240.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26434.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15108.874 ops/s
[info]                  ·gc.alloc.rate:               238.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          24884.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26646.363 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 14916.956 ops/s
[info]                  ·gc.alloc.rate:                   235.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              24896.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26987.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15002.977 ops/s
[info]                  ·gc.alloc.rate:               237.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          24896.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26834.601 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15111.995 ops/s
[info]                  ·gc.alloc.rate:      239.088 MB/sec
[info]                  ·gc.alloc.rate.norm: 24894.720 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15074.012 ±(99.9%) 457.530 ops/s [Average]
[info]   (min, avg, max) = (14916.956, 15074.012, 15229.258), stdev = 118.819
[info]   CI (99.9%): [14616.483, 15531.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   238.427 ±(99.9%) 7.155 MB/sec [Average]
[info]   (min, avg, max) = (235.957, 238.427, 240.859), stdev = 1.858
[info]   CI (99.9%): [231.271, 245.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24890.285 ±(99.9%) 28.747 B/op [Average]
[info]   (min, avg, max) = (24880.028, 24890.285, 24896.029), stdev = 7.466
[info]   CI (99.9%): [24861.538, 24919.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204.662 ±(99.9%) 440.551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.662, 255.909), stdev = 114.410
[info]   CI (99.9%): [≈ 0, 645.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21380.626 ±(99.9%) 46030.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21380.626, 26987.479), stdev = 11953.926
[info]   CI (99.9%): [≈ 0, 67410.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.020 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.133 ±(99.9%) 12.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.133, 7.436), stdev = 3.278
[info]   CI (99.9%): [≈ 0, 14.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.48% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18036.451 ops/s
[info] # Warmup Iteration   2: 21672.920 ops/s
[info] # Warmup Iteration   3: 32049.674 ops/s
[info] Iteration   1: 37375.710 ops/s
[info]                  ·gc.alloc.rate:                   409.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10771.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.314 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 37080.305 ops/s
[info]                  ·gc.alloc.rate:                   405.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21714.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37159.392 ops/s
[info]                  ·gc.alloc.rate:                   406.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14064.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37412.033 ops/s
[info]                  ·gc.alloc.rate:               409.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          17232.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13969.244 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 37067.625 ops/s
[info]                  ·gc.alloc.rate:                   406.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28169.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37219.013 ±(99.9%) 631.329 ops/s [Average]
[info]   (min, avg, max) = (37067.625, 37219.013, 37412.033), stdev = 163.954
[info]   CI (99.9%): [36587.684, 37850.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   407.536 ±(99.9%) 6.764 MB/sec [Average]
[info]   (min, avg, max) = (405.971, 407.536, 409.617), stdev = 1.757
[info]   CI (99.9%): [400.772, 414.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17232.018 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (17232.012, 17232.018, 17232.041), stdev = 0.013
[info]   CI (99.9%): [17231.969, 17232.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   419.046 ±(99.9%) 639.220 MB/sec [Average]
[info]   (min, avg, max) = (255.791, 419.046, 663.751), stdev = 166.003
[info]   CI (99.9%): [≈ 0, 1058.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17737.778 ±(99.9%) 27286.772 B/op [Average]
[info]   (min, avg, max) = (10771.312, 17737.778, 28169.432), stdev = 7086.288
[info]   CI (99.9%): [≈ 0, 45024.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.364 ±(99.9%) 2.915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.364, 1.718), stdev = 0.757
[info]   CI (99.9%): [≈ 0, 3.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.436 ±(99.9%) 123.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.436, 72.771), stdev = 32.067
[info]   CI (99.9%): [≈ 0, 138.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.79% complete, ETA 00:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 882.513 ops/s
[info] # Warmup Iteration   2: 3228.776 ops/s
[info] # Warmup Iteration   3: 2990.811 ops/s
[info] Iteration   1: 3534.979 ops/s
[info]                  ·gc.alloc.rate:                   1125.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              500759.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437400.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.267 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3643.351 ops/s
[info]                  ·gc.alloc.rate:                   1159.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              500680.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     570328.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3669.562 ops/s
[info]                  ·gc.alloc.rate:                   1167.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              500680.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     427599.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.483 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3629.394 ops/s
[info]                  ·gc.alloc.rate:                   1155.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              500680.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     579157.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3682.950 ops/s
[info]                  ·gc.alloc.rate:                   1172.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              500680.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429648.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3632.047 ±(99.9%) 224.162 ops/s [Average]
[info]   (min, avg, max) = (3534.979, 3632.047, 3682.950), stdev = 58.214
[info]   CI (99.9%): [3407.885, 3856.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1156.051 ±(99.9%) 71.155 MB/sec [Average]
[info]   (min, avg, max) = (1125.270, 1156.051, 1172.270), stdev = 18.479
[info]   CI (99.9%): [1084.896, 1227.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   500696.080 ±(99.9%) 137.402 B/op [Average]
[info]   (min, avg, max) = (500680.117, 500696.080, 500759.912), stdev = 35.683
[info]   CI (99.9%): [500558.678, 500833.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1128.691 ±(99.9%) 703.564 MB/sec [Average]
[info]   (min, avg, max) = (982.894, 1128.691, 1336.250), stdev = 182.713
[info]   CI (99.9%): [425.127, 1832.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   488826.968 ±(99.9%) 302573.088 B/op [Average]
[info]   (min, avg, max) = (427599.638, 488826.968, 579157.028), stdev = 78577.270
[info]   CI (99.9%): [186253.880, 791400.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.531 ±(99.9%) 89.401 B/op [Average]
[info]   (min, avg, max) = (8.895, 21.531, 62.483), stdev = 23.217
[info]   CI (99.9%): [≈ 0, 110.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.09% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22451.806 ops/s
[info] # Warmup Iteration   2: 50116.253 ops/s
[info] # Warmup Iteration   3: 50342.045 ops/s
[info] Iteration   1: 50674.201 ops/s
[info]                  ·gc.alloc.rate:                   663.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20047.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.399 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 50930.559 ops/s
[info]                  ·gc.alloc.rate:                   666.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          644.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19926.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 52524.696 ops/s
[info]                  ·gc.alloc.rate:                   687.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19361.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 51101.064 ops/s
[info]                  ·gc.alloc.rate:                   668.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19941.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 52295.085 ops/s
[info]                  ·gc.alloc.rate:                   684.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19546.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   51505.121 ±(99.9%) 3248.827 ops/s [Average]
[info]   (min, avg, max) = (50674.201, 51505.121, 52524.696), stdev = 843.710
[info]   CI (99.9%): [48256.295, 54753.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   674.275 ±(99.9%) 42.553 MB/sec [Average]
[info]   (min, avg, max) = (663.384, 674.275, 687.611), stdev = 11.051
[info]   CI (99.9%): [631.723, 716.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20604.006 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (20603.951, 20604.006, 20604.110), stdev = 0.064
[info]   CI (99.9%): [20603.759, 20604.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   646.681 ±(99.9%) 7.174 MB/sec [Average]
[info]   (min, avg, max) = (644.813, 646.681, 649.503), stdev = 1.863
[info]   CI (99.9%): [639.507, 653.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19764.613 ±(99.9%) 1135.520 B/op [Average]
[info]   (min, avg, max) = (19361.151, 19764.613, 20047.553), stdev = 294.891
[info]   CI (99.9%): [18629.093, 20900.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.622 ±(99.9%) 4.996 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.622, 2.943), stdev = 1.298
[info]   CI (99.9%): [≈ 0, 5.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.290 ±(99.9%) 155.228 B/op [Average]
[info]   (min, avg, max) = (0.641, 19.290, 91.399), stdev = 40.312
[info]   CI (99.9%): [≈ 0, 174.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.39% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56960.644 ops/s
[info] # Warmup Iteration   2: 76865.170 ops/s
[info] # Warmup Iteration   3: 76963.633 ops/s
[info] Iteration   1: 79793.005 ops/s
[info]                  ·gc.alloc.rate:                   515.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              10168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11582.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 80159.890 ops/s
[info]                  ·gc.alloc.rate:                   517.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              10168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6506.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 79652.086 ops/s
[info]                  ·gc.alloc.rate:                   514.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              10168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13083.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 80079.276 ops/s
[info]                  ·gc.alloc.rate:               517.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          10168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6506.552 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 80839.094 ops/s
[info]                  ·gc.alloc.rate:                   522.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              10168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12890.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   80104.670 ±(99.9%) 1769.872 ops/s [Average]
[info]   (min, avg, max) = (79652.086, 80104.670, 80839.094), stdev = 459.630
[info]   CI (99.9%): [78334.798, 81874.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   517.543 ±(99.9%) 11.464 MB/sec [Average]
[info]   (min, avg, max) = (514.594, 517.543, 522.270), stdev = 2.977
[info]   CI (99.9%): [506.078, 529.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10168.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10168.005, 10168.006, 10168.006), stdev = 0.001
[info]   CI (99.9%): [10168.005, 10168.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.804 ±(99.9%) 655.833 MB/sec [Average]
[info]   (min, avg, max) = (331.064, 514.804, 662.162), stdev = 170.318
[info]   CI (99.9%): [≈ 0, 1170.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10114.048 ±(99.9%) 12874.271 B/op [Average]
[info]   (min, avg, max) = (6506.552, 10114.048, 13083.836), stdev = 3343.407
[info]   CI (99.9%): [≈ 0, 22988.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.407 ±(99.9%) 3.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.407, 1.908), stdev = 0.840
[info]   CI (99.9%): [≈ 0, 3.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.017 ±(99.9%) 63.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.017, 37.632), stdev = 16.562
[info]   CI (99.9%): [≈ 0, 71.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.70% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64124.341 ops/s
[info] # Warmup Iteration   2: 85213.982 ops/s
[info] # Warmup Iteration   3: 85596.435 ops/s
[info] Iteration   1: 85222.929 ops/s
[info]                  ·gc.alloc.rate:      5.632 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 85747.037 ops/s
[info]                  ·gc.alloc.rate:      5.667 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 85614.904 ops/s
[info]                  ·gc.alloc.rate:      5.658 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 85165.014 ops/s
[info]                  ·gc.alloc.rate:      5.628 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 85845.519 ops/s
[info]                  ·gc.alloc.rate:      5.674 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   85519.081 ±(99.9%) 1188.061 ops/s [Average]
[info]   (min, avg, max) = (85165.014, 85519.081, 85845.519), stdev = 308.536
[info]   CI (99.9%): [84331.019, 86707.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.652 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (5.628, 5.652, 5.674), stdev = 0.021
[info]   CI (99.9%): [5.571, 5.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   104.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.005, 104.005, 104.005), stdev = 0.001
[info]   CI (99.9%): [104.005, 104.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:10:13
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    796882.468 ±   17421.149   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      2098.314 ±      46.247  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      2086.471 ±     525.938  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5      4121.082 ±    1070.380    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.104 ±       0.098  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.205 ±       0.193    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        28.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1581636.090 ±   98380.083   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1125.691 ±      69.591  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      1118.506 ±     673.183  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1111.994 ±     637.297    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.079 ±       0.105  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.079 ±       0.105    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        17.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        17.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   3639942.669 ±  300064.750   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       240.526 ±      19.796  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5       271.197 ±     132.602  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       117.395 ±      61.937    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.325 ±       2.690  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.142 ±       1.180    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         5.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         9.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    171162.769 ±    5364.994   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1423.602 ±      44.213  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     13088.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      1454.734 ±     699.347  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5     13369.638 ±    6223.408    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.100 ±       0.230  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.918 ±       2.115    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        22.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        22.000                    ms
[info] AdtBenchmark.writeCirce                                                                  thrpt    5    567887.293 ±   27227.660   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1931.655 ±      92.192  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      5352.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      1949.711 ±     575.707  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5400.112 ±    1465.159    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.096 ±       0.092  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.266 ±       0.258    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                        thrpt    5        29.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                         thrpt    5        25.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2062691.697 ±   90185.608   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       796.981 ±      34.740  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       608.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5       785.011 ±     688.214  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       599.825 ±     545.775    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.058 ±       0.132  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.045 ±       0.101    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        12.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        12.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5   9924442.299 ±  356196.672   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       504.521 ±      18.288  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       449.316 ±     762.706  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        71.128 ±     119.404    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.392 ±       3.156  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.062 ±       0.498    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         7.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5         9.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    298687.486 ±   29799.924   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1023.393 ±     101.587  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      5392.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1049.830 ±     593.976  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      5525.577 ±    2828.561    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.058 ±       0.236  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.303 ±       1.237    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        16.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        22.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1689538.826 ±   43101.271   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2610.962 ±      67.928  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2639.455 ±     598.969  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      2458.271 ±     534.134    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.108 ±       0.222  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.101 ±       0.209    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        39.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2575727.445 ±  102856.327   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1806.886 ±      71.393  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1802.192 ±     726.924  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1101.149 ±     442.774    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.096 ±       0.134  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.059 ±       0.083    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5   9081384.472 ±  698475.860   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1154.019 ±      88.642  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5      1137.410 ±     704.797  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       197.196 ±     123.460    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.104 ±       0.253  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.018 ±       0.043    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        17.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        13.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    626194.486 ±   32015.632   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1655.416 ±      84.219  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1661.431 ±      74.724  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4175.582 ±     249.434    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.087 ±       0.268  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.220 ±       0.683    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   1975036.567 ±   78359.074   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      1967.920 ±      78.548  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1568.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      1951.325 ±     552.404  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      1555.467 ±     475.910    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.087 ±       0.105  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.070 ±       0.085    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        29.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   5977665.643 ±  166796.022   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1641.017 ±      45.162  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1662.888 ±      73.987  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       437.752 ±      12.129    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.108 ±       0.143  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.029 ±       0.038    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  27575479.629 ±  843992.597   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       841.201 ±      26.180  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       864.082 ±     701.741  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5        49.316 ±      40.242    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.075 ±       0.201  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.004 ±       0.011    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        10.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  26613573.850 ±   35613.941   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1082789.409 ±   43068.396   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1645.804 ±      66.233  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2392.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1664.531 ±      70.361  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2419.614 ±     190.598    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.087 ±       0.105  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.127 ±       0.148    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     18756.430 ±    1039.877   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1328.382 ±      73.609  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    111446.415 ±      12.174    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1337.670 ±      31.435  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    112236.746 ±    3788.025    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.096 ±       0.185  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         8.024 ±      15.480    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     31720.146 ±    2110.245   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       851.636 ±      56.125  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     42253.289 ±      45.419    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       854.653 ±     696.800  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     42300.466 ±   32245.720    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.183  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         3.296 ±       8.990    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        12.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     29515.946 ±     625.230   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       396.554 ±       8.302  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     21144.016 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       368.265 ±     308.741  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     19653.530 ±   16959.231    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.341 ±       2.755  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5        18.139 ±     146.646    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     25943.764 ±     379.384   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1343.031 ±      19.566  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     81456.018 ±       0.012    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1395.454 ±     553.867  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     84618.108 ±   32639.028    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.108 ±       0.067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         6.567 ±       4.078    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     27427.996 ±     586.921   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1878.084 ±      39.824  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    107762.959 ±      67.187    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1882.809 ±     707.376  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5    108038.621 ±   40755.881    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.112 ±       0.217  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         6.456 ±      12.482    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     27348.493 ±    1001.096   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1603.742 ±      58.998  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     92288.017 ±       0.010    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1595.729 ±     553.695  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     91812.385 ±   30970.991    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         4.785 ±       8.553    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     30668.712 ±     569.829   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1701.710 ±      31.703  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5     87328.016 ±       0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5      1679.945 ±      42.811  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5     86212.385 ±    2540.068    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         3.632 ±       6.226    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        25.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     30718.119 ±     699.984   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1644.981 ±      37.155  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5     84272.015 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5      1612.143 ±     605.925  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5     82603.659 ±   31598.685    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5         3.200 ±       5.042    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        20.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      8396.952 ±     203.223   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1187.550 ±      28.841  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    222544.053 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1194.242 ±     680.953  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5    223832.221 ±  128544.005    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5        11.699 ±      28.101    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5     17992.321 ±     492.585   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1575.257 ±      42.537  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    137784.026 ±       0.014    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1610.976 ±     577.002  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    140940.904 ±   51801.133    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         5.468 ±      11.116    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        21.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     41020.747 ±    1601.837   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1132.724 ±      44.170  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     43448.263 ±       2.167    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1123.794 ±     677.660  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     43103.786 ±   25852.846    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.058 ±       0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.238 ±       3.392    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        17.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     60997.434 ±    2937.136   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       788.213 ±      37.718  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       799.174 ±     704.398  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     20645.009 ±   18731.152    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.054 ±       0.166  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.407 ±       4.347    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                     thrpt    5     31142.991 ±    1184.702   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2112.577 ±      80.291  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    106760.015 ±       0.009    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2078.651 ±     593.771  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    105045.256 ±   29716.879    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.001 ±       7.816    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                           thrpt    5        31.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                            thrpt    5        33.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     27111.398 ±     595.904   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1633.547 ±      36.032  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     94808.018 ±       0.012    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1600.025 ±     555.832  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     92843.930 ±   31333.520    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.079 ±       0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         4.587 ±       6.846    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     36714.022 ±    1687.564   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1692.054 ±      78.241  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     72528.012 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5      1748.389 ±     565.490  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     74928.015 ±   22968.757    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         3.393 ±       3.769    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        26.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        22.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     36908.653 ±    1823.149   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1636.711 ±      80.323  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     69784.012 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5      1680.759 ±      41.018  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     71667.092 ±    2000.454    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.104 ±       0.179  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5         4.454 ±       7.830    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        25.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    324515.595 ±   10789.207   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1783.427 ±      60.252  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      8648.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1818.142 ±     706.361  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8813.029 ±    3242.757    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.323 ±       0.506    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        27.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    699769.474 ±   16172.955   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       579.861 ±      13.088  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       523.146 ±     689.068  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1177.139 ±    1557.925    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.471 ±       3.610  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.055 ±       8.082    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1714776.508 ±  128229.500   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       331.251 ±      24.799  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       352.826 ±     364.854  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       324.318 ±     349.855    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.340 ±       2.748  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.306 ±       2.478    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    106289.620 ±    3395.675   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3861.518 ±     121.727  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      3871.970 ±     693.311  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     57321.421 ±    9045.643    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.137 ±       0.176  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.035 ±       2.592    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        57.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        47.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    323279.196 ±   10122.452   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1101.051 ±      34.566  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      5360.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1130.950 ±     709.598  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      5503.972 ±    3398.764    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.324 ±       0.325    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5    921327.628 ±   28490.145   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       650.948 ±      20.161  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       655.200 ±       6.189  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1119.308 ±      25.913    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.467 ±       3.528  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.801 ±       6.062    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2568671.004 ±  128395.864   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5      1188.384 ±      59.678  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1201.183 ±     691.100  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       735.642 ±     416.471    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.043 ±       0.099    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2230146.428 ±   47059.660   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    499294.533 ±   29756.904   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       583.743 ±      34.838  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5       591.826 ±     567.040  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1867.484 ±    1812.837    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.454 ±       3.599  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.426 ±      11.299    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    177169.838 ±    8882.257   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2177.914 ±     108.646  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     19344.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2162.121 ±     717.330  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     19206.582 ±    6463.581    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.100 ±       0.174  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.887 ±       1.527    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        30.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    428667.899 ±   11205.963   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       355.198 ±       9.380  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       349.483 ±     368.378  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1284.420 ±    1386.885    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.448 ±       3.746  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.645 ±      13.758    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5    973797.909 ±   65296.617   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       188.131 ±      12.678  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       204.676 ±     440.580  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       331.731 ±     714.571    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.007 ±       0.057    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     67593.800 ±    1917.608   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2789.498 ±      79.330  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.006 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2773.166 ±     571.247  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     64572.090 ±   13174.096    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.158 ±       0.251  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.684 ±       5.831    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        41.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        39.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    249617.540 ±    9587.669   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1376.676 ±      52.662  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      8680.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1337.116 ±      34.271  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      8430.956 ±     250.068    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±       0.134  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.605 ±       0.869    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        20.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                  thrpt    5   1560004.172 ±   53040.544   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       800.940 ±      27.307  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       788.762 ±     700.887  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       796.529 ±     724.760    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.054 ±       0.166  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.054 ±       0.167    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   2005806.123 ±    4935.583   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       540.407 ±       1.477  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       530.676 ±     699.631  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       416.431 ±     549.727    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.396 ±       2.920  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.311 ±       2.290    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1947023.170 ±   86837.272   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     38509.980 ±    1182.982   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1687.350 ±      51.207  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     68944.689 ±       5.834    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1674.629 ±      54.994  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     68431.404 ±    4145.013    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.400 ±       5.126    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     25343.823 ±     452.081   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1563.303 ±      27.213  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     97072.019 ±       0.010    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1543.306 ±     686.516  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     95842.423 ±   43079.161    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.096 ±       0.244  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         5.947 ±      15.194    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        23.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     58463.339 ±    1393.696   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1024.814 ±      23.928  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     27584.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1055.625 ±     581.753  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     28409.373 ±   15483.954    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.017 ±       2.451    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        15.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     68959.277 ±     707.975   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       463.758 ±       4.830  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10584.006 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.063 ±     629.062  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     10267.327 ±   14300.192    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.348 ±       2.734  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         7.916 ±      62.134    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     33930.202 ±    1306.527   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1736.260 ±      66.839  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80536.014 ±       0.009    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1740.417 ±     620.699  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     80735.852 ±   28980.259    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.866 ±       5.901    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     39474.152 ±     717.201   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       622.724 ±      11.371  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24824.557 ±       4.704    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5       660.639 ±       3.814  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     26336.621 ±     601.385    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.394 ±       3.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        15.749 ±     121.409    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     40971.320 ±    2071.582   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       411.996 ±      20.923  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     15824.011 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       429.334 ±     574.222  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16474.633 ±   21702.898    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.449 ±       3.554  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        17.411 ±     138.061    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     43498.869 ±    2096.975   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       426.817 ±      20.283  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     15440.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       434.135 ±     577.789  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     15676.491 ±   20341.145    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.375 ±       3.009  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        13.638 ±     109.493    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     43575.906 ±    2996.314   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       377.695 ±      25.904  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     13640.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5       367.494 ±     490.362  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     13337.698 ±   18867.062    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.375 ±       3.053  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5        13.903 ±     113.335    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     15773.825 ±     755.407   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1126.003 ±      53.896  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    112348.002 ±      26.236    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1133.144 ±     696.739  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    113121.876 ±   71159.148    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.046 ±       0.088  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         4.573 ±       8.759    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        17.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     16471.575 ±     660.083   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       999.502 ±      40.493  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     95483.669 ±      57.918    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       988.986 ±      24.750  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     94491.749 ±    5968.608    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         5.581 ±      12.687    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        14.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     79522.238 ±    3875.312   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       206.973 ±      10.121  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       204.663 ±     440.552  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4036.814 ±    8691.721    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.010 ±       0.069  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.206 ±       1.380    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     13332.681 ±     585.911   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1277.572 ±      56.508  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    150800.195 ±       1.386    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1261.023 ±     573.054  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    148881.122 ±   68537.385    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         7.372 ±      11.514    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        19.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     56758.940 ±    1175.842   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1407.149 ±      29.521  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     39016.008 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1403.158 ±     544.075  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     38901.965 ±   14877.453    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         2.311 ±       3.536    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        21.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        19.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                              thrpt    5     82251.263 ±    1742.350   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1245.685 ±      26.281  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     23832.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1260.085 ±     586.559  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     24097.120 ±   10858.135    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.959 ±       2.810    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        19.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        19.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    297672.481 ±    3118.177   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       472.108 ±       4.880  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       448.888 ±     762.145  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2373.764 ±    4038.628    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.384 ±       3.134  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.038 ±      16.614    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    336948.809 ±    2852.443   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     74033.701 ±    4205.165   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1396.543 ±      78.958  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     29688.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1400.800 ±     593.630  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5     29753.285 ±   11146.916    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.238 ±       1.409    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        21.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        19.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     26833.897 ±    1007.588   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       596.256 ±      22.280  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     34960.021 ±       0.044    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5       593.514 ±     568.228  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     34749.972 ±   32662.892    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.404 ±       3.039  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        23.626 ±     177.312    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                   thrpt    5     27849.109 ±     961.082   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       383.862 ±      14.266  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     21688.080 ±      53.368    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       363.664 ±     486.091  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     20570.950 ±   27789.383    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.448 ±       3.769  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        25.414 ±     213.761    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    124626.195 ±   11956.069   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       486.633 ±      46.832  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.004 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       515.949 ±     657.754  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      6530.135 ±    8445.164    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.369 ±       2.732  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         4.846 ±      36.168    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     22155.738 ±     560.873   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1238.112 ±      31.457  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     87944.054 ±       0.277    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1253.563 ±     554.379  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     89080.785 ±   40682.180    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.432 ±       6.935    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    162784.989 ±    5560.335   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1065.009 ±      36.003  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1063.808 ±     562.848  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10291.357 ±    5710.182    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.644 ±       1.018    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                  thrpt    5    549079.947 ±   27330.020   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       555.446 ±      27.505  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       523.106 ±     689.701  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1496.857 ±    1945.564    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.458 ±       3.590  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.308 ±      10.247    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    585854.929 ±   41349.899   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       449.672 ±      31.771  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       448.601 ±     761.177  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1201.578 ±    2007.825    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.388 ±       3.117  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.036 ±       8.334    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    603010.533 ±    2520.473   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    332317.677 ±    2655.999   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       918.986 ±       7.822  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5       917.715 ±     558.569  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      4346.970 ±    2668.475    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.394 ±       0.710    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     35156.604 ±    1302.420   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1656.997 ±      61.089  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     74159.825 ±       1.612    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1680.513 ±      42.719  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     75216.580 ±    2821.252    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.121 ±       0.104  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         5.401 ±       4.596    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        23.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5     94355.307 ±    3237.370   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1101.426 ±      38.453  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     18368.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1123.411 ±     706.884  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     18722.177 ±   11371.049    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.058 ±       0.088  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.972 ±       1.477    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        17.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    160166.162 ±    1229.379   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       104.217 ±       0.814  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       102.320 ±     539.506  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1007.200 ±    5310.680    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.510 ±       4.347  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         5.025 ±      42.826    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         4.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     38411.913 ±    1734.826   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2013.678 ±      91.129  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     82504.012 ±       0.007    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      2015.372 ±      67.991  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     82583.745 ±    5028.253    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         2.558 ±       5.167    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        28.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     85589.689 ±    3849.860   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       684.013 ±      30.847  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12576.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5       661.049 ±       5.294  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12155.294 ±     618.646    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.058 ±       0.236  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         1.066 ±       4.307    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5     98776.548 ±    1251.022   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       389.690 ±       4.935  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      6208.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       363.915 ±     485.504  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5801.999 ±    7829.976    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.440 ±       3.653  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         7.044 ±      58.533    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    110138.465 ±    1791.779   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       407.602 ±       6.601  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5824.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       433.759 ±     575.921  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      6193.691 ±    8159.433    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.375 ±       2.987  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.364 ±      42.700    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    112307.748 ±    4899.669   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       327.129 ±      14.303  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      4584.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5       352.420 ±     365.171  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5      4937.191 ±    5127.529    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5         0.383 ±       2.946  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.335 ±      40.929    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9783.361 ±     191.402   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1622.123 ±      32.240  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    260920.700 ±      53.648    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1610.945 ±     577.025  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    259037.449 ±   88704.625    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        14.055 ±      16.689    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5      9517.596 ±     532.288   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1464.161 ±      81.608  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    242111.191 ±      53.862    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1463.268 ±     670.802  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    241867.247 ±  105625.650    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.087 ±       0.207  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        14.520 ±      35.090    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    118666.117 ±    8644.291   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       308.878 ±      22.374  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       286.622 ±     715.145  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3814.596 ±    9547.201    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.333 ±       2.623  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         4.368 ±      34.355    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5602.749 ±     279.487   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1490.508 ±      74.777  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    418664.079 ±       0.013    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1464.536 ±     688.582  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    411464.346 ±  196115.873    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        21.114 ±      47.644    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        22.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     23457.590 ±     760.783   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1726.910 ±      55.021  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    115857.722 ±     134.634    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1745.973 ±     601.136  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    117141.801 ±   40448.829    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.590 ±       5.450    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                               thrpt    5     28408.708 ±    1491.670   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5      1812.138 ±      95.113  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5    100392.017 ±       0.009    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1874.855 ±     705.641  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5    103905.750 ±   40596.054    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         4.393 ±       7.344    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        28.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    328082.844 ±    9535.503   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       723.752 ±      21.105  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       730.213 ±     570.345  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3505.667 ±    2813.235    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.420 ±       0.697    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    386740.951 ±    3441.477   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28274.676 ±    1264.838   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1854.446 ±      81.929  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    103200.017 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1879.883 ±     705.324  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    104632.758 ±   39895.250    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         4.859 ±       5.686    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    128246.649 ±    5194.915   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2208.964 ±      87.819  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     27104.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2162.509 ±     720.671  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     26542.429 ±    9252.407    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.100 ±       0.174  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         1.226 ±       2.120    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        32.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    306617.953 ±    9262.542   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       433.339 ±      13.127  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       429.078 ±     572.137  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2201.175 ±    2914.304    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.457 ±       3.682  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.373 ±      19.127    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    680791.636 ±   24478.226   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       442.983 ±      15.880  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       450.088 ±     764.392  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1039.484 ±    1752.561    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.358 ±       2.709  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.827 ±       6.244    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     71198.200 ±    1733.321   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      3024.614 ±      73.049  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66856.006 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      2980.465 ±     598.705  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     65877.095 ±   12871.800    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.133 ±       0.184  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         2.943 ±       4.038    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        38.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    211198.265 ±    8874.973   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1716.757 ±      72.469  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     12792.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1745.882 ±     535.836  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     13018.810 ±    4567.137    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.683 ±       0.552    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        26.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    871227.394 ±   37541.754   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       686.481 ±      29.666  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       655.620 ±       7.438  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1184.364 ±      47.937    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.068 ±       0.299    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1015858.922 ±   64111.327   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       552.659 ±      35.178  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.798 ±     700.052  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       823.294 ±    1098.272    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.394 ±       2.948  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.610 ±       4.563    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5    979934.217 ±   30123.347   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     30505.446 ±    1274.825   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1678.320 ±      70.141  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     86587.058 ±      26.204    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1674.398 ±      53.706  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     86397.091 ±    5869.614    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.132  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.504 ±       6.701    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                      thrpt    5    129621.909 ±    1280.944   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1782.858 ±      17.727  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     21648.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1746.841 ±     562.757  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5     21210.234 ±    6804.159    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.104 ±       0.080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.264 ±       0.984    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                             thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    195439.591 ±    9586.920   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1166.435 ±      56.488  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      9392.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1189.661 ±     698.739  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      9575.558 ±    5504.738    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.637 ±       0.540    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        18.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    264906.290 ±   12868.194   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       861.844 ±      41.660  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       866.599 ±     707.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      5156.923 ±    4373.890    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.371 ±       0.886    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        11.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     66521.544 ±    3176.094   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2764.718 ±     131.254  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     65408.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      2700.790 ±      80.745  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     63904.665 ±    3998.832    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.146 ±       0.113  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         3.453 ±       2.812    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        40.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        39.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                     thrpt    5    164025.886 ±    5093.507   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1073.176 ±      32.633  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1063.852 ±     561.673  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     10203.656 ±    5257.169    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.639 ±       1.132    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                           thrpt    5        16.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                            thrpt    5        14.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    558498.655 ±   30416.531   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       565.006 ±      30.992  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       522.728 ±     690.016  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1471.010 ±    1920.766    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.471 ±       3.698  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.326 ±      10.411    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    575735.408 ±    4467.832   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       442.011 ±       3.417  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       382.476 ±     616.171  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      1044.797 ±    1676.246    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.380 ±       2.943  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.040 ±       8.050    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    587353.576 ±    8234.317   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    326892.938 ±   13677.647   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       900.664 ±      37.868  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5       917.620 ±     565.826  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4420.980 ±    2797.134    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.361 ±       0.446    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5      9310.241 ±     325.761   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1219.583 ±      43.001  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    206147.678 ±      26.871    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1201.571 ±     697.190  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5    203293.766 ±  123331.518    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5        11.950 ±      27.861    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5      9469.920 ±     394.637   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1134.899 ±      47.274  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    188599.724 ±      54.175    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1123.929 ±     697.666  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5    186661.554 ±  111901.840    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.046 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         7.590 ±      10.883    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        17.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    152825.103 ±    6245.429   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       994.470 ±      40.411  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5      1002.232 ±      15.968  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     10320.543 ±     294.150    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.687 ±       0.703    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        13.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      8059.988 ±     500.471   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1448.559 ±      90.112  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    282840.055 ±       0.010    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1464.563 ±     674.068  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5    285762.941 ±  121252.613    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5        10.558 ±      23.423    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        22.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     19758.005 ±    1002.608   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1049.636 ±      51.963  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     83607.494 ±     114.753    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1063.966 ±     592.054  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5     84708.356 ±   45257.135    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.982 ±       9.702    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                         thrpt    5     22084.166 ±    1453.503   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       936.075 ±      61.767  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5     66696.022 ±       0.013    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       922.482 ±     577.944  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     65633.825 ±   38763.393    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         4.151 ±      10.202    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                               thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    710395.592 ±    8692.912   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1281.955 ±      15.231  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1270.927 ±     574.997  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      2814.846 ±    1248.053    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.166 ±       0.269    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        19.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    541147.947 ±   15361.817   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     21186.217 ±    1471.740   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       977.086 ±      68.099  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     72567.906 ±      30.821    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       992.224 ±      22.730  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5     73711.443 ±    5379.025    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         5.276 ±       7.138    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     23385.674 ±     867.235   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1309.716 ±      48.903  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     88134.335 ±      33.309    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1270.315 ±     576.378  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     85410.706 ±   36080.796    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.639 ±       8.129    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        19.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     25166.711 ±    1402.774   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1165.675 ±      65.832  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     72891.188 ±      59.937    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1190.903 ±     677.664  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     74498.535 ±   43099.964    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         4.930 ±      10.702    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    238188.760 ±    7674.470   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       619.900 ±      19.978  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       598.807 ±     572.783  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      3955.886 ±    3775.111    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.037 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.247 ±       0.686    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     15499.459 ±    1082.627   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1585.525 ±     110.605  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    160984.047 ±       0.143    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1601.506 ±     559.504  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    162771.791 ±   63183.761    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.071 ±       0.134  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         7.177 ±      13.372    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        21.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     43210.273 ±    1162.858   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1374.036 ±      36.283  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     50040.010 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1403.401 ±     546.530  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     51116.541 ±   20236.772    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.087 ±       0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         3.191 ±       6.393    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                             thrpt    5    123930.119 ±    5592.025   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5       969.581 ±      43.904  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     12312.004 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       988.914 ±      25.463  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     12558.361 ±     429.577    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.850 ±       1.703    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        13.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1233558.422 ±   34987.531   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1323.123 ±      37.206  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1338.768 ±      31.099  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1708.009 ±      49.070    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.106 ±       0.103    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    685121.171 ±   36810.820   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     49245.976 ±    2685.028   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1306.552 ±      71.328  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     41744.009 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1264.866 ±     553.420  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     40433.739 ±   18354.682    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.005 ±       3.283    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        19.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     14945.279 ±     385.799   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1357.481 ±      35.215  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    142927.008 ±      56.718    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1405.113 ±     603.015  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    147920.175 ±   62204.988    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.108 ±       0.174  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        11.387 ±      18.190    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        21.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        19.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     15686.996 ±     316.219   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1277.828 ±      25.819  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    128196.233 ±      50.871    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1259.599 ±     559.943  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    126393.013 ±   57074.603    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.087 ±       0.119  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         8.777 ±      11.977    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    270668.203 ±    7982.736   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       704.498 ±      20.407  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       732.415 ±     574.528  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      4263.316 ±    3485.546    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.338 ±       0.888    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     11962.640 ±     245.214   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1643.991 ±      33.422  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    216280.253 ±       1.871    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1603.288 ±     560.256  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    210977.008 ±   75972.327    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        10.949 ±       7.323    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     41444.544 ±     954.589   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1574.074 ±      36.567  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     59768.011 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1541.337 ±     697.693  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     58552.127 ±   27504.630    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.370 ±       3.011    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        23.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                             thrpt    5     40443.810 ±    1781.137   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5      1204.609 ±      53.626  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     46872.011 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1192.601 ±     700.184  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     46373.487 ±   26223.087    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         3.232 ±       4.817    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1262106.609 ±   38850.426   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1148.427 ±      34.869  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1135.226 ±     704.577  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1416.153 ±     896.340    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.079 ±       0.191  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.099 ±       0.241    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        17.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        15.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1259907.316 ±   27524.212   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5      3550.556 ±     129.503   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       479.466 ±      17.654  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5    212496.125 ±       0.020    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       445.418 ±     753.073  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    197187.362 ±  331147.710    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.446 ±       3.532  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       197.481 ±    1564.759    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    118292.897 ±    4999.347   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2196.519 ±      92.978  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     29224.004 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2162.231 ±     720.423  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     28771.548 ±    9724.802    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.163 ±       1.380    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    248100.927 ±   17708.118   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       544.812 ±      39.051  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       574.611 ±     546.082  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3652.466 ±    3543.594    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.473 ±       3.670  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         3.063 ±      23.821    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    486686.708 ±   20973.118   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       613.545 ±      26.580  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       665.107 ±       2.249  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      2150.968 ±     100.555    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.381 ±       2.613  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.226 ±       8.385    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     69056.000 ±    2226.452   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2991.324 ±      97.326  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68168.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2980.198 ±     598.342  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     67923.025 ±   14222.274    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.158 ±       0.338  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.603 ±       7.672    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        44.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        39.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    170195.532 ±    2269.258   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1736.675 ±      21.857  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     16056.003 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1747.736 ±     613.980  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     16159.819 ±    5763.045    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.100 ±       0.104  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.924 ±       0.958    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        26.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    485164.810 ±   13877.107   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       498.162 ±      14.314  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       509.075 ±     650.167  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1652.134 ±    2114.164    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.460 ±       3.697  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.513 ±      12.158    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    572739.921 ±   22935.072   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       448.351 ±      17.892  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       448.893 ±     762.705  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1234.254 ±    2105.443    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.397 ±       3.031  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.104 ±       8.447    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    630659.226 ±   49071.261   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     26928.019 ±     984.488   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1480.423 ±      53.514  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     86516.504 ±      27.004    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1468.378 ±     690.624  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     85773.158 ±   38570.506    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.075 ±       0.108  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         4.387 ±       6.411    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        21.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      7286.138 ±     474.275   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1152.139 ±      74.924  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    248864.060 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1200.363 ±     704.092  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    259275.616 ±  151080.218    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5        16.164 ±      35.617    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                         thrpt    5      7145.796 ±     315.977   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                          thrpt    5      1043.617 ±      46.211  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                     thrpt    5    229848.061 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5      1055.376 ±     555.141  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5    232644.256 ±  130163.565    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.092 ±       0.134  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        20.196 ±      29.874    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                thrpt    5        15.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5    102217.943 ±    7137.983   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       990.491 ±      68.982  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.004 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       934.872 ±     578.709  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     14374.877 ±    8466.985    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.901 ±       1.633    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      6490.767 ±     192.464   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1184.735 ±      34.974  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    287232.069 ±       0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1192.166 ±     690.494  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    289009.047 ±  166480.813    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         6.059 ±      21.355    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     16348.952 ±     385.288   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       964.461 ±      23.676  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     92845.592 ±     132.112    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5       995.715 ±      19.975  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5     95855.900 ±    1958.534    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5         4.817 ±      11.707    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                        thrpt    5     19029.930 ±     213.036   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                         thrpt    5       892.585 ±       9.361  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                    thrpt    5     73808.025 ±       0.017    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                thrpt    5       921.169 ±     567.920  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     76185.016 ±   47280.227    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.512 ±      12.756    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                              thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    430064.198 ±   24746.272   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5       975.078 ±      55.511  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5       932.309 ±     580.082  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5      3414.931 ±    2196.229    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.244 ±       0.387    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    417034.969 ±    5950.120   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     17909.773 ±     993.319   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       906.842 ±      50.422  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     79682.975 ±      28.182    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5       858.689 ±     694.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5     75465.434 ±   61221.276    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5         0.042 ±       0.160  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5         3.633 ±      13.842    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        12.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     11859.989 ±     394.795   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1222.916 ±      40.939  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    162256.206 ±      30.840    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1200.862 ±     689.153  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    159415.520 ±   93948.334    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         7.725 ±       8.750    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     13052.757 ±     123.036   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1168.992 ±      11.062  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    140946.313 ±      64.660    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1190.526 ±     698.617  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5    143514.136 ±   83374.644    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         8.034 ±       8.125    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    167260.177 ±    1341.421   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       967.514 ±       7.775  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.003 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       934.188 ±     575.719  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      8791.496 ±    5442.168    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.705 ±       1.146    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                 thrpt    5     11161.803 ±     256.918   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1433.010 ±      33.467  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5    202040.074 ±       0.285    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1391.736 ±     577.752  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    196167.237 ±   78489.084    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.119  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5        11.145 ±      16.601    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                        thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     27193.943 ±     790.730   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1193.720 ±      35.473  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     69072.080 ±     106.723    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1199.176 ±     704.773  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     69421.707 ±   41757.734    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.079 ±       0.104  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         4.581 ±       6.086    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                            thrpt    5     86580.879 ±    1796.978   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1769.885 ±      37.482  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     32168.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1807.186 ±     698.566  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     32857.016 ±   13214.870    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.092 ±       0.185  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.668 ±       3.378    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        27.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    670945.887 ±   33660.492   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       920.973 ±      45.976  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       931.846 ±     574.235  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      2188.520 ±    1412.919    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.071 ±       0.176  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.167 ±       0.417    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    761607.113 ±    3463.183   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                thrpt    5     79223.025 ±    2874.043   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1757.504 ±      63.279  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5     34912.006 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1736.164 ±     585.860  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5     34480.654 ±   11099.796    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.108 ±       0.174  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.149 ±       3.409    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                      thrpt    5        26.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                       thrpt    5        28.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     17973.115 ±     982.048   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5       892.990 ±      48.844  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     78184.026 ±       0.015    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5       863.031 ±     697.764  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     75693.624 ±   63742.782    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         5.110 ±      15.203    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        13.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     18457.591 ±     942.608   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       736.831 ±      37.095  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     62817.275 ±      61.196    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       720.943 ±     561.812  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     61412.613 ±   46210.199    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.471 ±       3.658  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        40.299 ±     313.384    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    175563.434 ±   11165.389   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       456.903 ±      29.068  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.170 ±     765.162  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4042.279 ±    6931.097    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.333 ±       2.647  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         3.039 ±      24.198    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     15836.534 ±    1111.665   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1188.977 ±      83.730  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    118145.775 ±      27.485    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1191.175 ±     700.156  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    118470.401 ±   72386.243    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.164  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         8.669 ±      16.119    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        18.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     87581.633 ±    2601.930   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1559.455 ±      46.226  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     28024.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1541.171 ±     685.569  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     27684.887 ±   11865.573    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.644 ±       1.610    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        23.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    124261.965 ±    6912.452   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1312.624 ±      72.930  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     16624.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1328.639 ±      46.920  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16829.447 ±    1053.077    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.893 ±       2.055    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        20.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    465663.344 ±   33599.258   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       516.054 ±      37.372  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       515.631 ±     657.137  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1737.993 ±    2155.657    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.388 ±       2.984  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.303 ±      10.037    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    527478.259 ±   30138.348   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    120567.103 ±    7053.919   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1488.733 ±      87.260  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     19432.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1536.069 ±     705.086  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     20062.532 ±    9612.985    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.191  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.864 ±       2.486    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        23.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    149224.238 ±    4617.628   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2573.345 ±      78.821  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     27136.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2574.218 ±     734.455  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     27157.658 ±    8455.867    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.121 ±       0.119  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.275 ±       1.282    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        38.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        32.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    359917.001 ±    4997.576   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       367.730 ±       5.048  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       363.590 ±     638.049  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1589.499 ±    2781.458    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.457 ±       3.761  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         2.011 ±      16.548    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    874748.439 ±   31373.418   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       302.417 ±      10.812  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       286.636 ±     162.270  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       515.662 ±     292.984    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.338 ±       2.774  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.602 ±       4.946    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     75784.067 ±    1944.431   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3250.868 ±      82.743  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67512.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      3186.823 ±     729.955  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     66190.798 ±   15762.248    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.183 ±       0.373  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.808 ±       7.782    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        47.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        41.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    237429.918 ±    6555.015   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1818.910 ±      49.601  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12056.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1882.681 ±     706.076  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12482.702 ±    4860.623    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.112 ±       0.166  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.746 ±       1.102    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        28.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        24.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1233882.984 ±   60601.353   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       809.184 ±      39.299  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       788.583 ±     691.638  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1005.422 ±     873.023    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.067 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.085 ±       0.044    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1327591.867 ±   64568.226   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       546.657 ±      26.818  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       530.837 ±     699.713  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       628.177 ±     815.549    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.388 ±       2.892  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.469 ±       3.509    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1365078.899 ±   38003.553   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     34116.959 ±    1067.125   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1726.630 ±      54.596  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     79633.881 ±      16.087    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1742.459 ±     585.590  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     80342.627 ±   25547.287    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.100 ±       0.154  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.607 ±       7.050    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     18247.217 ±     872.590   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1915.272 ±      92.463  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    165174.176 ±      14.112    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1954.733 ±     566.830  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    168517.084 ±   44730.546    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.112 ±       0.201  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         9.670 ±      17.289    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        29.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5    100528.349 ±    2981.398   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1319.666 ±      39.192  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     20656.004 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5      1328.447 ±      45.269  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     20795.086 ±    1175.816    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.079 ±       0.191  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.236 ±       2.975    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    279750.995 ±   11667.155   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       910.119 ±      38.147  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       933.774 ±     579.033  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5253.753 ±    3269.151    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.058 ±       0.183  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.327 ±       1.027    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     16156.433 ±     486.117   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2059.800 ±      62.349  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    200640.206 ±       1.516    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2017.438 ±      63.764  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    196518.219 ±    5898.620    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         8.105 ±       7.657    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        30.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     20667.944 ±     920.294   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1672.832 ±      74.370  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5    127370.751 ±      70.072    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1678.106 ±      46.231  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    127783.089 ±    5603.054    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.092 ±       0.134  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         6.961 ±       9.982    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     88569.961 ±     601.496   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1213.313 ±       8.318  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.000 ±       0.073    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1191.282 ±     707.643  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     21170.864 ±   12644.129    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.332 ±       2.592    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    319023.074 ±   25286.529   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5      1016.837 ±      80.864  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       999.445 ±      17.240  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      4931.735 ±     363.617    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.368 ±       0.801    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        15.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    382839.388 ±    2052.552   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     25810.414 ±    1236.613   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1760.102 ±      83.655  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5    107312.006 ±       0.151    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1744.180 ±     603.578  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    106312.195 ±   34569.620    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.164  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.350 ±      10.158    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     68990.356 ±    1330.810   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1551.199 ±      28.891  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     35384.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1538.474 ±     721.576  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     35104.759 ±   16865.170    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         2.091 ±       2.109    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        23.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        19.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     91196.721 ±    4323.928   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1136.365 ±      53.968  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     19608.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1120.126 ±     673.486  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     19312.473 ±   11071.111    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.004 ±       1.775    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    105458.494 ±    2598.954   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1233.694 ±      29.663  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     18408.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1201.142 ±     710.079  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     17914.502 ±   10353.622    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.204  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.243 ±       3.043    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     45791.769 ±     963.141   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2195.380 ±      44.892  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     75448.010 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2217.522 ±     668.390  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     76223.024 ±   23764.423    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.104 ±       0.188  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.576 ±       6.449    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        33.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        32.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    119498.723 ±    3973.661   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1121.348 ±      37.253  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     14768.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1060.491 ±     571.022  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     13967.175 ±    7521.288    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.824 ±       0.772    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        16.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    345163.432 ±   10838.117   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       512.325 ±      16.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       507.302 ±     646.393  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      2315.617 ±    2979.674    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.542 ±       4.308  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.472 ±      19.658    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    658557.426 ±   31057.116   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       816.804 ±      38.505  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       861.957 ±     700.077  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      2062.584 ±    1726.903    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.189 ±       0.216    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    703321.904 ±   56436.589   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    228608.018 ±   16254.180   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       747.169 ±      53.146  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5       721.970 ±     563.962  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      4960.890 ±    3559.181    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.050 ±       0.166  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.343 ±       1.137    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                    thrpt    5    129050.631 ±    5000.165   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1767.857 ±      68.356  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5     21560.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1746.886 ±     586.490  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     21309.695 ±    7435.012    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.069 ±       1.309    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                          thrpt    5        26.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                           thrpt    5        22.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    184715.038 ±   10091.604   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1101.510 ±      60.656  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      9384.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1123.828 ±     707.699  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      9584.185 ±    6319.754    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.531 ±       1.068    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    330087.627 ±    5970.535   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       641.046 ±      11.891  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       598.442 ±     572.691  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      2853.508 ±    2738.012    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.046 ±       0.174  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.218 ±       0.826    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         7.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                 thrpt    5     68421.640 ±     965.172   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      2843.409 ±      39.938  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     65400.006 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      2836.812 ±     682.070  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     65244.772 ±   15373.971    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.104 ±       0.234  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.395 ±       5.384    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                       thrpt    5        42.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                        thrpt    5        44.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                   thrpt    5    167558.743 ±    3162.765   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1071.432 ±      20.275  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     10064.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1063.658 ±     562.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5      9990.188 ±    5242.391    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.625 ±       0.627    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                         thrpt    5        16.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                          thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    522524.189 ±    9368.040   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       515.279 ±       9.349  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5       509.065 ±     648.874  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1534.742 ±    1971.813    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.465 ±       3.646  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.408 ±      11.053    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        11.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5   1110900.205 ±   35964.570   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       824.418 ±      26.792  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       863.656 ±     701.436  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      1224.023 ±    1002.314    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.087 ±       0.132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.124 ±       0.189    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        11.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1132246.734 ±    3765.608   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                thrpt    5    323364.999 ±   19290.526   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5       882.883 ±      52.061  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5      4296.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5       851.542 ±     686.291  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4150.201 ±    3472.188    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.386 ±       0.346    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                      thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5       675.431 ±      37.841   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1410.297 ±      78.835  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5   3284912.748 ±       0.628    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1465.192 ±     702.951  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5   3416169.072 ± 1757875.981    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5       145.182 ±     128.937    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                          thrpt    5       675.762 ±      15.836   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1402.119 ±      33.254  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5   3264574.306 ±      48.522    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1389.924 ±     576.051  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5   3235916.085 ± 1326140.476    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5       145.109 ±     347.596    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        21.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     26566.927 ±     366.967   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       480.005 ±       6.859  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     28432.018 ±       0.012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       499.032 ±     637.827  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     29556.197 ±   37755.443    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.451 ±       3.784  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        26.812 ±     224.835    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        11.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5       672.256 ±      17.200   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1439.179 ±      36.460  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5   3368476.075 ±      65.778    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1458.126 ±     702.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5   3412662.208 ± 1633259.237    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5       117.119 ±     216.153    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     13014.503 ±     661.811   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1048.250 ±      51.997  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5    126750.786 ±     133.186    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1058.454 ±     592.556  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    128093.026 ±   75405.843    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.044 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.277 ±       8.561    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                         thrpt    5     15572.416 ±    1011.850   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       973.709 ±      63.636  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5     98400.005 ±       0.393    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       984.646 ±      26.534  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     99522.950 ±    5478.795    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.054 ±       0.156  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         5.462 ±      15.639    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                thrpt    5        13.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    274506.090 ±   10315.356   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       968.444 ±      35.847  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       863.511 ±     710.855  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      4946.653 ±    3991.420    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.050 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.286 ±       0.405    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        13.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        10.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    298579.954 ±    2432.286   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     14726.149 ±     544.192   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       975.722 ±      36.136  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5    104279.378 ±       5.610    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       987.474 ±      23.249  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    105542.357 ±    4269.742    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.054 ±       0.209  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         5.811 ±      22.618    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        13.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    900354.312 ±   20464.388   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2943.262 ±      67.259  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5144.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2983.762 ±     566.615  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5215.600 ±    1057.234    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.104 ±       0.188  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.182 ±       0.334    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        44.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        35.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1623130.666 ±   84349.901   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1526.454 ±      79.713  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5      1530.049 ±     735.880  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1483.850 ±     722.568    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.083 ±       0.150  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.081 ±       0.151    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        23.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        22.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   8537969.406 ±  304578.843   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2560.824 ±      90.274  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5      2576.067 ±     734.526  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       475.033 ±     147.999    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.108 ±       0.132  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.020 ±       0.024    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        38.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        30.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    318758.746 ±    9298.913   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1942.855 ±      55.625  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5      1936.477 ±     531.899  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      9557.174 ±    2397.551    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.087 ±       0.262  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.432 ±       1.299    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        29.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        30.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1062878.065 ±   55570.448   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2447.567 ±     127.222  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3624.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2501.029 ±     731.331  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      3702.984 ±    1055.014    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.112 ±       0.166  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.167 ±       0.247    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        37.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        31.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3439993.587 ±   54493.092   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      1993.432 ±      31.953  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      2009.586 ±      83.197  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       919.382 ±      30.799    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.087 ±       0.132  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.040 ±       0.060    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        30.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        30.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5  10119527.061 ±  770554.758   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       617.308 ±      47.068  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       597.525 ±     572.072  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5        93.128 ±      91.517    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.058 ±       0.208  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.009 ±       0.032    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         9.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5         8.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    448478.790 ±   11879.318   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1600.397 ±      41.543  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5616.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1593.928 ±     534.651  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      5593.242 ±    1869.448    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.067 ±       0.191  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.234 ±       0.679    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        24.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        24.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2118930.883 ±   75822.197   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1281.762 ±      46.179  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       952.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1255.002 ±     556.826  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       932.495 ±     425.306    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.072  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.053 ±       0.052    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        19.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        19.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5128695.511 ±  160491.647   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       677.822 ±      21.195  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       665.505 ±       3.598  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       204.230 ±       5.906    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.067 ±       0.208  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.020 ±       0.063    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5         8.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    420659.483 ±   20462.007   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1973.561 ±      95.956  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7384.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1938.257 ±     536.276  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      7254.881 ±    2160.854    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.092 ±       0.146  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.342 ±       0.534    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        29.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        34.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2621929.790 ±  136473.395   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1386.286 ±      72.793  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1391.527 ±     598.387  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       835.074 ±     352.019    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.096 ±       0.122  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.057 ±       0.072    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        21.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6783094.646 ±  325647.452   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1034.371 ±      49.731  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5      1000.556 ±      18.006  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       232.185 ±      12.473    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.050 ±       0.044  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.012 ±       0.010    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        15.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        12.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    649469.520 ±   13053.184   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1928.275 ±      40.192  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4672.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1939.724 ±     552.994  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      4699.464 ±    1319.717    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.083 ±       0.098  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.202 ±       0.235    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        29.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        30.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    828641.230 ±   25970.464   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2750.428 ±      86.091  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5224.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2708.504 ±      57.002  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5144.791 ±     255.707    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.100 ±       0.222  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.189 ±       0.419    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        40.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        32.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    991539.995 ±   56861.076   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1229.792 ±      70.511  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1187.888 ±     695.690  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1883.847 ±    1046.944    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.091  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.119 ±       0.146    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        17.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   7408055.188 ± 1671898.182   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       338.908 ±      76.537  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       353.195 ±     364.312  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        74.982 ±      70.228    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.340 ±       2.750  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.073 ±       0.591    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    264356.307 ±   14968.309   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1376.112 ±      77.387  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8192.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1387.680 ±     615.636  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      8255.728 ±    3369.644    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.139  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.495 ±       0.805    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      7967.643 ±     331.474   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2050.522 ±      85.830  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    405000.055 ±       0.009    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2019.154 ±      57.033  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    398836.898 ±   18083.285    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.154 ±       0.284  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        30.418 ±      55.783    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        30.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     13688.413 ±     704.958   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       369.000 ±      19.051  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     42424.035 ±       0.018    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       411.955 ±     623.849  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     47294.331 ±   70974.283    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.557 ±       4.549  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        63.559 ±     519.307    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5        18.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     22004.091 ±    1629.110   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       411.716 ±      30.476  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     29448.022 ±       0.016    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       434.203 ±     577.370  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     31054.194 ±   40896.889    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.367 ±       2.850  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        26.763 ±     208.245    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2277.049 ±      52.738   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1426.136 ±      33.460  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    985529.863 ±      14.350    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1465.810 ±     720.320  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5   1012767.252 ±  490048.609    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.025 ±       0.067  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        17.247 ±      46.378    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      8627.787 ±     145.393   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1986.232 ±      34.023  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    362277.448 ±      46.473    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      2016.974 ±      62.878  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    367893.562 ±   14608.513    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.156 ±       0.211  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        28.540 ±      38.839    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        30.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     42294.342 ±    2330.264   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       612.929 ±      33.881  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.855 ±       0.331    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       583.756 ±     554.658  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     21687.177 ±   20164.482    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.583 ±       4.571  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        21.828 ±     171.455    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     66026.722 ±     607.687   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       497.430 ±       4.584  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11856.007 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       514.823 ±     655.781  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     12273.589 ±   15661.434    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.415 ±       3.221  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         9.929 ±      77.060    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     78969.471 ±     130.958   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.205 ±       0.002  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5939.398 ±     106.102   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1774.021 ±      32.551  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    470023.922 ±       0.560    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1798.124 ±     679.311  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    476355.602 ±  176932.830    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.108 ±       0.286  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        28.641 ±      75.304    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        27.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        29.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5337873.934 ±  114079.048   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1600.987 ±      34.070  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1546.842 ±     712.548  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       456.169 ±     214.930    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.079 ±       0.119  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.023 ±       0.035    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        23.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        19.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    347042.106 ±   12165.912   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1871.740 ±      66.011  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8488.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1936.469 ±     573.307  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      8785.349 ±    2794.946    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.104 ±       0.196  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.473 ±       0.896    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        29.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        33.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3407800.259 ±  170358.872   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       502.384 ±      24.850  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       232.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       514.972 ±     656.242  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       237.048 ±     292.771    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.398 ±       3.074  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.182 ±       1.407    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    339155.722 ±   16894.713   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1329.484 ±      66.825  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6168.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1320.657 ±      54.352  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6127.298 ±     159.479    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.105  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.310 ±       0.486    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        21.000                    ms
[info] IntBenchmark.readCirce                                                                   thrpt    5   6083054.936 ±  246289.332   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      3865.698 ±     154.270  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      1000.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      3875.896 ±     725.911  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5      1002.587 ±     177.687    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.121 ±       0.119  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.031 ±       0.031    B/op
[info] IntBenchmark.readCirce:·gc.count                                                         thrpt    5        57.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                          thrpt    5        45.000                    ms
[info] IntBenchmark.readJacksonScala                                                            thrpt    5   7510077.627 ±  375046.874   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      3168.652 ±     157.534  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       664.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      3184.205 ±     734.449  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5       667.734 ±     185.952    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.146 ±       0.170  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.031 ±       0.037    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        47.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        40.000                    ms
[info] IntBenchmark.readJsoniterScala                                                           thrpt    5  47589956.361 ±  751975.660   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                              thrpt    5  16927668.305 ±  605848.295   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                               thrpt    5      1118.672 ±      40.014  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                      thrpt    5      1138.693 ±     697.258  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       105.783 ±      62.150    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.062 ±       0.113  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.006 ±       0.010    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                    thrpt    5        17.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                     thrpt    5        12.000                    ms
[info] IntBenchmark.readPlayJson                                                                thrpt    5   7543996.917 ±  146470.441   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      3643.263 ±      69.235  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      3666.529 ±     574.882  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5       764.919 ±     126.360    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.125 ±       0.196  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.026 ±       0.041    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                      thrpt    5        54.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                       thrpt    5        46.000                    ms
[info] IntBenchmark.writeCirce                                                                  thrpt    5  12301610.940 ±  410324.879   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      2376.121 ±      79.149  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       304.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2365.222 ±      56.028  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5       302.614 ±       6.566    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.100 ±       0.119  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.013 ±       0.015    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                        thrpt    5        35.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                         thrpt    5        27.000                    ms
[info] IntBenchmark.writeJacksonScala                                                           thrpt    5  11990428.156 ±  305085.630   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      2377.232 ±      59.966  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       312.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5      2423.726 ±     502.682  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       318.150 ±      69.864    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.112 ±       0.108  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.015 ±       0.014    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        36.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        30.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                          thrpt    5  44807019.927 ± 1768913.640   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       911.018 ±      35.934  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       931.551 ±     569.909  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        32.708 ±      19.694    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.079 ±       0.132  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.003 ±       0.005    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        14.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        11.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5  58748739.156 ± 1621041.770   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                             thrpt    5  13378330.933 ±  204277.062   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                              thrpt    5      2244.467 ±      33.587  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                         thrpt    5       264.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                     thrpt    5      2237.259 ±     699.488  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                thrpt    5       263.191 ±      84.363    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.096 ±       0.146  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.011 ±       0.017    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                   thrpt    5        33.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                    thrpt    5        23.000                    ms
[info] IntBenchmark.writePlayJson                                                               thrpt    5   2248339.855 ±   81894.560   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1943.207 ±      71.232  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      1360.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1952.757 ±     596.462  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      1366.131 ±     382.974    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.096 ±       0.091  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.067 ±       0.063    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                     thrpt    5        29.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                      thrpt    5        24.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    662152.368 ±   27837.417   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2413.991 ±     100.642  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5736.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2434.287 ±     533.645  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      5787.405 ±    1510.047    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.133 ±       0.176  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.316 ±       0.411    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        36.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        31.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    636839.185 ±   29431.229   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       741.458 ±      34.034  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5       780.237 ±     683.375  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1931.506 ±    1769.603    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.592 ±       4.515  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.463 ±      11.166    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        12.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        14.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3163585.311 ±  106330.362   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1318.997 ±      45.191  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       656.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5      1340.593 ±      29.433  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       666.764 ±      15.971    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.122  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.037 ±       0.062    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        20.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        16.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    235312.032 ±    5936.154   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1637.629 ±      41.835  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1661.459 ±      74.911  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5     11112.416 ±     772.967    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.079 ±       0.143  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.528 ±       0.954    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        26.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    914468.951 ±   37452.627   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2203.595 ±      89.976  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3792.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2227.154 ±     707.252  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      3832.900 ±    1230.035    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.087 ±       0.154  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.151 ±       0.268    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        33.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        26.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1570170.958 ±   62264.626   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1061.595 ±      42.437  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1049.137 ±     579.005  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1052.467 ±     615.956    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.091  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.075 ±       0.093    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        16.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        15.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   7506467.411 ±  518439.509   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       839.547 ±      57.944  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       863.692 ±     702.002  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       181.217 ±     150.043    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.154  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.014 ±       0.033    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        13.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        11.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    477380.009 ±   19160.555   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1671.954 ±      67.153  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5512.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1663.704 ±      71.098  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5485.023 ±     226.300    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.079 ±       0.105  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.260 ±       0.340    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        25.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        26.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    649429.925 ±    8675.544   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2307.698 ±      30.046  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5592.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2297.496 ±     624.445  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5566.647 ±    1472.268    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.104 ±       0.057  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.252 ±       0.135    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        28.000                    ms
[info] MapsBenchmark.readJacksonScala                                                           thrpt    5    642727.853 ±   32002.166   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                            thrpt    5       973.756 ±      48.392  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      2384.001 ±       0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5       979.513 ±      25.590  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2398.477 ±     154.606    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.075 ±       0.122  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.184 ±       0.297    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                 thrpt    5        15.000                counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                  thrpt    5        15.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   5187996.617 ±   98410.966   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1292.326 ±      24.674  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5      1272.767 ±     568.792  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5       386.171 ±     175.986    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±       0.113  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.025 ±       0.035    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        19.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        15.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    349319.095 ±   10885.233   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1823.540 ±      56.900  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8216.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1869.078 ±     702.856  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      8418.801 ±    3036.816    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.092 ±       0.134  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.413 ±       0.604    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        28.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        30.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    487705.450 ±   18845.100   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1333.933 ±      51.870  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4304.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      1333.970 ±      36.175  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4304.477 ±     205.488    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.071 ±       0.122  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.228 ±       0.380    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        20.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        17.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3263706.135 ±  222149.058   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       497.735 ±      33.707  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       240.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5       515.113 ±     656.377  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       248.579 ±     319.677    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.389 ±       3.033  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.185 ±       1.441    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5         8.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5         9.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    334017.825 ±   11102.213   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1231.124 ±      41.505  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5800.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5      1186.397 ±     684.500  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5588.812 ±    3207.619    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.050 ±       0.122  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.235 ±       0.568    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        18.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        18.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   2146268.044 ±   39533.539   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3284.281 ±      63.002  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2408.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      3257.949 ±     691.642  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      2388.728 ±     508.095    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.121 ±       0.105  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.089 ±       0.076    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        48.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        37.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    312536.605 ±   14503.552   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       735.642 ±      34.047  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      3704.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       718.264 ±     559.798  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      3620.329 ±    2924.771    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.482 ±       3.974  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.385 ±      19.631    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    717870.463 ±   22955.815   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       642.207 ±      20.494  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1408.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       665.212 ±       2.310  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1458.519 ±      47.602    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.375 ±       2.693  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.815 ±       5.838    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   3924968.093 ±  182824.519   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      2294.488 ±     106.220  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       920.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5      2300.397 ±     595.889  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5       922.520 ±     246.137    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5         0.067 ±       0.105  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.027 ±       0.042    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        34.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        27.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   7895204.192 ±  738821.231   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       842.830 ±      78.634  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       168.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5       866.587 ±     703.506  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5       172.764 ±     140.353    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5         0.083 ±       0.150  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5         0.016 ±       0.029    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5        13.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5        11.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    178476.782 ±    4676.839   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1533.187 ±      40.006  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     13520.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1523.371 ±     719.089  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     13437.025 ±    6466.927    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.127  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.734 ±       1.105    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        23.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        27.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    751346.631 ±   28161.877   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2895.276 ±     107.181  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6064.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2915.253 ±     710.310  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      6108.741 ±    1675.893    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.117 ±       0.044  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.244 ±       0.099    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        43.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        34.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   2900577.322 ±   84870.804   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1872.650 ±      55.779  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1888.243 ±     709.974  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1024.904 ±     404.602    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.083 ±       0.160  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.045 ±       0.087    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        24.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    260381.452 ±    6702.935   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1862.232 ±      47.902  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11256.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1868.427 ±     734.287  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     11290.022 ±    4266.233    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.079 ±       0.222  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.477 ±       1.340    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        28.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    824707.476 ±   16153.466   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1916.182 ±      38.328  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3656.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1884.508 ±     727.624  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      3595.495 ±    1383.034    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.096 ±       0.156  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.183 ±       0.303    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1536507.346 ±  122440.585   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       882.657 ±      69.887  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       848.562 ±     682.957  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       867.183 ±     655.066    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.071 ±       0.166  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.073 ±       0.173    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        13.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        12.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   6346737.670 ±  286550.034   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       484.017 ±      21.511  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       448.824 ±     762.023  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       111.118 ±     187.157    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.383 ±       3.169  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.094 ±       0.773    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    500335.813 ±    9669.389   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1732.128 ±      34.073  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5448.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1665.992 ±      69.815  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5240.014 ±     206.524    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.176  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.236 ±       0.558    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        25.000                    ms
[info] MutableMapsBenchmark.readJacksonScala                                                    thrpt    5    591644.201 ±   10814.626   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       965.521 ±      18.033  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2568.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       979.462 ±      26.045  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2605.114 ±      75.854    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.072  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.199 ±       0.189    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                          thrpt    5        15.000                counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        15.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3286908.878 ±  247059.754   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1553.836 ±     116.807  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5      1613.575 ±     567.185  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       772.521 ±     263.205    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.058 ±       0.154  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.028 ±       0.073    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        19.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    301274.582 ±    8898.707   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1589.577 ±      47.017  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8304.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1593.955 ±     534.783  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8323.259 ±    2600.305    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.067 ±       0.067  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.348 ±       0.358    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        25.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    479961.095 ±   27420.536   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1298.011 ±      73.391  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4256.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1266.589 ±     556.137  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4152.366 ±    1790.999    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.079 ±       0.143  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.259 ±       0.469    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        19.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        15.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   3004132.739 ±  150529.235   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       565.003 ±      28.285  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.243 ±     698.855  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       277.319 ±     360.218    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.388 ±       2.982  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.201 ±       1.542    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    341443.079 ±    8514.533   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1320.906 ±      33.650  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6088.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1320.527 ±      53.078  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      6086.657 ±     355.934    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.174  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.403 ±       0.800    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    723933.359 ±   30734.411   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2145.505 ±      91.647  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4664.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2156.490 ±     726.868  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4688.926 ±    1623.829    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.087 ±       0.104  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.190 ±       0.229    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        32.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        25.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1475794.221 ±   69509.865   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1117.819 ±      52.570  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1119.633 ±     705.962  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1193.813 ±     746.575    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.132  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.085 ±       0.142    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   5325035.691 ±  581529.124   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       162.421 ±      17.717  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       204.663 ±     440.552  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        60.878 ±     131.259    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.496 ±       4.170  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.153 ±       1.289    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    221737.539 ±    2438.705   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1562.321 ±      16.352  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     11088.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1591.444 ±     549.390  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     11293.079 ±    3819.904    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.083 ±       0.150  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.591 ±       1.059    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        24.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    994096.585 ±   22667.447   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1748.697 ±      38.725  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2768.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1744.880 ±     561.423  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2762.843 ±     941.565    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.108 ±       0.183  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.171 ±       0.290    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        26.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2446487.256 ±  125130.006   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1081.983 ±      55.180  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5      1052.956 ±     565.900  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       676.884 ±     343.529    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.058 ±       0.067  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.037 ±       0.042    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   7090187.396 ±   21852.998   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       576.695 ±       1.888  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       530.966 ±     699.486  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       117.871 ±     155.509    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.393 ±       2.983  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.087 ±       0.662    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6329759.475 ±  371999.067   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       386.108 ±      22.683  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5       367.857 ±     654.294  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5        91.744 ±     167.676    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5         0.379 ±       3.045  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.096 ±       0.770    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    317612.794 ±   14303.354   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1617.727 ±      73.044  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8016.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1594.569 ±     596.935  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      7897.552 ±    2770.053    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.067 ±       0.067  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.330 ±       0.338    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        24.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   3382867.219 ±   58703.174   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3129.600 ±      54.383  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1456.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      3122.284 ±     578.075  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1452.476 ±     254.192    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.129 ±       0.174  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.060 ±       0.080    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        46.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        38.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   3975082.469 ±  169057.947   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2384.393 ±     100.596  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       944.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      2358.353 ±      78.467  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       933.814 ±      60.726    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.087 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.035 ±       0.051    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        35.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   7266258.458 ±  235556.523   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1366.691 ±      43.782  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       296.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1408.577 ±     590.807  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       304.971 ±     122.279    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.083 ±       0.098  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.018 ±       0.021    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                 thrpt    5   4985952.911 ±  102833.901   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      3091.933 ±      64.250  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      3116.218 ±     518.034  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5       983.812 ±     178.739    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.125 ±       0.080  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.039 ±       0.025    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                       thrpt    5        46.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                        thrpt    5        40.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2765562.421 ±   86286.804   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1714.999 ±      53.590  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1678.887 ±      46.821  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5       955.526 ±      50.917    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.083 ±       0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.047 ±       0.064    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        20.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   4854908.395 ±  181976.793   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1283.294 ±      47.596  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       416.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1260.295 ±     595.865  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       408.606 ±     194.912    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.083 ±       0.139  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.027 ±       0.046    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        19.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   9886152.105 ±  525121.958   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       955.035 ±      50.407  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       932.480 ±     578.495  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5       148.183 ±      86.284    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.067 ±       0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.011 ±       0.014    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        14.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   7443264.385 ±   28148.032   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   5028586.997 ±  189055.507   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1610.549 ±      60.269  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1609.254 ±     553.999  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5       503.704 ±     177.909    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.092 ±       0.185  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.029 ±       0.059    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        20.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5   1349881.997 ±   20126.739   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1859.433 ±      27.722  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2168.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1818.063 ±     713.643  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5      2119.887 ±     837.627    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.108 ±       0.105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.126 ±       0.123    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        27.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1068558.434 ±   50880.283   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       640.965 ±      30.385  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5       944.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5       655.405 ±       5.588  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5       965.394 ±      50.412    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.471 ±       3.652  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.684 ±       5.294    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        10.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1810931.015 ±  155008.330   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       340.608 ±      29.221  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       296.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       353.093 ±     364.497  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       308.141 ±     346.833    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.335 ±       2.791  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.286 ±       2.387    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                              thrpt    5   1123708.530 ±   90915.085   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5       696.995 ±      56.673  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5       976.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5       658.163 ±       5.907  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5       921.961 ±      77.209    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.042 ±       0.150  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.058 ±       0.210    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                    thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                     thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1247319.938 ±   74637.212   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       944.797 ±      56.199  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1192.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5       929.654 ±     578.228  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1171.916 ±     704.733    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.054 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.068 ±       0.054    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2287886.238 ±  147229.898   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       918.835 ±      59.495  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       632.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       921.797 ±     569.340  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       634.839 ±     409.341    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.058 ±       0.143  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.040 ±       0.099    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2582731.460 ±   51572.561   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       603.922 ±      12.124  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       597.424 ±     571.868  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5       363.705 ±     344.066    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.411 ±       3.042  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.250 ±       1.857    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2647682.619 ±    2937.973   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2414103.745 ±   69040.535   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1104.380 ±      31.561  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1132.331 ±     709.117  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5       737.897 ±     451.456    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.062 ±       0.113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.041 ±       0.074    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     11902.115 ±     210.556   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1678.715 ±      30.014  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    221975.271 ±     115.364    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      1738.622 ±     527.394  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    229888.254 ±   69042.273    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.137 ±       0.223  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        18.131 ±      29.512    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        26.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15074.012 ±     457.530   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       238.427 ±       7.155  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     24890.285 ±      28.747    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       204.662 ±     440.551  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5     21380.626 ±   46030.311    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.020 ±       0.120  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         2.133 ±      12.621    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     37219.013 ±     631.329   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       407.536 ±       6.764  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     17232.018 ±       0.050    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       419.046 ±     639.220  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     17737.778 ±   27286.772    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.364 ±       2.915  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        15.436 ±     123.479    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        11.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3632.047 ±     224.162   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1156.051 ±      71.155  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    500696.080 ±     137.402    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1128.691 ±     703.564  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5    488826.968 ±  302573.088    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.050 ±       0.209  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        21.531 ±      89.401    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        27.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     51505.121 ±    3248.827   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       674.275 ±      42.553  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20604.006 ±       0.247    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       646.681 ±       7.174  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     19764.613 ±    1135.520    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.622 ±       4.996  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        19.290 ±     155.228    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     80104.670 ±    1769.872   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       517.543 ±      11.464  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10168.006 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       514.804 ±     655.833  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10114.048 ±   12874.271    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.407 ±       3.233  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         8.017 ±      63.773    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     85519.081 ±    1188.061   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5         5.652 ±       0.081  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       104.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk8.json
[success] Total time: 4364 s, completed Mar 29, 2018 4:43:40 AM
