[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Feb 3, 2018 4:47:27 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:983:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:480:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:488:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:915:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.6.3-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.6.3-SNAPSHOT.jar ...
[info] Compiling 36 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:74: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decode(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encode(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val booleanArrayCodec: JsonCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:65: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decode(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encode(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val byteArrayCodec: JsonCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:71: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decode(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encode(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val doubleArrayCodec: JsonCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:74: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encode(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val instantArrayCodec: JsonCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:80: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localDateArrayCodec: JsonCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:80: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localTimeArrayCodec: JsonCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:71: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val zoneIdArrayCodec: JsonCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:68: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decode(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encode(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val shortArrayCodec: JsonCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:65: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decode(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encode(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val longArrayCodec: JsonCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:65: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decode(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encode(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val uuidArrayCodec: JsonCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.3-SNAPSHOT.jar ...
[info] Compiling 30 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 307 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 333 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:28:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424265.572 ops/s
[info] # Warmup Iteration   2: 770674.404 ops/s
[info] # Warmup Iteration   3: 780768.582 ops/s
[info] Iteration   1: 768767.139 ops/s
[info]                  ·gc.alloc.rate:                   2024.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4093.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 796586.120 ops/s
[info]                  ·gc.alloc.rate:                   2097.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3976.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 792955.241 ops/s
[info]                  ·gc.alloc.rate:                   2087.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4015.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 797434.350 ops/s
[info]                  ·gc.alloc.rate:                   2099.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4676.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 788633.257 ops/s
[info]                  ·gc.alloc.rate:                   2077.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4064.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   788875.222 ±(99.9%) 45306.746 ops/s [Average]
[info]   (min, avg, max) = (768767.139, 788875.222, 797434.350), stdev = 11766.018
[info]   CI (99.9%): [743568.476, 834181.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2077.298 ±(99.9%) 119.384 MB/sec [Average]
[info]   (min, avg, max) = (2024.126, 2077.298, 2099.720), stdev = 31.004
[info]   CI (99.9%): [1957.914, 2196.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2088.413 ±(99.9%) 607.631 MB/sec [Average]
[info]   (min, avg, max) = (1999.493, 2088.413, 2369.592), stdev = 157.800
[info]   CI (99.9%): [1480.782, 2696.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4165.222 ±(99.9%) 1114.374 B/op [Average]
[info]   (min, avg, max) = (3976.176, 4165.222, 4676.617), stdev = 289.399
[info]   CI (99.9%): [3050.848, 5279.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.199 ±(99.9%) 0.256 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.199, 0.288), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.46% complete, ETA 00:45:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468888.678 ops/s
[info] # Warmup Iteration   2: 1602223.001 ops/s
[info] # Warmup Iteration   3: 1657024.829 ops/s
[info] Iteration   1: 1637452.696 ops/s
[info]                  ·gc.alloc.rate:                   1165.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1638879.394 ops/s
[info]                  ·gc.alloc.rate:                   1166.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1654821.154 ops/s
[info]                  ·gc.alloc.rate:                   1177.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1251.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1661915.915 ops/s
[info]                  ·gc.alloc.rate:                   1182.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1641403.702 ops/s
[info]                  ·gc.alloc.rate:                   1168.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1276.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1646894.572 ±(99.9%) 41829.285 ops/s [Average]
[info]   (min, avg, max) = (1637452.696, 1646894.572, 1661915.915), stdev = 10862.932
[info]   CI (99.9%): [1605065.287, 1688723.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1171.979 ±(99.9%) 29.696 MB/sec [Average]
[info]   (min, avg, max) = (1165.303, 1171.979, 1182.645), stdev = 7.712
[info]   CI (99.9%): [1142.283, 1201.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1185.161 ±(99.9%) 696.401 MB/sec [Average]
[info]   (min, avg, max) = (981.266, 1185.161, 1331.628), stdev = 180.853
[info]   CI (99.9%): [488.760, 1881.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1132.881 ±(99.9%) 673.424 B/op [Average]
[info]   (min, avg, max) = (940.932, 1132.881, 1276.865), stdev = 174.886
[info]   CI (99.9%): [459.457, 1806.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.080, 0.100), stdev = 0.020
[info]   CI (99.9%): [0.003, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.92% complete, ETA 00:45:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3200177.604 ops/s
[info] # Warmup Iteration   2: 3606463.583 ops/s
[info] # Warmup Iteration   3: 3631442.219 ops/s
[info] Iteration   1: 3636485.662 ops/s
[info]                  ·gc.alloc.rate:                   240.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3661664.885 ops/s
[info]                  ·gc.alloc.rate:               241.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 109.945 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3700113.316 ops/s
[info]                  ·gc.alloc.rate:                   244.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3701791.225 ops/s
[info]                  ·gc.alloc.rate:                   244.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3702850.306 ops/s
[info]                  ·gc.alloc.rate:                   244.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3680581.079 ±(99.9%) 115992.063 ops/s [Average]
[info]   (min, avg, max) = (3636485.662, 3680581.079, 3702850.306), stdev = 30122.771
[info]   CI (99.9%): [3564589.015, 3796573.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   243.218 ±(99.9%) 7.615 MB/sec [Average]
[info]   (min, avg, max) = (240.329, 243.218, 244.686), stdev = 1.978
[info]   CI (99.9%): [235.602, 250.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   271.799 ±(99.9%) 137.663 MB/sec [Average]
[info]   (min, avg, max) = (255.796, 271.799, 335.752), stdev = 35.751
[info]   CI (99.9%): [134.136, 409.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   116.186 ±(99.9%) 57.173 B/op [Average]
[info]   (min, avg, max) = (108.760, 116.186, 142.706), stdev = 14.848
[info]   CI (99.9%): [59.014, 173.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.304 ±(99.9%) 2.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.304, 1.474), stdev = 0.654
[info]   CI (99.9%): [≈ 0, 2.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.129 ±(99.9%) 1.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.627), stdev = 0.278
[info]   CI (99.9%): [≈ 0, 1.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.38% complete, ETA 00:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27714.670 ops/s
[info] # Warmup Iteration   2: 163579.539 ops/s
[info] # Warmup Iteration   3: 165741.278 ops/s
[info] Iteration   1: 167960.807 ops/s
[info]                  ·gc.alloc.rate:                   1344.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              12600.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12209.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.780 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 167635.177 ops/s
[info]                  ·gc.alloc.rate:                   1342.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              12600.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12314.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 165269.718 ops/s
[info]                  ·gc.alloc.rate:                   1323.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              12600.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12573.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 167791.057 ops/s
[info]                  ·gc.alloc.rate:                   1343.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              12600.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12472.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.172 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 166077.970 ops/s
[info]                  ·gc.alloc.rate:                   1329.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              12600.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12676.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.789 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   166946.946 ±(99.9%) 4629.713 ops/s [Average]
[info]   (min, avg, max) = (165269.718, 166946.946, 167960.807), stdev = 1202.322
[info]   CI (99.9%): [162317.233, 171576.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1336.659 ±(99.9%) 36.980 MB/sec [Average]
[info]   (min, avg, max) = (1323.337, 1336.659, 1344.688), stdev = 9.604
[info]   CI (99.9%): [1299.678, 1373.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12600.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12600.003, 12600.003, 12600.003), stdev = 0.001
[info]   CI (99.9%): [12600.002, 12600.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.570 ±(99.9%) 53.334 MB/sec [Average]
[info]   (min, avg, max) = (1303.014, 1320.570, 1337.651), stdev = 13.851
[info]   CI (99.9%): [1267.237, 1373.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12449.208 ±(99.9%) 728.126 B/op [Average]
[info]   (min, avg, max) = (12209.511, 12449.208, 12676.191), stdev = 189.092
[info]   CI (99.9%): [11721.082, 13177.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.745 ±(99.9%) 1.109 B/op [Average]
[info]   (min, avg, max) = (0.396, 0.745, 1.172), stdev = 0.288
[info]   CI (99.9%): [≈ 0, 1.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.84% complete, ETA 00:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 641244.876 ops/s
[info] # Warmup Iteration   2: 2110276.284 ops/s
[info] # Warmup Iteration   3: 2146801.040 ops/s
[info] Iteration   1: 2136831.992 ops/s
[info]                  ·gc.alloc.rate:                   695.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2115651.164 ops/s
[info]                  ·gc.alloc.rate:                   688.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2087394.180 ops/s
[info]                  ·gc.alloc.rate:                   679.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     491.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2131846.077 ops/s
[info]                  ·gc.alloc.rate:                   693.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2077816.193 ops/s
[info]                  ·gc.alloc.rate:                   675.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2109907.921 ±(99.9%) 101439.451 ops/s [Average]
[info]   (min, avg, max) = (2077816.193, 2109907.921, 2136831.992), stdev = 26343.503
[info]   CI (99.9%): [2008468.470, 2211347.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   686.385 ±(99.9%) 32.996 MB/sec [Average]
[info]   (min, avg, max) = (675.936, 686.385, 695.127), stdev = 8.569
[info]   CI (99.9%): [653.389, 719.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   652.437 ±(99.9%) 6.452 MB/sec [Average]
[info]   (min, avg, max) = (650.806, 652.437, 654.830), stdev = 1.675
[info]   CI (99.9%): [645.985, 658.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   486.744 ±(99.9%) 26.067 B/op [Average]
[info]   (min, avg, max) = (479.356, 486.744, 496.013), stdev = 6.770
[info]   CI (99.9%): [460.676, 512.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.519 ±(99.9%) 3.929 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.519, 2.344), stdev = 1.020
[info]   CI (99.9%): [≈ 0, 4.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.383 ±(99.9%) 2.893 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.383, 1.726), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 2.30% complete, ETA 00:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9612005.712 ops/s
[info] # Warmup Iteration   2: 15710740.480 ops/s
[info] # Warmup Iteration   3: 16435090.050 ops/s
[info] Iteration   1: 16540473.800 ops/s
[info]                  ·gc.alloc.rate:                   840.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16331302.283 ops/s
[info]                  ·gc.alloc.rate:                   830.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 15542440.327 ops/s
[info]                  ·gc.alloc.rate:                   790.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15394293.302 ops/s
[info]                  ·gc.alloc.rate:               782.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68.071 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 15493008.749 ops/s
[info]                  ·gc.alloc.rate:                   787.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   15860303.692 ±(99.9%) 2053497.742 ops/s [Average]
[info]   (min, avg, max) = (15394293.302, 15860303.692, 16540473.800), stdev = 533286.842
[info]   CI (99.9%): [13806805.950, 17913801.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   806.325 ±(99.9%) 103.791 MB/sec [Average]
[info]   (min, avg, max) = (782.806, 806.325, 840.735), stdev = 26.954
[info]   CI (99.9%): [702.533, 910.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   865.154 ±(99.9%) 704.369 MB/sec [Average]
[info]   (min, avg, max) = (663.484, 865.154, 1000.978), stdev = 182.922
[info]   CI (99.9%): [160.785, 1569.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   85.918 ±(99.9%) 70.941 B/op [Average]
[info]   (min, avg, max) = (63.942, 85.918, 101.642), stdev = 18.423
[info]   CI (99.9%): [14.977, 156.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.014), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.76% complete, ETA 00:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75394.652 ops/s
[info] # Warmup Iteration   2: 320653.538 ops/s
[info] # Warmup Iteration   3: 319172.669 ops/s
[info] Iteration   1: 323258.041 ops/s
[info]                  ·gc.alloc.rate:                   1000.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4751.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 321353.294 ops/s
[info]                  ·gc.alloc.rate:                   995.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4792.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 318706.565 ops/s
[info]                  ·gc.alloc.rate:                   986.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4857.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 323787.800 ops/s
[info]                  ·gc.alloc.rate:                   1002.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4800.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 321670.187 ops/s
[info]                  ·gc.alloc.rate:                   995.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4861.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   321755.177 ±(99.9%) 7665.810 ops/s [Average]
[info]   (min, avg, max) = (318706.565, 321755.177, 323787.800), stdev = 1990.787
[info]   CI (99.9%): [314089.367, 329420.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   996.111 ±(99.9%) 23.621 MB/sec [Average]
[info]   (min, avg, max) = (986.625, 996.111, 1002.332), stdev = 6.134
[info]   CI (99.9%): [972.490, 1019.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   983.942 ±(99.9%) 26.894 MB/sec [Average]
[info]   (min, avg, max) = (975.913, 983.942, 993.561), stdev = 6.984
[info]   CI (99.9%): [957.048, 1010.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4812.635 ±(99.9%) 178.922 B/op [Average]
[info]   (min, avg, max) = (4751.439, 4812.635, 4861.324), stdev = 46.465
[info]   CI (99.9%): [4633.713, 4991.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.366 ±(99.9%) 0.593 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.366, 0.510), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 3.23% complete, ETA 00:44:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 934881.003 ops/s
[info] # Warmup Iteration   2: 1619723.832 ops/s
[info] # Warmup Iteration   3: 1599335.358 ops/s
[info] Iteration   1: 1613198.828 ops/s
[info]                  ·gc.alloc.rate:                   2518.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2347.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2289.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1607948.627 ops/s
[info]                  ·gc.alloc.rate:                   2509.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2642.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1642360.467 ops/s
[info]                  ·gc.alloc.rate:                   2562.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2272.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1647545.291 ops/s
[info]                  ·gc.alloc.rate:                   2570.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2595.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1637473.387 ops/s
[info]                  ·gc.alloc.rate:                   2555.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2288.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1629705.320 ±(99.9%) 69005.487 ops/s [Average]
[info]   (min, avg, max) = (1607948.627, 1629705.320, 1647545.291), stdev = 17920.506
[info]   CI (99.9%): [1560699.833, 1698710.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2543.399 ±(99.9%) 106.387 MB/sec [Average]
[info]   (min, avg, max) = (2509.726, 2543.399, 2570.954), stdev = 27.628
[info]   CI (99.9%): [2437.012, 2649.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2503.286 ±(99.9%) 723.220 MB/sec [Average]
[info]   (min, avg, max) = (2347.175, 2503.286, 2717.143), stdev = 187.818
[info]   CI (99.9%): [1780.065, 3226.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2417.562 ±(99.9%) 710.782 B/op [Average]
[info]   (min, avg, max) = (2272.563, 2417.562, 2642.023), stdev = 184.588
[info]   CI (99.9%): [1706.780, 3128.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.112, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.068, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.109 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.109, 0.122), stdev = 0.012
[info]   CI (99.9%): [0.062, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 3.69% complete, ETA 00:43:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 919195.929 ops/s
[info] # Warmup Iteration   2: 2547685.350 ops/s
[info] # Warmup Iteration   3: 2563567.245 ops/s
[info] Iteration   1: 2572665.339 ops/s
[info]                  ·gc.alloc.rate:                   1804.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1206.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2603420.775 ops/s
[info]                  ·gc.alloc.rate:                   1826.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2600410.259 ops/s
[info]                  ·gc.alloc.rate:                   1824.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1011.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2610386.562 ops/s
[info]                  ·gc.alloc.rate:                   1831.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1216.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2614114.686 ops/s
[info]                  ·gc.alloc.rate:                   1834.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1016.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2600199.524 ±(99.9%) 62859.911 ops/s [Average]
[info]   (min, avg, max) = (2572665.339, 2600199.524, 2614114.686), stdev = 16324.519
[info]   CI (99.9%): [2537339.613, 2663059.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1824.136 ±(99.9%) 44.680 MB/sec [Average]
[info]   (min, avg, max) = (1804.517, 1824.136, 1834.086), stdev = 11.603
[info]   CI (99.9%): [1779.456, 1868.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1802.123 ±(99.9%) 683.561 MB/sec [Average]
[info]   (min, avg, max) = (1659.587, 1802.123, 2018.524), stdev = 177.519
[info]   CI (99.9%): [1118.562, 2485.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1090.935 ±(99.9%) 425.513 B/op [Average]
[info]   (min, avg, max) = (1003.179, 1090.935, 1216.956), stdev = 110.504
[info]   CI (99.9%): [665.422, 1516.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.063, 0.088), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 4.15% complete, ETA 00:43:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9424111.120 ops/s
[info] # Warmup Iteration   2: 10327117.305 ops/s
[info] # Warmup Iteration   3: 10687006.475 ops/s
[info] Iteration   1: 10720337.467 ops/s
[info]                  ·gc.alloc.rate:                   1362.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10696911.503 ops/s
[info]                  ·gc.alloc.rate:                   1359.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10709004.422 ops/s
[info]                  ·gc.alloc.rate:                   1360.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10554724.521 ops/s
[info]                  ·gc.alloc.rate:                   1341.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10512348.487 ops/s
[info]                  ·gc.alloc.rate:                   1335.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10638665.280 ±(99.9%) 375376.301 ops/s [Average]
[info]   (min, avg, max) = (10512348.487, 10638665.280, 10720337.467), stdev = 97484.033
[info]   CI (99.9%): [10263288.979, 11014041.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1351.964 ±(99.9%) 47.685 MB/sec [Average]
[info]   (min, avg, max) = (1335.912, 1351.964, 1362.271), stdev = 12.384
[info]   CI (99.9%): [1304.279, 1399.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1346.096 ±(99.9%) 21.346 MB/sec [Average]
[info]   (min, avg, max) = (1338.970, 1346.096, 1353.021), stdev = 5.543
[info]   CI (99.9%): [1324.751, 1367.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   199.151 ±(99.9%) 10.016 B/op [Average]
[info]   (min, avg, max) = (196.579, 199.151, 202.562), stdev = 2.601
[info]   CI (99.9%): [189.135, 209.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.010, 0.018), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 4.61% complete, ETA 00:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153761.345 ops/s
[info] # Warmup Iteration   2: 612332.833 ops/s
[info] # Warmup Iteration   3: 622673.400 ops/s
[info] Iteration   1: 624547.976 ops/s
[info]                  ·gc.alloc.rate:                   1651.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4123.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 613158.782 ops/s
[info]                  ·gc.alloc.rate:                   1621.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4232.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 616958.353 ops/s
[info]                  ·gc.alloc.rate:                   1630.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4244.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 619947.536 ops/s
[info]                  ·gc.alloc.rate:                   1638.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4250.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 623260.354 ops/s
[info]                  ·gc.alloc.rate:                   1647.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4253.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   619574.600 ±(99.9%) 17902.990 ops/s [Average]
[info]   (min, avg, max) = (613158.782, 619574.600, 624547.976), stdev = 4649.350
[info]   CI (99.9%): [601671.611, 637477.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1637.901 ±(99.9%) 46.960 MB/sec [Average]
[info]   (min, avg, max) = (1621.381, 1637.901, 1651.125), stdev = 12.195
[info]   CI (99.9%): [1590.941, 1684.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1661.734 ±(99.9%) 73.998 MB/sec [Average]
[info]   (min, avg, max) = (1636.469, 1661.734, 1684.636), stdev = 19.217
[info]   CI (99.9%): [1587.736, 1735.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4220.691 ±(99.9%) 212.507 B/op [Average]
[info]   (min, avg, max) = (4123.077, 4220.691, 4253.362), stdev = 55.187
[info]   CI (99.9%): [4008.184, 4433.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.222 ±(99.9%) 0.489 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.222, 0.374), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 5.07% complete, ETA 00:43:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1139637.450 ops/s
[info] # Warmup Iteration   2: 1966834.538 ops/s
[info] # Warmup Iteration   3: 2024591.252 ops/s
[info] Iteration   1: 2066425.680 ops/s
[info]                  ·gc.alloc.rate:                   2058.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1524.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2068244.206 ops/s
[info]                  ·gc.alloc.rate:                   2060.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1532.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2068310.484 ops/s
[info]                  ·gc.alloc.rate:                   2061.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1540.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2047901.192 ops/s
[info]                  ·gc.alloc.rate:                   2040.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1561.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2057619.787 ops/s
[info]                  ·gc.alloc.rate:                   2049.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2061700.270 ±(99.9%) 34220.528 ops/s [Average]
[info]   (min, avg, max) = (2047901.192, 2061700.270, 2068310.484), stdev = 8886.963
[info]   CI (99.9%): [2027479.741, 2095920.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2054.158 ±(99.9%) 34.569 MB/sec [Average]
[info]   (min, avg, max) = (2040.302, 2054.158, 2061.415), stdev = 8.977
[info]   CI (99.9%): [2019.589, 2088.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1568.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1568.000, 1568.000, 1568.000), stdev = 0.001
[info]   CI (99.9%): [1568.000, 1568.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2021.763 ±(99.9%) 54.316 MB/sec [Average]
[info]   (min, avg, max) = (2001.270, 2021.763, 2036.460), stdev = 14.106
[info]   CI (99.9%): [1967.448, 2076.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1543.319 ±(99.9%) 60.959 B/op [Average]
[info]   (min, avg, max) = (1524.344, 1543.319, 1561.208), stdev = 15.831
[info]   CI (99.9%): [1482.360, 1604.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.073, 0.096), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 5.53% complete, ETA 00:43:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2089891.996 ops/s
[info] # Warmup Iteration   2: 5949292.845 ops/s
[info] # Warmup Iteration   3: 5975309.419 ops/s
[info] Iteration   1: 6021851.428 ops/s
[info]                  ·gc.alloc.rate:                   1652.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     427.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6026055.388 ops/s
[info]                  ·gc.alloc.rate:                   1654.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     431.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6008892.130 ops/s
[info]                  ·gc.alloc.rate:                   1650.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6028405.673 ops/s
[info]                  ·gc.alloc.rate:                   1654.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6007328.961 ops/s
[info]                  ·gc.alloc.rate:                   1648.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6018506.716 ±(99.9%) 37705.913 ops/s [Average]
[info]   (min, avg, max) = (6007328.961, 6018506.716, 6028405.673), stdev = 9792.106
[info]   CI (99.9%): [5980800.803, 6056212.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1652.152 ±(99.9%) 9.912 MB/sec [Average]
[info]   (min, avg, max) = (1648.922, 1652.152, 1654.787), stdev = 2.574
[info]   CI (99.9%): [1642.240, 1662.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1662.721 ±(99.9%) 75.089 MB/sec [Average]
[info]   (min, avg, max) = (1635.376, 1662.721, 1684.332), stdev = 19.500
[info]   CI (99.9%): [1587.632, 1737.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   434.767 ±(99.9%) 20.825 B/op [Average]
[info]   (min, avg, max) = (427.423, 434.767, 441.277), stdev = 5.408
[info]   CI (99.9%): [413.942, 455.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.025, 0.033), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 5.99% complete, ETA 00:42:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15921630.608 ops/s
[info] # Warmup Iteration   2: 21158100.392 ops/s
[info] # Warmup Iteration   3: 20914585.705 ops/s
[info] Iteration   1: 20558812.088 ops/s
[info]                  ·gc.alloc.rate:                   626.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20743547.104 ops/s
[info]                  ·gc.alloc.rate:                   632.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20974635.198 ops/s
[info]                  ·gc.alloc.rate:                   639.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20833862.802 ops/s
[info]                  ·gc.alloc.rate:                   635.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20969115.464 ops/s
[info]                  ·gc.alloc.rate:                   639.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   20815994.531 ±(99.9%) 667849.746 ops/s [Average]
[info]   (min, avg, max) = (20558812.088, 20815994.531, 20974635.198), stdev = 173438.458
[info]   CI (99.9%): [20148144.785, 21483844.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   634.897 ±(99.9%) 20.296 MB/sec [Average]
[info]   (min, avg, max) = (626.994, 634.897, 639.693), stdev = 5.271
[info]   CI (99.9%): [614.601, 655.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   664.468 ±(99.9%) 3.190 MB/sec [Average]
[info]   (min, avg, max) = (663.493, 664.468, 665.482), stdev = 0.828
[info]   CI (99.9%): [661.279, 667.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   50.238 ±(99.9%) 1.646 B/op [Average]
[info]   (min, avg, max) = (49.786, 50.238, 50.895), stdev = 0.427
[info]   CI (99.9%): [48.593, 51.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.392 ±(99.9%) 2.881 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.392, 1.730), stdev = 0.748
[info]   CI (99.9%): [≈ 0, 3.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.030, 0.132), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 6.45% complete, ETA 00:42:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20459482.005 ops/s
[info] # Warmup Iteration   2: 26581112.826 ops/s
[info] # Warmup Iteration   3: 27141526.144 ops/s
[info] Iteration   1: 27366101.493 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 27391410.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 27412405.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 27403362.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 27384582.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   27391572.488 ±(99.9%) 68631.252 ops/s [Average]
[info]   (min, avg, max) = (27366101.493, 27391572.488, 27412405.411), stdev = 17823.318
[info]   CI (99.9%): [27322941.235, 27460203.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 6.91% complete, ETA 00:42:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 397321.607 ops/s
[info] # Warmup Iteration   2: 1272348.019 ops/s
[info] # Warmup Iteration   3: 1298822.618 ops/s
[info] Iteration   1: 1289337.401 ops/s
[info]                  ·gc.alloc.rate:                   1907.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2407.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1309604.697 ops/s
[info]                  ·gc.alloc.rate:                   1937.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2393.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1301932.006 ops/s
[info]                  ·gc.alloc.rate:                   1926.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2428.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1300475.667 ops/s
[info]                  ·gc.alloc.rate:                   1923.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2446.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1303275.005 ops/s
[info]                  ·gc.alloc.rate:                   1928.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2042.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1300924.955 ±(99.9%) 28319.128 ops/s [Average]
[info]   (min, avg, max) = (1289337.401, 1300924.955, 1309604.697), stdev = 7354.388
[info]   CI (99.9%): [1272605.827, 1329244.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1924.699 ±(99.9%) 42.578 MB/sec [Average]
[info]   (min, avg, max) = (1907.278, 1924.699, 1937.661), stdev = 11.057
[info]   CI (99.9%): [1882.120, 1967.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1937.687 ±(99.9%) 534.958 MB/sec [Average]
[info]   (min, avg, max) = (1691.404, 1937.687, 2021.839), stdev = 138.927
[info]   CI (99.9%): [1402.730, 2472.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2343.863 ±(99.9%) 654.209 B/op [Average]
[info]   (min, avg, max) = (2042.103, 2343.863, 2446.866), stdev = 169.896
[info]   CI (99.9%): [1689.654, 2998.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.112, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.069, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.136 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.126, 0.136, 0.152), stdev = 0.014
[info]   CI (99.9%): [0.082, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.37% complete, ETA 00:42:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5804.698 ops/s
[info] # Warmup Iteration   2: 7284.633 ops/s
[info] # Warmup Iteration   3: 7365.022 ops/s
[info] Iteration   1: 7290.278 ops/s
[info]                  ·gc.alloc.rate:                   1226.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286517.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.481 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7375.956 ops/s
[info]                  ·gc.alloc.rate:                   1241.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284243.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.765 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7341.077 ops/s
[info]                  ·gc.alloc.rate:                   1235.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286741.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.925 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7299.881 ops/s
[info]                  ·gc.alloc.rate:                   1228.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217011.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7340.744 ops/s
[info]                  ·gc.alloc.rate:                   1235.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288636.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   7329.587 ±(99.9%) 133.866 ops/s [Average]
[info]   (min, avg, max) = (7290.278, 7329.587, 7375.956), stdev = 34.764
[info]   CI (99.9%): [7195.721, 7463.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1233.377 ±(99.9%) 22.428 MB/sec [Average]
[info]   (min, avg, max) = (1226.597, 1233.377, 1241.208), stdev = 5.825
[info]   CI (99.9%): [1210.948, 1255.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   264808.060 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (264808.059, 264808.060, 264808.063), stdev = 0.002
[info]   CI (99.9%): [264808.052, 264808.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1270.044 ±(99.9%) 567.037 MB/sec [Average]
[info]   (min, avg, max) = (1006.927, 1270.044, 1346.344), stdev = 147.258
[info]   CI (99.9%): [703.007, 1837.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   272630.197 ±(99.9%) 119874.432 B/op [Average]
[info]   (min, avg, max) = (217011.140, 272630.197, 288636.897), stdev = 31131.009
[info]   CI (99.9%): [152755.765, 392504.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.200 ±(99.9%) 19.693 B/op [Average]
[info]   (min, avg, max) = (8.925, 15.200, 22.441), stdev = 5.114
[info]   CI (99.9%): [≈ 0, 34.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 7.83% complete, ETA 00:42:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17046.757 ops/s
[info] # Warmup Iteration   2: 25035.160 ops/s
[info] # Warmup Iteration   3: 25340.003 ops/s
[info] Iteration   1: 25436.245 ops/s
[info]                  ·gc.alloc.rate:                   1093.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              67664.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60754.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25229.098 ops/s
[info]                  ·gc.alloc.rate:                   1085.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              67653.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81890.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.593 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25357.289 ops/s
[info]                  ·gc.alloc.rate:                   1089.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61502.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.292 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 25328.614 ops/s
[info]                  ·gc.alloc.rate:                   1088.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61901.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.761 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25385.145 ops/s
[info]                  ·gc.alloc.rate:                   1090.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62012.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   25347.278 ±(99.9%) 296.799 ops/s [Average]
[info]   (min, avg, max) = (25229.098, 25347.278, 25436.245), stdev = 77.078
[info]   CI (99.9%): [25050.479, 25644.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1089.558 ±(99.9%) 11.820 MB/sec [Average]
[info]   (min, avg, max) = (1085.229, 1089.558, 1093.561), stdev = 3.070
[info]   CI (99.9%): [1077.739, 1101.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   67642.651 ±(99.9%) 57.973 B/op [Average]
[info]   (min, avg, max) = (67632.017, 67642.651, 67664.017), stdev = 15.056
[info]   CI (99.9%): [67584.677, 67700.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1056.574 ±(99.9%) 553.910 MB/sec [Average]
[info]   (min, avg, max) = (981.896, 1056.574, 1313.605), stdev = 143.849
[info]   CI (99.9%): [502.664, 1610.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   65612.193 ±(99.9%) 35090.954 B/op [Average]
[info]   (min, avg, max) = (60754.757, 65612.193, 81890.176), stdev = 9113.009
[info]   CI (99.9%): [30521.239, 100703.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.618 ±(99.9%) 10.788 B/op [Average]
[info]   (min, avg, max) = (1.291, 3.618, 7.761), stdev = 2.802
[info]   CI (99.9%): [≈ 0, 14.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.29% complete, ETA 00:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28007.549 ops/s
[info] # Warmup Iteration   2: 29532.171 ops/s
[info] # Warmup Iteration   3: 30266.833 ops/s
[info] Iteration   1: 30394.191 ops/s
[info]                  ·gc.alloc.rate:                   551.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17280.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 29957.503 ops/s
[info]                  ·gc.alloc.rate:                   543.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35031.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29627.867 ops/s
[info]                  ·gc.alloc.rate:                   538.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35385.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30369.681 ops/s
[info]                  ·gc.alloc.rate:               551.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17261.079 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 30210.513 ops/s
[info]                  ·gc.alloc.rate:               548.608 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34703.823 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   30111.951 ±(99.9%) 1238.792 ops/s [Average]
[info]   (min, avg, max) = (29627.867, 30111.951, 30394.191), stdev = 321.710
[info]   CI (99.9%): [28873.159, 31350.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   546.682 ±(99.9%) 22.244 MB/sec [Average]
[info]   (min, avg, max) = (538.031, 546.682, 551.720), stdev = 5.777
[info]   CI (99.9%): [524.438, 568.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.016 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.016, 28568.021), stdev = 0.003
[info]   CI (99.9%): [28568.005, 28568.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.299 ±(99.9%) 702.636 MB/sec [Average]
[info]   (min, avg, max) = (333.086, 533.299, 666.813), stdev = 182.472
[info]   CI (99.9%): [≈ 0, 1235.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27932.597 ±(99.9%) 37488.714 B/op [Average]
[info]   (min, avg, max) = (17261.079, 27932.597, 35385.415), stdev = 9735.700
[info]   CI (99.9%): [≈ 0, 65421.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.335 ±(99.9%) 2.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 1.530), stdev = 0.669
[info]   CI (99.9%): [≈ 0, 2.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.389 ±(99.9%) 133.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.389, 79.227), stdev = 34.643
[info]   CI (99.9%): [≈ 0, 150.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 8.76% complete, ETA 00:41:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7526.916 ops/s
[info] # Warmup Iteration   2: 12977.367 ops/s
[info] # Warmup Iteration   3: 13286.120 ops/s
[info] Iteration   1: 13201.421 ops/s
[info]                  ·gc.alloc.rate:                   1398.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156126.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.963 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13360.703 ops/s
[info]                  ·gc.alloc.rate:                   1415.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194249.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13363.237 ops/s
[info]                  ·gc.alloc.rate:                   1415.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              166759.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156509.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.355 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13206.719 ops/s
[info]                  ·gc.alloc.rate:                   1399.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159282.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.961 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13349.014 ops/s
[info]                  ·gc.alloc.rate:                   1414.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158334.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.909 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   13296.219 ±(99.9%) 324.653 ops/s [Average]
[info]   (min, avg, max) = (13201.421, 13296.219, 13363.237), stdev = 84.311
[info]   CI (99.9%): [12971.565, 13620.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1408.903 ±(99.9%) 34.634 MB/sec [Average]
[info]   (min, avg, max) = (1398.740, 1408.903, 1415.972), stdev = 8.994
[info]   CI (99.9%): [1374.268, 1443.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   166760.059 ±(99.9%) 0.433 B/op [Average]
[info]   (min, avg, max) = (166759.889, 166760.059, 166760.161), stdev = 0.112
[info]   CI (99.9%): [166759.626, 166760.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1393.483 ±(99.9%) 552.105 MB/sec [Average]
[info]   (min, avg, max) = (1309.551, 1393.483, 1648.969), stdev = 143.380
[info]   CI (99.9%): [841.379, 1945.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   164900.705 ±(99.9%) 63371.503 B/op [Average]
[info]   (min, avg, max) = (156126.963, 164900.705, 194249.037), stdev = 16457.378
[info]   CI (99.9%): [101529.202, 228272.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.890 ±(99.9%) 12.240 B/op [Average]
[info]   (min, avg, max) = (4.909, 6.890, 12.261), stdev = 3.179
[info]   CI (99.9%): [≈ 0, 19.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.22% complete, ETA 00:41:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12663.935 ops/s
[info] # Warmup Iteration   2: 14555.541 ops/s
[info] # Warmup Iteration   3: 14794.525 ops/s
[info] Iteration   1: 14532.984 ops/s
[info]                  ·gc.alloc.rate:                   1408.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180124.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.271 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14775.188 ops/s
[info]                  ·gc.alloc.rate:                   1431.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142336.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14675.561 ops/s
[info]                  ·gc.alloc.rate:                   1421.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143877.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.930 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14736.640 ops/s
[info]                  ·gc.alloc.rate:                   1427.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143851.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.446 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14703.277 ops/s
[info]                  ·gc.alloc.rate:                   1424.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180752.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.913 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   14684.730 ±(99.9%) 356.742 ops/s [Average]
[info]   (min, avg, max) = (14532.984, 14684.730, 14775.188), stdev = 92.645
[info]   CI (99.9%): [14327.988, 15041.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1422.567 ±(99.9%) 34.288 MB/sec [Average]
[info]   (min, avg, max) = (1408.002, 1422.567, 1431.312), stdev = 8.905
[info]   CI (99.9%): [1388.279, 1456.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152456.032 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (152456.029, 152456.032, 152456.040), stdev = 0.005
[info]   CI (99.9%): [152456.014, 152456.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1475.428 ±(99.9%) 706.353 MB/sec [Average]
[info]   (min, avg, max) = (1336.303, 1475.428, 1688.656), stdev = 183.438
[info]   CI (99.9%): [769.074, 2181.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   158188.292 ±(99.9%) 78253.983 B/op [Average]
[info]   (min, avg, max) = (142336.139, 158188.292, 180752.085), stdev = 20322.311
[info]   CI (99.9%): [79934.309, 236442.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.929 ±(99.9%) 10.587 B/op [Average]
[info]   (min, avg, max) = (4.446, 8.929, 11.271), stdev = 2.749
[info]   CI (99.9%): [≈ 0, 19.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.68% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12916.412 ops/s
[info] # Warmup Iteration   2: 14706.013 ops/s
[info] # Warmup Iteration   3: 15041.600 ops/s
[info] Iteration   1: 15018.693 ops/s
[info]                  ·gc.alloc.rate:                   1405.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139465.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14849.453 ops/s
[info]                  ·gc.alloc.rate:                   1389.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141485.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.238 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15032.831 ops/s
[info]                  ·gc.alloc.rate:                   1406.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175471.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.538 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15029.314 ops/s
[info]                  ·gc.alloc.rate:                   1406.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141047.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15057.044 ops/s
[info]                  ·gc.alloc.rate:                   1408.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141142.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.704 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   14997.467 ±(99.9%) 323.162 ops/s [Average]
[info]   (min, avg, max) = (14849.453, 14997.467, 15057.044), stdev = 83.924
[info]   CI (99.9%): [14674.305, 15320.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1403.302 ±(99.9%) 30.366 MB/sec [Average]
[info]   (min, avg, max) = (1389.350, 1403.302, 1408.760), stdev = 7.886
[info]   CI (99.9%): [1372.936, 1433.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   147248.031 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (147248.029, 147248.031, 147248.039), stdev = 0.005
[info]   CI (99.9%): [147248.013, 147248.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1407.959 ±(99.9%) 577.848 MB/sec [Average]
[info]   (min, avg, max) = (1331.472, 1407.959, 1676.031), stdev = 150.065
[info]   CI (99.9%): [830.111, 1985.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   147722.558 ±(99.9%) 59807.438 B/op [Average]
[info]   (min, avg, max) = (139465.773, 147722.558, 175471.714), stdev = 15531.802
[info]   CI (99.9%): [87915.120, 207529.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   7.440 ±(99.9%) 15.461 B/op [Average]
[info]   (min, avg, max) = (2.181, 7.440, 13.238), stdev = 4.015
[info]   CI (99.9%): [≈ 0, 22.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.14% complete, ETA 00:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38518.766 ops/s
[info] # Warmup Iteration   2: 44559.355 ops/s
[info] # Warmup Iteration   3: 45626.392 ops/s
[info] Iteration   1: 45681.440 ops/s
[info]                  ·gc.alloc.rate:                   1748.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57408.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 44767.769 ops/s
[info]                  ·gc.alloc.rate:                   1713.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58911.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.391 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 45546.038 ops/s
[info]                  ·gc.alloc.rate:                   1742.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58168.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.597 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 45878.151 ops/s
[info]                  ·gc.alloc.rate:                   1755.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69540.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.571 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 45287.590 ops/s
[info]                  ·gc.alloc.rate:                   1732.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58870.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.787 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   45432.197 ±(99.9%) 1652.115 ops/s [Average]
[info]   (min, avg, max) = (44767.769, 45432.197, 45878.151), stdev = 429.049
[info]   CI (99.9%): [43780.083, 47084.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1738.701 ±(99.9%) 63.318 MB/sec [Average]
[info]   (min, avg, max) = (1713.525, 1738.701, 1755.994), stdev = 16.443
[info]   CI (99.9%): [1675.384, 1802.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   60216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (60216.009, 60216.010, 60216.010), stdev = 0.001
[info]   CI (99.9%): [60216.008, 60216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1749.763 ±(99.9%) 599.963 MB/sec [Average]
[info]   (min, avg, max) = (1667.044, 1749.763, 2027.923), stdev = 155.809
[info]   CI (99.9%): [1149.800, 2349.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   60579.985 ±(99.9%) 19433.109 B/op [Average]
[info]   (min, avg, max) = (57408.905, 60579.985, 69540.946), stdev = 5046.717
[info]   CI (99.9%): [41146.876, 80013.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.167), stdev = 0.027
[info]   CI (99.9%): [0.025, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.473 ±(99.9%) 3.661 B/op [Average]
[info]   (min, avg, max) = (3.571, 4.473, 5.787), stdev = 0.951
[info]   CI (99.9%): [0.812, 8.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.60% complete, ETA 00:40:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75554.628 ops/s
[info] # Warmup Iteration   2: 107188.505 ops/s
[info] # Warmup Iteration   3: 108613.718 ops/s
[info] Iteration   1: 108614.217 ops/s
[info]                  ·gc.alloc.rate:                   252.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3706.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 107203.062 ops/s
[info]                  ·gc.alloc.rate:               249.582 MB/sec
[info]                  ·gc.alloc.rate.norm:          3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3755.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 108042.737 ops/s
[info]                  ·gc.alloc.rate:                   251.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3726.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.455 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 107688.046 ops/s
[info]                  ·gc.alloc.rate:               250.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3738.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 108975.208 ops/s
[info]                  ·gc.alloc.rate:                   253.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4718.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   108104.654 ±(99.9%) 2728.109 ops/s [Average]
[info]   (min, avg, max) = (107203.062, 108104.654, 108975.208), stdev = 708.481
[info]   CI (99.9%): [105376.545, 110832.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   251.682 ±(99.9%) 6.405 MB/sec [Average]
[info]   (min, avg, max) = (249.582, 251.682, 253.752), stdev = 1.663
[info]   CI (99.9%): [245.277, 258.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3664.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3664.004, 3664.004, 3664.004), stdev = 0.001
[info]   CI (99.9%): [3664.004, 3664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   270.000 ±(99.9%) 122.293 MB/sec [Average]
[info]   (min, avg, max) = (255.793, 270.000, 326.812), stdev = 31.759
[info]   CI (99.9%): [147.706, 392.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3929.118 ±(99.9%) 1701.520 B/op [Average]
[info]   (min, avg, max) = (3706.580, 3929.118, 4718.938), stdev = 441.879
[info]   CI (99.9%): [2227.598, 5630.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.455 ±(99.9%) 3.808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.455, 2.224), stdev = 0.989
[info]   CI (99.9%): [≈ 0, 4.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.574 ±(99.9%) 54.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.574, 32.113), stdev = 14.278
[info]   CI (99.9%): [≈ 0, 61.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 11.06% complete, ETA 00:40:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198538.119 ops/s
[info] # Warmup Iteration   2: 207857.262 ops/s
[info] # Warmup Iteration   3: 206394.579 ops/s
[info] Iteration   1: 202219.622 ops/s
[info]                  ·gc.alloc.rate:               275.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1990.878 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 207111.058 ops/s
[info]                  ·gc.alloc.rate:               282.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1943.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 206700.167 ops/s
[info]                  ·gc.alloc.rate:                   281.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1947.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 208379.176 ops/s
[info]                  ·gc.alloc.rate:                   283.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2518.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 205170.426 ops/s
[info]                  ·gc.alloc.rate:                   279.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2557.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   205916.090 ±(99.9%) 9097.917 ops/s [Average]
[info]   (min, avg, max) = (202219.622, 205916.090, 208379.176), stdev = 2362.700
[info]   CI (99.9%): [196818.172, 215014.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   280.548 ±(99.9%) 12.204 MB/sec [Average]
[info]   (min, avg, max) = (275.593, 280.548, 283.876), stdev = 3.169
[info]   CI (99.9%): [268.343, 292.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.002, 2144.002, 2144.002), stdev = 0.001
[info]   CI (99.9%): [2144.002, 2144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.887 ±(99.9%) 163.719 MB/sec [Average]
[info]   (min, avg, max) = (255.797, 286.887, 333.500), stdev = 42.517
[info]   CI (99.9%): [123.168, 450.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2191.683 ±(99.9%) 1220.471 B/op [Average]
[info]   (min, avg, max) = (1943.907, 2191.683, 2557.689), stdev = 316.952
[info]   CI (99.9%): [971.212, 3412.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.325 ±(99.9%) 2.743 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.599), stdev = 0.712
[info]   CI (99.9%): [≈ 0, 3.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.456 ±(99.9%) 20.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.456, 12.078), stdev = 5.379
[info]   CI (99.9%): [≈ 0, 23.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 11.52% complete, ETA 00:40:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8190.718 ops/s
[info] # Warmup Iteration   2: 13011.610 ops/s
[info] # Warmup Iteration   3: 13126.737 ops/s
[info] Iteration   1: 13233.287 ops/s
[info]                  ·gc.alloc.rate:                   4035.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4057.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482617.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.378 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 12900.382 ops/s
[info]                  ·gc.alloc.rate:                   3934.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3735.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     455740.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.777 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 12738.790 ops/s
[info]                  ·gc.alloc.rate:                   3884.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              479961.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     504577.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.575 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 13135.298 ops/s
[info]                  ·gc.alloc.rate:                   4005.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     448625.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.941 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 13003.420 ops/s
[info]                  ·gc.alloc.rate:                   3965.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     494377.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.117 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   13002.235 ±(99.9%) 747.833 ops/s [Average]
[info]   (min, avg, max) = (12738.790, 13002.235, 13233.287), stdev = 194.210
[info]   CI (99.9%): [12254.403, 13750.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3965.099 ±(99.9%) 227.842 MB/sec [Average]
[info]   (min, avg, max) = (3884.914, 3965.099, 4035.616), stdev = 59.170
[info]   CI (99.9%): [3737.257, 4192.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   479960.357 ±(99.9%) 2.783 B/op [Average]
[info]   (min, avg, max) = (479960.033, 479960.357, 479961.649), stdev = 0.723
[info]   CI (99.9%): [479957.574, 479963.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3941.233 ±(99.9%) 709.269 MB/sec [Average]
[info]   (min, avg, max) = (3735.564, 3941.233, 4084.390), stdev = 184.195
[info]   CI (99.9%): [3231.964, 4650.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   477187.544 ±(99.9%) 93351.913 B/op [Average]
[info]   (min, avg, max) = (448625.795, 477187.544, 504577.306), stdev = 24243.195
[info]   CI (99.9%): [383835.631, 570539.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.208), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.158 ±(99.9%) 18.732 B/op [Average]
[info]   (min, avg, max) = (12.378, 18.158, 24.941), stdev = 4.865
[info]   CI (99.9%): [≈ 0, 36.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   58.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 11.000), stdev = 0.837
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.98% complete, ETA 00:40:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35972.320 ops/s
[info] # Warmup Iteration   2: 44679.322 ops/s
[info] # Warmup Iteration   3: 45038.437 ops/s
[info] Iteration   1: 44935.479 ops/s
[info]                  ·gc.alloc.rate:                   1112.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46333.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.645 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43904.877 ops/s
[info]                  ·gc.alloc.rate:                   1086.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35699.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44385.442 ops/s
[info]                  ·gc.alloc.rate:                   1098.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35407.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 44590.474 ops/s
[info]                  ·gc.alloc.rate:                   1103.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47211.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.294 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 44891.955 ops/s
[info]                  ·gc.alloc.rate:                   1111.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35298.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   44541.645 ±(99.9%) 1622.397 ops/s [Average]
[info]   (min, avg, max) = (43904.877, 44541.645, 44935.479), stdev = 421.331
[info]   CI (99.9%): [42919.249, 46164.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1102.618 ±(99.9%) 40.131 MB/sec [Average]
[info]   (min, avg, max) = (1086.873, 1102.618, 1112.358), stdev = 10.422
[info]   CI (99.9%): [1062.487, 1142.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38960.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38960.010, 38960.010, 38960.010), stdev = 0.001
[info]   CI (99.9%): [38960.008, 38960.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1132.367 ±(99.9%) 695.950 MB/sec [Average]
[info]   (min, avg, max) = (995.927, 1132.367, 1337.556), stdev = 180.736
[info]   CI (99.9%): [436.417, 1828.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39990.374 ±(99.9%) 23877.322 B/op [Average]
[info]   (min, avg, max) = (35298.945, 39990.374, 47211.548), stdev = 6200.865
[info]   CI (99.9%): [16113.052, 63867.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (0.052, 0.087, 0.104), stdev = 0.022
[info]   CI (99.9%): [0.004, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.087 ±(99.9%) 2.990 B/op [Average]
[info]   (min, avg, max) = (1.813, 3.087, 3.731), stdev = 0.777
[info]   CI (99.9%): [0.097, 6.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 12.44% complete, ETA 00:40:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85618.482 ops/s
[info] # Warmup Iteration   2: 115687.596 ops/s
[info] # Warmup Iteration   3: 113262.229 ops/s
[info] Iteration   1: 116649.172 ops/s
[info]                  ·gc.alloc.rate:                   833.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8825.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 115657.028 ops/s
[info]                  ·gc.alloc.rate:                   826.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13361.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 116424.677 ops/s
[info]                  ·gc.alloc.rate:                   832.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13305.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.562 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 115837.070 ops/s
[info]                  ·gc.alloc.rate:                   827.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              11247.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8960.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 115956.835 ops/s
[info]                  ·gc.alloc.rate:                   828.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13480.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.848 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   116104.956 ±(99.9%) 1602.460 ops/s [Average]
[info]   (min, avg, max) = (115657.028, 116104.956, 116649.172), stdev = 416.154
[info]   CI (99.9%): [114502.497, 117707.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   829.940 ±(99.9%) 12.098 MB/sec [Average]
[info]   (min, avg, max) = (826.597, 829.940, 833.814), stdev = 3.142
[info]   CI (99.9%): [817.842, 842.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11248.000 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (11247.987, 11248.000, 11248.006), stdev = 0.008
[info]   CI (99.9%): [11247.971, 11248.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   854.774 ±(99.9%) 695.866 MB/sec [Average]
[info]   (min, avg, max) = (654.259, 854.774, 993.213), stdev = 180.714
[info]   CI (99.9%): [158.908, 1550.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11586.701 ±(99.9%) 9473.895 B/op [Average]
[info]   (min, avg, max) = (8825.837, 11586.701, 13480.839), stdev = 2460.341
[info]   CI (99.9%): [2112.806, 21060.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.072 ±(99.9%) 1.417 B/op [Average]
[info]   (min, avg, max) = (0.562, 1.072, 1.414), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 2.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.90% complete, ETA 00:39:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255373.889 ops/s
[info] # Warmup Iteration   2: 265174.206 ops/s
[info] # Warmup Iteration   3: 274917.471 ops/s
[info] Iteration   1: 275141.258 ops/s
[info]                  ·gc.alloc.rate:                   989.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5694.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 274470.827 ops/s
[info]                  ·gc.alloc.rate:                   986.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5716.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 274584.556 ops/s
[info]                  ·gc.alloc.rate:                   987.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5731.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 272807.478 ops/s
[info]                  ·gc.alloc.rate:                   980.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3854.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 267459.935 ops/s
[info]                  ·gc.alloc.rate:                   961.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5911.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   272892.811 ±(99.9%) 12166.309 ops/s [Average]
[info]   (min, avg, max) = (267459.935, 272892.811, 275141.258), stdev = 3159.552
[info]   CI (99.9%): [260726.502, 285059.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   980.840 ±(99.9%) 44.062 MB/sec [Average]
[info]   (min, avg, max) = (961.204, 980.840, 989.036), stdev = 11.443
[info]   CI (99.9%): [936.778, 1024.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5656.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5656.002, 5656.002, 5656.002), stdev = 0.001
[info]   CI (99.9%): [5656.001, 5656.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   933.151 ±(99.9%) 570.587 MB/sec [Average]
[info]   (min, avg, max) = (668.149, 933.151, 1004.544), stdev = 148.180
[info]   CI (99.9%): [362.564, 1503.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5381.635 ±(99.9%) 3303.794 B/op [Average]
[info]   (min, avg, max) = (3854.593, 5381.635, 5911.026), stdev = 857.985
[info]   CI (99.9%): [2077.841, 8685.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.505 ±(99.9%) 0.761 B/op [Average]
[info]   (min, avg, max) = (0.240, 0.505, 0.716), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 1.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 10.000), stdev = 3.493
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 13.36% complete, ETA 00:39:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284516.916 ops/s
[info] # Warmup Iteration   2: 307393.836 ops/s
[info] # Warmup Iteration   3: 317974.315 ops/s
[info] Iteration   1: 318146.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 317983.656 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 318055.300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 318236.065 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 308883.135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   316260.865 ±(99.9%) 15885.330 ops/s [Average]
[info]   (min, avg, max) = (308883.135, 316260.865, 318236.065), stdev = 4125.370
[info]   CI (99.9%): [300375.535, 332146.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 13.82% complete, ETA 00:39:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39863.892 ops/s
[info] # Warmup Iteration   2: 51614.573 ops/s
[info] # Warmup Iteration   3: 53382.947 ops/s
[info] Iteration   1: 53295.262 ops/s
[info]                  ·gc.alloc.rate:                   526.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              15560.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          584.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17262.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 53123.859 ops/s
[info]                  ·gc.alloc.rate:                   525.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              15559.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19469.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 53481.558 ops/s
[info]                  ·gc.alloc.rate:                   528.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              15560.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9664.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 53013.511 ops/s
[info]                  ·gc.alloc.rate:                   524.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              15560.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19499.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 53668.211 ops/s
[info]                  ·gc.alloc.rate:               530.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          15559.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      329.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9650.251 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   53316.480 ±(99.9%) 1019.346 ops/s [Average]
[info]   (min, avg, max) = (53013.511, 53316.480, 53668.211), stdev = 264.721
[info]   CI (99.9%): [52297.134, 54335.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   527.141 ±(99.9%) 10.247 MB/sec [Average]
[info]   (min, avg, max) = (524.120, 527.141, 530.729), stdev = 2.661
[info]   CI (99.9%): [516.894, 537.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   15560.002 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (15559.972, 15560.002, 15560.045), stdev = 0.031
[info]   CI (99.9%): [15559.884, 15560.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   511.220 ±(99.9%) 651.329 MB/sec [Average]
[info]   (min, avg, max) = (328.403, 511.220, 657.158), stdev = 169.148
[info]   CI (99.9%): [≈ 0, 1162.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15109.186 ±(99.9%) 19479.505 B/op [Average]
[info]   (min, avg, max) = (9650.251, 15109.186, 19499.376), stdev = 5058.766
[info]   CI (99.9%): [≈ 0, 34588.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.435 ±(99.9%) 3.482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.435, 2.052), stdev = 0.904
[info]   CI (99.9%): [≈ 0, 3.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.860 ±(99.9%) 102.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.860, 60.611), stdev = 26.702
[info]   CI (99.9%): [≈ 0, 115.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 14.29% complete, ETA 00:39:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18095.279 ops/s
[info] # Warmup Iteration   2: 21424.106 ops/s
[info] # Warmup Iteration   3: 21827.750 ops/s
[info] Iteration   1: 21989.563 ops/s
[info]                  ·gc.alloc.rate:                   2047.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              146568.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143551.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.919 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 21917.945 ops/s
[info]                  ·gc.alloc.rate:                   2041.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              146568.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144883.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.937 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 21866.840 ops/s
[info]                  ·gc.alloc.rate:                   2036.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              146567.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145796.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.491 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21533.002 ops/s
[info]                  ·gc.alloc.rate:                   2005.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              146568.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148537.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.650 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22077.169 ops/s
[info]                  ·gc.alloc.rate:                   2056.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              146568.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145169.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.388 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   21876.904 ±(99.9%) 800.463 ops/s [Average]
[info]   (min, avg, max) = (21533.002, 21876.904, 22077.169), stdev = 207.878
[info]   CI (99.9%): [21076.441, 22677.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2037.325 ±(99.9%) 74.550 MB/sec [Average]
[info]   (min, avg, max) = (2005.303, 2037.325, 2056.010), stdev = 19.360
[info]   CI (99.9%): [1962.775, 2111.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   146567.879 ±(99.9%) 1.227 B/op [Average]
[info]   (min, avg, max) = (146567.309, 146567.879, 146568.027), stdev = 0.319
[info]   CI (99.9%): [146566.652, 146569.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023.529 ±(99.9%) 47.195 MB/sec [Average]
[info]   (min, avg, max) = (2005.659, 2023.529, 2036.398), stdev = 12.257
[info]   CI (99.9%): [1976.333, 2070.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   145587.787 ±(99.9%) 7090.973 B/op [Average]
[info]   (min, avg, max) = (143551.075, 145587.787, 148537.718), stdev = 1841.503
[info]   CI (99.9%): [138496.814, 152678.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.162 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.162, 0.250), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.677 ±(99.9%) 14.849 B/op [Average]
[info]   (min, avg, max) = (7.491, 11.677, 17.937), stdev = 3.856
[info]   CI (99.9%): [≈ 0, 26.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 14.75% complete, ETA 00:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37039.121 ops/s
[info] # Warmup Iteration   2: 53310.005 ops/s
[info] # Warmup Iteration   3: 52582.335 ops/s
[info] Iteration   1: 53550.485 ops/s
[info]                  ·gc.alloc.rate:      124.701 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52807.960 ops/s
[info]                  ·gc.alloc.rate:                   122.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7623.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 53504.908 ops/s
[info]                  ·gc.alloc.rate:      124.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 54227.752 ops/s
[info]                  ·gc.alloc.rate:                   126.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7423.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 54486.309 ops/s
[info]                  ·gc.alloc.rate:      126.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   53715.483 ±(99.9%) 2548.240 ops/s [Average]
[info]   (min, avg, max) = (52807.960, 53715.483, 54486.309), stdev = 661.770
[info]   CI (99.9%): [51167.243, 56263.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   125.071 ±(99.9%) 5.996 MB/sec [Average]
[info]   (min, avg, max) = (122.937, 125.071, 126.898), stdev = 1.557
[info]   CI (99.9%): [119.075, 131.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3664.009 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (3664.008, 3664.009, 3664.011), stdev = 0.001
[info]   CI (99.9%): [3664.004, 3664.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   102.324 ±(99.9%) 539.526 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.324, 255.826), stdev = 140.113
[info]   CI (99.9%): [≈ 0, 641.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3009.531 ±(99.9%) 15870.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3009.531, 7623.697), stdev = 4121.575
[info]   CI (99.9%): [≈ 0, 18880.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.002 ±(99.9%) 8.538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.002, 4.968), stdev = 2.217
[info]   CI (99.9%): [≈ 0, 9.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.855 ±(99.9%) 254.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.855, 148.066), stdev = 66.084
[info]   CI (99.9%): [≈ 0, 284.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 15.21% complete, ETA 00:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122933.512 ops/s
[info] # Warmup Iteration   2: 125895.311 ops/s
[info] # Warmup Iteration   3: 127048.413 ops/s
[info] Iteration   1: 126823.235 ops/s
[info]                  ·gc.alloc.rate:      172.785 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 126971.943 ops/s
[info]                  ·gc.alloc.rate:               173.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3170.747 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 126683.069 ops/s
[info]                  ·gc.alloc.rate:                   172.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3178.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 126814.698 ops/s
[info]                  ·gc.alloc.rate:      172.762 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 125768.557 ops/s
[info]                  ·gc.alloc.rate:               171.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3201.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   126612.300 ±(99.9%) 1858.421 ops/s [Average]
[info]   (min, avg, max) = (125768.557, 126612.300, 126971.943), stdev = 482.626
[info]   CI (99.9%): [124753.880, 128470.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   172.503 ±(99.9%) 2.583 MB/sec [Average]
[info]   (min, avg, max) = (171.336, 172.503, 173.035), stdev = 0.671
[info]   CI (99.9%): [169.919, 175.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.003, 2144.004, 2144.004), stdev = 0.001
[info]   CI (99.9%): [2144.003, 2144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   153.512 ±(99.9%) 539.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.512, 255.900), stdev = 140.137
[info]   CI (99.9%): [≈ 0, 693.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1910.005 ±(99.9%) 6714.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1910.005, 3201.199), stdev = 1743.624
[info]   CI (99.9%): [≈ 0, 8624.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.259), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 15.67% complete, ETA 00:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5712.604 ops/s
[info] # Warmup Iteration   2: 9649.744 ops/s
[info] # Warmup Iteration   3: 9763.295 ops/s
[info] Iteration   1: 9837.355 ops/s
[info]                  ·gc.alloc.rate:                   3399.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              543720.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538087.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.650 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9786.113 ops/s
[info]                  ·gc.alloc.rate:                   3380.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              543720.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544428.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.739 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9770.911 ops/s
[info]                  ·gc.alloc.rate:                   3375.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              543720.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546980.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.765 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 9523.616 ops/s
[info]                  ·gc.alloc.rate:                   3290.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              543723.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     562153.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.639 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 9860.474 ops/s
[info]                  ·gc.alloc.rate:                   3406.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              543720.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     543265.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.256 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   9755.694 ±(99.9%) 518.996 ops/s [Average]
[info]   (min, avg, max) = (9523.616, 9755.694, 9860.474), stdev = 134.782
[info]   CI (99.9%): [9236.698, 10274.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3370.622 ±(99.9%) 179.952 MB/sec [Average]
[info]   (min, avg, max) = (3290.217, 3370.622, 3406.474), stdev = 46.733
[info]   CI (99.9%): [3190.670, 3550.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   543720.752 ±(99.9%) 6.092 B/op [Average]
[info]   (min, avg, max) = (543720.044, 543720.752, 543723.583), stdev = 1.582
[info]   CI (99.9%): [543714.660, 543726.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3390.243 ±(99.9%) 61.584 MB/sec [Average]
[info]   (min, avg, max) = (3364.623, 3390.243, 3403.623), stdev = 15.993
[info]   CI (99.9%): [3328.658, 3451.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   546983.097 ±(99.9%) 34955.516 B/op [Average]
[info]   (min, avg, max) = (538087.857, 546983.097, 562153.856), stdev = 9077.837
[info]   CI (99.9%): [512027.580, 581938.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.117, 0.146), stdev = 0.019
[info]   CI (99.9%): [0.045, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.810 ±(99.9%) 11.592 B/op [Average]
[info]   (min, avg, max) = (16.650, 18.810, 23.256), stdev = 3.010
[info]   CI (99.9%): [7.218, 30.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 13.000), stdev = 1.817
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 16.13% complete, ETA 00:38:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24320.202 ops/s
[info] # Warmup Iteration   2: 28447.330 ops/s
[info] # Warmup Iteration   3: 31573.623 ops/s
[info] Iteration   1: 32398.898 ops/s
[info]                  ·gc.alloc.rate:                   1412.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              68593.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64393.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30485.749 ops/s
[info]                  ·gc.alloc.rate:                   1327.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              68544.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68712.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.822 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 30550.773 ops/s
[info]                  ·gc.alloc.rate:                   1330.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              68544.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68907.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.434 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30492.227 ops/s
[info]                  ·gc.alloc.rate:                   1328.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              68544.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69315.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.372 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30137.185 ops/s
[info]                  ·gc.alloc.rate:                   1312.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              68544.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70341.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.261 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   30812.966 ±(99.9%) 3471.217 ops/s [Average]
[info]   (min, avg, max) = (30137.185, 30812.966, 32398.898), stdev = 901.464
[info]   CI (99.9%): [27341.750, 34284.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1342.306 ±(99.9%) 152.668 MB/sec [Average]
[info]   (min, avg, max) = (1312.535, 1342.306, 1412.043), stdev = 39.647
[info]   CI (99.9%): [1189.638, 1494.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68553.974 ±(99.9%) 85.754 B/op [Average]
[info]   (min, avg, max) = (68544.014, 68553.974, 68593.812), stdev = 22.270
[info]   CI (99.9%): [68468.220, 68639.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1336.952 ±(99.9%) 33.382 MB/sec [Average]
[info]   (min, avg, max) = (1325.574, 1336.952, 1346.947), stdev = 8.669
[info]   CI (99.9%): [1303.570, 1370.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   68334.168 ±(99.9%) 8821.663 B/op [Average]
[info]   (min, avg, max) = (64393.342, 68334.168, 70341.075), stdev = 2290.958
[info]   CI (99.9%): [59512.505, 77155.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.264 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.229), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.985 ±(99.9%) 13.719 B/op [Average]
[info]   (min, avg, max) = (3.034, 5.985, 11.822), stdev = 3.563
[info]   CI (99.9%): [≈ 0, 19.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 16.59% complete, ETA 00:38:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211401.597 ops/s
[info] # Warmup Iteration   2: 224328.391 ops/s
[info] # Warmup Iteration   3: 226785.665 ops/s
[info] Iteration   1: 227693.362 ops/s
[info]                  ·gc.alloc.rate:                   544.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2297.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 222408.275 ops/s
[info]                  ·gc.alloc.rate:                   531.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4700.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 226691.658 ops/s
[info]                  ·gc.alloc.rate:                   541.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4606.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 228189.385 ops/s
[info]                  ·gc.alloc.rate:               545.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2288.063 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 228043.429 ops/s
[info]                  ·gc.alloc.rate:                   544.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4583.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   226605.222 ±(99.9%) 9310.260 ops/s [Average]
[info]   (min, avg, max) = (222408.275, 226605.222, 228189.385), stdev = 2417.845
[info]   CI (99.9%): [217294.962, 235915.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   541.446 ±(99.9%) 22.418 MB/sec [Average]
[info]   (min, avg, max) = (531.349, 541.446, 545.146), stdev = 5.822
[info]   CI (99.9%): [519.028, 563.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3760.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3760.002, 3760.002, 3760.002), stdev = 0.001
[info]   CI (99.9%): [3760.002, 3760.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   531.258 ±(99.9%) 699.892 MB/sec [Average]
[info]   (min, avg, max) = (331.736, 531.258, 664.321), stdev = 181.760
[info]   CI (99.9%): [≈ 0, 1231.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3695.164 ±(99.9%) 4932.097 B/op [Average]
[info]   (min, avg, max) = (2288.063, 3695.164, 4700.042), stdev = 1280.850
[info]   CI (99.9%): [≈ 0, 8627.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.751), stdev = 0.763
[info]   CI (99.9%): [≈ 0, 3.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.682 ±(99.9%) 20.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.682, 12.100), stdev = 5.271
[info]   CI (99.9%): [≈ 0, 22.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.05% complete, ETA 00:38:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224627.652 ops/s
[info] # Warmup Iteration   2: 247114.855 ops/s
[info] # Warmup Iteration   3: 247868.907 ops/s
[info] Iteration   1: 247717.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 247751.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 247785.009 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 247705.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 246598.644 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   247511.519 ±(99.9%) 1968.665 ops/s [Average]
[info]   (min, avg, max) = (246598.644, 247511.519, 247785.009), stdev = 511.256
[info]   CI (99.9%): [245542.854, 249480.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 17.51% complete, ETA 00:37:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3198.346 ops/s
[info] # Warmup Iteration   2: 4227.082 ops/s
[info] # Warmup Iteration   3: 4389.211 ops/s
[info] Iteration   1: 4357.372 ops/s
[info]                  ·gc.alloc.rate:                   1730.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     717978.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.114 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4357.138 ops/s
[info]                  ·gc.alloc.rate:                   1730.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     602468.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.069 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4390.120 ops/s
[info]                  ·gc.alloc.rate:                   1744.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     601540.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.925 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4356.391 ops/s
[info]                  ·gc.alloc.rate:                   1730.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     608741.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.519 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4401.880 ops/s
[info]                  ·gc.alloc.rate:                   1747.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     604425.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   4372.580 ±(99.9%) 83.878 ops/s [Average]
[info]   (min, avg, max) = (4356.391, 4372.580, 4401.880), stdev = 21.783
[info]   CI (99.9%): [4288.702, 4456.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1736.618 ±(99.9%) 33.430 MB/sec [Average]
[info]   (min, avg, max) = (1730.067, 1736.618, 1747.967), stdev = 8.682
[info]   CI (99.9%): [1703.188, 1770.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   624976.102 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (624976.098, 624976.102, 624976.106), stdev = 0.004
[info]   CI (99.9%): [624976.087, 624976.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.087 ±(99.9%) 529.920 MB/sec [Average]
[info]   (min, avg, max) = (1668.354, 1742.087, 1987.824), stdev = 137.619
[info]   CI (99.9%): [1212.166, 2272.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   627030.888 ±(99.9%) 196062.437 B/op [Average]
[info]   (min, avg, max) = (601540.183, 627030.888, 717978.610), stdev = 50916.792
[info]   CI (99.9%): [430968.451, 823093.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23.991 ±(99.9%) 55.782 B/op [Average]
[info]   (min, avg, max) = (7.519, 23.991, 45.114), stdev = 14.486
[info]   CI (99.9%): [≈ 0, 79.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 17.97% complete, ETA 00:37:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2171.477 ops/s
[info] # Warmup Iteration   2: 2727.721 ops/s
[info] # Warmup Iteration   3: 2750.427 ops/s
[info] Iteration   1: 2746.091 ops/s
[info]                  ·gc.alloc.rate:                   1392.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     760379.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.501 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2777.700 ops/s
[info]                  ·gc.alloc.rate:                   1408.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     754831.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.165 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2744.641 ops/s
[info]                  ·gc.alloc.rate:                   1391.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767530.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.665 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2777.749 ops/s
[info]                  ·gc.alloc.rate:                   1408.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951415.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.539 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2739.549 ops/s
[info]                  ·gc.alloc.rate:                   1389.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     774668.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.729 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   2757.146 ±(99.9%) 72.939 ops/s [Average]
[info]   (min, avg, max) = (2739.549, 2757.146, 2777.749), stdev = 18.942
[info]   CI (99.9%): [2684.207, 2830.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1398.164 ±(99.9%) 37.441 MB/sec [Average]
[info]   (min, avg, max) = (1389.106, 1398.164, 1408.895), stdev = 9.723
[info]   CI (99.9%): [1360.724, 1435.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   797976.159 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (797976.155, 797976.159, 797976.169), stdev = 0.006
[info]   CI (99.9%): [797976.137, 797976.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1405.242 ±(99.9%) 590.953 MB/sec [Average]
[info]   (min, avg, max) = (1326.865, 1405.242, 1679.401), stdev = 153.469
[info]   CI (99.9%): [814.288, 1996.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   801765.115 ±(99.9%) 323414.520 B/op [Average]
[info]   (min, avg, max) = (754831.338, 801765.115, 951415.755), stdev = 83989.724
[info]   CI (99.9%): [478350.596, 1125179.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.016, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.920 ±(99.9%) 59.806 B/op [Average]
[info]   (min, avg, max) = (47.165, 68.920, 83.501), stdev = 15.531
[info]   CI (99.9%): [9.114, 128.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 18.43% complete, ETA 00:37:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3970.016 ops/s
[info] # Warmup Iteration   2: 5758.083 ops/s
[info] # Warmup Iteration   3: 5822.075 ops/s
[info] Iteration   1: 5880.929 ops/s
[info]                  ·gc.alloc.rate:                   883.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262589.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5887.287 ops/s
[info]                  ·gc.alloc.rate:                   884.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262678.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5883.988 ops/s
[info]                  ·gc.alloc.rate:                   883.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175861.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5884.353 ops/s
[info]                  ·gc.alloc.rate:                   883.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264638.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.403 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5870.604 ops/s
[info]                  ·gc.alloc.rate:                   881.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266340.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   5881.432 ±(99.9%) 24.869 ops/s [Average]
[info]   (min, avg, max) = (5870.604, 5881.432, 5887.287), stdev = 6.458
[info]   CI (99.9%): [5856.563, 5906.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   883.578 ±(99.9%) 3.730 MB/sec [Average]
[info]   (min, avg, max) = (881.928, 883.578, 884.441), stdev = 0.969
[info]   CI (99.9%): [879.848, 887.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   236424.076 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (236424.073, 236424.076, 236424.079), stdev = 0.003
[info]   CI (99.9%): [236424.064, 236424.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   920.912 ±(99.9%) 567.360 MB/sec [Average]
[info]   (min, avg, max) = (657.489, 920.912, 993.524), stdev = 147.342
[info]   CI (99.9%): [353.552, 1488.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   246421.575 ±(99.9%) 152003.203 B/op [Average]
[info]   (min, avg, max) = (175861.429, 246421.575, 266340.447), stdev = 39474.749
[info]   CI (99.9%): [94418.372, 398424.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20.046 ±(99.9%) 44.432 B/op [Average]
[info]   (min, avg, max) = (5.580, 20.046, 33.403), stdev = 11.539
[info]   CI (99.9%): [≈ 0, 64.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 18.89% complete, ETA 00:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6892.525 ops/s
[info] # Warmup Iteration   2: 7312.456 ops/s
[info] # Warmup Iteration   3: 7340.079 ops/s
[info] Iteration   1: 7369.856 ops/s
[info]                  ·gc.alloc.rate:                   545.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              116448.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71189.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7259.700 ops/s
[info]                  ·gc.alloc.rate:                   537.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              116448.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144484.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7192.039 ops/s
[info]                  ·gc.alloc.rate:                   532.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              116448.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145757.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.220 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7406.588 ops/s
[info]                  ·gc.alloc.rate:               548.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          116448.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70773.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 7379.150 ops/s
[info]                  ·gc.alloc.rate:                   546.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              116448.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142064.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   7321.466 ±(99.9%) 352.293 ops/s [Average]
[info]   (min, avg, max) = (7192.039, 7321.466, 7406.588), stdev = 91.489
[info]   CI (99.9%): [6969.174, 7673.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   541.844 ±(99.9%) 26.088 MB/sec [Average]
[info]   (min, avg, max) = (532.319, 541.844, 548.044), stdev = 6.775
[info]   CI (99.9%): [515.756, 567.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   116448.060 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (116448.058, 116448.060, 116448.064), stdev = 0.002
[info]   CI (99.9%): [116448.051, 116448.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.140 ±(99.9%) 702.498 MB/sec [Average]
[info]   (min, avg, max) = (333.083, 533.140, 666.475), stdev = 182.437
[info]   CI (99.9%): [≈ 0, 1235.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   114853.735 ±(99.9%) 154302.399 B/op [Average]
[info]   (min, avg, max) = (70773.218, 114853.735, 145757.020), stdev = 40071.843
[info]   CI (99.9%): [≈ 0, 269156.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.350 ±(99.9%) 2.656 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.350, 1.582), stdev = 0.690
[info]   CI (99.9%): [≈ 0, 3.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   74.787 ±(99.9%) 566.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.787, 337.736), stdev = 147.169
[info]   CI (99.9%): [≈ 0, 641.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 19.35% complete, ETA 00:37:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2081.732 ops/s
[info] # Warmup Iteration   2: 3525.624 ops/s
[info] # Warmup Iteration   3: 3622.327 ops/s
[info] Iteration   1: 3628.170 ops/s
[info]                  ·gc.alloc.rate:                   1581.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              686024.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714268.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.118 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3633.205 ops/s
[info]                  ·gc.alloc.rate:                   1583.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              686024.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718767.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.068 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3668.332 ops/s
[info]                  ·gc.alloc.rate:               1599.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          686024.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1670.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 716769.858 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3670.450 ops/s
[info]                  ·gc.alloc.rate:                   1599.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              686024.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575688.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3669.844 ops/s
[info]                  ·gc.alloc.rate:                   1599.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              686065.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722663.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.779 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   3654.000 ±(99.9%) 82.287 ops/s [Average]
[info]   (min, avg, max) = (3628.170, 3654.000, 3670.450), stdev = 21.370
[info]   CI (99.9%): [3571.713, 3736.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1592.819 ±(99.9%) 36.056 MB/sec [Average]
[info]   (min, avg, max) = (1581.500, 1592.819, 1599.988), stdev = 9.364
[info]   CI (99.9%): [1556.763, 1628.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   686032.483 ±(99.9%) 72.000 B/op [Average]
[info]   (min, avg, max) = (686024.118, 686032.483, 686065.931), stdev = 18.698
[info]   CI (99.9%): [685960.483, 686104.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1600.895 ±(99.9%) 558.574 MB/sec [Average]
[info]   (min, avg, max) = (1342.657, 1600.895, 1685.236), stdev = 145.060
[info]   CI (99.9%): [1042.321, 2159.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   689631.671 ±(99.9%) 245555.529 B/op [Average]
[info]   (min, avg, max) = (575688.784, 689631.671, 722663.383), stdev = 63769.991
[info]   CI (99.9%): [444076.142, 935187.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.932 ±(99.9%) 59.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.932, 36.118), stdev = 15.572
[info]   CI (99.9%): [≈ 0, 86.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 19.82% complete, ETA 00:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5013.130 ops/s
[info] # Warmup Iteration   2: 6007.561 ops/s
[info] # Warmup Iteration   3: 6062.056 ops/s
[info] Iteration   1: 6065.078 ops/s
[info]                  ·gc.alloc.rate:                   640.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171622.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 470.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6112.092 ops/s
[info]                  ·gc.alloc.rate:                   645.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170159.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5981.292 ops/s
[info]                  ·gc.alloc.rate:                   631.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173857.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6098.974 ops/s
[info]                  ·gc.alloc.rate:                   643.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170866.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5917.765 ops/s
[info]                  ·gc.alloc.rate:                   624.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176268.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   6035.040 ±(99.9%) 319.679 ops/s [Average]
[info]   (min, avg, max) = (5917.765, 6035.040, 6112.092), stdev = 83.020
[info]   CI (99.9%): [5715.361, 6354.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   636.997 ±(99.9%) 33.645 MB/sec [Average]
[info]   (min, avg, max) = (624.587, 636.997, 645.146), stdev = 8.737
[info]   CI (99.9%): [603.352, 670.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   166096.073 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (166096.071, 166096.073, 166096.078), stdev = 0.003
[info]   CI (99.9%): [166096.062, 166096.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.662 ±(99.9%) 3.173 MB/sec [Average]
[info]   (min, avg, max) = (660.930, 661.662, 662.840), stdev = 0.824
[info]   CI (99.9%): [658.489, 664.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   172554.943 ±(99.9%) 9615.554 B/op [Average]
[info]   (min, avg, max) = (170159.887, 172554.943, 176268.478), stdev = 2497.129
[info]   CI (99.9%): [162939.389, 182170.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.403 ±(99.9%) 3.036 MB/sec [Average]
[info]   (min, avg, max) = (0.028, 0.403, 1.813), stdev = 0.788
[info]   CI (99.9%): [≈ 0, 3.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   104.739 ±(99.9%) 787.539 B/op [Average]
[info]   (min, avg, max) = (7.317, 104.739, 470.472), stdev = 204.521
[info]   CI (99.9%): [≈ 0, 892.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 20.28% complete, ETA 00:36:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4549.788 ops/s
[info] # Warmup Iteration   2: 6797.180 ops/s
[info] # Warmup Iteration   3: 6658.723 ops/s
[info] Iteration   1: 6818.341 ops/s
[info]                  ·gc.alloc.rate:               352.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          81355.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118080.113 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 6860.935 ops/s
[info]                  ·gc.alloc.rate:                   354.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              81355.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58670.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6879.055 ops/s
[info]                  ·gc.alloc.rate:                   355.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              81356.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74745.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6900.773 ops/s
[info]                  ·gc.alloc.rate:                   356.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              81355.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74518.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6909.971 ops/s
[info]                  ·gc.alloc.rate:               357.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          81355.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74486.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   6873.815 ±(99.9%) 140.228 ops/s [Average]
[info]   (min, avg, max) = (6818.341, 6873.815, 6909.971), stdev = 36.417
[info]   CI (99.9%): [6733.587, 7014.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   355.385 ±(99.9%) 7.476 MB/sec [Average]
[info]   (min, avg, max) = (352.469, 355.385, 357.341), stdev = 1.942
[info]   CI (99.9%): [347.909, 362.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81355.615 ±(99.9%) 1.204 B/op [Average]
[info]   (min, avg, max) = (81355.327, 81355.615, 81356.108), stdev = 0.313
[info]   CI (99.9%): [81354.411, 81356.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.617 ±(99.9%) 368.259 MB/sec [Average]
[info]   (min, avg, max) = (255.766, 349.617, 511.576), stdev = 95.636
[info]   CI (99.9%): [≈ 0, 717.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   80100.230 ±(99.9%) 85953.470 B/op [Average]
[info]   (min, avg, max) = (58670.142, 80100.230, 118080.113), stdev = 22321.843
[info]   CI (99.9%): [≈ 0, 166053.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.445 ±(99.9%) 3.723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 2.175), stdev = 0.967
[info]   CI (99.9%): [≈ 0, 4.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   101.888 ±(99.9%) 851.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.888, 497.563), stdev = 221.223
[info]   CI (99.9%): [≈ 0, 953.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 20.74% complete, ETA 00:36:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6386.535 ops/s
[info] # Warmup Iteration   2: 7427.567 ops/s
[info] # Warmup Iteration   3: 7428.235 ops/s
[info] Iteration   1: 7436.075 ops/s
[info]                  ·gc.alloc.rate:                   325.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              68848.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108269.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7434.435 ops/s
[info]                  ·gc.alloc.rate:               325.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          68848.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54149.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7424.310 ops/s
[info]                  ·gc.alloc.rate:                   324.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              68848.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70460.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7442.054 ops/s
[info]                  ·gc.alloc.rate:                   325.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              68848.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70290.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7428.343 ops/s
[info]                  ·gc.alloc.rate:               324.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          68848.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70281.406 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   7433.044 ±(99.9%) 26.587 ops/s [Average]
[info]   (min, avg, max) = (7424.310, 7433.044, 7442.054), stdev = 6.904
[info]   CI (99.9%): [7406.457, 7459.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   325.173 ±(99.9%) 1.199 MB/sec [Average]
[info]   (min, avg, max) = (324.767, 325.173, 325.554), stdev = 0.311
[info]   CI (99.9%): [323.974, 326.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   68848.059 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (68848.058, 68848.059, 68848.062), stdev = 0.002
[info]   CI (99.9%): [68848.051, 68848.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   352.776 ±(99.9%) 364.768 MB/sec [Average]
[info]   (min, avg, max) = (255.831, 352.776, 511.584), stdev = 94.729
[info]   CI (99.9%): [≈ 0, 717.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   74690.067 ±(99.9%) 77161.298 B/op [Average]
[info]   (min, avg, max) = (54149.164, 74690.067, 108269.208), stdev = 20038.544
[info]   CI (99.9%): [≈ 0, 151851.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.378 ±(99.9%) 3.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.811), stdev = 0.801
[info]   CI (99.9%): [≈ 0, 3.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80.041 ±(99.9%) 654.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.041, 383.823), stdev = 169.906
[info]   CI (99.9%): [≈ 0, 734.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 21.20% complete, ETA 00:36:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6754.098 ops/s
[info] # Warmup Iteration   2: 7698.689 ops/s
[info] # Warmup Iteration   3: 7683.581 ops/s
[info] Iteration   1: 7688.370 ops/s
[info]                  ·gc.alloc.rate:               264.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          54240.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52360.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 7699.558 ops/s
[info]                  ·gc.alloc.rate:               265.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          54240.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52285.831 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7595.522 ops/s
[info]                  ·gc.alloc.rate:                   261.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53001.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.515 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7706.641 ops/s
[info]                  ·gc.alloc.rate:                   265.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67759.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 361.565 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7730.455 ops/s
[info]                  ·gc.alloc.rate:      266.488 MB/sec
[info]                  ·gc.alloc.rate.norm: 54240.056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   7684.109 ±(99.9%) 199.717 ops/s [Average]
[info]   (min, avg, max) = (7595.522, 7684.109, 7730.455), stdev = 51.866
[info]   CI (99.9%): [7484.393, 7883.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   264.909 ±(99.9%) 6.856 MB/sec [Average]
[info]   (min, avg, max) = (261.879, 264.909, 266.488), stdev = 1.780
[info]   CI (99.9%): [258.054, 271.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   54240.056 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (54240.056, 54240.056, 54240.057), stdev = 0.001
[info]   CI (99.9%): [54240.055, 54240.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   219.916 ±(99.9%) 490.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.916, 332.026), stdev = 127.285
[info]   CI (99.9%): [≈ 0, 710.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   45081.526 ±(99.9%) 100306.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45081.526, 67759.573), stdev = 26049.245
[info]   CI (99.9%): [≈ 0, 145387.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.360 ±(99.9%) 3.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.360, 1.772), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   73.416 ±(99.9%) 620.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.416, 361.565), stdev = 161.098
[info]   CI (99.9%): [≈ 0, 693.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 21.66% complete, ETA 00:36:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3352.195 ops/s
[info] # Warmup Iteration   2: 4034.524 ops/s
[info] # Warmup Iteration   3: 4070.501 ops/s
[info] Iteration   1: 4017.930 ops/s
[info]                  ·gc.alloc.rate:                   1491.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              584072.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520765.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.920 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4050.730 ops/s
[info]                  ·gc.alloc.rate:                   1503.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              584072.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648631.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.782 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4075.283 ops/s
[info]                  ·gc.alloc.rate:                   1512.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              584072.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     518113.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.275 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4071.309 ops/s
[info]                  ·gc.alloc.rate:                   1511.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              584072.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650436.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.271 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4081.552 ops/s
[info]                  ·gc.alloc.rate:                   1514.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              584072.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     521077.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   4059.361 ±(99.9%) 99.667 ops/s [Average]
[info]   (min, avg, max) = (4017.930, 4059.361, 4081.552), stdev = 25.883
[info]   CI (99.9%): [3959.694, 4159.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1506.576 ±(99.9%) 37.236 MB/sec [Average]
[info]   (min, avg, max) = (1491.102, 1506.576, 1514.742), stdev = 9.670
[info]   CI (99.9%): [1469.340, 1543.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   584072.110 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (584072.106, 584072.110, 584072.115), stdev = 0.005
[info]   CI (99.9%): [584072.091, 584072.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1474.984 ±(99.9%) 707.800 MB/sec [Average]
[info]   (min, avg, max) = (1329.484, 1474.984, 1682.713), stdev = 183.813
[info]   CI (99.9%): [767.184, 2182.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   571805.105 ±(99.9%) 273275.179 B/op [Average]
[info]   (min, avg, max) = (518113.853, 571805.105, 650436.353), stdev = 70968.696
[info]   CI (99.9%): [298529.926, 845080.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.125, 0.187), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   48.460 ±(99.9%) 79.458 B/op [Average]
[info]   (min, avg, max) = (16.051, 48.460, 72.782), stdev = 20.635
[info]   CI (99.9%): [≈ 0, 127.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 22.12% complete, ETA 00:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6720.541 ops/s
[info] # Warmup Iteration   2: 10135.005 ops/s
[info] # Warmup Iteration   3: 10326.569 ops/s
[info] Iteration   1: 10020.363 ops/s
[info]                  ·gc.alloc.rate:                   894.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              140536.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154116.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10329.393 ops/s
[info]                  ·gc.alloc.rate:                   922.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              140536.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149695.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.858 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10331.443 ops/s
[info]                  ·gc.alloc.rate:                   922.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              140536.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150325.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10153.737 ops/s
[info]                  ·gc.alloc.rate:                   906.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              140559.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153579.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10237.953 ops/s
[info]                  ·gc.alloc.rate:               914.809 MB/sec
[info]                  ·gc.alloc.rate.norm:          140568.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102000.361 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   10214.578 ±(99.9%) 505.034 ops/s [Average]
[info]   (min, avg, max) = (10020.363, 10214.578, 10331.443), stdev = 131.156
[info]   CI (99.9%): [9709.543, 10719.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   912.344 ±(99.9%) 45.465 MB/sec [Average]
[info]   (min, avg, max) = (894.754, 912.344, 922.792), stdev = 11.807
[info]   CI (99.9%): [866.880, 957.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   140547.087 ±(99.9%) 59.443 B/op [Average]
[info]   (min, avg, max) = (140536.042, 140547.087, 140568.042), stdev = 15.437
[info]   CI (99.9%): [140487.644, 140606.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   921.119 ±(99.9%) 554.065 MB/sec [Average]
[info]   (min, avg, max) = (663.813, 921.119, 990.879), stdev = 143.889
[info]   CI (99.9%): [367.054, 1475.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   141943.425 ±(99.9%) 86304.704 B/op [Average]
[info]   (min, avg, max) = (102000.361, 141943.425, 154116.189), stdev = 22413.058
[info]   CI (99.9%): [55638.721, 228248.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.925 ±(99.9%) 25.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.925, 16.348), stdev = 6.690
[info]   CI (99.9%): [≈ 0, 36.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 22.58% complete, ETA 00:35:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18876.523 ops/s
[info] # Warmup Iteration   2: 19419.406 ops/s
[info] # Warmup Iteration   3: 19269.371 ops/s
[info] Iteration   1: 19379.218 ops/s
[info]                  ·gc.alloc.rate:      101.461 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18583.945 ops/s
[info]                  ·gc.alloc.rate:                   97.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21663.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19335.673 ops/s
[info]                  ·gc.alloc.rate:      101.235 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19345.858 ops/s
[info]                  ·gc.alloc.rate:      101.293 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19345.700 ops/s
[info]                  ·gc.alloc.rate:                   101.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20811.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   19198.079 ±(99.9%) 1323.489 ops/s [Average]
[info]   (min, avg, max) = (18583.945, 19198.079, 19379.218), stdev = 343.706
[info]   CI (99.9%): [17874.590, 20521.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   100.516 ±(99.9%) 6.934 MB/sec [Average]
[info]   (min, avg, max) = (97.298, 100.516, 101.461), stdev = 1.801
[info]   CI (99.9%): [93.582, 107.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.025 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (8240.022, 8240.025, 8240.031), stdev = 0.003
[info]   CI (99.9%): [8240.012, 8240.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.324 ±(99.9%) 539.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.324, 255.820), stdev = 140.112
[info]   CI (99.9%): [≈ 0, 641.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8494.853 ±(99.9%) 44805.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8494.853, 21663.162), stdev = 11635.956
[info]   CI (99.9%): [≈ 0, 53300.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.105), stdev = 0.936
[info]   CI (99.9%): [≈ 0, 4.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   36.500 ±(99.9%) 305.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.500, 178.266), stdev = 79.271
[info]   CI (99.9%): [≈ 0, 341.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 23.04% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2550.654 ops/s
[info] # Warmup Iteration   2: 4302.067 ops/s
[info] # Warmup Iteration   3: 4376.385 ops/s
[info] Iteration   1: 4455.265 ops/s
[info]                  ·gc.alloc.rate:                   1920.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              678248.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     701717.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.122 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4472.361 ops/s
[info]                  ·gc.alloc.rate:                   1927.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              678248.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     587347.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4421.322 ops/s
[info]                  ·gc.alloc.rate:                   1905.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              678248.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716910.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.226 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4448.752 ops/s
[info]                  ·gc.alloc.rate:                   1917.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              678296.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716094.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.818 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4418.835 ops/s
[info]                  ·gc.alloc.rate:                   1904.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              678248.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     602693.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.827 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   4443.307 ±(99.9%) 88.209 ops/s [Average]
[info]   (min, avg, max) = (4418.835, 4443.307, 4472.361), stdev = 22.907
[info]   CI (99.9%): [4355.098, 4531.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1914.975 ±(99.9%) 38.209 MB/sec [Average]
[info]   (min, avg, max) = (1904.201, 1914.975, 1927.373), stdev = 9.923
[info]   CI (99.9%): [1876.766, 1953.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   678257.814 ±(99.9%) 83.652 B/op [Average]
[info]   (min, avg, max) = (678248.097, 678257.814, 678296.676), stdev = 21.724
[info]   CI (99.9%): [678174.162, 678341.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1877.272 ±(99.9%) 694.151 MB/sec [Average]
[info]   (min, avg, max) = (1669.062, 1877.272, 2024.271), stdev = 180.269
[info]   CI (99.9%): [1183.122, 2571.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   664952.921 ±(99.9%) 247801.898 B/op [Average]
[info]   (min, avg, max) = (587347.903, 664952.921, 716910.202), stdev = 64353.366
[info]   CI (99.9%): [417151.023, 912754.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33.855 ±(99.9%) 58.243 B/op [Average]
[info]   (min, avg, max) = (14.827, 33.855, 51.280), stdev = 15.126
[info]   CI (99.9%): [≈ 0, 92.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 23.50% complete, ETA 00:35:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7859.106 ops/s
[info] # Warmup Iteration   2: 9006.128 ops/s
[info] # Warmup Iteration   3: 8958.605 ops/s
[info] Iteration   1: 9179.488 ops/s
[info]                  ·gc.alloc.rate:                   656.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              112608.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113412.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8989.960 ops/s
[info]                  ·gc.alloc.rate:                   643.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              112608.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115679.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9203.707 ops/s
[info]                  ·gc.alloc.rate:                   658.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              112608.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112990.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 9007.578 ops/s
[info]                  ·gc.alloc.rate:                   636.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              111209.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115693.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9911.748 ops/s
[info]                  ·gc.alloc.rate:                   606.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              96288.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105238.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   9258.496 ±(99.9%) 1454.930 ops/s [Average]
[info]   (min, avg, max) = (8989.960, 9258.496, 9911.748), stdev = 377.841
[info]   CI (99.9%): [7803.566, 10713.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   640.396 ±(99.9%) 81.436 MB/sec [Average]
[info]   (min, avg, max) = (606.384, 640.396, 658.796), stdev = 21.149
[info]   CI (99.9%): [558.961, 721.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   109064.350 ±(99.9%) 27600.640 B/op [Average]
[info]   (min, avg, max) = (96288.044, 109064.350, 112608.051), stdev = 7167.799
[info]   CI (99.9%): [81463.710, 136664.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.698 ±(99.9%) 2.895 MB/sec [Average]
[info]   (min, avg, max) = (661.031, 661.698, 662.750), stdev = 0.752
[info]   CI (99.9%): [658.803, 664.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112602.693 ±(99.9%) 16568.711 B/op [Average]
[info]   (min, avg, max) = (105238.362, 112602.693, 115693.700), stdev = 4302.842
[info]   CI (99.9%): [96033.982, 129171.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 2.923 MB/sec [Average]
[info]   (min, avg, max) = (0.029, 0.394, 1.751), stdev = 0.759
[info]   CI (99.9%): [≈ 0, 3.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.316 ±(99.9%) 501.431 B/op [Average]
[info]   (min, avg, max) = (5.115, 67.316, 300.191), stdev = 130.220
[info]   CI (99.9%): [≈ 0, 568.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 23.96% complete, ETA 00:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7987.080 ops/s
[info] # Warmup Iteration   2: 10995.313 ops/s
[info] # Warmup Iteration   3: 10906.369 ops/s
[info] Iteration   1: 11358.898 ops/s
[info]                  ·gc.alloc.rate:               397.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          55021.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35441.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 10807.883 ops/s
[info]                  ·gc.alloc.rate:                   377.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              55021.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84826.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 317.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11344.007 ops/s
[info]                  ·gc.alloc.rate:                   396.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              55021.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45327.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.663 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 11382.272 ops/s
[info]                  ·gc.alloc.rate:                   397.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              55021.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45221.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.878 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 11370.703 ops/s
[info]                  ·gc.alloc.rate:               397.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          55021.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45269.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   11252.753 ±(99.9%) 959.170 ops/s [Average]
[info]   (min, avg, max) = (10807.883, 11252.753, 11382.272), stdev = 249.094
[info]   CI (99.9%): [10293.582, 12211.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   393.469 ±(99.9%) 33.535 MB/sec [Average]
[info]   (min, avg, max) = (377.908, 393.469, 397.926), stdev = 8.709
[info]   CI (99.9%): [359.934, 427.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   55021.830 ±(99.9%) 0.506 B/op [Average]
[info]   (min, avg, max) = (55021.629, 55021.830, 55021.963), stdev = 0.131
[info]   CI (99.9%): [55021.324, 55022.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.892 ±(99.9%) 485.535 MB/sec [Average]
[info]   (min, avg, max) = (255.861, 363.892, 582.619), stdev = 126.092
[info]   CI (99.9%): [≈ 0, 849.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   51217.441 ±(99.9%) 74181.029 B/op [Average]
[info]   (min, avg, max) = (35441.703, 51217.441, 84826.985), stdev = 19264.578
[info]   CI (99.9%): [≈ 0, 125398.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.452 ±(99.9%) 3.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.178), stdev = 0.965
[info]   CI (99.9%): [≈ 0, 4.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   65.718 ±(99.9%) 541.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.718, 317.046), stdev = 140.542
[info]   CI (99.9%): [≈ 0, 606.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 24.42% complete, ETA 00:34:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11848.651 ops/s
[info] # Warmup Iteration   2: 13113.419 ops/s
[info] # Warmup Iteration   3: 13060.437 ops/s
[info] Iteration   1: 13088.961 ops/s
[info]                  ·gc.alloc.rate:                   387.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              46528.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61511.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13161.948 ops/s
[info]                  ·gc.alloc.rate:                   389.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              46528.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39747.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 13196.872 ops/s
[info]                  ·gc.alloc.rate:                   390.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              46528.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39642.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13244.049 ops/s
[info]                  ·gc.alloc.rate:               391.691 MB/sec
[info]                  ·gc.alloc.rate.norm:          46528.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39419.555 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 12764.672 ops/s
[info]                  ·gc.alloc.rate:               377.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          46528.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40901.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   13091.300 ±(99.9%) 736.068 ops/s [Average]
[info]   (min, avg, max) = (12764.672, 13091.300, 13244.049), stdev = 191.154
[info]   CI (99.9%): [12355.233, 13827.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   387.106 ±(99.9%) 21.577 MB/sec [Average]
[info]   (min, avg, max) = (377.555, 387.106, 391.691), stdev = 5.604
[info]   CI (99.9%): [365.529, 408.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   46528.036 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (46528.033, 46528.036, 46528.046), stdev = 0.006
[info]   CI (99.9%): [46528.015, 46528.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   368.043 ±(99.9%) 309.074 MB/sec [Average]
[info]   (min, avg, max) = (331.849, 368.043, 511.625), stdev = 80.266
[info]   CI (99.9%): [58.969, 677.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44244.521 ±(99.9%) 37233.905 B/op [Average]
[info]   (min, avg, max) = (39419.555, 44244.521, 61511.333), stdev = 9669.527
[info]   CI (99.9%): [7010.616, 81478.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.374 ±(99.9%) 2.989 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.374, 1.761), stdev = 0.776
[info]   CI (99.9%): [≈ 0, 3.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44.692 ±(99.9%) 357.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.692, 210.570), stdev = 92.817
[info]   CI (99.9%): [≈ 0, 402.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 24.88% complete, ETA 00:34:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12075.630 ops/s
[info] # Warmup Iteration   2: 13240.089 ops/s
[info] # Warmup Iteration   3: 13242.100 ops/s
[info] Iteration   1: 13208.776 ops/s
[info]                  ·gc.alloc.rate:               308.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          36792.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30476.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 13119.962 ops/s
[info]                  ·gc.alloc.rate:                   306.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              36792.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61366.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13158.173 ops/s
[info]                  ·gc.alloc.rate:                   307.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              36792.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39759.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13239.254 ops/s
[info]                  ·gc.alloc.rate:      309.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 36792.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 13224.013 ops/s
[info]                  ·gc.alloc.rate:                   309.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              36792.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39558.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   13190.036 ±(99.9%) 191.119 ops/s [Average]
[info]   (min, avg, max) = (13119.962, 13190.036, 13239.254), stdev = 49.633
[info]   CI (99.9%): [12998.917, 13381.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   308.369 ±(99.9%) 4.501 MB/sec [Average]
[info]   (min, avg, max) = (306.721, 308.369, 309.497), stdev = 1.169
[info]   CI (99.9%): [303.868, 312.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   36792.035 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (36792.033, 36792.035, 36792.045), stdev = 0.005
[info]   CI (99.9%): [36792.015, 36792.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   286.450 ±(99.9%) 714.969 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.450, 511.585), stdev = 185.675
[info]   CI (99.9%): [≈ 0, 1001.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   34232.124 ±(99.9%) 85695.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34232.124, 61366.027), stdev = 22254.877
[info]   CI (99.9%): [≈ 0, 119927.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 3.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.768), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   44.658 ±(99.9%) 359.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.658, 211.419), stdev = 93.275
[info]   CI (99.9%): [≈ 0, 403.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 1.949
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 25.35% complete, ETA 00:34:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6392.980 ops/s
[info] # Warmup Iteration   2: 9736.386 ops/s
[info] # Warmup Iteration   3: 9861.747 ops/s
[info] Iteration   1: 9848.661 ops/s
[info]                  ·gc.alloc.rate:                   1619.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              258880.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265736.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9836.850 ops/s
[info]                  ·gc.alloc.rate:                   1618.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              258880.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267339.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9836.561 ops/s
[info]                  ·gc.alloc.rate:                   1618.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              258880.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268506.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9827.651 ops/s
[info]                  ·gc.alloc.rate:                   1616.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              258886.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215955.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.667 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9821.359 ops/s
[info]                  ·gc.alloc.rate:                   1615.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              258896.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270923.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9834.216 ±(99.9%) 39.901 ops/s [Average]
[info]   (min, avg, max) = (9821.359, 9834.216, 9848.661), stdev = 10.362
[info]   CI (99.9%): [9794.315, 9874.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1617.880 ±(99.9%) 6.958 MB/sec [Average]
[info]   (min, avg, max) = (1615.464, 1617.880, 1619.986), stdev = 1.807
[info]   CI (99.9%): [1610.922, 1624.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258884.521 ±(99.9%) 26.989 B/op [Average]
[info]   (min, avg, max) = (258880.044, 258884.521, 258896.044), stdev = 7.009
[info]   CI (99.9%): [258857.531, 258911.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.471 ±(99.9%) 565.152 MB/sec [Average]
[info]   (min, avg, max) = (1348.547, 1610.471, 1690.516), stdev = 146.768
[info]   CI (99.9%): [1045.319, 2175.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   257692.382 ±(99.9%) 90136.448 B/op [Average]
[info]   (min, avg, max) = (215955.454, 257692.382, 270923.943), stdev = 23408.149
[info]   CI (99.9%): [167555.934, 347828.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.321 ±(99.9%) 11.449 B/op [Average]
[info]   (min, avg, max) = (13.305, 15.321, 19.966), stdev = 2.973
[info]   CI (99.9%): [3.872, 26.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 25.81% complete, ETA 00:34:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5471.600 ops/s
[info] # Warmup Iteration   2: 9763.578 ops/s
[info] # Warmup Iteration   3: 10040.109 ops/s
[info] Iteration   1: 10014.106 ops/s
[info]                  ·gc.alloc.rate:                   1540.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258479.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.086 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9954.923 ops/s
[info]                  ·gc.alloc.rate:                   1532.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209462.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.746 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9835.168 ops/s
[info]                  ·gc.alloc.rate:                   1513.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266860.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.993 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9978.129 ops/s
[info]                  ·gc.alloc.rate:                   1535.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              242115.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211606.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10076.586 ops/s
[info]                  ·gc.alloc.rate:                   1550.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              242136.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262976.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.257 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9971.782 ±(99.9%) 343.134 ops/s [Average]
[info]   (min, avg, max) = (9835.168, 9971.782, 10076.586), stdev = 89.111
[info]   CI (99.9%): [9628.648, 10314.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1534.294 ±(99.9%) 53.005 MB/sec [Average]
[info]   (min, avg, max) = (1513.036, 1534.294, 1550.351), stdev = 13.765
[info]   CI (99.9%): [1481.289, 1587.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242112.814 ±(99.9%) 53.768 B/op [Average]
[info]   (min, avg, max) = (242104.043, 242112.814, 242136.046), stdev = 13.963
[info]   CI (99.9%): [242059.046, 242166.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1532.768 ±(99.9%) 702.398 MB/sec [Average]
[info]   (min, avg, max) = (1325.574, 1532.768, 1683.788), stdev = 182.411
[info]   CI (99.9%): [830.370, 2235.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   241877.184 ±(99.9%) 110802.916 B/op [Average]
[info]   (min, avg, max) = (209462.455, 241877.184, 266860.833), stdev = 28775.165
[info]   CI (99.9%): [131074.269, 352680.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.473 ±(99.9%) 24.215 B/op [Average]
[info]   (min, avg, max) = (3.283, 12.473, 19.746), stdev = 6.289
[info]   CI (99.9%): [≈ 0, 36.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 26.27% complete, ETA 00:33:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99871.317 ops/s
[info] # Warmup Iteration   2: 102883.751 ops/s
[info] # Warmup Iteration   3: 103543.620 ops/s
[info] Iteration   1: 102229.824 ops/s
[info]                  ·gc.alloc.rate:                   266.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3938.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 103410.296 ops/s
[info]                  ·gc.alloc.rate:               269.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3893.265 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 102603.071 ops/s
[info]                  ·gc.alloc.rate:                   267.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3923.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 102415.160 ops/s
[info]                  ·gc.alloc.rate:                   266.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5123.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 102869.819 ops/s
[info]                  ·gc.alloc.rate:      267.724 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   102705.634 ±(99.9%) 1769.615 ops/s [Average]
[info]   (min, avg, max) = (102229.824, 102705.634, 103410.296), stdev = 459.563
[info]   CI (99.9%): [100936.019, 104475.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   267.334 ±(99.9%) 4.486 MB/sec [Average]
[info]   (min, avg, max) = (266.112, 267.334, 269.131), stdev = 1.165
[info]   CI (99.9%): [262.849, 271.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   220.207 ±(99.9%) 491.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.207, 333.521), stdev = 127.613
[info]   CI (99.9%): [≈ 0, 711.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3375.753 ±(99.9%) 7539.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3375.753, 5123.419), stdev = 1957.974
[info]   CI (99.9%): [≈ 0, 10915.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.323 ±(99.9%) 2.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.323, 1.551), stdev = 0.687
[info]   CI (99.9%): [≈ 0, 2.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.958 ±(99.9%) 40.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.958, 23.833), stdev = 10.556
[info]   CI (99.9%): [≈ 0, 45.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 26.73% complete, ETA 00:33:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2432.529 ops/s
[info] # Warmup Iteration   2: 5101.620 ops/s
[info] # Warmup Iteration   3: 5174.126 ops/s
[info] Iteration   1: 5216.154 ops/s
[info]                  ·gc.alloc.rate:                   1387.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495646.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.124 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5285.092 ops/s
[info]                  ·gc.alloc.rate:                   1405.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     393687.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.989 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5154.845 ops/s
[info]                  ·gc.alloc.rate:                   1371.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406129.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.066 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5285.467 ops/s
[info]                  ·gc.alloc.rate:                   1406.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     398248.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5240.945 ops/s
[info]                  ·gc.alloc.rate:                   1394.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403267.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5236.500 ±(99.9%) 209.676 ops/s [Average]
[info]   (min, avg, max) = (5154.845, 5236.500, 5285.467), stdev = 54.452
[info]   CI (99.9%): [5026.824, 5446.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1393.088 ±(99.9%) 55.948 MB/sec [Average]
[info]   (min, avg, max) = (1371.221, 1393.088, 1406.020), stdev = 14.530
[info]   CI (99.9%): [1337.140, 1449.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418664.085 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (418664.082, 418664.085, 418664.089), stdev = 0.003
[info]   CI (99.9%): [418664.072, 418664.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1395.159 ±(99.9%) 533.664 MB/sec [Average]
[info]   (min, avg, max) = (1322.073, 1395.159, 1642.664), stdev = 138.591
[info]   CI (99.9%): [861.495, 1928.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   419395.998 ±(99.9%) 165156.578 B/op [Average]
[info]   (min, avg, max) = (393687.036, 419395.998, 495646.620), stdev = 42890.639
[info]   CI (99.9%): [254239.420, 584552.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.276 ±(99.9%) 36.291 B/op [Average]
[info]   (min, avg, max) = (6.198, 21.276, 30.989), stdev = 9.425
[info]   CI (99.9%): [≈ 0, 57.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 27.19% complete, ETA 00:33:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17548.167 ops/s
[info] # Warmup Iteration   2: 24292.228 ops/s
[info] # Warmup Iteration   3: 24344.356 ops/s
[info] Iteration   1: 24468.684 ops/s
[info]                  ·gc.alloc.rate:                   1801.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107034.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.373 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24305.471 ops/s
[info]                  ·gc.alloc.rate:                   1789.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              115881.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130058.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.740 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 24551.315 ops/s
[info]                  ·gc.alloc.rate:                   1806.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107872.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.335 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24149.325 ops/s
[info]                  ·gc.alloc.rate:                   1778.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110097.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.713 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24426.177 ops/s
[info]                  ·gc.alloc.rate:                   1797.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131002.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.024 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24380.194 ±(99.9%) 603.064 ops/s [Average]
[info]   (min, avg, max) = (24149.325, 24380.194, 24551.315), stdev = 156.614
[info]   CI (99.9%): [23777.130, 24983.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1794.901 ±(99.9%) 43.486 MB/sec [Average]
[info]   (min, avg, max) = (1778.164, 1794.901, 1806.966), stdev = 11.293
[info]   CI (99.9%): [1751.414, 1838.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115854.772 ±(99.9%) 121.527 B/op [Average]
[info]   (min, avg, max) = (115832.018, 115854.772, 115896.018), stdev = 31.560
[info]   CI (99.9%): [115733.245, 115976.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1815.783 ±(99.9%) 722.757 MB/sec [Average]
[info]   (min, avg, max) = (1664.154, 1815.783, 2033.175), stdev = 187.698
[info]   CI (99.9%): [1093.026, 2538.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   117213.006 ±(99.9%) 47027.650 B/op [Average]
[info]   (min, avg, max) = (107034.278, 117213.006, 131002.249), stdev = 12212.931
[info]   CI (99.9%): [70185.356, 164240.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.837 ±(99.9%) 12.423 B/op [Average]
[info]   (min, avg, max) = (1.335, 4.837, 9.373), stdev = 3.226
[info]   CI (99.9%): [≈ 0, 17.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 27.65% complete, ETA 00:33:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249645.738 ops/s
[info] # Warmup Iteration   2: 262733.419 ops/s
[info] # Warmup Iteration   3: 259536.667 ops/s
[info] Iteration   1: 266253.350 ops/s
[info]                  ·gc.alloc.rate:                   587.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3929.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 265733.151 ops/s
[info]                  ·gc.alloc.rate:                   586.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3929.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 265308.952 ops/s
[info]                  ·gc.alloc.rate:               585.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1967.925 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 265271.646 ops/s
[info]                  ·gc.alloc.rate:                   585.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3940.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 260125.232 ops/s
[info]                  ·gc.alloc.rate:                   573.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4024.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   264538.466 ±(99.9%) 9621.975 ops/s [Average]
[info]   (min, avg, max) = (260125.232, 264538.466, 266253.350), stdev = 2498.796
[info]   CI (99.9%): [254916.491, 274160.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   583.576 ±(99.9%) 21.183 MB/sec [Average]
[info]   (min, avg, max) = (573.858, 583.576, 587.336), stdev = 5.501
[info]   CI (99.9%): [562.393, 604.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.002, 3472.002, 3472.002), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.858 ±(99.9%) 572.855 MB/sec [Average]
[info]   (min, avg, max) = (331.735, 597.858, 665.174), stdev = 148.769
[info]   CI (99.9%): [25.003, 1170.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3558.428 ±(99.9%) 3427.097 B/op [Average]
[info]   (min, avg, max) = (1967.925, 3558.428, 4024.489), stdev = 890.006
[info]   CI (99.9%): [131.330, 6985.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 2.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.771), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.342 ±(99.9%) 17.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.342, 10.471), stdev = 4.550
[info]   CI (99.9%): [≈ 0, 19.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 28.11% complete, ETA 00:33:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261283.068 ops/s
[info] # Warmup Iteration   2: 274464.201 ops/s
[info] # Warmup Iteration   3: 291594.082 ops/s
[info] Iteration   1: 291419.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 289581.958 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 291495.055 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 291444.402 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 291516.749 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   291091.511 ±(99.9%) 3252.861 ops/s [Average]
[info]   (min, avg, max) = (289581.958, 291091.511, 291516.749), stdev = 844.758
[info]   CI (99.9%): [287838.650, 294344.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 28.57% complete, ETA 00:32:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19474.542 ops/s
[info] # Warmup Iteration   2: 28105.204 ops/s
[info] # Warmup Iteration   3: 28516.653 ops/s
[info] Iteration   1: 28600.271 ops/s
[info]                  ·gc.alloc.rate:                   1875.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109531.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.728 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 28509.582 ops/s
[info]                  ·gc.alloc.rate:                   1869.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92229.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.597 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28640.599 ops/s
[info]                  ·gc.alloc.rate:                   1878.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110802.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.576 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 28693.443 ops/s
[info]                  ·gc.alloc.rate:                   1881.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111186.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.851 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 28569.671 ops/s
[info]                  ·gc.alloc.rate:                   1873.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93320.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.734 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28602.713 ±(99.9%) 268.431 ops/s [Average]
[info]   (min, avg, max) = (28509.582, 28602.713, 28693.443), stdev = 69.711
[info]   CI (99.9%): [28334.282, 28871.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1875.651 ±(99.9%) 17.979 MB/sec [Average]
[info]   (min, avg, max) = (1869.442, 1875.651, 1881.558), stdev = 4.669
[info]   CI (99.9%): [1857.672, 1893.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103200.017 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (103200.015, 103200.017, 103200.022), stdev = 0.003
[info]   CI (99.9%): [103200.005, 103200.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1879.844 ±(99.9%) 696.887 MB/sec [Average]
[info]   (min, avg, max) = (1670.711, 1879.844, 2027.160), stdev = 180.979
[info]   CI (99.9%): [1182.958, 2576.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   103413.818 ±(99.9%) 37501.521 B/op [Average]
[info]   (min, avg, max) = (92229.382, 103413.818, 111186.033), stdev = 9739.026
[info]   CI (99.9%): [65912.298, 140915.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.497 ±(99.9%) 3.654 B/op [Average]
[info]   (min, avg, max) = (4.576, 5.497, 6.851), stdev = 0.949
[info]   CI (99.9%): [1.843, 9.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.03% complete, ETA 00:32:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13298.492 ops/s
[info] # Warmup Iteration   2: 16109.321 ops/s
[info] # Warmup Iteration   3: 16142.778 ops/s
[info] Iteration   1: 16233.523 ops/s
[info]                  ·gc.alloc.rate:                   2138.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              207368.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2343.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227172.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.073 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16185.718 ops/s
[info]                  ·gc.alloc.rate:                   2132.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196385.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.241 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16274.574 ops/s
[info]                  ·gc.alloc.rate:                   2144.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196149.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 16061.899 ops/s
[info]                  ·gc.alloc.rate:                   2116.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              207383.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199284.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.239 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16143.781 ops/s
[info]                  ·gc.alloc.rate:                   2127.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231768.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.176 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   16179.899 ±(99.9%) 316.957 ops/s [Average]
[info]   (min, avg, max) = (16061.899, 16179.899, 16274.574), stdev = 82.313
[info]   CI (99.9%): [15862.942, 16496.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2131.999 ±(99.9%) 41.411 MB/sec [Average]
[info]   (min, avg, max) = (2116.590, 2131.999, 2144.435), stdev = 10.754
[info]   CI (99.9%): [2090.588, 2173.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207380.770 ±(99.9%) 26.711 B/op [Average]
[info]   (min, avg, max) = (207368.376, 207380.770, 207384.105), stdev = 6.937
[info]   CI (99.9%): [207354.060, 207407.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2160.487 ±(99.9%) 704.091 MB/sec [Average]
[info]   (min, avg, max) = (2019.700, 2160.487, 2377.394), stdev = 182.850
[info]   CI (99.9%): [1456.397, 2864.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   210151.871 ±(99.9%) 68360.391 B/op [Average]
[info]   (min, avg, max) = (196149.031, 210151.871, 231768.610), stdev = 17752.976
[info]   CI (99.9%): [141791.480, 278512.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.208), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.754 ±(99.9%) 20.972 B/op [Average]
[info]   (min, avg, max) = (6.039, 11.754, 20.241), stdev = 5.446
[info]   CI (99.9%): [≈ 0, 32.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 29.49% complete, ETA 00:32:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27055.186 ops/s
[info] # Warmup Iteration   2: 38651.850 ops/s
[info] # Warmup Iteration   3: 39233.172 ops/s
[info] Iteration   1: 38843.687 ops/s
[info]                  ·gc.alloc.rate:               279.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          11309.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10364.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 39786.339 ops/s
[info]                  ·gc.alloc.rate:               285.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10118.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 39723.998 ops/s
[info]                  ·gc.alloc.rate:                   285.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10134.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.238 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 39711.439 ops/s
[info]                  ·gc.alloc.rate:                   285.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12949.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.700 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 39799.123 ops/s
[info]                  ·gc.alloc.rate:               285.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12921.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   39572.917 ±(99.9%) 1576.541 ops/s [Average]
[info]   (min, avg, max) = (38843.687, 39572.917, 39799.123), stdev = 409.423
[info]   CI (99.9%): [37996.376, 41149.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   284.280 ±(99.9%) 11.120 MB/sec [Average]
[info]   (min, avg, max) = (279.142, 284.280, 285.921), stdev = 2.888
[info]   CI (99.9%): [273.160, 295.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   11305.181 ±(99.9%) 10.071 B/op [Average]
[info]   (min, avg, max) = (11304.011, 11305.181, 11309.859), stdev = 2.615
[info]   CI (99.9%): [11295.110, 11315.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   284.201 ±(99.9%) 149.680 MB/sec [Average]
[info]   (min, avg, max) = (255.793, 284.201, 326.825), stdev = 38.871
[info]   CI (99.9%): [134.521, 433.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11297.657 ±(99.9%) 5768.287 B/op [Average]
[info]   (min, avg, max) = (10118.948, 11297.657, 12949.131), stdev = 1498.006
[info]   CI (99.9%): [5529.371, 17065.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.444 ±(99.9%) 3.754 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 2.188), stdev = 0.975
[info]   CI (99.9%): [≈ 0, 4.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.588 ±(99.9%) 148.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.588, 86.700), stdev = 38.639
[info]   CI (99.9%): [≈ 0, 166.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 29.95% complete, ETA 00:32:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77811.667 ops/s
[info] # Warmup Iteration   2: 82344.070 ops/s
[info] # Warmup Iteration   3: 81098.476 ops/s
[info] Iteration   1: 83070.913 ops/s
[info]                  ·gc.alloc.rate:               434.942 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4846.338 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 83315.682 ops/s
[info]                  ·gc.alloc.rate:                   436.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6298.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 83009.826 ops/s
[info]                  ·gc.alloc.rate:                   434.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12636.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 82484.791 ops/s
[info]                  ·gc.alloc.rate:               431.852 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6355.160 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 82976.306 ops/s
[info]                  ·gc.alloc.rate:               434.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6317.484 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   82971.504 ±(99.9%) 1165.928 ops/s [Average]
[info]   (min, avg, max) = (82484.791, 82971.504, 83315.682), stdev = 302.788
[info]   CI (99.9%): [81805.576, 84137.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   434.426 ±(99.9%) 6.217 MB/sec [Average]
[info]   (min, avg, max) = (431.852, 434.426, 436.297), stdev = 1.614
[info]   CI (99.9%): [428.209, 440.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8240.005, 8240.005, 8240.006), stdev = 0.001
[info]   CI (99.9%): [8240.005, 8240.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   384.381 ±(99.9%) 620.792 MB/sec [Average]
[info]   (min, avg, max) = (255.810, 384.381, 666.475), stdev = 161.218
[info]   CI (99.9%): [≈ 0, 1005.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7290.664 ±(99.9%) 11767.736 B/op [Average]
[info]   (min, avg, max) = (4846.338, 7290.664, 12636.261), stdev = 3056.044
[info]   CI (99.9%): [≈ 0, 19058.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.336 ±(99.9%) 2.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.336, 1.595), stdev = 0.705
[info]   CI (99.9%): [≈ 0, 3.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.340 ±(99.9%) 51.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.340, 30.119), stdev = 13.311
[info]   CI (99.9%): [≈ 0, 57.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 30.41% complete, ETA 00:32:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5059.175 ops/s
[info] # Warmup Iteration   2: 8499.561 ops/s
[info] # Warmup Iteration   3: 8768.172 ops/s
[info] Iteration   1: 8711.348 ops/s
[info]                  ·gc.alloc.rate:                   3079.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     545589.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.565 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8686.487 ops/s
[info]                  ·gc.alloc.rate:                   3071.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3041.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551021.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.173 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8693.081 ops/s
[info]                  ·gc.alloc.rate:                   3073.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3053.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552869.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.537 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 8710.685 ops/s
[info]                  ·gc.alloc.rate:                   3080.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552388.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.804 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 8666.538 ops/s
[info]                  ·gc.alloc.rate:                   3064.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3062.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     556160.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.900 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   8693.628 ±(99.9%) 71.784 ops/s [Average]
[info]   (min, avg, max) = (8666.538, 8693.628, 8711.348), stdev = 18.642
[info]   CI (99.9%): [8621.844, 8765.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3073.831 ±(99.9%) 25.397 MB/sec [Average]
[info]   (min, avg, max) = (3064.227, 3073.831, 3080.022), stdev = 6.596
[info]   CI (99.9%): [3048.434, 3099.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   556456.106 ±(99.9%) 0.480 B/op [Average]
[info]   (min, avg, max) = (556456.050, 556456.106, 556456.329), stdev = 0.125
[info]   CI (99.9%): [556455.626, 556456.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3047.011 ±(99.9%) 65.926 MB/sec [Average]
[info]   (min, avg, max) = (3019.787, 3047.011, 3062.596), stdev = 17.121
[info]   CI (99.9%): [2981.085, 3112.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   551605.743 ±(99.9%) 14850.141 B/op [Average]
[info]   (min, avg, max) = (545589.268, 551605.743, 556160.162), stdev = 3856.534
[info]   CI (99.9%): [536755.603, 566455.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.596 ±(99.9%) 31.473 B/op [Average]
[info]   (min, avg, max) = (7.537, 19.596, 30.173), stdev = 8.173
[info]   CI (99.9%): [≈ 0, 51.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 13.000), stdev = 2.074
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 30.88% complete, ETA 00:31:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19252.988 ops/s
[info] # Warmup Iteration   2: 22195.300 ops/s
[info] # Warmup Iteration   3: 22759.939 ops/s
[info] Iteration   1: 27127.544 ops/s
[info]                  ·gc.alloc.rate:                   1695.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              98352.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96266.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.831 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25487.505 ops/s
[info]                  ·gc.alloc.rate:                   1592.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              98333.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103060.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.785 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23154.682 ops/s
[info]                  ·gc.alloc.rate:                   1446.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91188.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 23059.365 ops/s
[info]                  ·gc.alloc.rate:                   1440.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114869.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.655 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23016.654 ops/s
[info]                  ·gc.alloc.rate:                   1437.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92422.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.669 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   24369.150 ±(99.9%) 7172.741 ops/s [Average]
[info]   (min, avg, max) = (23016.654, 24369.150, 27127.544), stdev = 1862.738
[info]   CI (99.9%): [17196.409, 31541.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1522.446 ±(99.9%) 449.977 MB/sec [Average]
[info]   (min, avg, max) = (1437.415, 1522.446, 1695.585), stdev = 116.858
[info]   CI (99.9%): [1072.468, 1972.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98309.971 ±(99.9%) 118.380 B/op [Average]
[info]   (min, avg, max) = (98288.019, 98309.971, 98352.017), stdev = 30.743
[info]   CI (99.9%): [98191.591, 98428.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1541.125 ±(99.9%) 684.643 MB/sec [Average]
[info]   (min, avg, max) = (1341.612, 1541.125, 1683.757), stdev = 177.800
[info]   CI (99.9%): [856.482, 2225.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   99561.306 ±(99.9%) 37457.173 B/op [Average]
[info]   (min, avg, max) = (91188.396, 99561.306, 114869.152), stdev = 9727.509
[info]   CI (99.9%): [62104.133, 137018.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.106 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.106, 0.158), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.837 ±(99.9%) 8.780 B/op [Average]
[info]   (min, avg, max) = (4.245, 6.837, 9.785), stdev = 2.280
[info]   CI (99.9%): [≈ 0, 15.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.34% complete, ETA 00:31:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71492.345 ops/s
[info] # Warmup Iteration   2: 99034.335 ops/s
[info] # Warmup Iteration   3: 99817.883 ops/s
[info] Iteration   1: 100449.537 ops/s
[info]                  ·gc.alloc.rate:                   810.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10249.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 98156.024 ops/s
[info]                  ·gc.alloc.rate:                   791.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15749.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 100562.739 ops/s
[info]                  ·gc.alloc.rate:                   810.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10279.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 98552.978 ops/s
[info]                  ·gc.alloc.rate:               795.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          12692.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10515.973 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 100334.067 ops/s
[info]                  ·gc.alloc.rate:                   809.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15549.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.633 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   99611.069 ±(99.9%) 4460.827 ops/s [Average]
[info]   (min, avg, max) = (98156.024, 99611.069, 100562.739), stdev = 1158.463
[info]   CI (99.9%): [95150.242, 104071.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   803.376 ±(99.9%) 35.645 MB/sec [Average]
[info]   (min, avg, max) = (791.600, 803.376, 810.972), stdev = 9.257
[info]   CI (99.9%): [767.731, 839.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12692.328 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (12692.320, 12692.328, 12692.343), stdev = 0.010
[info]   CI (99.9%): [12692.289, 12692.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.647 ±(99.9%) 696.603 MB/sec [Average]
[info]   (min, avg, max) = (654.123, 788.647, 991.302), stdev = 180.906
[info]   CI (99.9%): [92.044, 1485.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12468.608 ±(99.9%) 11190.749 B/op [Average]
[info]   (min, avg, max) = (10249.357, 12468.608, 15749.308), stdev = 2906.202
[info]   CI (99.9%): [1277.860, 23659.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.117 ±(99.9%) 2.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.117, 1.669), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 4.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 31.80% complete, ETA 00:31:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105314.802 ops/s
[info] # Warmup Iteration   2: 112380.154 ops/s
[info] # Warmup Iteration   3: 113167.782 ops/s
[info] Iteration   1: 111545.994 ops/s
[info]                  ·gc.alloc.rate:                   475.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8299.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 113076.582 ops/s
[info]                  ·gc.alloc.rate:                   481.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4626.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 113257.432 ops/s
[info]                  ·gc.alloc.rate:                   482.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9219.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.868 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 114015.323 ops/s
[info]                  ·gc.alloc.rate:               485.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4579.256 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 112872.819 ops/s
[info]                  ·gc.alloc.rate:                   480.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9255.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   112953.630 ±(99.9%) 3456.248 ops/s [Average]
[info]   (min, avg, max) = (111545.994, 112953.630, 114015.323), stdev = 897.577
[info]   CI (99.9%): [109497.382, 116409.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   481.183 ±(99.9%) 14.801 MB/sec [Average]
[info]   (min, avg, max) = (475.129, 481.183, 485.660), stdev = 3.844
[info]   CI (99.9%): [466.382, 495.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6704.004, 6704.004, 6704.004), stdev = 0.001
[info]   CI (99.9%): [6704.003, 6704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.994 ±(99.9%) 657.341 MB/sec [Average]
[info]   (min, avg, max) = (331.736, 515.994, 663.891), stdev = 170.709
[info]   CI (99.9%): [≈ 0, 1173.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7196.230 ±(99.9%) 9234.563 B/op [Average]
[info]   (min, avg, max) = (4579.256, 7196.230, 9255.966), stdev = 2398.187
[info]   CI (99.9%): [≈ 0, 16430.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.403 ±(99.9%) 3.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 1.849), stdev = 0.809
[info]   CI (99.9%): [≈ 0, 3.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.681 ±(99.9%) 43.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.681, 26.087), stdev = 11.417
[info]   CI (99.9%): [≈ 0, 49.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 32.26% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131050.144 ops/s
[info] # Warmup Iteration   2: 140212.444 ops/s
[info] # Warmup Iteration   3: 140702.365 ops/s
[info] Iteration   1: 140518.471 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 140071.227 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 141005.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 140754.706 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 141023.488 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   140674.643 ±(99.9%) 1523.263 ops/s [Average]
[info]   (min, avg, max) = (140071.227, 140674.643, 141023.488), stdev = 395.587
[info]   CI (99.9%): [139151.380, 142197.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.72% complete, ETA 00:31:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2613.495 ops/s
[info] # Warmup Iteration   2: 3542.558 ops/s
[info] # Warmup Iteration   3: 3595.710 ops/s
[info] Iteration   1: 3651.288 ops/s
[info]                  ·gc.alloc.rate:                   1596.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              688195.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712210.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.945 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3643.100 ops/s
[info]                  ·gc.alloc.rate:                   1593.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              688197.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718665.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.985 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3677.903 ops/s
[info]                  ·gc.alloc.rate:                   1608.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              688196.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     572598.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.907 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3641.976 ops/s
[info]                  ·gc.alloc.rate:                   1592.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              688195.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     726490.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.995 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3641.141 ops/s
[info]                  ·gc.alloc.rate:                   1592.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              688196.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     729281.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.984 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   3651.082 ±(99.9%) 59.805 ops/s [Average]
[info]   (min, avg, max) = (3641.141, 3651.082, 3677.903), stdev = 15.531
[info]   CI (99.9%): [3591.277, 3710.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1596.513 ±(99.9%) 26.180 MB/sec [Average]
[info]   (min, avg, max) = (1592.162, 1596.513, 1608.251), stdev = 6.799
[info]   CI (99.9%): [1570.333, 1622.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   688196.251 ±(99.9%) 2.601 B/op [Average]
[info]   (min, avg, max) = (688195.430, 688196.251, 688197.254), stdev = 0.675
[info]   CI (99.9%): [688193.651, 688198.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1604.467 ±(99.9%) 575.836 MB/sec [Average]
[info]   (min, avg, max) = (1338.109, 1604.467, 1687.214), stdev = 149.543
[info]   CI (99.9%): [1028.630, 2180.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   691849.384 ±(99.9%) 257991.011 B/op [Average]
[info]   (min, avg, max) = (572598.310, 691849.384, 729281.441), stdev = 66999.446
[info]   CI (99.9%): [433858.373, 949840.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.563 ±(99.9%) 71.913 B/op [Average]
[info]   (min, avg, max) = (8.907, 21.563, 53.984), stdev = 18.676
[info]   CI (99.9%): [≈ 0, 93.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 33.18% complete, ETA 00:30:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18660.260 ops/s
[info] # Warmup Iteration   2: 23827.877 ops/s
[info] # Warmup Iteration   3: 24486.977 ops/s
[info] Iteration   1: 25058.367 ops/s
[info]                  ·gc.alloc.rate:                   1403.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104284.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.922 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24801.420 ops/s
[info]                  ·gc.alloc.rate:                   1389.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              88139.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84626.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.568 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24504.147 ops/s
[info]                  ·gc.alloc.rate:                   1372.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86058.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.011 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24867.311 ops/s
[info]                  ·gc.alloc.rate:                   1392.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85097.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.635 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24672.921 ops/s
[info]                  ·gc.alloc.rate:                   1381.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86067.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.295 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24780.833 ±(99.9%) 801.100 ops/s [Average]
[info]   (min, avg, max) = (24504.147, 24780.833, 25058.367), stdev = 208.043
[info]   CI (99.9%): [23979.733, 25581.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1387.939 ±(99.9%) 45.993 MB/sec [Average]
[info]   (min, avg, max) = (1372.128, 1387.939, 1403.979), stdev = 11.944
[info]   CI (99.9%): [1341.946, 1433.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   88133.480 ±(99.9%) 29.495 B/op [Average]
[info]   (min, avg, max) = (88128.017, 88133.480, 88144.017), stdev = 7.660
[info]   CI (99.9%): [88103.984, 88162.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1405.801 ±(99.9%) 549.902 MB/sec [Average]
[info]   (min, avg, max) = (1334.185, 1405.801, 1661.067), stdev = 142.808
[info]   CI (99.9%): [855.898, 1955.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89227.007 ±(99.9%) 32500.873 B/op [Average]
[info]   (min, avg, max) = (84626.669, 89227.007, 104284.402), stdev = 8440.374
[info]   CI (99.9%): [56726.134, 121727.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.167), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.086 ±(99.9%) 13.787 B/op [Average]
[info]   (min, avg, max) = (2.635, 6.086, 10.568), stdev = 3.581
[info]   CI (99.9%): [≈ 0, 19.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 33.64% complete, ETA 00:30:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17827.389 ops/s
[info] # Warmup Iteration   2: 27455.130 ops/s
[info] # Warmup Iteration   3: 28157.323 ops/s
[info] Iteration   1: 28208.994 ops/s
[info]                  ·gc.alloc.rate:                   1306.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              72912.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73162.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.323 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28332.877 ops/s
[info]                  ·gc.alloc.rate:                   1312.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              72889.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73267.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27980.047 ops/s
[info]                  ·gc.alloc.rate:                   1295.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74641.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28435.242 ops/s
[info]                  ·gc.alloc.rate:                   1316.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73887.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28359.851 ops/s
[info]                  ·gc.alloc.rate:                   1313.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74454.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   28263.402 ±(99.9%) 685.881 ops/s [Average]
[info]   (min, avg, max) = (27980.047, 28263.402, 28435.242), stdev = 178.121
[info]   CI (99.9%): [27577.521, 28949.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1308.955 ±(99.9%) 31.459 MB/sec [Average]
[info]   (min, avg, max) = (1295.795, 1308.955, 1316.752), stdev = 8.170
[info]   CI (99.9%): [1277.496, 1340.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72888.395 ±(99.9%) 53.466 B/op [Average]
[info]   (min, avg, max) = (72880.015, 72888.395, 72912.022), stdev = 13.885
[info]   CI (99.9%): [72834.928, 72941.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1326.787 ±(99.9%) 46.600 MB/sec [Average]
[info]   (min, avg, max) = (1311.317, 1326.787, 1341.581), stdev = 12.102
[info]   CI (99.9%): [1280.187, 1373.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   73882.514 ±(99.9%) 2583.442 B/op [Average]
[info]   (min, avg, max) = (73162.083, 73882.514, 74641.345), stdev = 670.912
[info]   CI (99.9%): [71299.071, 76465.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.933 ±(99.9%) 10.232 B/op [Average]
[info]   (min, avg, max) = (1.171, 3.933, 8.095), stdev = 2.657
[info]   CI (99.9%): [≈ 0, 14.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 34.10% complete, ETA 00:30:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241966.608 ops/s
[info] # Warmup Iteration   2: 248826.308 ops/s
[info] # Warmup Iteration   3: 251615.023 ops/s
[info] Iteration   1: 251207.613 ops/s
[info]                  ·gc.alloc.rate:                   653.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4177.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 251106.016 ops/s
[info]                  ·gc.alloc.rate:                   653.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4175.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 244243.501 ops/s
[info]                  ·gc.alloc.rate:                   635.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4292.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 250146.984 ops/s
[info]                  ·gc.alloc.rate:                   651.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4195.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 250968.977 ops/s
[info]                  ·gc.alloc.rate:               653.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4187.954 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   249534.618 ±(99.9%) 11503.135 ops/s [Average]
[info]   (min, avg, max) = (244243.501, 249534.618, 251207.613), stdev = 2987.328
[info]   CI (99.9%): [238031.483, 261037.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   649.571 ±(99.9%) 30.253 MB/sec [Average]
[info]   (min, avg, max) = (635.639, 649.571, 653.818), stdev = 7.856
[info]   CI (99.9%): [619.318, 679.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.898 ±(99.9%) 2.959 MB/sec [Average]
[info]   (min, avg, max) = (666.157, 666.898, 668.103), stdev = 0.769
[info]   CI (99.9%): [663.939, 669.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4205.739 ±(99.9%) 189.671 B/op [Average]
[info]   (min, avg, max) = (4175.215, 4205.739, 4292.657), stdev = 49.257
[info]   CI (99.9%): [4016.068, 4395.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.367 ±(99.9%) 1.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 0.783), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 34.56% complete, ETA 00:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9102.025 ops/s
[info] # Warmup Iteration   2: 15596.535 ops/s
[info] # Warmup Iteration   3: 15864.362 ops/s
[info] Iteration   1: 15892.735 ops/s
[info]                  ·gc.alloc.rate:                   1625.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163438.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.123 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15813.256 ops/s
[info]                  ·gc.alloc.rate:                   1617.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              160985.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165329.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.356 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15702.894 ops/s
[info]                  ·gc.alloc.rate:                   1606.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134059.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.173 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15832.535 ops/s
[info]                  ·gc.alloc.rate:                   1619.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167037.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15786.432 ops/s
[info]                  ·gc.alloc.rate:                   1614.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168187.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.452 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15805.571 ±(99.9%) 267.422 ops/s [Average]
[info]   (min, avg, max) = (15702.894, 15805.571, 15892.735), stdev = 69.449
[info]   CI (99.9%): [15538.148, 16072.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1616.773 ±(99.9%) 27.265 MB/sec [Average]
[info]   (min, avg, max) = (1606.282, 1616.773, 1625.573), stdev = 7.081
[info]   CI (99.9%): [1589.508, 1644.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160984.299 ±(99.9%) 2.312 B/op [Average]
[info]   (min, avg, max) = (160984.027, 160984.299, 160985.373), stdev = 0.600
[info]   CI (99.9%): [160981.987, 160986.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.359 ±(99.9%) 574.755 MB/sec [Average]
[info]   (min, avg, max) = (1337.634, 1603.359, 1686.929), stdev = 149.262
[info]   CI (99.9%): [1028.604, 2178.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   159610.367 ±(99.9%) 55432.100 B/op [Average]
[info]   (min, avg, max) = (134059.634, 159610.367, 168187.898), stdev = 14395.540
[info]   CI (99.9%): [104178.267, 215042.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.048 ±(99.9%) 15.574 B/op [Average]
[info]   (min, avg, max) = (4.123, 7.048, 12.452), stdev = 4.045
[info]   CI (99.9%): [≈ 0, 22.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 35.02% complete, ETA 00:29:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32400.502 ops/s
[info] # Warmup Iteration   2: 41621.389 ops/s
[info] # Warmup Iteration   3: 41951.548 ops/s
[info] Iteration   1: 43123.713 ops/s
[info]                  ·gc.alloc.rate:                   1371.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48332.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.519 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42960.694 ops/s
[info]                  ·gc.alloc.rate:                   1366.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48735.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.576 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42865.975 ops/s
[info]                  ·gc.alloc.rate:                   1362.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61364.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.293 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 40881.748 ops/s
[info]                  ·gc.alloc.rate:                   1300.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38748.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42584.460 ops/s
[info]                  ·gc.alloc.rate:                   1353.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49780.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   42483.318 ±(99.9%) 3529.003 ops/s [Average]
[info]   (min, avg, max) = (40881.748, 42483.318, 43123.713), stdev = 916.471
[info]   CI (99.9%): [38954.315, 46012.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1351.037 ±(99.9%) 111.748 MB/sec [Average]
[info]   (min, avg, max) = (1300.411, 1351.037, 1371.644), stdev = 29.021
[info]   CI (99.9%): [1239.288, 1462.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (50040.010, 50040.010, 50040.011), stdev = 0.001
[info]   CI (99.9%): [50040.008, 50040.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1336.149 ±(99.9%) 905.099 MB/sec [Average]
[info]   (min, avg, max) = (1006.981, 1336.149, 1671.365), stdev = 235.051
[info]   CI (99.9%): [431.050, 2241.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49392.321 ±(99.9%) 30944.616 B/op [Average]
[info]   (min, avg, max) = (38748.767, 49392.321, 61364.429), stdev = 8036.218
[info]   CI (99.9%): [18447.705, 80336.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.774 ±(99.9%) 4.424 B/op [Average]
[info]   (min, avg, max) = (1.519, 2.774, 4.576), stdev = 1.149
[info]   CI (99.9%): [≈ 0, 7.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 35.48% complete, ETA 00:29:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 881923.749 ops/s
[info] # Warmup Iteration   2: 991176.685 ops/s
[info] # Warmup Iteration   3: 987355.903 ops/s
[info] Iteration   1: 999339.663 ops/s
[info]                  ·gc.alloc.rate:                   1071.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1568.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 990060.011 ops/s
[info]                  ·gc.alloc.rate:                   1061.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1587.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 995163.463 ops/s
[info]                  ·gc.alloc.rate:                   1067.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1582.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 983894.106 ops/s
[info]                  ·gc.alloc.rate:                   1055.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1605.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 996735.359 ops/s
[info]                  ·gc.alloc.rate:                   1069.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1589.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   993038.520 ±(99.9%) 23609.993 ops/s [Average]
[info]   (min, avg, max) = (983894.106, 993038.520, 999339.663), stdev = 6131.440
[info]   CI (99.9%): [969428.528, 1016648.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1065.074 ±(99.9%) 25.551 MB/sec [Average]
[info]   (min, avg, max) = (1055.190, 1065.074, 1071.948), stdev = 6.636
[info]   CI (99.9%): [1039.522, 1090.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1001.215 ±(99.9%) 15.854 MB/sec [Average]
[info]   (min, avg, max) = (995.998, 1001.215, 1006.516), stdev = 4.117
[info]   CI (99.9%): [985.360, 1017.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1586.852 ±(99.9%) 51.839 B/op [Average]
[info]   (min, avg, max) = (1568.402, 1586.852, 1605.855), stdev = 13.462
[info]   CI (99.9%): [1535.013, 1638.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.112, 0.132), stdev = 0.018
[info]   CI (99.9%): [0.043, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 35.94% complete, ETA 00:29:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1193809.087 ops/s
[info] # Warmup Iteration   2: 1337944.600 ops/s
[info] # Warmup Iteration   3: 1270273.285 ops/s
[info] Iteration   1: 1323227.150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1337969.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1335709.050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1336313.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1341200.084 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1334883.883 ±(99.9%) 26400.122 ops/s [Average]
[info]   (min, avg, max) = (1323227.150, 1334883.883, 1341200.084), stdev = 6856.028
[info]   CI (99.9%): [1308483.761, 1361284.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 36.41% complete, ETA 00:29:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36806.346 ops/s
[info] # Warmup Iteration   2: 47773.779 ops/s
[info] # Warmup Iteration   3: 48125.809 ops/s
[info] Iteration   1: 47613.126 ops/s
[info]                  ·gc.alloc.rate:                   1262.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43598.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.376 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 48619.904 ops/s
[info]                  ·gc.alloc.rate:                   1289.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32151.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 47903.410 ops/s
[info]                  ·gc.alloc.rate:                   1270.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43717.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 48313.492 ops/s
[info]                  ·gc.alloc.rate:                   1280.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43562.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.712 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48697.304 ops/s
[info]                  ·gc.alloc.rate:                   1291.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43402.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.691 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   48229.447 ±(99.9%) 1790.199 ops/s [Average]
[info]   (min, avg, max) = (47613.126, 48229.447, 48697.304), stdev = 464.909
[info]   CI (99.9%): [46439.249, 50019.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1278.723 ±(99.9%) 47.553 MB/sec [Average]
[info]   (min, avg, max) = (1262.345, 1278.723, 1291.148), stdev = 12.349
[info]   CI (99.9%): [1231.170, 1326.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41728.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41728.009, 41728.009, 41728.010), stdev = 0.001
[info]   CI (99.9%): [41728.008, 41728.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1264.607 ±(99.9%) 585.129 MB/sec [Average]
[info]   (min, avg, max) = (993.250, 1264.607, 1342.967), stdev = 151.956
[info]   CI (99.9%): [679.478, 1849.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41286.487 ±(99.9%) 19668.695 B/op [Average]
[info]   (min, avg, max) = (32151.414, 41286.487, 43717.112), stdev = 5107.898
[info]   CI (99.9%): [21617.792, 60955.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.167 ±(99.9%) 4.237 B/op [Average]
[info]   (min, avg, max) = (0.684, 2.167, 3.369), stdev = 1.100
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 36.87% complete, ETA 00:29:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12049.395 ops/s
[info] # Warmup Iteration   2: 16122.190 ops/s
[info] # Warmup Iteration   3: 16303.931 ops/s
[info] Iteration   1: 16275.293 ops/s
[info]                  ·gc.alloc.rate:                   1342.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              129816.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128310.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16272.563 ops/s
[info]                  ·gc.alloc.rate:                   1342.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              129831.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128857.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16255.626 ops/s
[info]                  ·gc.alloc.rate:                   1341.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              129832.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129500.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16290.941 ops/s
[info]                  ·gc.alloc.rate:                   1344.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              129832.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129793.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16287.042 ops/s
[info]                  ·gc.alloc.rate:                   1343.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              129816.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130219.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16276.293 ±(99.9%) 53.500 ops/s [Average]
[info]   (min, avg, max) = (16255.626, 16276.293, 16290.941), stdev = 13.894
[info]   CI (99.9%): [16222.793, 16329.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1342.770 ±(99.9%) 4.971 MB/sec [Average]
[info]   (min, avg, max) = (1341.014, 1342.770, 1344.421), stdev = 1.291
[info]   CI (99.9%): [1337.798, 1347.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   129825.491 ±(99.9%) 33.283 B/op [Average]
[info]   (min, avg, max) = (129816.027, 129825.491, 129832.029), stdev = 8.644
[info]   CI (99.9%): [129792.208, 129858.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.709 ±(99.9%) 32.552 MB/sec [Average]
[info]   (min, avg, max) = (1326.923, 1337.709, 1347.728), stdev = 8.454
[info]   CI (99.9%): [1305.157, 1370.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   129335.947 ±(99.9%) 2917.938 B/op [Average]
[info]   (min, avg, max) = (128310.301, 129335.947, 130219.107), stdev = 757.779
[info]   CI (99.9%): [126418.009, 132253.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.442 ±(99.9%) 12.743 B/op [Average]
[info]   (min, avg, max) = (4.022, 6.442, 12.080), stdev = 3.309
[info]   CI (99.9%): [≈ 0, 19.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 37.33% complete, ETA 00:28:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10475.973 ops/s
[info] # Warmup Iteration   2: 16714.405 ops/s
[info] # Warmup Iteration   3: 16803.004 ops/s
[info] Iteration   1: 16871.297 ops/s
[info]                  ·gc.alloc.rate:                   1236.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              115336.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122325.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16822.356 ops/s
[info]                  ·gc.alloc.rate:                   1233.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              115367.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92393.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16623.603 ops/s
[info]                  ·gc.alloc.rate:                   1218.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              115368.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125435.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.971 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16761.802 ops/s
[info]                  ·gc.alloc.rate:                   1228.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              115367.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125161.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.864 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16690.256 ops/s
[info]                  ·gc.alloc.rate:                   1223.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              115336.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94756.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   16753.863 ±(99.9%) 382.933 ops/s [Average]
[info]   (min, avg, max) = (16623.603, 16753.863, 16871.297), stdev = 99.447
[info]   CI (99.9%): [16370.929, 17136.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1227.965 ±(99.9%) 27.910 MB/sec [Average]
[info]   (min, avg, max) = (1218.555, 1227.965, 1236.378), stdev = 7.248
[info]   CI (99.9%): [1200.054, 1255.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   115355.065 ±(99.9%) 66.904 B/op [Average]
[info]   (min, avg, max) = (115336.027, 115355.065, 115368.028), stdev = 17.375
[info]   CI (99.9%): [115288.161, 115421.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.319 ±(99.9%) 690.455 MB/sec [Average]
[info]   (min, avg, max) = (987.541, 1192.319, 1333.011), stdev = 179.309
[info]   CI (99.9%): [501.864, 1882.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   112014.454 ±(99.9%) 65066.235 B/op [Average]
[info]   (min, avg, max) = (92393.101, 112014.454, 125435.597), stdev = 16897.495
[info]   CI (99.9%): [46948.219, 177080.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.250 ±(99.9%) 11.122 B/op [Average]
[info]   (min, avg, max) = (1.971, 6.250, 9.738), stdev = 2.888
[info]   CI (99.9%): [≈ 0, 17.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 37.79% complete, ETA 00:28:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 280500.389 ops/s
[info] # Warmup Iteration   2: 283351.124 ops/s
[info] # Warmup Iteration   3: 292628.283 ops/s
[info] Iteration   1: 293844.470 ops/s
[info]                  ·gc.alloc.rate:                   751.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3567.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.669 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 291071.957 ops/s
[info]                  ·gc.alloc.rate:                   744.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3601.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 290841.344 ops/s
[info]                  ·gc.alloc.rate:                   743.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3604.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 287174.518 ops/s
[info]                  ·gc.alloc.rate:                   734.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5489.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 288158.162 ops/s
[info]                  ·gc.alloc.rate:               736.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3652.916 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   290218.090 ±(99.9%) 10146.794 ops/s [Average]
[info]   (min, avg, max) = (287174.518, 290218.090, 293844.470), stdev = 2635.090
[info]   CI (99.9%): [280071.296, 300364.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   742.111 ±(99.9%) 26.170 MB/sec [Average]
[info]   (min, avg, max) = (734.232, 742.111, 751.409), stdev = 6.796
[info]   CI (99.9%): [715.941, 768.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4024.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4024.001, 4024.002, 4024.002), stdev = 0.001
[info]   CI (99.9%): [4024.001, 4024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   733.837 ±(99.9%) 576.273 MB/sec [Average]
[info]   (min, avg, max) = (666.141, 733.837, 1001.543), stdev = 149.656
[info]   CI (99.9%): [157.564, 1310.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3983.303 ±(99.9%) 3243.263 B/op [Average]
[info]   (min, avg, max) = (3567.908, 3983.303, 5489.019), stdev = 842.265
[info]   CI (99.9%): [740.039, 7226.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.382 ±(99.9%) 0.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 0.669), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 38.25% complete, ETA 00:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7305.361 ops/s
[info] # Warmup Iteration   2: 12473.517 ops/s
[info] # Warmup Iteration   3: 12818.745 ops/s
[info] Iteration   1: 12849.499 ops/s
[info]                  ·gc.alloc.rate:                   1644.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              201424.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202094.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.649 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12771.362 ops/s
[info]                  ·gc.alloc.rate:                   1634.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              201424.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204724.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.391 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12817.098 ops/s
[info]                  ·gc.alloc.rate:                   1640.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              201426.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205437.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.669 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12852.475 ops/s
[info]                  ·gc.alloc.rate:                   1644.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              201424.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164607.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.647 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12648.636 ops/s
[info]                  ·gc.alloc.rate:                   1618.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              201424.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209905.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.951 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12787.814 ±(99.9%) 324.945 ops/s [Average]
[info]   (min, avg, max) = (12648.636, 12787.814, 12852.475), stdev = 84.387
[info]   CI (99.9%): [12462.869, 13112.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1636.729 ±(99.9%) 41.853 MB/sec [Average]
[info]   (min, avg, max) = (1618.843, 1636.729, 1644.954), stdev = 10.869
[info]   CI (99.9%): [1594.876, 1678.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   201424.446 ±(99.9%) 3.538 B/op [Average]
[info]   (min, avg, max) = (201424.034, 201424.446, 201426.089), stdev = 0.919
[info]   CI (99.9%): [201420.908, 201427.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.215 ±(99.9%) 559.868 MB/sec [Average]
[info]   (min, avg, max) = (1344.262, 1603.215, 1687.011), stdev = 145.396
[info]   CI (99.9%): [1043.347, 2163.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   197353.878 ±(99.9%) 71315.744 B/op [Average]
[info]   (min, avg, max) = (164607.263, 197353.878, 209905.835), stdev = 18520.472
[info]   CI (99.9%): [126038.134, 268669.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.261 ±(99.9%) 14.139 B/op [Average]
[info]   (min, avg, max) = (7.647, 10.261, 15.391), stdev = 3.672
[info]   CI (99.9%): [≈ 0, 24.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 38.71% complete, ETA 00:28:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1110581.920 ops/s
[info] # Warmup Iteration   2: 1198899.440 ops/s
[info] # Warmup Iteration   3: 1213906.760 ops/s
[info] Iteration   1: 1213800.970 ops/s
[info]                  ·gc.alloc.rate:                   1005.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1292.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1188694.334 ops/s
[info]                  ·gc.alloc.rate:                   984.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1321.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1212439.966 ops/s
[info]                  ·gc.alloc.rate:                   1004.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1299.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1188175.974 ops/s
[info]                  ·gc.alloc.rate:                   984.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1328.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1210123.634 ops/s
[info]                  ·gc.alloc.rate:                   1002.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1308.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1202646.975 ±(99.9%) 50217.356 ops/s [Average]
[info]   (min, avg, max) = (1188175.974, 1202646.975, 1213800.970), stdev = 13041.288
[info]   CI (99.9%): [1152429.619, 1252864.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   996.473 ±(99.9%) 41.732 MB/sec [Average]
[info]   (min, avg, max) = (984.456, 996.473, 1005.704), stdev = 10.838
[info]   CI (99.9%): [954.741, 1038.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1000.861 ±(99.9%) 14.443 MB/sec [Average]
[info]   (min, avg, max) = (996.577, 1000.861, 1005.875), stdev = 3.751
[info]   CI (99.9%): [986.418, 1015.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1309.866 ±(99.9%) 57.820 B/op [Average]
[info]   (min, avg, max) = (1292.167, 1309.866, 1328.396), stdev = 15.016
[info]   CI (99.9%): [1252.046, 1367.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.212 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.082, 0.165), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 39.17% complete, ETA 00:28:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1314577.284 ops/s
[info] # Warmup Iteration   2: 1455984.225 ops/s
[info] # Warmup Iteration   3: 1460831.547 ops/s
[info] Iteration   1: 1385283.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1457726.963 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1457206.071 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1466898.549 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1461438.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1445710.759 ±(99.9%) 130925.461 ops/s [Average]
[info]   (min, avg, max) = (1385283.657, 1445710.759, 1466898.549), stdev = 34000.926
[info]   CI (99.9%): [1314785.298, 1576636.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 39.63% complete, ETA 00:27:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11840.220 ops/s
[info] # Warmup Iteration   2: 14369.726 ops/s
[info] # Warmup Iteration   3: 14605.826 ops/s
[info] Iteration   1: 14567.643 ops/s
[info]                  ·gc.alloc.rate:                   2139.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              230984.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2342.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252922.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.729 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 14264.777 ops/s
[info]                  ·gc.alloc.rate:                   2094.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              231002.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222841.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.484 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14043.994 ops/s
[info]                  ·gc.alloc.rate:                   2062.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              231016.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227317.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.996 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 14012.019 ops/s
[info]                  ·gc.alloc.rate:                   2056.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              231016.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228419.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.352 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14096.828 ops/s
[info]                  ·gc.alloc.rate:                   2069.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              231013.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227505.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.269 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   14197.052 ±(99.9%) 881.523 ops/s [Average]
[info]   (min, avg, max) = (14012.019, 14197.052, 14567.643), stdev = 228.929
[info]   CI (99.9%): [13315.529, 15078.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2084.396 ±(99.9%) 130.746 MB/sec [Average]
[info]   (min, avg, max) = (2056.708, 2084.396, 2139.432), stdev = 33.954
[info]   CI (99.9%): [1953.650, 2215.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   231006.484 ±(99.9%) 52.905 B/op [Average]
[info]   (min, avg, max) = (230984.030, 231006.484, 231016.033), stdev = 13.739
[info]   CI (99.9%): [230953.579, 231059.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2092.727 ±(99.9%) 538.527 MB/sec [Average]
[info]   (min, avg, max) = (2020.275, 2092.727, 2342.630), stdev = 139.854
[info]   CI (99.9%): [1554.200, 2631.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   231801.343 ±(99.9%) 46222.370 B/op [Average]
[info]   (min, avg, max) = (222841.693, 231801.343, 252922.312), stdev = 12003.803
[info]   CI (99.9%): [185578.973, 278023.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.187), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.766 ±(99.9%) 17.443 B/op [Average]
[info]   (min, avg, max) = (9.352, 14.766, 20.996), stdev = 4.530
[info]   CI (99.9%): [≈ 0, 32.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 40.09% complete, ETA 00:27:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21715.014 ops/s
[info] # Warmup Iteration   2: 30865.340 ops/s
[info] # Warmup Iteration   3: 30982.715 ops/s
[info] Iteration   1: 30809.534 ops/s
[info]                  ·gc.alloc.rate:                   421.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              21523.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26133.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30970.645 ops/s
[info]                  ·gc.alloc.rate:                   423.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16604.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 31070.575 ops/s
[info]                  ·gc.alloc.rate:                   424.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16550.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30793.976 ops/s
[info]                  ·gc.alloc.rate:                   420.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33364.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31045.472 ops/s
[info]                  ·gc.alloc.rate:               424.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          21496.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16580.813 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   30938.040 ±(99.9%) 499.986 ops/s [Average]
[info]   (min, avg, max) = (30793.976, 30938.040, 31070.575), stdev = 129.845
[info]   CI (99.9%): [30438.055, 31438.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   422.744 ±(99.9%) 6.212 MB/sec [Average]
[info]   (min, avg, max) = (420.754, 422.744, 424.394), stdev = 1.613
[info]   CI (99.9%): [416.532, 428.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21501.564 ±(99.9%) 47.788 B/op [Average]
[info]   (min, avg, max) = (21496.014, 21501.564, 21523.765), stdev = 12.410
[info]   CI (99.9%): [21453.776, 21549.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.074 ±(99.9%) 572.142 MB/sec [Average]
[info]   (min, avg, max) = (326.747, 429.074, 653.070), stdev = 148.583
[info]   CI (99.9%): [≈ 0, 1001.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21846.673 ±(99.9%) 29471.574 B/op [Average]
[info]   (min, avg, max) = (16550.070, 21846.673, 33364.865), stdev = 7653.674
[info]   CI (99.9%): [≈ 0, 51318.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.452 ±(99.9%) 3.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.139), stdev = 0.943
[info]   CI (99.9%): [≈ 0, 4.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.976 ±(99.9%) 184.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.976, 108.676), stdev = 47.922
[info]   CI (99.9%): [≈ 0, 207.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 40.55% complete, ETA 00:27:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51745.330 ops/s
[info] # Warmup Iteration   2: 53553.976 ops/s
[info] # Warmup Iteration   3: 54103.842 ops/s
[info] Iteration   1: 53400.673 ops/s
[info]                  ·gc.alloc.rate:                   555.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19652.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 54431.183 ops/s
[info]                  ·gc.alloc.rate:               566.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9630.566 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 54246.210 ops/s
[info]                  ·gc.alloc.rate:                   564.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19327.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 54141.179 ops/s
[info]                  ·gc.alloc.rate:                   563.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19363.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 54406.053 ops/s
[info]                  ·gc.alloc.rate:               565.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          16368.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9634.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   54125.060 ±(99.9%) 1624.977 ops/s [Average]
[info]   (min, avg, max) = (53400.673, 54125.060, 54431.183), stdev = 422.001
[info]   CI (99.9%): [52500.082, 55750.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   562.918 ±(99.9%) 16.994 MB/sec [Average]
[info]   (min, avg, max) = (555.360, 562.918, 566.224), stdev = 4.413
[info]   CI (99.9%): [545.924, 579.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16368.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16368.008, 16368.008, 16368.009), stdev = 0.001
[info]   CI (99.9%): [16368.007, 16368.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.053 ±(99.9%) 702.835 MB/sec [Average]
[info]   (min, avg, max) = (333.063, 533.053, 666.805), stdev = 182.524
[info]   CI (99.9%): [≈ 0, 1235.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15521.845 ±(99.9%) 20706.589 B/op [Average]
[info]   (min, avg, max) = (9630.566, 15521.845, 19652.579), stdev = 5377.435
[info]   CI (99.9%): [≈ 0, 36228.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.349 ±(99.9%) 2.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.349, 1.597), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 3.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.261 ±(99.9%) 79.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.261, 47.078), stdev = 20.636
[info]   CI (99.9%): [≈ 0, 89.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 41.01% complete, ETA 00:27:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5037.814 ops/s
[info] # Warmup Iteration   2: 8114.759 ops/s
[info] # Warmup Iteration   3: 8357.673 ops/s
[info] Iteration   1: 8313.980 ops/s
[info]                  ·gc.alloc.rate:                   3017.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3020.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     571635.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.881 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8275.525 ops/s
[info]                  ·gc.alloc.rate:                   3003.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              571103.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3041.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     578382.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.836 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8320.119 ops/s
[info]                  ·gc.alloc.rate:                   3025.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              572369.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3053.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     577523.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.750 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8312.417 ops/s
[info]                  ·gc.alloc.rate:                   3016.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514576.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.941 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 8203.358 ops/s
[info]                  ·gc.alloc.rate:                   2977.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              571089.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     587739.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.975 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   8285.080 ±(99.9%) 188.445 ops/s [Average]
[info]   (min, avg, max) = (8203.358, 8285.080, 8320.119), stdev = 48.939
[info]   CI (99.9%): [8096.634, 8473.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3008.059 ±(99.9%) 72.603 MB/sec [Average]
[info]   (min, avg, max) = (2977.615, 3008.059, 3025.766), stdev = 18.855
[info]   CI (99.9%): [2935.456, 3080.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   571347.931 ±(99.9%) 2199.353 B/op [Average]
[info]   (min, avg, max) = (571088.052, 571347.931, 572369.592), stdev = 571.165
[info]   CI (99.9%): [569148.577, 573547.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2979.409 ±(99.9%) 566.680 MB/sec [Average]
[info]   (min, avg, max) = (2717.763, 2979.409, 3064.424), stdev = 147.165
[info]   CI (99.9%): [2412.729, 3546.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   565971.434 ±(99.9%) 112838.147 B/op [Average]
[info]   (min, avg, max) = (514576.627, 565971.434, 587739.308), stdev = 29303.708
[info]   CI (99.9%): [453133.287, 678809.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.876 ±(99.9%) 21.647 B/op [Average]
[info]   (min, avg, max) = (3.941, 11.876, 15.975), stdev = 5.622
[info]   CI (99.9%): [≈ 0, 33.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 41.47% complete, ETA 00:26:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15602.479 ops/s
[info] # Warmup Iteration   2: 18383.697 ops/s
[info] # Warmup Iteration   3: 18337.261 ops/s
[info] Iteration   1: 20018.216 ops/s
[info]                  ·gc.alloc.rate:                   1658.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              130354.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130554.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.772 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20756.659 ops/s
[info]                  ·gc.alloc.rate:                   1720.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              130384.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126627.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.956 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20676.807 ops/s
[info]                  ·gc.alloc.rate:                   1713.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              130370.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127826.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.909 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 19348.796 ops/s
[info]                  ·gc.alloc.rate:                   1602.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              130320.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137140.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19615.345 ops/s
[info]                  ·gc.alloc.rate:                   1624.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              130320.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135655.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.091 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   20083.165 ±(99.9%) 2411.175 ops/s [Average]
[info]   (min, avg, max) = (19348.796, 20083.165, 20756.659), stdev = 626.174
[info]   CI (99.9%): [17671.990, 22494.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1663.648 ±(99.9%) 202.409 MB/sec [Average]
[info]   (min, avg, max) = (1602.186, 1663.648, 1720.305), stdev = 52.565
[info]   CI (99.9%): [1461.239, 1866.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   130349.986 ±(99.9%) 112.557 B/op [Average]
[info]   (min, avg, max) = (130320.022, 130349.986, 130384.021), stdev = 29.231
[info]   CI (99.9%): [130237.428, 130462.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.626 ±(99.9%) 46.610 MB/sec [Average]
[info]   (min, avg, max) = (1660.594, 1677.626, 1690.741), stdev = 12.104
[info]   CI (99.9%): [1631.016, 1724.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   131560.976 ±(99.9%) 17978.265 B/op [Average]
[info]   (min, avg, max) = (126627.169, 131560.976, 137140.650), stdev = 4668.898
[info]   CI (99.9%): [113582.711, 149539.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.107 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (0.091, 0.107, 0.138), stdev = 0.020
[info]   CI (99.9%): [0.032, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.422 ±(99.9%) 6.336 B/op [Average]
[info]   (min, avg, max) = (6.909, 8.422, 11.091), stdev = 1.646
[info]   CI (99.9%): [2.086, 14.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 41.94% complete, ETA 00:26:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40593.489 ops/s
[info] # Warmup Iteration   2: 55236.329 ops/s
[info] # Warmup Iteration   3: 56081.546 ops/s
[info] Iteration   1: 56537.271 ops/s
[info]                  ·gc.alloc.rate:                   704.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18201.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.477 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 56620.747 ops/s
[info]                  ·gc.alloc.rate:                   705.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18183.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 56626.659 ops/s
[info]                  ·gc.alloc.rate:                   705.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18200.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 56636.351 ops/s
[info]                  ·gc.alloc.rate:                   706.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18243.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 56293.584 ops/s
[info]                  ·gc.alloc.rate:                   701.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27609.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.746 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   56542.922 ±(99.9%) 558.007 ops/s [Average]
[info]   (min, avg, max) = (56293.584, 56542.922, 56636.351), stdev = 144.913
[info]   CI (99.9%): [55984.915, 57100.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   704.850 ±(99.9%) 7.165 MB/sec [Average]
[info]   (min, avg, max) = (701.645, 704.850, 706.063), stdev = 1.861
[info]   CI (99.9%): [697.685, 712.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19616.257 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (19616.207, 19616.257, 19616.316), stdev = 0.043
[info]   CI (99.9%): [19616.093, 19616.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.480 ±(99.9%) 572.743 MB/sec [Average]
[info]   (min, avg, max) = (653.957, 721.480, 987.547), stdev = 148.739
[info]   CI (99.9%): [148.737, 1294.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20087.611 ±(99.9%) 16191.219 B/op [Average]
[info]   (min, avg, max) = (18183.934, 20087.611, 27609.298), stdev = 4204.808
[info]   CI (99.9%): [3896.392, 36278.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.855 ±(99.9%) 4.292 B/op [Average]
[info]   (min, avg, max) = (0.578, 1.855, 3.477), stdev = 1.115
[info]   CI (99.9%): [≈ 0, 6.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 42.40% complete, ETA 00:26:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66650.150 ops/s
[info] # Warmup Iteration   2: 73006.074 ops/s
[info] # Warmup Iteration   3: 68704.067 ops/s
[info] Iteration   1: 68306.710 ops/s
[info]                  ·gc.alloc.rate:                   455.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13552.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 71180.794 ops/s
[info]                  ·gc.alloc.rate:                   474.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7349.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 71348.592 ops/s
[info]                  ·gc.alloc.rate:                   475.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7317.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.459 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 71176.268 ops/s
[info]                  ·gc.alloc.rate:                   474.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14670.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 70809.210 ops/s
[info]                  ·gc.alloc.rate:               472.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          10496.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7373.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   70564.315 ±(99.9%) 4918.576 ops/s [Average]
[info]   (min, avg, max) = (68306.710, 70564.315, 71348.592), stdev = 1277.339
[info]   CI (99.9%): [65645.739, 75482.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   470.612 ±(99.9%) 32.669 MB/sec [Average]
[info]   (min, avg, max) = (455.617, 470.612, 475.825), stdev = 8.484
[info]   CI (99.9%): [437.944, 503.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10496.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10496.006, 10496.006, 10496.007), stdev = 0.001
[info]   CI (99.9%): [10496.005, 10496.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.531 ±(99.9%) 628.290 MB/sec [Average]
[info]   (min, avg, max) = (331.743, 449.531, 663.469), stdev = 163.165
[info]   CI (99.9%): [≈ 0, 1077.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10052.784 ±(99.9%) 14348.584 B/op [Average]
[info]   (min, avg, max) = (7317.902, 10052.784, 14670.755), stdev = 3726.282
[info]   CI (99.9%): [≈ 0, 24401.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.393 ±(99.9%) 3.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.839), stdev = 0.809
[info]   CI (99.9%): [≈ 0, 3.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.024 ±(99.9%) 71.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.024, 42.358), stdev = 18.647
[info]   CI (99.9%): [≈ 0, 80.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.86% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73716.969 ops/s
[info] # Warmup Iteration   2: 76007.590 ops/s
[info] # Warmup Iteration   3: 75128.423 ops/s
[info] Iteration   1: 75102.337 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 75277.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 75291.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 75064.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 75045.240 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   75156.183 ±(99.9%) 458.091 ops/s [Average]
[info]   (min, avg, max) = (75045.240, 75156.183, 75291.061), stdev = 118.965
[info]   CI (99.9%): [74698.093, 75614.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
[info]   CI (99.9%): [0.006, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 43.32% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2297.132 ops/s
[info] # Warmup Iteration   2: 3113.890 ops/s
[info] # Warmup Iteration   3: 3128.171 ops/s
[info] Iteration   1: 3155.791 ops/s
[info]                  ·gc.alloc.rate:                   1468.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              732136.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     822718.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.379 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3143.416 ops/s
[info]                  ·gc.alloc.rate:                   1462.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              732136.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     665031.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.267 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3171.530 ops/s
[info]                  ·gc.alloc.rate:                   1475.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              732137.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     662258.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.654 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3155.440 ops/s
[info]                  ·gc.alloc.rate:                   1467.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              732136.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836933.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3128.514 ops/s
[info]                  ·gc.alloc.rate:                   1455.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              732136.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     678105.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.417 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   3150.938 ±(99.9%) 61.708 ops/s [Average]
[info]   (min, avg, max) = (3128.514, 3150.938, 3171.530), stdev = 16.025
[info]   CI (99.9%): [3089.230, 3212.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1465.837 ±(99.9%) 29.001 MB/sec [Average]
[info]   (min, avg, max) = (1455.262, 1465.837, 1475.464), stdev = 7.532
[info]   CI (99.9%): [1436.835, 1494.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   732136.417 ±(99.9%) 2.013 B/op [Average]
[info]   (min, avg, max) = (732136.005, 732136.417, 732137.072), stdev = 0.523
[info]   CI (99.9%): [732134.404, 732138.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.740 ±(99.9%) 691.298 MB/sec [Average]
[info]   (min, avg, max) = (1328.294, 1467.740, 1677.968), stdev = 179.528
[info]   CI (99.9%): [776.443, 2159.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   733009.773 ±(99.9%) 341651.214 B/op [Average]
[info]   (min, avg, max) = (662258.526, 733009.773, 836933.759), stdev = 88725.735
[info]   CI (99.9%): [391358.558, 1074660.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.820 ±(99.9%) 40.359 B/op [Average]
[info]   (min, avg, max) = (10.379, 20.820, 31.417), stdev = 10.481
[info]   CI (99.9%): [≈ 0, 61.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 43.78% complete, ETA 00:25:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14022.270 ops/s
[info] # Warmup Iteration   2: 17178.542 ops/s
[info] # Warmup Iteration   3: 17094.801 ops/s
[info] Iteration   1: 17174.058 ops/s
[info]                  ·gc.alloc.rate:                   2375.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              217667.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2347.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215093.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.354 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17138.494 ops/s
[info]                  ·gc.alloc.rate:                   2370.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216829.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.558 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17094.098 ops/s
[info]                  ·gc.alloc.rate:                   2364.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218246.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.333 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17318.870 ops/s
[info]                  ·gc.alloc.rate:                   2395.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              217679.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215926.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.917 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 17241.759 ops/s
[info]                  ·gc.alloc.rate:                   2385.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217085.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.903 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   17193.456 ±(99.9%) 340.793 ops/s [Average]
[info]   (min, avg, max) = (17094.098, 17193.456, 17318.870), stdev = 88.503
[info]   CI (99.9%): [16852.663, 17534.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2378.090 ±(99.9%) 47.477 MB/sec [Average]
[info]   (min, avg, max) = (2364.159, 2378.090, 2395.426), stdev = 12.330
[info]   CI (99.9%): [2330.613, 2425.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   217677.411 ±(99.9%) 20.614 B/op [Average]
[info]   (min, avg, max) = (217667.861, 217677.411, 217680.027), stdev = 5.353
[info]   CI (99.9%): [217656.797, 217698.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2366.687 ±(99.9%) 48.953 MB/sec [Average]
[info]   (min, avg, max) = (2347.334, 2366.687, 2378.483), stdev = 12.713
[info]   CI (99.9%): [2317.734, 2415.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   216636.099 ±(99.9%) 4603.272 B/op [Average]
[info]   (min, avg, max) = (215093.295, 216636.099, 218246.341), stdev = 1195.455
[info]   CI (99.9%): [212032.827, 221239.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.171 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.171, 0.229), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.613 ±(99.9%) 17.300 B/op [Average]
[info]   (min, avg, max) = (9.558, 15.613, 20.903), stdev = 4.493
[info]   CI (99.9%): [≈ 0, 32.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 44.24% complete, ETA 00:25:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31741.426 ops/s
[info] # Warmup Iteration   2: 45081.423 ops/s
[info] # Warmup Iteration   3: 45384.896 ops/s
[info] Iteration   1: 45633.161 ops/s
[info]                  ·gc.alloc.rate:      180.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42442.027 ops/s
[info]                  ·gc.alloc.rate:               167.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9486.022 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 44957.112 ops/s
[info]                  ·gc.alloc.rate:                   177.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8955.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.984 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45729.483 ops/s
[info]                  ·gc.alloc.rate:      180.382 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45483.386 ops/s
[info]                  ·gc.alloc.rate:               179.452 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8851.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   44849.034 ±(99.9%) 5306.983 ops/s [Average]
[info]   (min, avg, max) = (42442.027, 44849.034, 45729.483), stdev = 1378.207
[info]   CI (99.9%): [39542.051, 50156.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   176.937 ±(99.9%) 20.853 MB/sec [Average]
[info]   (min, avg, max) = (167.481, 176.937, 180.382), stdev = 5.415
[info]   CI (99.9%): [156.084, 197.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6208.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (6208.009, 6208.010, 6208.010), stdev = 0.001
[info]   CI (99.9%): [6208.008, 6208.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   153.523 ±(99.9%) 539.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.523, 255.917), stdev = 140.147
[info]   CI (99.9%): [≈ 0, 693.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5458.658 ±(99.9%) 19210.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5458.658, 9486.022), stdev = 4988.853
[info]   CI (99.9%): [≈ 0, 24668.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.397 ±(99.9%) 3.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.397, 1.984), stdev = 0.887
[info]   CI (99.9%): [≈ 0, 3.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 44.70% complete, ETA 00:25:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89491.379 ops/s
[info] # Warmup Iteration   2: 93132.011 ops/s
[info] # Warmup Iteration   3: 93374.707 ops/s
[info] Iteration   1: 93730.578 ops/s
[info]                  ·gc.alloc.rate:      248.699 MB/sec
[info]                  ·gc.alloc.rate.norm: 4176.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 93581.665 ops/s
[info]                  ·gc.alloc.rate:               248.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4302.172 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 93457.973 ops/s
[info]                  ·gc.alloc.rate:               247.978 MB/sec
[info]                  ·gc.alloc.rate.norm:          4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4307.879 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 91672.415 ops/s
[info]                  ·gc.alloc.rate:                   243.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4391.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.814 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 92728.236 ops/s
[info]                  ·gc.alloc.rate:                   246.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5653.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.610 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   93034.173 ±(99.9%) 3285.660 ops/s [Average]
[info]   (min, avg, max) = (91672.415, 93034.173, 93730.578), stdev = 853.276
[info]   CI (99.9%): [89748.513, 96319.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   246.874 ±(99.9%) 8.694 MB/sec [Average]
[info]   (min, avg, max) = (243.236, 246.874, 248.699), stdev = 2.258
[info]   CI (99.9%): [238.180, 255.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4176.005, 4176.005, 4176.005), stdev = 0.001
[info]   CI (99.9%): [4176.004, 4176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   220.124 ±(99.9%) 491.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.124, 333.207), stdev = 127.536
[info]   CI (99.9%): [≈ 0, 711.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3730.947 ±(99.9%) 8328.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3730.947, 5653.127), stdev = 2162.770
[info]   CI (99.9%): [≈ 0, 12059.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.323 ±(99.9%) 2.682 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.323, 1.568), stdev = 0.696
[info]   CI (99.9%): [≈ 0, 3.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.485 ±(99.9%) 45.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.485, 26.610), stdev = 11.815
[info]   CI (99.9%): [≈ 0, 50.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 45.16% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5566.651 ops/s
[info] # Warmup Iteration   2: 9397.556 ops/s
[info] # Warmup Iteration   3: 9516.567 ops/s
[info] Iteration   1: 9576.778 ops/s
[info]                  ·gc.alloc.rate:                   3326.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              546384.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552063.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.921 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 9510.961 ops/s
[info]                  ·gc.alloc.rate:                   3303.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              546384.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     560041.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.988 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9595.363 ops/s
[info]                  ·gc.alloc.rate:                   3331.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              546384.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     501397.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.315 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 9410.251 ops/s
[info]                  ·gc.alloc.rate:                   3266.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              546387.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568851.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.889 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 9494.828 ops/s
[info]                  ·gc.alloc.rate:                   3296.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              546384.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     564261.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.704 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   9517.636 ±(99.9%) 283.196 ops/s [Average]
[info]   (min, avg, max) = (9410.251, 9517.636, 9595.363), stdev = 73.545
[info]   CI (99.9%): [9234.440, 9800.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3304.903 ±(99.9%) 100.687 MB/sec [Average]
[info]   (min, avg, max) = (3266.625, 3304.903, 3331.711), stdev = 26.148
[info]   CI (99.9%): [3204.217, 3405.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   546384.673 ±(99.9%) 5.107 B/op [Average]
[info]   (min, avg, max) = (546384.045, 546384.673, 546387.043), stdev = 1.326
[info]   CI (99.9%): [546379.565, 546389.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3321.900 ±(99.9%) 573.082 MB/sec [Average]
[info]   (min, avg, max) = (3057.396, 3321.900, 3404.037), stdev = 148.828
[info]   CI (99.9%): [2748.818, 3894.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   549322.978 ±(99.9%) 105870.157 B/op [Average]
[info]   (min, avg, max) = (501397.860, 549322.978, 568851.366), stdev = 27494.144
[info]   CI (99.9%): [443452.821, 655193.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.150, 0.187), stdev = 0.027
[info]   CI (99.9%): [0.045, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24.763 ±(99.9%) 16.944 B/op [Average]
[info]   (min, avg, max) = (20.704, 24.763, 30.988), stdev = 4.400
[info]   CI (99.9%): [7.819, 41.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 45.62% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19483.628 ops/s
[info] # Warmup Iteration   2: 22340.811 ops/s
[info] # Warmup Iteration   3: 23441.746 ops/s
[info] Iteration   1: 27139.502 ops/s
[info]                  ·gc.alloc.rate:                   1730.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              100352.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96347.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25427.676 ops/s
[info]                  ·gc.alloc.rate:                   1620.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              100331.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103410.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 23868.504 ops/s
[info]                  ·gc.alloc.rate:                   1520.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              100288.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88552.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.236 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23959.164 ops/s
[info]                  ·gc.alloc.rate:                   1526.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              100288.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110664.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.470 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23827.818 ops/s
[info]                  ·gc.alloc.rate:                   1518.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              100288.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89321.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.250 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   24844.533 ±(99.9%) 5572.521 ops/s [Average]
[info]   (min, avg, max) = (23827.818, 24844.533, 27139.502), stdev = 1447.166
[info]   CI (99.9%): [19272.011, 30417.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1583.507 ±(99.9%) 356.856 MB/sec [Average]
[info]   (min, avg, max) = (1518.397, 1583.507, 1730.419), stdev = 92.674
[info]   CI (99.9%): [1226.651, 1940.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   100309.450 ±(99.9%) 116.512 B/op [Average]
[info]   (min, avg, max) = (100288.018, 100309.450, 100352.016), stdev = 30.258
[info]   CI (99.9%): [100192.939, 100425.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1542.433 ±(99.9%) 685.457 MB/sec [Average]
[info]   (min, avg, max) = (1343.004, 1542.433, 1684.734), stdev = 178.011
[info]   CI (99.9%): [856.976, 2227.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97659.082 ±(99.9%) 36346.505 B/op [Average]
[info]   (min, avg, max) = (88552.665, 97659.082, 110664.303), stdev = 9439.072
[info]   CI (99.9%): [61312.577, 134005.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.025, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.402 ±(99.9%) 5.975 B/op [Average]
[info]   (min, avg, max) = (5.470, 7.402, 9.020), stdev = 1.552
[info]   CI (99.9%): [1.428, 13.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 46.08% complete, ETA 00:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81938.964 ops/s
[info] # Warmup Iteration   2: 114281.368 ops/s
[info] # Warmup Iteration   3: 115192.805 ops/s
[info] Iteration   1: 116083.558 ops/s
[info]                  ·gc.alloc.rate:                   886.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13303.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 115577.010 ops/s
[info]                  ·gc.alloc.rate:                   882.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13380.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 114945.850 ops/s
[info]                  ·gc.alloc.rate:                   877.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9002.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 113923.116 ops/s
[info]                  ·gc.alloc.rate:                   869.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13680.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 115012.735 ops/s
[info]                  ·gc.alloc.rate:                   877.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13604.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   115108.454 ±(99.9%) 3111.049 ops/s [Average]
[info]   (min, avg, max) = (113923.116, 115108.454, 116083.558), stdev = 807.929
[info]   CI (99.9%): [111997.405, 118219.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   878.521 ±(99.9%) 24.024 MB/sec [Average]
[info]   (min, avg, max) = (869.409, 878.521, 886.138), stdev = 6.239
[info]   CI (99.9%): [854.497, 902.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12011.364 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (12011.349, 12011.364, 12011.377), stdev = 0.010
[info]   CI (99.9%): [12011.326, 12011.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   921.183 ±(99.9%) 568.035 MB/sec [Average]
[info]   (min, avg, max) = (657.466, 921.183, 994.199), stdev = 147.517
[info]   CI (99.9%): [353.148, 1489.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12594.163 ±(99.9%) 7754.990 B/op [Average]
[info]   (min, avg, max) = (9002.179, 12594.163, 13680.079), stdev = 2013.946
[info]   CI (99.9%): [4839.173, 20349.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.309 ±(99.9%) 1.234 B/op [Average]
[info]   (min, avg, max) = (0.855, 1.309, 1.693), stdev = 0.321
[info]   CI (99.9%): [0.074, 2.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 46.54% complete, ETA 00:24:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118046.625 ops/s
[info] # Warmup Iteration   2: 126315.587 ops/s
[info] # Warmup Iteration   3: 123463.921 ops/s
[info] Iteration   1: 126342.229 ops/s
[info]                  ·gc.alloc.rate:                   507.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7327.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 125988.174 ops/s
[info]                  ·gc.alloc.rate:                   506.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8296.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 125025.491 ops/s
[info]                  ·gc.alloc.rate:               502.694 MB/sec
[info]                  ·gc.alloc.rate.norm:          6328.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4176.124 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 126032.491 ops/s
[info]                  ·gc.alloc.rate:                   506.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8285.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 125722.820 ops/s
[info]                  ·gc.alloc.rate:               505.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4157.045 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   125822.241 ±(99.9%) 1912.594 ops/s [Average]
[info]   (min, avg, max) = (125025.491, 125822.241, 126342.229), stdev = 496.694
[info]   CI (99.9%): [123909.647, 127734.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   505.975 ±(99.9%) 7.825 MB/sec [Average]
[info]   (min, avg, max) = (502.694, 505.975, 507.990), stdev = 2.032
[info]   CI (99.9%): [498.150, 513.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6328.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6328.003, 6328.004, 6328.004), stdev = 0.001
[info]   CI (99.9%): [6328.003, 6328.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.035 ±(99.9%) 658.081 MB/sec [Average]
[info]   (min, avg, max) = (331.750, 516.035, 664.404), stdev = 170.901
[info]   CI (99.9%): [≈ 0, 1174.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6448.505 ±(99.9%) 8163.117 B/op [Average]
[info]   (min, avg, max) = (4157.045, 6448.505, 8296.473), stdev = 2119.936
[info]   CI (99.9%): [≈ 0, 14611.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 3.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.792), stdev = 0.786
[info]   CI (99.9%): [≈ 0, 3.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.829 ±(99.9%) 37.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.829, 22.325), stdev = 9.792
[info]   CI (99.9%): [≈ 0, 42.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 47.00% complete, ETA 00:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136734.902 ops/s
[info] # Warmup Iteration   2: 145840.308 ops/s
[info] # Warmup Iteration   3: 146722.603 ops/s
[info] Iteration   1: 146749.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 146592.862 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 146662.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 146692.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 146734.306 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   146686.394 ±(99.9%) 240.322 ops/s [Average]
[info]   (min, avg, max) = (146592.862, 146686.394, 146749.239), stdev = 62.411
[info]   CI (99.9%): [146446.072, 146926.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 47.47% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2432.418 ops/s
[info] # Warmup Iteration   2: 3223.318 ops/s
[info] # Warmup Iteration   3: 3265.328 ops/s
[info] Iteration   1: 3282.054 ops/s
[info]                  ·gc.alloc.rate:                   1804.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              865019.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794496.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.943 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3277.176 ops/s
[info]                  ·gc.alloc.rate:                   1801.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              865019.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     961727.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.993 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3291.330 ops/s
[info]                  ·gc.alloc.rate:                   1808.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              865019.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     802995.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.954 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3281.247 ops/s
[info]                  ·gc.alloc.rate:               1803.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          865020.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1686.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 808956.256 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3281.929 ops/s
[info]                  ·gc.alloc.rate:                   1804.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              865018.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     973518.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.981 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   3282.747 ±(99.9%) 20.019 ops/s [Average]
[info]   (min, avg, max) = (3277.176, 3282.747, 3291.330), stdev = 5.199
[info]   CI (99.9%): [3262.728, 3302.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1804.502 ±(99.9%) 10.917 MB/sec [Average]
[info]   (min, avg, max) = (1801.183, 1804.502, 1808.959), stdev = 2.835
[info]   CI (99.9%): [1793.586, 1815.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   865019.393 ±(99.9%) 2.042 B/op [Average]
[info]   (min, avg, max) = (865018.685, 865019.393, 865020.180), stdev = 0.530
[info]   CI (99.9%): [865017.351, 865021.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1811.314 ±(99.9%) 724.708 MB/sec [Average]
[info]   (min, avg, max) = (1657.067, 1811.314, 2031.127), stdev = 188.204
[info]   CI (99.9%): [1086.606, 2536.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   868338.797 ±(99.9%) 349926.407 B/op [Average]
[info]   (min, avg, max) = (794496.741, 868338.797, 973518.016), stdev = 90874.777
[info]   CI (99.9%): [518412.390, 1218265.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.974 ±(99.9%) 43.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.974, 29.943), stdev = 11.387
[info]   CI (99.9%): [≈ 0, 57.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 47.93% complete, ETA 00:24:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14996.062 ops/s
[info] # Warmup Iteration   2: 18582.226 ops/s
[info] # Warmup Iteration   3: 18455.442 ops/s
[info] Iteration   1: 18585.581 ops/s
[info]                  ·gc.alloc.rate:                   1951.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              165167.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141536.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.814 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18358.181 ops/s
[info]                  ·gc.alloc.rate:                   1926.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172840.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.708 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 18470.623 ops/s
[info]                  ·gc.alloc.rate:                   1945.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              165750.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172549.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.321 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18611.645 ops/s
[info]                  ·gc.alloc.rate:                   1954.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              165175.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171824.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.041 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18439.388 ops/s
[info]                  ·gc.alloc.rate:                   1935.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144809.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.884 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   18493.084 ±(99.9%) 404.772 ops/s [Average]
[info]   (min, avg, max) = (18358.181, 18493.084, 18611.645), stdev = 105.118
[info]   CI (99.9%): [18088.312, 18897.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1942.464 ±(99.9%) 43.821 MB/sec [Average]
[info]   (min, avg, max) = (1926.729, 1942.464, 1954.128), stdev = 11.380
[info]   CI (99.9%): [1898.643, 1986.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165289.146 ±(99.9%) 993.225 B/op [Average]
[info]   (min, avg, max) = (165167.988, 165289.146, 165750.519), stdev = 257.937
[info]   CI (99.9%): [164295.921, 166282.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888.483 ±(99.9%) 719.181 MB/sec [Average]
[info]   (min, avg, max) = (1671.872, 1888.483, 2032.792), stdev = 186.769
[info]   CI (99.9%): [1169.302, 2607.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   160711.849 ±(99.9%) 61828.941 B/op [Average]
[info]   (min, avg, max) = (141536.324, 160711.849, 172840.001), stdev = 16056.780
[info]   CI (99.9%): [98882.908, 222540.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.154 ±(99.9%) 7.881 B/op [Average]
[info]   (min, avg, max) = (5.321, 8.154, 10.708), stdev = 2.047
[info]   CI (99.9%): [0.273, 16.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 48.39% complete, ETA 00:23:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66380.407 ops/s
[info] # Warmup Iteration   2: 100689.228 ops/s
[info] # Warmup Iteration   3: 102180.724 ops/s
[info] Iteration   1: 102136.905 ops/s
[info]                  ·gc.alloc.rate:                   1340.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20233.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.604 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 102122.628 ops/s
[info]                  ·gc.alloc.rate:                   1340.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20348.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 102399.855 ops/s
[info]                  ·gc.alloc.rate:                   1343.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20425.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.280 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 101970.731 ops/s
[info]                  ·gc.alloc.rate:                   1338.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20625.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 101993.201 ops/s
[info]                  ·gc.alloc.rate:                   1338.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20722.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.606 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   102124.664 ±(99.9%) 658.172 ops/s [Average]
[info]   (min, avg, max) = (101970.731, 102124.664, 102399.855), stdev = 170.925
[info]   CI (99.9%): [101466.491, 102782.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1340.400 ±(99.9%) 8.680 MB/sec [Average]
[info]   (min, avg, max) = (1338.272, 1340.400, 1343.932), stdev = 2.254
[info]   CI (99.9%): [1331.720, 1349.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.004, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1328.382 ±(99.9%) 45.746 MB/sec [Average]
[info]   (min, avg, max) = (1313.410, 1328.382, 1342.969), stdev = 11.880
[info]   CI (99.9%): [1282.636, 1374.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20470.955 ±(99.9%) 772.355 B/op [Average]
[info]   (min, avg, max) = (20233.030, 20470.955, 20722.765), stdev = 200.578
[info]   CI (99.9%): [19698.600, 21243.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.219 ±(99.9%) 2.030 B/op [Average]
[info]   (min, avg, max) = (0.321, 1.219, 1.606), stdev = 0.527
[info]   CI (99.9%): [≈ 0, 3.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 48.85% complete, ETA 00:23:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223738.490 ops/s
[info] # Warmup Iteration   2: 230453.356 ops/s
[info] # Warmup Iteration   3: 232805.671 ops/s
[info] Iteration   1: 234975.917 ops/s
[info]                  ·gc.alloc.rate:                   764.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4461.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 232791.255 ops/s
[info]                  ·gc.alloc.rate:                   757.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4503.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 234649.652 ops/s
[info]                  ·gc.alloc.rate:                   763.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6704.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 233108.941 ops/s
[info]                  ·gc.alloc.rate:               758.332 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4506.542 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 234845.554 ops/s
[info]                  ·gc.alloc.rate:                   763.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4480.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   234074.264 ±(99.9%) 4000.270 ops/s [Average]
[info]   (min, avg, max) = (232791.255, 234074.264, 234975.917), stdev = 1038.857
[info]   CI (99.9%): [230073.994, 238074.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   761.470 ±(99.9%) 12.972 MB/sec [Average]
[info]   (min, avg, max) = (757.316, 761.470, 764.396), stdev = 3.369
[info]   CI (99.9%): [748.498, 774.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.002, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   733.547 ±(99.9%) 572.524 MB/sec [Average]
[info]   (min, avg, max) = (666.120, 733.547, 999.513), stdev = 148.683
[info]   CI (99.9%): [161.023, 1306.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4931.217 ±(99.9%) 3816.762 B/op [Average]
[info]   (min, avg, max) = (4461.741, 4931.217, 6704.027), stdev = 991.201
[info]   CI (99.9%): [1114.455, 8747.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.448 ±(99.9%) 1.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.448, 0.844), stdev = 0.363
[info]   CI (99.9%): [≈ 0, 1.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 49.31% complete, ETA 00:23:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10062.632 ops/s
[info] # Warmup Iteration   2: 16486.114 ops/s
[info] # Warmup Iteration   3: 16464.594 ops/s
[info] Iteration   1: 16596.497 ops/s
[info]                  ·gc.alloc.rate:                   2137.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188996.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.922 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16605.790 ops/s
[info]                  ·gc.alloc.rate:                   2139.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2344.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222196.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.756 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16683.421 ops/s
[info]                  ·gc.alloc.rate:                   2148.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190744.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.855 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16301.503 ops/s
[info]                  ·gc.alloc.rate:                   2099.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196029.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.059 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16498.067 ops/s
[info]                  ·gc.alloc.rate:                   2124.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226555.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.916 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16537.056 ±(99.9%) 566.861 ops/s [Average]
[info]   (min, avg, max) = (16301.503, 16537.056, 16683.421), stdev = 147.212
[info]   CI (99.9%): [15970.194, 17103.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2130.055 ±(99.9%) 73.064 MB/sec [Average]
[info]   (min, avg, max) = (2099.681, 2130.055, 2148.751), stdev = 18.974
[info]   CI (99.9%): [2056.991, 2203.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202704.183 ±(99.9%) 1.328 B/op [Average]
[info]   (min, avg, max) = (202704.026, 202704.183, 202704.800), stdev = 0.345
[info]   CI (99.9%): [202702.855, 202705.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2153.110 ±(99.9%) 730.302 MB/sec [Average]
[info]   (min, avg, max) = (1993.067, 2153.110, 2375.002), stdev = 189.657
[info]   CI (99.9%): [1422.808, 2883.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   204904.504 ±(99.9%) 69422.490 B/op [Average]
[info]   (min, avg, max) = (188996.349, 204904.504, 226555.966), stdev = 18028.800
[info]   CI (99.9%): [135482.015, 274326.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.101 ±(99.9%) 17.565 B/op [Average]
[info]   (min, avg, max) = (5.922, 11.101, 17.756), stdev = 4.562
[info]   CI (99.9%): [≈ 0, 28.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 49.77% complete, ETA 00:23:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15727.570 ops/s
[info] # Warmup Iteration   2: 20975.396 ops/s
[info] # Warmup Iteration   3: 20961.725 ops/s
[info] Iteration   1: 21071.682 ops/s
[info]                  ·gc.alloc.rate:                   1705.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              127384.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124187.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.219 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21172.687 ops/s
[info]                  ·gc.alloc.rate:                   1713.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124362.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.927 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 20884.814 ops/s
[info]                  ·gc.alloc.rate:                   1690.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              127370.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126679.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.706 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21054.606 ops/s
[info]                  ·gc.alloc.rate:                   1703.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151425.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.224 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21145.885 ops/s
[info]                  ·gc.alloc.rate:                   1711.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126033.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.198 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   21065.935 ±(99.9%) 433.750 ops/s [Average]
[info]   (min, avg, max) = (20884.814, 21065.935, 21172.687), stdev = 112.644
[info]   CI (99.9%): [20632.184, 21499.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1705.147 ±(99.9%) 34.562 MB/sec [Average]
[info]   (min, avg, max) = (1690.934, 1705.147, 1713.878), stdev = 8.976
[info]   CI (99.9%): [1670.584, 1739.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.288 ±(99.9%) 70.807 B/op [Average]
[info]   (min, avg, max) = (127352.020, 127370.288, 127392.020), stdev = 18.388
[info]   CI (99.9%): [127299.482, 127441.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1747.466 ±(99.9%) 600.774 MB/sec [Average]
[info]   (min, avg, max) = (1662.742, 1747.466, 2025.810), stdev = 156.019
[info]   CI (99.9%): [1146.692, 2348.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   130537.622 ±(99.9%) 45150.345 B/op [Average]
[info]   (min, avg, max) = (124187.222, 130537.622, 151425.568), stdev = 11725.401
[info]   CI (99.9%): [85387.277, 175687.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.455 ±(99.9%) 14.156 B/op [Average]
[info]   (min, avg, max) = (4.706, 7.455, 13.927), stdev = 3.676
[info]   CI (99.9%): [≈ 0, 21.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 50.23% complete, ETA 00:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54885.628 ops/s
[info] # Warmup Iteration   2: 85587.630 ops/s
[info] # Warmup Iteration   3: 88792.323 ops/s
[info] Iteration   1: 88963.298 ops/s
[info]                  ·gc.alloc.rate:                   1218.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17364.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 87631.141 ops/s
[info]                  ·gc.alloc.rate:                   1200.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23616.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 88855.592 ops/s
[info]                  ·gc.alloc.rate:                   1217.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23445.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.106 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 89018.846 ops/s
[info]                  ·gc.alloc.rate:                   1219.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17647.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88401.069 ops/s
[info]                  ·gc.alloc.rate:                   1211.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23807.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   88573.989 ±(99.9%) 2235.051 ops/s [Average]
[info]   (min, avg, max) = (87631.141, 88573.989, 89018.846), stdev = 580.436
[info]   CI (99.9%): [86338.938, 90809.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1213.371 ±(99.9%) 30.695 MB/sec [Average]
[info]   (min, avg, max) = (1200.421, 1213.371, 1219.461), stdev = 7.971
[info]   CI (99.9%): [1182.676, 1244.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.011 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (21560.005, 21560.011, 21560.036), stdev = 0.014
[info]   CI (99.9%): [21559.958, 21560.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.116 ±(99.9%) 708.361 MB/sec [Average]
[info]   (min, avg, max) = (981.597, 1191.116, 1337.245), stdev = 183.959
[info]   CI (99.9%): [482.755, 1899.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21176.278 ±(99.9%) 12915.821 B/op [Average]
[info]   (min, avg, max) = (17364.705, 21176.278, 23807.554), stdev = 3354.198
[info]   CI (99.9%): [8260.457, 34092.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.187), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.485 ±(99.9%) 4.094 B/op [Average]
[info]   (min, avg, max) = (0.736, 1.485, 3.365), stdev = 1.063
[info]   CI (99.9%): [≈ 0, 5.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 50.69% complete, ETA 00:22:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215442.032 ops/s
[info] # Warmup Iteration   2: 225246.697 ops/s
[info] # Warmup Iteration   3: 225135.781 ops/s
[info] Iteration   1: 224488.139 ops/s
[info]                  ·gc.alloc.rate:                   715.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6982.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 222953.139 ops/s
[info]                  ·gc.alloc.rate:                   710.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4683.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 219658.727 ops/s
[info]                  ·gc.alloc.rate:                   700.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4763.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 224350.316 ops/s
[info]                  ·gc.alloc.rate:                   715.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4668.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 224594.689 ops/s
[info]                  ·gc.alloc.rate:                   715.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4668.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   223209.002 ±(99.9%) 8060.832 ops/s [Average]
[info]   (min, avg, max) = (219658.727, 223209.002, 224594.689), stdev = 2093.373
[info]   CI (99.9%): [215148.170, 231269.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   711.385 ±(99.9%) 25.700 MB/sec [Average]
[info]   (min, avg, max) = (700.065, 711.385, 715.791), stdev = 6.674
[info]   CI (99.9%): [685.685, 737.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.002, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.184 ±(99.9%) 569.953 MB/sec [Average]
[info]   (min, avg, max) = (663.510, 731.184, 995.956), stdev = 148.015
[info]   CI (99.9%): [161.231, 1301.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5153.253 ±(99.9%) 3940.269 B/op [Average]
[info]   (min, avg, max) = (4668.035, 5153.253, 6982.380), stdev = 1023.275
[info]   CI (99.9%): [1212.984, 9093.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.645 ±(99.9%) 1.163 B/op [Average]
[info]   (min, avg, max) = (0.298, 0.645, 1.022), stdev = 0.302
[info]   CI (99.9%): [≈ 0, 1.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 51.15% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226652.996 ops/s
[info] # Warmup Iteration   2: 235103.017 ops/s
[info] # Warmup Iteration   3: 242205.722 ops/s
[info] Iteration   1: 246621.791 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 246684.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 246334.379 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 246764.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 246722.844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   246625.526 ±(99.9%) 658.435 ops/s [Average]
[info]   (min, avg, max) = (246334.379, 246625.526, 246764.231), stdev = 170.993
[info]   CI (99.9%): [245967.091, 247283.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 51.61% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18134.124 ops/s
[info] # Warmup Iteration   2: 25387.765 ops/s
[info] # Warmup Iteration   3: 25586.219 ops/s
[info] Iteration   1: 25725.639 ops/s
[info]                  ·gc.alloc.rate:                   1753.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121607.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.094 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25476.965 ops/s
[info]                  ·gc.alloc.rate:                   1737.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103063.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.716 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25563.701 ops/s
[info]                  ·gc.alloc.rate:                   1743.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103303.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.563 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25288.001 ops/s
[info]                  ·gc.alloc.rate:                   1723.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104932.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25605.149 ops/s
[info]                  ·gc.alloc.rate:                   1745.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103915.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.118 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   25531.891 ±(99.9%) 628.069 ops/s [Average]
[info]   (min, avg, max) = (25288.001, 25531.891, 25725.639), stdev = 163.108
[info]   CI (99.9%): [24903.822, 26159.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1740.801 ±(99.9%) 42.686 MB/sec [Average]
[info]   (min, avg, max) = (1723.916, 1740.801, 1753.743), stdev = 11.085
[info]   CI (99.9%): [1698.115, 1783.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107288.217 ±(99.9%) 1.556 B/op [Average]
[info]   (min, avg, max) = (107288.017, 107288.217, 107288.937), stdev = 0.404
[info]   CI (99.9%): [107286.660, 107289.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.434 ±(99.9%) 529.109 MB/sec [Average]
[info]   (min, avg, max) = (1669.108, 1742.434, 1987.805), stdev = 137.408
[info]   CI (99.9%): [1213.325, 2271.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107364.391 ±(99.9%) 30784.276 B/op [Average]
[info]   (min, avg, max) = (103063.404, 107364.391, 121607.104), stdev = 7994.579
[info]   CI (99.9%): [76580.115, 138148.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.135 ±(99.9%) 7.016 B/op [Average]
[info]   (min, avg, max) = (2.563, 5.135, 7.716), stdev = 1.822
[info]   CI (99.9%): [≈ 0, 12.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 52.07% complete, ETA 00:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31102.636 ops/s
[info] # Warmup Iteration   2: 58279.152 ops/s
[info] # Warmup Iteration   3: 59991.617 ops/s
[info] Iteration   1: 59849.583 ops/s
[info]                  ·gc.alloc.rate:                   1470.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43434.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.642 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 60043.986 ops/s
[info]                  ·gc.alloc.rate:                   1475.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34816.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 60111.271 ops/s
[info]                  ·gc.alloc.rate:                   1477.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34951.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.180 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60146.289 ops/s
[info]                  ·gc.alloc.rate:                   1477.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43899.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 59573.422 ops/s
[info]                  ·gc.alloc.rate:                   1463.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35584.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   59944.910 ±(99.9%) 913.536 ops/s [Average]
[info]   (min, avg, max) = (59573.422, 59944.910, 60146.289), stdev = 237.242
[info]   CI (99.9%): [59031.374, 60858.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1472.914 ±(99.9%) 22.508 MB/sec [Average]
[info]   (min, avg, max) = (1463.764, 1472.914, 1477.851), stdev = 5.845
[info]   CI (99.9%): [1450.406, 1495.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   38672.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38672.007, 38672.007, 38672.008), stdev = 0.001
[info]   CI (99.9%): [38672.006, 38672.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1467.889 ±(99.9%) 692.984 MB/sec [Average]
[info]   (min, avg, max) = (1328.319, 1467.889, 1677.632), stdev = 179.966
[info]   CI (99.9%): [774.905, 2160.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   38537.621 ±(99.9%) 18076.674 B/op [Average]
[info]   (min, avg, max) = (34816.921, 38537.621, 43899.838), stdev = 4694.455
[info]   CI (99.9%): [20460.947, 56614.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.639 ±(99.9%) 2.092 B/op [Average]
[info]   (min, avg, max) = (1.089, 1.639, 2.183), stdev = 0.543
[info]   CI (99.9%): [≈ 0, 3.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 52.53% complete, ETA 00:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37352.704 ops/s
[info] # Warmup Iteration   2: 71882.839 ops/s
[info] # Warmup Iteration   3: 72989.972 ops/s
[info] Iteration   1: 74306.188 ops/s
[info]                  ·gc.alloc.rate:                   1169.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              24760.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20713.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 74155.785 ops/s
[info]                  ·gc.alloc.rate:               1166.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          24760.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1310.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27802.830 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 74283.875 ops/s
[info]                  ·gc.alloc.rate:                   1168.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              24760.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20923.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 72971.288 ops/s
[info]                  ·gc.alloc.rate:                   1148.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              24760.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28578.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 74244.776 ops/s
[info]                  ·gc.alloc.rate:                   1168.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              24760.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21182.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   73992.382 ±(99.9%) 2209.073 ops/s [Average]
[info]   (min, avg, max) = (72971.288, 73992.382, 74306.188), stdev = 573.689
[info]   CI (99.9%): [71783.309, 76201.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1164.105 ±(99.9%) 34.740 MB/sec [Average]
[info]   (min, avg, max) = (1148.051, 1164.105, 1169.157), stdev = 9.022
[info]   CI (99.9%): [1129.365, 1198.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24760.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24760.006, 24760.006, 24760.006), stdev = 0.001
[info]   CI (99.9%): [24760.005, 24760.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1120.002 ±(99.9%) 695.393 MB/sec [Average]
[info]   (min, avg, max) = (978.073, 1120.002, 1325.096), stdev = 180.591
[info]   CI (99.9%): [424.610, 1815.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23840.042 ±(99.9%) 15342.481 B/op [Average]
[info]   (min, avg, max) = (20713.309, 23840.042, 28578.326), stdev = 3984.393
[info]   CI (99.9%): [8497.562, 39182.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.418 ±(99.9%) 3.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.418, 2.205), stdev = 0.852
[info]   CI (99.9%): [≈ 0, 4.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 53.00% complete, ETA 00:21:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63734.704 ops/s
[info] # Warmup Iteration   2: 79866.543 ops/s
[info] # Warmup Iteration   3: 82779.886 ops/s
[info] Iteration   1: 82253.005 ops/s
[info]                  ·gc.alloc.rate:                   1231.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25365.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.593 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 82582.129 ops/s
[info]                  ·gc.alloc.rate:                   1236.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25340.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.984 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 82714.545 ops/s
[info]                  ·gc.alloc.rate:                   1238.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19051.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 82636.074 ops/s
[info]                  ·gc.alloc.rate:                   1236.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25526.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.189 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 82234.711 ops/s
[info]                  ·gc.alloc.rate:                   1231.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25739.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.594 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   82484.093 ±(99.9%) 864.061 ops/s [Average]
[info]   (min, avg, max) = (82234.711, 82484.093, 82714.545), stdev = 224.394
[info]   CI (99.9%): [81620.032, 83348.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1234.741 ±(99.9%) 12.872 MB/sec [Average]
[info]   (min, avg, max) = (1231.055, 1234.741, 1238.163), stdev = 3.343
[info]   CI (99.9%): [1221.869, 1247.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23560.005, 23560.005, 23560.006), stdev = 0.001
[info]   CI (99.9%): [23560.005, 23560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1268.330 ±(99.9%) 575.782 MB/sec [Average]
[info]   (min, avg, max) = (1001.209, 1268.330, 1344.938), stdev = 149.529
[info]   CI (99.9%): [692.548, 1844.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24204.589 ±(99.9%) 11110.037 B/op [Average]
[info]   (min, avg, max) = (19051.190, 24204.589, 25739.513), stdev = 2885.241
[info]   CI (99.9%): [13094.552, 35314.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.430 ±(99.9%) 1.748 B/op [Average]
[info]   (min, avg, max) = (0.792, 1.430, 1.984), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 3.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 53.46% complete, ETA 00:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12935.599 ops/s
[info] # Warmup Iteration   2: 35383.685 ops/s
[info] # Warmup Iteration   3: 37688.673 ops/s
[info] Iteration   1: 38105.056 ops/s
[info]                  ·gc.alloc.rate:                   2013.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              83168.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81619.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.019 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 38235.158 ops/s
[info]                  ·gc.alloc.rate:                   2020.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              83168.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82125.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.428 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38388.792 ops/s
[info]                  ·gc.alloc.rate:                   2028.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              83168.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82465.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.853 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 38452.153 ops/s
[info]                  ·gc.alloc.rate:                   2031.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              83168.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82778.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.704 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38117.545 ops/s
[info]                  ·gc.alloc.rate:                   2014.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              83168.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83835.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.719 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   38259.741 ±(99.9%) 604.035 ops/s [Average]
[info]   (min, avg, max) = (38105.056, 38259.741, 38452.153), stdev = 156.866
[info]   CI (99.9%): [37655.706, 38863.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2021.759 ±(99.9%) 31.864 MB/sec [Average]
[info]   (min, avg, max) = (2013.610, 2021.759, 2031.909), stdev = 8.275
[info]   CI (99.9%): [1989.895, 2053.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83168.098 ±(99.9%) 0.748 B/op [Average]
[info]   (min, avg, max) = (83168.011, 83168.098, 83168.446), stdev = 0.194
[info]   CI (99.9%): [83167.350, 83168.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.094 ±(99.9%) 83.994 MB/sec [Average]
[info]   (min, avg, max) = (1976.108, 2007.094, 2030.454), stdev = 21.813
[info]   CI (99.9%): [1923.099, 2091.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82564.800 ±(99.9%) 3196.494 B/op [Average]
[info]   (min, avg, max) = (81619.498, 82564.800, 83835.471), stdev = 830.119
[info]   CI (99.9%): [79368.307, 85761.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.745 ±(99.9%) 7.914 B/op [Average]
[info]   (min, avg, max) = (0.853, 2.745, 6.019), stdev = 2.055
[info]   CI (99.9%): [≈ 0, 10.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 53.92% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94454.450 ops/s
[info] # Warmup Iteration   2: 114987.814 ops/s
[info] # Warmup Iteration   3: 117228.600 ops/s
[info] Iteration   1: 117790.589 ops/s
[info]                  ·gc.alloc.rate:                   1142.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13181.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 116830.343 ops/s
[info]                  ·gc.alloc.rate:                   1133.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17777.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.524 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 117481.000 ops/s
[info]                  ·gc.alloc.rate:                   1139.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13332.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 117341.242 ops/s
[info]                  ·gc.alloc.rate:                   1138.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13402.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.838 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 116782.894 ops/s
[info]                  ·gc.alloc.rate:                   1132.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18026.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.122 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   117245.214 ±(99.9%) 1665.274 ops/s [Average]
[info]   (min, avg, max) = (116782.894, 117245.214, 117790.589), stdev = 432.466
[info]   CI (99.9%): [115579.940, 118910.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1137.203 ±(99.9%) 16.300 MB/sec [Average]
[info]   (min, avg, max) = (1132.630, 1137.203, 1142.698), stdev = 4.233
[info]   CI (99.9%): [1120.903, 1153.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15264.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15264.004, 15264.004, 15264.004), stdev = 0.001
[info]   CI (99.9%): [15264.003, 15264.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1127.754 ±(99.9%) 707.192 MB/sec [Average]
[info]   (min, avg, max) = (986.824, 1127.754, 1337.632), stdev = 183.656
[info]   CI (99.9%): [420.562, 1834.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15144.139 ±(99.9%) 9704.931 B/op [Average]
[info]   (min, avg, max) = (13181.854, 15144.139, 18026.734), stdev = 2520.340
[info]   CI (99.9%): [5439.208, 24849.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.187), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.342 ±(99.9%) 2.694 B/op [Average]
[info]   (min, avg, max) = (0.837, 1.342, 2.524), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 4.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 54.38% complete, ETA 00:21:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214122.495 ops/s
[info] # Warmup Iteration   2: 300430.660 ops/s
[info] # Warmup Iteration   3: 302488.239 ops/s
[info] Iteration   1: 302809.868 ops/s
[info]                  ·gc.alloc.rate:                   1052.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5082.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 302536.299 ops/s
[info]                  ·gc.alloc.rate:                   1051.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5104.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 304812.771 ops/s
[info]                  ·gc.alloc.rate:                   1059.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5092.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 297806.059 ops/s
[info]                  ·gc.alloc.rate:                   1035.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6991.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 304160.228 ops/s
[info]                  ·gc.alloc.rate:                   1057.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5161.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   302425.045 ±(99.9%) 10581.845 ops/s [Average]
[info]   (min, avg, max) = (297806.059, 302425.045, 304812.771), stdev = 2748.072
[info]   CI (99.9%): [291843.200, 313006.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1051.523 ±(99.9%) 36.906 MB/sec [Average]
[info]   (min, avg, max) = (1035.447, 1051.523, 1059.775), stdev = 9.584
[info]   CI (99.9%): [1014.617, 1088.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1053.201 ±(99.9%) 581.372 MB/sec [Average]
[info]   (min, avg, max) = (977.843, 1053.201, 1322.943), stdev = 150.980
[info]   CI (99.9%): [471.830, 1634.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5486.460 ±(99.9%) 3241.514 B/op [Average]
[info]   (min, avg, max) = (5082.477, 5486.460, 6991.328), stdev = 841.811
[info]   CI (99.9%): [2244.946, 8727.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.389 ±(99.9%) 0.996 B/op [Average]
[info]   (min, avg, max) = (0.108, 0.389, 0.645), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 54.84% complete, ETA 00:20:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597113.291 ops/s
[info] # Warmup Iteration   2: 621838.278 ops/s
[info] # Warmup Iteration   3: 659498.126 ops/s
[info] Iteration   1: 634628.996 ops/s
[info]                  ·gc.alloc.rate:                   819.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2463.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 638241.799 ops/s
[info]                  ·gc.alloc.rate:                   824.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1632.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 623376.852 ops/s
[info]                  ·gc.alloc.rate:                   804.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2511.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 636286.177 ops/s
[info]                  ·gc.alloc.rate:                   821.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1644.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 631094.627 ops/s
[info]                  ·gc.alloc.rate:                   814.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2493.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   632725.690 ±(99.9%) 22517.892 ops/s [Average]
[info]   (min, avg, max) = (623376.852, 632725.690, 638241.799), stdev = 5847.825
[info]   CI (99.9%): [610207.798, 655243.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   816.999 ±(99.9%) 29.422 MB/sec [Average]
[info]   (min, avg, max) = (804.860, 816.999, 824.372), stdev = 7.641
[info]   CI (99.9%): [787.577, 846.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2032.001, 2032.001, 2032.001), stdev = 0.001
[info]   CI (99.9%): [2032.001, 2032.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   863.017 ±(99.9%) 700.756 MB/sec [Average]
[info]   (min, avg, max) = (662.454, 863.017, 999.859), stdev = 181.984
[info]   CI (99.9%): [162.261, 1563.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2149.037 ±(99.9%) 1795.310 B/op [Average]
[info]   (min, avg, max) = (1632.889, 2149.037, 2511.074), stdev = 466.236
[info]   CI (99.9%): [353.727, 3944.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.248 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (0.154, 0.248, 0.361), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.30% complete, ETA 00:20:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 651991.354 ops/s
[info] # Warmup Iteration   2: 670362.352 ops/s
[info] # Warmup Iteration   3: 663365.523 ops/s
[info] Iteration   1: 665588.835 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 665291.116 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 666783.233 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 672097.204 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 709157.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   675783.501 ±(99.9%) 72613.316 ops/s [Average]
[info]   (min, avg, max) = (665291.116, 675783.501, 709157.119), stdev = 18857.448
[info]   CI (99.9%): [603170.185, 748396.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 55.76% complete, ETA 00:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167216.669 ops/s
[info] # Warmup Iteration   2: 219283.603 ops/s
[info] # Warmup Iteration   3: 192243.844 ops/s
[info] Iteration   1: 193977.668 ops/s
[info]                  ·gc.alloc.rate:                   1020.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7966.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.676 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 197516.486 ops/s
[info]                  ·gc.alloc.rate:                   1039.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10469.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 196528.980 ops/s
[info]                  ·gc.alloc.rate:                   1033.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7930.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.834 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 196927.544 ops/s
[info]                  ·gc.alloc.rate:                   1036.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7953.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 197474.350 ops/s
[info]                  ·gc.alloc.rate:                   1038.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7963.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   196485.006 ±(99.9%) 5622.227 ops/s [Average]
[info]   (min, avg, max) = (193977.668, 196485.006, 197516.486), stdev = 1460.075
[info]   CI (99.9%): [190862.778, 202107.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1033.691 ±(99.9%) 29.630 MB/sec [Average]
[info]   (min, avg, max) = (1020.479, 1033.691, 1039.130), stdev = 7.695
[info]   CI (99.9%): [1004.062, 1063.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8280.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8280.002, 8280.002, 8280.002), stdev = 0.001
[info]   CI (99.9%): [8280.002, 8280.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1056.095 ±(99.9%) 555.644 MB/sec [Average]
[info]   (min, avg, max) = (981.849, 1056.095, 1313.965), stdev = 144.299
[info]   CI (99.9%): [500.451, 1611.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8456.838 ±(99.9%) 4333.710 B/op [Average]
[info]   (min, avg, max) = (7930.057, 8456.838, 10469.942), stdev = 1125.451
[info]   CI (99.9%): [4123.128, 12790.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.634 ±(99.9%) 0.542 B/op [Average]
[info]   (min, avg, max) = (0.498, 0.634, 0.834), stdev = 0.141
[info]   CI (99.9%): [0.092, 1.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 56.22% complete, ETA 00:20:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596155.933 ops/s
[info] # Warmup Iteration   2: 873418.006 ops/s
[info] # Warmup Iteration   3: 889783.745 ops/s
[info] Iteration   1: 888116.550 ops/s
[info]                  ·gc.alloc.rate:                   2902.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3028.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5366.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 872088.435 ops/s
[info]                  ·gc.alloc.rate:                   2850.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4885.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 885891.762 ops/s
[info]                  ·gc.alloc.rate:                   2895.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5428.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 886037.698 ops/s
[info]                  ·gc.alloc.rate:                   2896.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4832.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 889140.491 ops/s
[info]                  ·gc.alloc.rate:                   2907.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5423.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.258 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   884254.987 ±(99.9%) 26723.988 ops/s [Average]
[info]   (min, avg, max) = (872088.435, 884254.987, 889140.491), stdev = 6940.135
[info]   CI (99.9%): [857530.999, 910978.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2890.448 ±(99.9%) 87.642 MB/sec [Average]
[info]   (min, avg, max) = (2850.605, 2890.448, 2907.049), stdev = 22.760
[info]   CI (99.9%): [2802.806, 2978.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.000, 5144.000, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.000, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2915.444 ±(99.9%) 709.026 MB/sec [Average]
[info]   (min, avg, max) = (2707.454, 2915.444, 3064.827), stdev = 184.132
[info]   CI (99.9%): [2206.418, 3624.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5187.300 ±(99.9%) 1159.624 B/op [Average]
[info]   (min, avg, max) = (4832.578, 5187.300, 5428.603), stdev = 301.151
[info]   CI (99.9%): [4027.676, 6346.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.158, 0.208), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.282 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (0.184, 0.282, 0.376), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 56.68% complete, ETA 00:19:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 765634.527 ops/s
[info] # Warmup Iteration   2: 1639424.117 ops/s
[info] # Warmup Iteration   3: 1666825.976 ops/s
[info] Iteration   1: 1651189.948 ops/s
[info]                  ·gc.alloc.rate:                   1552.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1562.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1677390.531 ops/s
[info]                  ·gc.alloc.rate:                   1577.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1240.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1672388.269 ops/s
[info]                  ·gc.alloc.rate:                   1572.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1566.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1649707.088 ops/s
[info]                  ·gc.alloc.rate:                   1552.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1598.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1660273.049 ops/s
[info]                  ·gc.alloc.rate:                   1561.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1276.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1662189.777 ±(99.9%) 47768.157 ops/s [Average]
[info]   (min, avg, max) = (1649707.088, 1662189.777, 1677390.531), stdev = 12405.239
[info]   CI (99.9%): [1614421.620, 1709957.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1563.280 ±(99.9%) 44.605 MB/sec [Average]
[info]   (min, avg, max) = (1552.041, 1563.280, 1577.559), stdev = 11.584
[info]   CI (99.9%): [1518.675, 1607.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1530.038 ±(99.9%) 689.186 MB/sec [Average]
[info]   (min, avg, max) = (1322.476, 1530.038, 1675.839), stdev = 178.979
[info]   CI (99.9%): [840.852, 2219.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1449.090 ±(99.9%) 672.814 B/op [Average]
[info]   (min, avg, max) = (1240.692, 1449.090, 1598.052), stdev = 174.728
[info]   CI (99.9%): [776.276, 2121.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.075, 0.099), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 57.14% complete, ETA 00:19:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6860931.343 ops/s
[info] # Warmup Iteration   2: 7409688.472 ops/s
[info] # Warmup Iteration   3: 7439050.670 ops/s
[info] Iteration   1: 7496299.992 ops/s
[info]                  ·gc.alloc.rate:                   2248.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     423.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7545272.739 ops/s
[info]                  ·gc.alloc.rate:                   2262.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     493.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7516345.023 ops/s
[info]                  ·gc.alloc.rate:                   2254.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7556069.061 ops/s
[info]                  ·gc.alloc.rate:                   2267.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     424.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7558201.890 ops/s
[info]                  ·gc.alloc.rate:                   2267.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7534437.741 ±(99.9%) 104250.101 ops/s [Average]
[info]   (min, avg, max) = (7496299.992, 7534437.741, 7558201.890), stdev = 27073.420
[info]   CI (99.9%): [7430187.640, 7638687.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2259.818 ±(99.9%) 32.400 MB/sec [Average]
[info]   (min, avg, max) = (2248.116, 2259.818, 2267.056), stdev = 8.414
[info]   CI (99.9%): [2227.418, 2292.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2234.848 ±(99.9%) 727.575 MB/sec [Average]
[info]   (min, avg, max) = (2017.415, 2234.848, 2380.657), stdev = 188.949
[info]   CI (99.9%): [1507.273, 2962.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   466.756 ±(99.9%) 150.281 B/op [Average]
[info]   (min, avg, max) = (423.563, 466.756, 496.784), stdev = 39.028
[info]   CI (99.9%): [316.475, 617.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.017, 0.026), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 57.60% complete, ETA 00:19:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91005.869 ops/s
[info] # Warmup Iteration   2: 314862.303 ops/s
[info] # Warmup Iteration   3: 320122.318 ops/s
[info] Iteration   1: 320131.277 ops/s
[info]                  ·gc.alloc.rate:                   1951.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9707.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.614 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 321956.681 ops/s
[info]                  ·gc.alloc.rate:                   1962.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8119.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.712 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 321877.117 ops/s
[info]                  ·gc.alloc.rate:                   1961.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9820.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 318554.439 ops/s
[info]                  ·gc.alloc.rate:                   1941.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9988.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.411 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 321244.556 ops/s
[info]                  ·gc.alloc.rate:                   1958.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9941.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   320752.814 ±(99.9%) 5504.645 ops/s [Average]
[info]   (min, avg, max) = (318554.439, 320752.814, 321956.681), stdev = 1429.539
[info]   CI (99.9%): [315248.169, 326257.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1955.008 ±(99.9%) 34.176 MB/sec [Average]
[info]   (min, avg, max) = (1941.407, 1955.008, 1962.728), stdev = 8.875
[info]   CI (99.9%): [1920.832, 1989.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.121 ±(99.9%) 603.068 MB/sec [Average]
[info]   (min, avg, max) = (1661.500, 1939.121, 2029.463), stdev = 156.615
[info]   CI (99.9%): [1336.053, 2542.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9515.545 ±(99.9%) 3033.760 B/op [Average]
[info]   (min, avg, max) = (8119.875, 9515.545, 9988.820), stdev = 787.858
[info]   CI (99.9%): [6481.784, 12549.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.511 ±(99.9%) 0.553 B/op [Average]
[info]   (min, avg, max) = (0.407, 0.511, 0.712), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 1.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 58.06% complete, ETA 00:19:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 621108.243 ops/s
[info] # Warmup Iteration   2: 986552.378 ops/s
[info] # Warmup Iteration   3: 992288.636 ops/s
[info] Iteration   1: 1003978.742 ops/s
[info]                  ·gc.alloc.rate:                   2311.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2341.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3670.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 998497.113 ops/s
[info]                  ·gc.alloc.rate:                   2299.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3716.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1003598.108 ops/s
[info]                  ·gc.alloc.rate:                   2310.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3713.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1000150.179 ops/s
[info]                  ·gc.alloc.rate:                   2302.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3738.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 995568.419 ops/s
[info]                  ·gc.alloc.rate:                   2292.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3222.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1000358.512 ±(99.9%) 13621.465 ops/s [Average]
[info]   (min, avg, max) = (995568.419, 1000358.512, 1003978.742), stdev = 3537.451
[info]   CI (99.9%): [986737.047, 1013979.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2303.484 ±(99.9%) 31.100 MB/sec [Average]
[info]   (min, avg, max) = (2292.651, 2303.484, 2311.887), stdev = 8.077
[info]   CI (99.9%): [2272.384, 2334.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3624.000, 3624.000, 3624.000), stdev = 0.001
[info]   CI (99.9%): [3624.000, 3624.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2296.283 ±(99.9%) 556.784 MB/sec [Average]
[info]   (min, avg, max) = (2038.628, 2296.283, 2375.501), stdev = 144.595
[info]   CI (99.9%): [1739.499, 2853.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3612.243 ±(99.9%) 844.300 B/op [Average]
[info]   (min, avg, max) = (3222.467, 3612.243, 3738.153), stdev = 219.262
[info]   CI (99.9%): [2767.943, 4456.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.170 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.170, 0.230), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 58.53% complete, ETA 00:19:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1393332.619 ops/s
[info] # Warmup Iteration   2: 3383049.430 ops/s
[info] # Warmup Iteration   3: 3437217.680 ops/s
[info] Iteration   1: 3442730.711 ops/s
[info]                  ·gc.alloc.rate:                   1995.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     904.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3440929.149 ops/s
[info]                  ·gc.alloc.rate:                   1994.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     914.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3389704.814 ops/s
[info]                  ·gc.alloc.rate:                   1964.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     935.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3388564.123 ops/s
[info]                  ·gc.alloc.rate:                   1963.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     783.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3382758.866 ops/s
[info]                  ·gc.alloc.rate:                   1960.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     944.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3408937.533 ±(99.9%) 116091.300 ops/s [Average]
[info]   (min, avg, max) = (3382758.866, 3408937.533, 3442730.711), stdev = 30148.542
[info]   CI (99.9%): [3292846.233, 3525028.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1975.639 ±(99.9%) 68.350 MB/sec [Average]
[info]   (min, avg, max) = (1960.228, 1975.639, 1995.520), stdev = 17.750
[info]   CI (99.9%): [1907.289, 2043.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1942.021 ±(99.9%) 554.414 MB/sec [Average]
[info]   (min, avg, max) = (1686.750, 1942.021, 2031.156), stdev = 143.980
[info]   CI (99.9%): [1387.607, 2496.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   896.413 ±(99.9%) 251.020 B/op [Average]
[info]   (min, avg, max) = (783.419, 896.413, 944.999), stdev = 65.189
[info]   CI (99.9%): [645.393, 1147.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.044, 0.057), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 58.99% complete, ETA 00:18:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12757645.755 ops/s
[info] # Warmup Iteration   2: 16423436.740 ops/s
[info] # Warmup Iteration   3: 16722391.337 ops/s
[info] Iteration   1: 16538061.517 ops/s
[info]                  ·gc.alloc.rate:                   756.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16408488.486 ops/s
[info]                  ·gc.alloc.rate:                   750.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 16545096.074 ops/s
[info]                  ·gc.alloc.rate:               756.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63.243 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 16153869.733 ops/s
[info]                  ·gc.alloc.rate:                   738.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16409420.435 ops/s
[info]                  ·gc.alloc.rate:                   750.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   16410987.249 ±(99.9%) 609604.373 ops/s [Average]
[info]   (min, avg, max) = (16153869.733, 16410987.249, 16545096.074), stdev = 158312.320
[info]   CI (99.9%): [15801382.877, 17020591.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   750.837 ±(99.9%) 27.936 MB/sec [Average]
[info]   (min, avg, max) = (738.989, 750.837, 756.910), stdev = 7.255
[info]   CI (99.9%): [722.901, 778.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   798.797 ±(99.9%) 704.616 MB/sec [Average]
[info]   (min, avg, max) = (664.850, 798.797, 1000.899), stdev = 182.987
[info]   CI (99.9%): [94.181, 1503.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   76.557 ±(99.9%) 66.519 B/op [Average]
[info]   (min, avg, max) = (63.243, 76.557, 95.998), stdev = 17.275
[info]   CI (99.9%): [10.037, 143.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.167), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.016), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 59.45% complete, ETA 00:18:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130996.261 ops/s
[info] # Warmup Iteration   2: 419619.666 ops/s
[info] # Warmup Iteration   3: 426682.003 ops/s
[info] Iteration   1: 424600.522 ops/s
[info]                  ·gc.alloc.rate:                   1515.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4847.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 414935.344 ops/s
[info]                  ·gc.alloc.rate:                   1481.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6249.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 424313.961 ops/s
[info]                  ·gc.alloc.rate:                   1514.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4925.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 422046.587 ops/s
[info]                  ·gc.alloc.rate:                   1505.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6230.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 424891.639 ops/s
[info]                  ·gc.alloc.rate:                   1516.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4979.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   422157.610 ±(99.9%) 16138.980 ops/s [Average]
[info]   (min, avg, max) = (414935.344, 422157.610, 424891.639), stdev = 4191.242
[info]   CI (99.9%): [406018.630, 438296.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1506.647 ±(99.9%) 56.964 MB/sec [Average]
[info]   (min, avg, max) = (1481.243, 1506.647, 1516.719), stdev = 14.793
[info]   CI (99.9%): [1449.682, 1563.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5616.001, 5616.001, 5616.001), stdev = 0.001
[info]   CI (99.9%): [5616.001, 5616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1459.954 ±(99.9%) 704.271 MB/sec [Average]
[info]   (min, avg, max) = (1307.639, 1459.954, 1670.746), stdev = 182.897
[info]   CI (99.9%): [755.682, 2164.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5446.549 ±(99.9%) 2795.727 B/op [Average]
[info]   (min, avg, max) = (4847.019, 5446.549, 6249.976), stdev = 726.041
[info]   CI (99.9%): [2650.822, 8242.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.249 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (0.154, 0.249, 0.395), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 59.91% complete, ETA 00:18:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1106188.250 ops/s
[info] # Warmup Iteration   2: 2077390.536 ops/s
[info] # Warmup Iteration   3: 2114164.190 ops/s
[info] Iteration   1: 2115394.749 ops/s
[info]                  ·gc.alloc.rate:                   1365.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     972.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2095562.322 ops/s
[info]                  ·gc.alloc.rate:                   1352.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     987.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2113466.397 ops/s
[info]                  ·gc.alloc.rate:                   1364.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     987.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2121131.531 ops/s
[info]                  ·gc.alloc.rate:                   1369.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     989.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2106560.554 ops/s
[info]                  ·gc.alloc.rate:                   1359.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1001.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2110423.111 ±(99.9%) 37748.658 ops/s [Average]
[info]   (min, avg, max) = (2095562.322, 2110423.111, 2121131.531), stdev = 9803.207
[info]   CI (99.9%): [2072674.453, 2148171.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1362.409 ±(99.9%) 24.406 MB/sec [Average]
[info]   (min, avg, max) = (1352.776, 1362.409, 1369.268), stdev = 6.338
[info]   CI (99.9%): [1338.003, 1386.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1324.325 ±(99.9%) 52.210 MB/sec [Average]
[info]   (min, avg, max) = (1306.872, 1324.325, 1340.285), stdev = 13.559
[info]   CI (99.9%): [1272.116, 1376.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   987.610 ±(99.9%) 39.687 B/op [Average]
[info]   (min, avg, max) = (972.382, 987.610, 1001.361), stdev = 10.307
[info]   CI (99.9%): [947.923, 1027.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.093), stdev = 0.014
[info]   CI (99.9%): [0.017, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 60.37% complete, ETA 00:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6431786.755 ops/s
[info] # Warmup Iteration   2: 4890113.342 ops/s
[info] # Warmup Iteration   3: 5201029.246 ops/s
[info] Iteration   1: 5186346.547 ops/s
[info]                  ·gc.alloc.rate:                   685.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5209376.512 ops/s
[info]                  ·gc.alloc.rate:                   688.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5123218.887 ops/s
[info]                  ·gc.alloc.rate:                   677.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5054190.967 ops/s
[info]                  ·gc.alloc.rate:                   667.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5208661.560 ops/s
[info]                  ·gc.alloc.rate:                   688.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5156358.895 ±(99.9%) 258181.594 ops/s [Average]
[info]   (min, avg, max) = (5054190.967, 5156358.895, 5209376.512), stdev = 67048.940
[info]   CI (99.9%): [4898177.300, 5414540.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   681.527 ±(99.9%) 34.322 MB/sec [Average]
[info]   (min, avg, max) = (667.941, 681.527, 688.500), stdev = 8.913
[info]   CI (99.9%): [647.205, 715.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.610 ±(99.9%) 2.177 MB/sec [Average]
[info]   (min, avg, max) = (666.107, 666.610, 667.504), stdev = 0.565
[info]   CI (99.9%): [664.434, 668.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   203.475 ±(99.9%) 10.279 B/op [Average]
[info]   (min, avg, max) = (201.260, 203.475, 207.639), stdev = 2.669
[info]   CI (99.9%): [193.197, 213.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.020, 0.038), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 60.83% complete, ETA 00:18:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132427.018 ops/s
[info] # Warmup Iteration   2: 388017.821 ops/s
[info] # Warmup Iteration   3: 396719.859 ops/s
[info] Iteration   1: 396280.037 ops/s
[info]                  ·gc.alloc.rate:                   1799.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6520.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 395124.797 ops/s
[info]                  ·gc.alloc.rate:                   1793.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7919.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 387360.206 ops/s
[info]                  ·gc.alloc.rate:                   1758.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6788.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 398022.502 ops/s
[info]                  ·gc.alloc.rate:                   1806.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6645.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 398899.910 ops/s
[info]                  ·gc.alloc.rate:                   1810.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7992.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   395137.490 ±(99.9%) 17674.290 ops/s [Average]
[info]   (min, avg, max) = (387360.206, 395137.490, 398899.910), stdev = 4589.957
[info]   CI (99.9%): [377463.201, 412811.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1793.718 ±(99.9%) 80.379 MB/sec [Average]
[info]   (min, avg, max) = (1758.264, 1793.718, 1810.609), stdev = 20.874
[info]   CI (99.9%): [1713.339, 1874.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1801.510 ±(99.9%) 725.867 MB/sec [Average]
[info]   (min, avg, max) = (1642.396, 1801.510, 2025.692), stdev = 188.505
[info]   CI (99.9%): [1075.643, 2527.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7173.167 ±(99.9%) 2777.208 B/op [Average]
[info]   (min, avg, max) = (6520.232, 7173.167, 7992.640), stdev = 721.232
[info]   CI (99.9%): [4395.959, 9950.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.365 ±(99.9%) 0.575 B/op [Average]
[info]   (min, avg, max) = (0.164, 0.365, 0.498), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 61.29% complete, ETA 00:17:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1585019.871 ops/s
[info] # Warmup Iteration   2: 2551822.677 ops/s
[info] # Warmup Iteration   3: 2653652.569 ops/s
[info] Iteration   1: 2661066.991 ops/s
[info]                  ·gc.alloc.rate:                   1406.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     772.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2641462.311 ops/s
[info]                  ·gc.alloc.rate:                   1396.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     980.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2592410.258 ops/s
[info]                  ·gc.alloc.rate:                   1370.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2644638.959 ops/s
[info]                  ·gc.alloc.rate:                   1398.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2642470.781 ops/s
[info]                  ·gc.alloc.rate:                   1396.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     799.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2636409.860 ±(99.9%) 99558.306 ops/s [Average]
[info]   (min, avg, max) = (2592410.258, 2636409.860, 2661066.991), stdev = 25854.976
[info]   CI (99.9%): [2536851.554, 2735968.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1393.731 ±(99.9%) 52.750 MB/sec [Average]
[info]   (min, avg, max) = (1370.457, 1393.731, 1406.906), stdev = 13.699
[info]   CI (99.9%): [1340.981, 1446.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1391.394 ±(99.9%) 549.701 MB/sec [Average]
[info]   (min, avg, max) = (1307.106, 1391.394, 1645.712), stdev = 142.756
[info]   CI (99.9%): [841.693, 1941.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   830.612 ±(99.9%) 326.267 B/op [Average]
[info]   (min, avg, max) = (772.982, 830.612, 980.568), stdev = 84.730
[info]   CI (99.9%): [504.345, 1156.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.050, 0.074), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 61.75% complete, ETA 00:17:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5669474.516 ops/s
[info] # Warmup Iteration   2: 6223830.558 ops/s
[info] # Warmup Iteration   3: 6425481.257 ops/s
[info] Iteration   1: 6299843.189 ops/s
[info]                  ·gc.alloc.rate:                   960.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6406975.712 ops/s
[info]                  ·gc.alloc.rate:                   977.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6485191.813 ops/s
[info]                  ·gc.alloc.rate:                   988.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6539078.021 ops/s
[info]                  ·gc.alloc.rate:                   997.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6454332.134 ops/s
[info]                  ·gc.alloc.rate:                   984.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6437084.174 ±(99.9%) 348457.689 ops/s [Average]
[info]   (min, avg, max) = (6299843.189, 6437084.174, 6539078.021), stdev = 90493.355
[info]   CI (99.9%): [6088626.485, 6785541.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   981.698 ±(99.9%) 52.972 MB/sec [Average]
[info]   (min, avg, max) = (960.666, 981.698, 997.120), stdev = 13.757
[info]   CI (99.9%): [928.726, 1034.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.741 ±(99.9%) 13.827 MB/sec [Average]
[info]   (min, avg, max) = (995.250, 999.741, 1004.590), stdev = 3.591
[info]   CI (99.9%): [985.914, 1013.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   244.443 ±(99.9%) 11.101 B/op [Average]
[info]   (min, avg, max) = (241.139, 244.443, 248.640), stdev = 2.883
[info]   CI (99.9%): [233.341, 255.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.019, 0.026), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 62.21% complete, ETA 00:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261025.205 ops/s
[info] # Warmup Iteration   2: 643434.920 ops/s
[info] # Warmup Iteration   3: 641586.106 ops/s
[info] Iteration   1: 642947.131 ops/s
[info]                  ·gc.alloc.rate:                   1902.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4834.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 641003.166 ops/s
[info]                  ·gc.alloc.rate:                   1896.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4898.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 649444.670 ops/s
[info]                  ·gc.alloc.rate:                   1921.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4059.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 648343.957 ops/s
[info]                  ·gc.alloc.rate:                   1918.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4907.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 636541.761 ops/s
[info]                  ·gc.alloc.rate:                   1883.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5016.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   643656.137 ±(99.9%) 20524.154 ops/s [Average]
[info]   (min, avg, max) = (636541.761, 643656.137, 649444.670), stdev = 5330.058
[info]   CI (99.9%): [623131.983, 664180.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1904.249 ±(99.9%) 60.976 MB/sec [Average]
[info]   (min, avg, max) = (1883.026, 1904.249, 1921.215), stdev = 15.835
[info]   CI (99.9%): [1843.273, 1965.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.336 ±(99.9%) 575.165 MB/sec [Average]
[info]   (min, avg, max) = (1674.929, 1939.336, 2029.012), stdev = 149.369
[info]   CI (99.9%): [1364.170, 2514.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4743.520 ±(99.9%) 1494.582 B/op [Average]
[info]   (min, avg, max) = (4059.136, 4743.520, 5016.968), stdev = 388.138
[info]   CI (99.9%): [3248.938, 6238.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.224 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.224, 0.257), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 62.67% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459170.918 ops/s
[info] # Warmup Iteration   2: 823011.342 ops/s
[info] # Warmup Iteration   3: 836602.235 ops/s
[info] Iteration   1: 831347.263 ops/s
[info]                  ·gc.alloc.rate:                   2759.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5084.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 825859.357 ops/s
[info]                  ·gc.alloc.rate:                   2741.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3041.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5796.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 822221.714 ops/s
[info]                  ·gc.alloc.rate:                   2729.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5195.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 831633.771 ops/s
[info]                  ·gc.alloc.rate:                   2760.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5144.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 833006.753 ops/s
[info]                  ·gc.alloc.rate:                   2764.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5145.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   828813.772 ±(99.9%) 17660.130 ops/s [Average]
[info]   (min, avg, max) = (822221.714, 828813.772, 833006.753), stdev = 4586.280
[info]   CI (99.9%): [811153.641, 846473.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2751.204 ±(99.9%) 57.707 MB/sec [Average]
[info]   (min, avg, max) = (2729.815, 2751.204, 2764.938), stdev = 14.986
[info]   CI (99.9%): [2693.497, 2808.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2776.851 ±(99.9%) 572.532 MB/sec [Average]
[info]   (min, avg, max) = (2686.078, 2776.851, 3041.557), stdev = 148.685
[info]   CI (99.9%): [2204.319, 3349.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5273.282 ±(99.9%) 1135.583 B/op [Average]
[info]   (min, avg, max) = (5084.971, 5273.282, 5796.166), stdev = 294.907
[info]   CI (99.9%): [4137.698, 6408.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.208), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.245 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (0.158, 0.245, 0.397), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 63.13% complete, ETA 00:17:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310959.812 ops/s
[info] # Warmup Iteration   2: 964819.838 ops/s
[info] # Warmup Iteration   3: 985416.392 ops/s
[info] Iteration   1: 985565.110 ops/s
[info]                  ·gc.alloc.rate:                   1222.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1563.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 983528.773 ops/s
[info]                  ·gc.alloc.rate:                   1219.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2097.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 986674.518 ops/s
[info]                  ·gc.alloc.rate:                   1223.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2105.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 982907.244 ops/s
[info]                  ·gc.alloc.rate:               1219.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      995.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1593.530 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 989211.837 ops/s
[info]                  ·gc.alloc.rate:                   1226.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2123.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   985577.496 ±(99.9%) 9767.960 ops/s [Average]
[info]   (min, avg, max) = (982907.244, 985577.496, 989211.837), stdev = 2536.708
[info]   CI (99.9%): [975809.537, 995345.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1222.375 ±(99.9%) 12.101 MB/sec [Average]
[info]   (min, avg, max) = (1219.042, 1222.375, 1226.869), stdev = 3.143
[info]   CI (99.9%): [1210.274, 1234.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.020 ±(99.9%) 707.581 MB/sec [Average]
[info]   (min, avg, max) = (978.908, 1188.020, 1334.951), stdev = 183.757
[info]   CI (99.9%): [480.439, 1895.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1896.841 ±(99.9%) 1120.777 B/op [Average]
[info]   (min, avg, max) = (1563.237, 1896.841, 2123.962), stdev = 291.062
[info]   CI (99.9%): [776.065, 3017.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.093 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.167), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 63.59% complete, ETA 00:16:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7110845.600 ops/s
[info] # Warmup Iteration   2: 7641909.549 ops/s
[info] # Warmup Iteration   3: 7775728.322 ops/s
[info] Iteration   1: 7656799.253 ops/s
[info]                  ·gc.alloc.rate:               350.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 7768435.732 ops/s
[info]                  ·gc.alloc.rate:               355.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7749588.574 ops/s
[info]                  ·gc.alloc.rate:                   354.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7735142.658 ops/s
[info]                  ·gc.alloc.rate:                   353.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 7750153.641 ops/s
[info]                  ·gc.alloc.rate:                   354.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7732023.971 ±(99.9%) 168193.166 ops/s [Average]
[info]   (min, avg, max) = (7656799.253, 7732023.971, 7768435.732), stdev = 43679.231
[info]   CI (99.9%): [7563830.806, 7900217.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   353.760 ±(99.9%) 7.752 MB/sec [Average]
[info]   (min, avg, max) = (350.287, 353.760, 355.387), stdev = 2.013
[info]   CI (99.9%): [346.007, 361.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.683 ±(99.9%) 168.258 MB/sec [Average]
[info]   (min, avg, max) = (255.815, 303.683, 335.900), stdev = 43.696
[info]   CI (99.9%): [135.425, 471.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   61.792 ±(99.9%) 33.719 B/op [Average]
[info]   (min, avg, max) = (51.827, 61.792, 68.316), stdev = 8.757
[info]   CI (99.9%): [28.073, 95.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.312 ±(99.9%) 2.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.496), stdev = 0.662
[info]   CI (99.9%): [≈ 0, 2.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.304), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 64.06% complete, ETA 00:16:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38002.792 ops/s
[info] # Warmup Iteration   2: 260734.920 ops/s
[info] # Warmup Iteration   3: 263565.825 ops/s
[info] Iteration   1: 272420.047 ops/s
[info]                  ·gc.alloc.rate:                   1401.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7535.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 269314.731 ops/s
[info]                  ·gc.alloc.rate:                   1385.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7669.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 267946.969 ops/s
[info]                  ·gc.alloc.rate:                   1378.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9709.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 272133.970 ops/s
[info]                  ·gc.alloc.rate:                   1399.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7705.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 271998.608 ops/s
[info]                  ·gc.alloc.rate:                   1399.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7747.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   270762.865 ±(99.9%) 7744.391 ops/s [Average]
[info]   (min, avg, max) = (267946.969, 270762.865, 272420.047), stdev = 2011.194
[info]   CI (99.9%): [263018.474, 278507.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1392.808 ±(99.9%) 39.835 MB/sec [Average]
[info]   (min, avg, max) = (1378.320, 1392.808, 1401.329), stdev = 10.345
[info]   CI (99.9%): [1352.974, 1432.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.002, 8096.002, 8096.002), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1388.177 ±(99.9%) 572.649 MB/sec [Average]
[info]   (min, avg, max) = (1304.306, 1388.177, 1653.002), stdev = 148.715
[info]   CI (99.9%): [815.528, 1960.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8073.383 ±(99.9%) 3534.979 B/op [Average]
[info]   (min, avg, max) = (7535.461, 8073.383, 9709.436), stdev = 918.023
[info]   CI (99.9%): [4538.404, 11608.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.436 ±(99.9%) 0.528 B/op [Average]
[info]   (min, avg, max) = (0.241, 0.436, 0.602), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 64.52% complete, ETA 00:16:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5513.775 ops/s
[info] # Warmup Iteration   2: 7602.829 ops/s
[info] # Warmup Iteration   3: 8008.835 ops/s
[info] Iteration   1: 8152.494 ops/s
[info]                  ·gc.alloc.rate:                   2097.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385870.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.880 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8152.533 ops/s
[info]                  ·gc.alloc.rate:                   2098.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     388490.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.461 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8172.800 ops/s
[info]                  ·gc.alloc.rate:                   2103.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     389544.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.422 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8154.036 ops/s
[info]                  ·gc.alloc.rate:                   2099.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457305.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.438 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8169.610 ops/s
[info]                  ·gc.alloc.rate:                   2102.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              405002.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     392173.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.215 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8160.295 ±(99.9%) 38.670 ops/s [Average]
[info]   (min, avg, max) = (8152.494, 8160.295, 8172.800), stdev = 10.043
[info]   CI (99.9%): [8121.624, 8198.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2100.314 ±(99.9%) 9.092 MB/sec [Average]
[info]   (min, avg, max) = (2097.906, 2100.314, 2103.304), stdev = 2.361
[info]   CI (99.9%): [2091.221, 2109.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405000.546 ±(99.9%) 4.240 B/op [Average]
[info]   (min, avg, max) = (405000.053, 405000.546, 405002.516), stdev = 1.101
[info]   CI (99.9%): [404996.306, 405004.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2088.238 ±(99.9%) 609.722 MB/sec [Average]
[info]   (min, avg, max) = (1998.816, 2088.238, 2370.457), stdev = 158.343
[info]   CI (99.9%): [1478.516, 2697.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   402676.851 ±(99.9%) 117913.952 B/op [Average]
[info]   (min, avg, max) = (385870.825, 402676.851, 457305.644), stdev = 30621.879
[info]   CI (99.9%): [284762.899, 520590.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.124 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.075, 0.124, 0.183), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.883 ±(99.9%) 31.877 B/op [Average]
[info]   (min, avg, max) = (14.438, 23.883, 35.215), stdev = 8.278
[info]   CI (99.9%): [≈ 0, 55.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 64.98% complete, ETA 00:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7106.589 ops/s
[info] # Warmup Iteration   2: 13196.233 ops/s
[info] # Warmup Iteration   3: 12498.550 ops/s
[info] Iteration   1: 13105.112 ops/s
[info]                  ·gc.alloc.rate:                   477.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              57368.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61440.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13240.152 ops/s
[info]                  ·gc.alloc.rate:                   482.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              57368.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77047.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13336.615 ops/s
[info]                  ·gc.alloc.rate:               486.137 MB/sec
[info]                  ·gc.alloc.rate.norm:          57368.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38204.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 13122.699 ops/s
[info]                  ·gc.alloc.rate:                   478.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              57368.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77728.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13131.132 ops/s
[info]                  ·gc.alloc.rate:               478.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          57368.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38883.462 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13187.142 ±(99.9%) 381.055 ops/s [Average]
[info]   (min, avg, max) = (13105.112, 13187.142, 13336.615), stdev = 98.959
[info]   CI (99.9%): [12806.087, 13568.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   480.696 ±(99.9%) 13.851 MB/sec [Average]
[info]   (min, avg, max) = (477.709, 480.696, 486.137), stdev = 3.597
[info]   CI (99.9%): [466.844, 494.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57368.033 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (57368.032, 57368.033, 57368.035), stdev = 0.001
[info]   CI (99.9%): [57368.029, 57368.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   491.222 ±(99.9%) 625.497 MB/sec [Average]
[info]   (min, avg, max) = (323.744, 491.222, 648.162), stdev = 162.440
[info]   CI (99.9%): [≈ 0, 1116.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   58660.976 ±(99.9%) 75037.943 B/op [Average]
[info]   (min, avg, max) = (38204.358, 58660.976, 77728.512), stdev = 19487.115
[info]   CI (99.9%): [≈ 0, 133698.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.548 ±(99.9%) 4.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 2.594), stdev = 1.145
[info]   CI (99.9%): [≈ 0, 4.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   65.187 ±(99.9%) 524.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.187, 308.405), stdev = 136.105
[info]   CI (99.9%): [≈ 0, 589.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 6.000), stdev = 1.924
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 65.44% complete, ETA 00:15:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19440.119 ops/s
[info] # Warmup Iteration   2: 23256.051 ops/s
[info] # Warmup Iteration   3: 23468.506 ops/s
[info] Iteration   1: 23514.319 ops/s
[info]                  ·gc.alloc.rate:                   439.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17121.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23426.308 ops/s
[info]                  ·gc.alloc.rate:                   438.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22354.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23534.548 ops/s
[info]                  ·gc.alloc.rate:                   440.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44481.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23198.229 ops/s
[info]                  ·gc.alloc.rate:                   434.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22550.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 23399.391 ops/s
[info]                  ·gc.alloc.rate:               437.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22357.793 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23414.559 ±(99.9%) 514.879 ops/s [Average]
[info]   (min, avg, max) = (23198.229, 23414.559, 23534.548), stdev = 133.712
[info]   CI (99.9%): [22899.680, 23929.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   438.165 ±(99.9%) 9.359 MB/sec [Average]
[info]   (min, avg, max) = (434.251, 438.165, 440.361), stdev = 2.430
[info]   CI (99.9%): [428.806, 447.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29448.020 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (29448.018, 29448.020, 29448.027), stdev = 0.004
[info]   CI (99.9%): [29448.006, 29448.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.744 ±(99.9%) 619.165 MB/sec [Average]
[info]   (min, avg, max) = (255.807, 383.744, 665.168), stdev = 160.795
[info]   CI (99.9%): [≈ 0, 1002.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25773.033 ±(99.9%) 41230.446 B/op [Average]
[info]   (min, avg, max) = (17121.064, 25773.033, 44481.398), stdev = 10707.416
[info]   CI (99.9%): [≈ 0, 67003.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.353 ±(99.9%) 2.814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.353, 1.660), stdev = 0.731
[info]   CI (99.9%): [≈ 0, 3.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23.690 ±(99.9%) 189.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.690, 111.470), stdev = 49.094
[info]   CI (99.9%): [≈ 0, 212.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 65.90% complete, ETA 00:15:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 836.481 ops/s
[info] # Warmup Iteration   2: 2281.959 ops/s
[info] # Warmup Iteration   3: 2340.312 ops/s
[info] Iteration   1: 2360.910 ops/s
[info]                  ·gc.alloc.rate:                   1504.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              1002671.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     869669.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2349.082 ops/s
[info]                  ·gc.alloc.rate:                   1497.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1002664.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1101451.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.831 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2308.173 ops/s
[info]                  ·gc.alloc.rate:                   1470.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              1002664.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     903709.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.766 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2341.794 ops/s
[info]                  ·gc.alloc.rate:                   1492.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              1002664.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1120853.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.971 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2372.839 ops/s
[info]                  ·gc.alloc.rate:                   1511.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              1002664.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     890450.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.211 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2346.559 ±(99.9%) 94.305 ops/s [Average]
[info]   (min, avg, max) = (2308.173, 2346.559, 2372.839), stdev = 24.491
[info]   CI (99.9%): [2252.254, 2440.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1495.177 ±(99.9%) 60.226 MB/sec [Average]
[info]   (min, avg, max) = (1470.563, 1495.177, 1511.822), stdev = 15.640
[info]   CI (99.9%): [1434.951, 1555.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1002665.588 ±(99.9%) 12.053 B/op [Average]
[info]   (min, avg, max) = (1002664.184, 1002665.588, 1002671.187), stdev = 3.130
[info]   CI (99.9%): [1002653.534, 1002677.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1457.083 ±(99.9%) 703.038 MB/sec [Average]
[info]   (min, avg, max) = (1304.675, 1457.083, 1667.917), stdev = 182.577
[info]   CI (99.9%): [754.045, 2160.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   977226.853 ±(99.9%) 473815.024 B/op [Average]
[info]   (min, avg, max) = (869669.934, 977226.853, 1120853.006), stdev = 123048.257
[info]   CI (99.9%): [503411.828, 1451041.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50.229 ±(99.9%) 60.874 B/op [Average]
[info]   (min, avg, max) = (27.971, 50.229, 69.365), stdev = 15.809
[info]   CI (99.9%): [≈ 0, 111.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 66.36% complete, ETA 00:15:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6346.407 ops/s
[info] # Warmup Iteration   2: 8473.404 ops/s
[info] # Warmup Iteration   3: 8718.736 ops/s
[info] Iteration   1: 8743.999 ops/s
[info]                  ·gc.alloc.rate:                   2012.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2331.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     419562.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.696 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8737.828 ops/s
[info]                  ·gc.alloc.rate:                   2011.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362442.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.997 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8672.142 ops/s
[info]                  ·gc.alloc.rate:                   1996.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305844.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.579 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8727.434 ops/s
[info]                  ·gc.alloc.rate:                   2008.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365962.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.523 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8680.087 ops/s
[info]                  ·gc.alloc.rate:                   1998.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              362303.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368909.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.645 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8712.298 ±(99.9%) 129.667 ops/s [Average]
[info]   (min, avg, max) = (8672.142, 8712.298, 8743.999), stdev = 33.674
[info]   CI (99.9%): [8582.631, 8841.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2005.491 ±(99.9%) 29.705 MB/sec [Average]
[info]   (min, avg, max) = (1996.200, 2005.491, 2012.733), stdev = 7.714
[info]   CI (99.9%): [1975.785, 2035.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362278.319 ±(99.9%) 53.972 B/op [Average]
[info]   (min, avg, max) = (362272.049, 362278.319, 362303.392), stdev = 14.016
[info]   CI (99.9%): [362224.347, 362332.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2018.534 ±(99.9%) 880.466 MB/sec [Average]
[info]   (min, avg, max) = (1685.273, 2018.534, 2331.029), stdev = 228.654
[info]   CI (99.9%): [1138.069, 2899.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   364544.394 ±(99.9%) 155201.769 B/op [Average]
[info]   (min, avg, max) = (305844.741, 364544.394, 419562.281), stdev = 40305.407
[info]   CI (99.9%): [209342.624, 519746.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.151 ±(99.9%) 0.271 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.151, 0.254), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27.288 ±(99.9%) 48.695 B/op [Average]
[info]   (min, avg, max) = (14.997, 27.288, 45.696), stdev = 12.646
[info]   CI (99.9%): [≈ 0, 75.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 66.82% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24313.012 ops/s
[info] # Warmup Iteration   2: 42201.808 ops/s
[info] # Warmup Iteration   3: 42245.170 ops/s
[info] Iteration   1: 42333.279 ops/s
[info]                  ·gc.alloc.rate:                   613.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24098.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41034.680 ops/s
[info]                  ·gc.alloc.rate:               594.688 MB/sec
[info]                  ·gc.alloc.rate.norm:          22807.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24886.401 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 42242.419 ops/s
[info]                  ·gc.alloc.rate:                   612.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12087.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.327 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41739.683 ops/s
[info]                  ·gc.alloc.rate:                   604.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24503.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 42184.925 ops/s
[info]                  ·gc.alloc.rate:                   611.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24306.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   41906.997 ±(99.9%) 2073.992 ops/s [Average]
[info]   (min, avg, max) = (41034.680, 41906.997, 42333.279), stdev = 538.609
[info]   CI (99.9%): [39833.005, 43980.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   607.323 ±(99.9%) 30.036 MB/sec [Average]
[info]   (min, avg, max) = (594.688, 607.323, 613.474), stdev = 7.800
[info]   CI (99.9%): [577.287, 637.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.871 ±(99.9%) 0.256 B/op [Average]
[info]   (min, avg, max) = (22807.796, 22807.871, 22807.956), stdev = 0.067
[info]   CI (99.9%): [22807.614, 22808.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   584.579 ±(99.9%) 560.004 MB/sec [Average]
[info]   (min, avg, max) = (324.434, 584.579, 651.537), stdev = 145.431
[info]   CI (99.9%): [24.575, 1144.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21976.335 ±(99.9%) 21316.661 B/op [Average]
[info]   (min, avg, max) = (12087.117, 21976.335, 24886.401), stdev = 5535.869
[info]   CI (99.9%): [659.674, 43292.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.579 ±(99.9%) 4.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.748), stdev = 1.213
[info]   CI (99.9%): [≈ 0, 5.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.524 ±(99.9%) 173.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.524, 102.164), stdev = 45.090
[info]   CI (99.9%): [≈ 0, 195.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 67.28% complete, ETA 00:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73039.334 ops/s
[info] # Warmup Iteration   2: 82727.833 ops/s
[info] # Warmup Iteration   3: 85789.354 ops/s
[info] Iteration   1: 86408.298 ops/s
[info]                  ·gc.alloc.rate:                   649.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6042.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 86373.715 ops/s
[info]                  ·gc.alloc.rate:                   649.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12065.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.759 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 86039.468 ops/s
[info]                  ·gc.alloc.rate:                   646.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12112.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 84170.802 ops/s
[info]                  ·gc.alloc.rate:                   633.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12405.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 85557.036 ops/s
[info]                  ·gc.alloc.rate:                   643.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12217.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   85709.864 ±(99.9%) 3565.338 ops/s [Average]
[info]   (min, avg, max) = (84170.802, 85709.864, 86408.298), stdev = 925.907
[info]   CI (99.9%): [82144.526, 89275.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   644.457 ±(99.9%) 26.483 MB/sec [Average]
[info]   (min, avg, max) = (633.035, 644.457, 649.596), stdev = 6.877
[info]   CI (99.9%): [617.975, 670.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.005, 11832.005), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   596.838 ±(99.9%) 570.668 MB/sec [Average]
[info]   (min, avg, max) = (331.734, 596.838, 664.289), stdev = 148.201
[info]   CI (99.9%): [26.170, 1167.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10968.561 ±(99.9%) 10616.044 B/op [Average]
[info]   (min, avg, max) = (6042.337, 10968.561, 12405.793), stdev = 2756.953
[info]   CI (99.9%): [352.517, 21584.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.146 ±(99.9%) 1.462 B/op [Average]
[info]   (min, avg, max) = (0.759, 1.146, 1.532), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 2.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.74% complete, ETA 00:14:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71282.402 ops/s
[info] # Warmup Iteration   2: 78866.509 ops/s
[info] # Warmup Iteration   3: 75235.978 ops/s
[info] Iteration   1: 79077.830 ops/s
[info]                  ·gc.alloc.rate:      1.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 79096.616 ops/s
[info]                  ·gc.alloc.rate:      1.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 78966.418 ops/s
[info]                  ·gc.alloc.rate:      1.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78933.869 ops/s
[info]                  ·gc.alloc.rate:      1.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 79118.331 ops/s
[info]                  ·gc.alloc.rate:      1.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   79038.613 ±(99.9%) 318.934 ops/s [Average]
[info]   (min, avg, max) = (78933.869, 79038.613, 79118.331), stdev = 82.826
[info]   CI (99.9%): [78719.679, 79357.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.206 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (1.204, 1.206, 1.207), stdev = 0.001
[info]   CI (99.9%): [1.201, 1.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 68.20% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2603.856 ops/s
[info] # Warmup Iteration   2: 5625.312 ops/s
[info] # Warmup Iteration   3: 5778.021 ops/s
[info] Iteration   1: 5841.051 ops/s
[info]                  ·gc.alloc.rate:                   1733.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              467104.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441557.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5822.571 ops/s
[info]                  ·gc.alloc.rate:                   1728.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              467104.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446599.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.879 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5775.973 ops/s
[info]                  ·gc.alloc.rate:                   1714.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              467102.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454134.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5800.179 ops/s
[info]                  ·gc.alloc.rate:               1721.432 MB/sec
[info]                  ·gc.alloc.rate.norm:          467104.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 546427.014 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 5814.303 ops/s
[info]                  ·gc.alloc.rate:                   1725.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              467104.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456486.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5810.815 ±(99.9%) 94.157 ops/s [Average]
[info]   (min, avg, max) = (5775.973, 5810.815, 5841.051), stdev = 24.452
[info]   CI (99.9%): [5716.658, 5904.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1724.671 ±(99.9%) 27.863 MB/sec [Average]
[info]   (min, avg, max) = (1714.408, 1724.671, 1733.618), stdev = 7.236
[info]   CI (99.9%): [1696.808, 1752.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   467103.942 ±(99.9%) 2.657 B/op [Average]
[info]   (min, avg, max) = (467102.822, 467103.942, 467104.723), stdev = 0.690
[info]   CI (99.9%): [467101.284, 467106.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1731.637 ±(99.9%) 611.100 MB/sec [Average]
[info]   (min, avg, max) = (1638.805, 1731.637, 2013.764), stdev = 158.701
[info]   CI (99.9%): [1120.537, 2342.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   469041.050 ±(99.9%) 168147.702 B/op [Average]
[info]   (min, avg, max) = (441557.633, 469041.050, 546427.014), stdev = 43667.424
[info]   CI (99.9%): [300893.348, 637188.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.895 ±(99.9%) 40.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.895, 28.040), stdev = 10.506
[info]   CI (99.9%): [≈ 0, 57.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 68.66% complete, ETA 00:14:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4740257.244 ops/s
[info] # Warmup Iteration   2: 5228651.398 ops/s
[info] # Warmup Iteration   3: 5315076.302 ops/s
[info] Iteration   1: 5299683.104 ops/s
[info]                  ·gc.alloc.rate:                   1589.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5345025.695 ops/s
[info]                  ·gc.alloc.rate:                   1603.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     395.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5325256.158 ops/s
[info]                  ·gc.alloc.rate:                   1597.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     497.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5346326.663 ops/s
[info]                  ·gc.alloc.rate:                   1603.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     497.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5236467.831 ops/s
[info]                  ·gc.alloc.rate:                   1570.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5310551.890 ±(99.9%) 175310.808 ops/s [Average]
[info]   (min, avg, max) = (5236467.831, 5310551.890, 5346326.663), stdev = 45527.660
[info]   CI (99.9%): [5135241.082, 5485862.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1592.842 ±(99.9%) 52.325 MB/sec [Average]
[info]   (min, avg, max) = (1570.821, 1592.842, 1603.394), stdev = 13.589
[info]   CI (99.9%): [1540.517, 1645.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1547.866 ±(99.9%) 702.029 MB/sec [Average]
[info]   (min, avg, max) = (1342.018, 1547.866, 1688.644), stdev = 182.315
[info]   CI (99.9%): [845.837, 2249.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   458.558 ±(99.9%) 202.804 B/op [Average]
[info]   (min, avg, max) = (395.057, 458.558, 497.510), stdev = 52.667
[info]   CI (99.9%): [255.754, 661.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.026, 0.037), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 69.12% complete, ETA 00:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126580.914 ops/s
[info] # Warmup Iteration   2: 344666.900 ops/s
[info] # Warmup Iteration   3: 353818.852 ops/s
[info] Iteration   1: 357805.123 ops/s
[info]                  ·gc.alloc.rate:                   1909.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7230.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 358585.913 ops/s
[info]                  ·gc.alloc.rate:                   1914.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8739.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.548 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 357149.358 ops/s
[info]                  ·gc.alloc.rate:                   1906.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8850.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 358628.811 ops/s
[info]                  ·gc.alloc.rate:                   1914.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7388.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 357889.807 ops/s
[info]                  ·gc.alloc.rate:                   1910.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8918.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.549 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   358011.802 ±(99.9%) 2367.217 ops/s [Average]
[info]   (min, avg, max) = (357149.358, 358011.802, 358628.811), stdev = 614.759
[info]   CI (99.9%): [355644.586, 360379.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1910.857 ±(99.9%) 12.914 MB/sec [Average]
[info]   (min, avg, max) = (1906.235, 1910.857, 1914.211), stdev = 3.354
[info]   CI (99.9%): [1897.943, 1923.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.001, 8400.001, 8400.001), stdev = 0.001
[info]   CI (99.9%): [8400.001, 8400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.072 ±(99.9%) 732.608 MB/sec [Average]
[info]   (min, avg, max) = (1643.742, 1871.072, 2028.040), stdev = 190.256
[info]   CI (99.9%): [1138.464, 2603.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8225.448 ±(99.9%) 3236.024 B/op [Average]
[info]   (min, avg, max) = (7230.255, 8225.448, 8918.734), stdev = 840.385
[info]   CI (99.9%): [4989.424, 11461.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.384 ±(99.9%) 0.630 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.384, 0.549), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 1.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 69.59% complete, ETA 00:14:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2896588.033 ops/s
[info] # Warmup Iteration   2: 3247987.310 ops/s
[info] # Warmup Iteration   3: 3348507.846 ops/s
[info] Iteration   1: 3350524.450 ops/s
[info]                  ·gc.alloc.rate:                   493.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3368938.838 ops/s
[info]                  ·gc.alloc.rate:                   496.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3327989.469 ops/s
[info]                  ·gc.alloc.rate:                   490.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3368021.128 ops/s
[info]                  ·gc.alloc.rate:                   496.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3365943.498 ops/s
[info]                  ·gc.alloc.rate:                   496.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3356283.477 ±(99.9%) 67385.275 ops/s [Average]
[info]   (min, avg, max) = (3327989.469, 3356283.477, 3368938.838), stdev = 17499.742
[info]   CI (99.9%): [3288898.202, 3423668.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   494.751 ±(99.9%) 9.909 MB/sec [Average]
[info]   (min, avg, max) = (490.562, 494.751, 496.627), stdev = 2.573
[info]   CI (99.9%): [484.843, 504.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.757 ±(99.9%) 657.056 MB/sec [Average]
[info]   (min, avg, max) = (331.724, 515.757, 663.489), stdev = 170.635
[info]   CI (99.9%): [≈ 0, 1172.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   242.069 ±(99.9%) 310.961 B/op [Average]
[info]   (min, avg, max) = (155.025, 242.069, 313.782), stdev = 80.755
[info]   CI (99.9%): [≈ 0, 553.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.400 ±(99.9%) 3.043 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.400, 1.813), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 3.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.188 ±(99.9%) 1.429 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.188, 0.852), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 70.05% complete, ETA 00:13:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109593.431 ops/s
[info] # Warmup Iteration   2: 383105.363 ops/s
[info] # Warmup Iteration   3: 392908.784 ops/s
[info] Iteration   1: 387719.106 ops/s
[info]                  ·gc.alloc.rate:                   1527.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              6200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5308.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 391256.216 ops/s
[info]                  ·gc.alloc.rate:                   1541.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              6200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6628.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 392336.583 ops/s
[info]                  ·gc.alloc.rate:                   1545.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              6200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6660.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 393382.627 ops/s
[info]                  ·gc.alloc.rate:                   1549.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              6200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5351.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 392942.100 ops/s
[info]                  ·gc.alloc.rate:                   1547.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              6200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6734.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.584 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   391527.326 ±(99.9%) 8754.323 ops/s [Average]
[info]   (min, avg, max) = (387719.106, 391527.326, 393382.627), stdev = 2273.470
[info]   CI (99.9%): [382773.003, 400281.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1542.412 ±(99.9%) 34.311 MB/sec [Average]
[info]   (min, avg, max) = (1527.493, 1542.412, 1549.684), stdev = 8.910
[info]   CI (99.9%): [1508.101, 1576.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6200.001, 6200.001, 6200.001), stdev = 0.001
[info]   CI (99.9%): [6200.001, 6200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1527.001 ±(99.9%) 720.828 MB/sec [Average]
[info]   (min, avg, max) = (1307.786, 1527.001, 1681.503), stdev = 187.197
[info]   CI (99.9%): [806.173, 2247.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6136.611 ±(99.9%) 2840.426 B/op [Average]
[info]   (min, avg, max) = (5308.226, 6136.611, 6734.709), stdev = 737.650
[info]   CI (99.9%): [3296.185, 8977.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.187), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.418 ±(99.9%) 0.939 B/op [Average]
[info]   (min, avg, max) = (0.167, 0.418, 0.754), stdev = 0.244
[info]   CI (99.9%): [≈ 0, 1.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 70.51% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 448946.420 ops/s
[info] # Warmup Iteration   2: 649850.380 ops/s
[info] # Warmup Iteration   3: 647586.887 ops/s
[info] Iteration   1: 652466.096 ops/s
[info]                  ·gc.alloc.rate:                   2378.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2345.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5655.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 659222.924 ops/s
[info]                  ·gc.alloc.rate:                   2402.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5632.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 657597.823 ops/s
[info]                  ·gc.alloc.rate:                   2397.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6482.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 660568.183 ops/s
[info]                  ·gc.alloc.rate:                   2407.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5663.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.446 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 658907.592 ops/s
[info]                  ·gc.alloc.rate:                   2401.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5682.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   657752.523 ±(99.9%) 12084.282 ops/s [Average]
[info]   (min, avg, max) = (652466.096, 657752.523, 660568.183), stdev = 3138.250
[info]   CI (99.9%): [645668.242, 669836.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2397.632 ±(99.9%) 42.803 MB/sec [Average]
[info]   (min, avg, max) = (2378.921, 2397.632, 2407.823), stdev = 11.116
[info]   CI (99.9%): [2354.829, 2440.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2434.083 ±(99.9%) 594.766 MB/sec [Average]
[info]   (min, avg, max) = (2345.517, 2434.083, 2709.291), stdev = 154.459
[info]   CI (99.9%): [1839.317, 3028.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5823.223 ±(99.9%) 1420.944 B/op [Average]
[info]   (min, avg, max) = (5632.683, 5823.223, 6482.572), stdev = 369.015
[info]   CI (99.9%): [4402.279, 7244.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.187), stdev = 0.033
[info]   CI (99.9%): [0.019, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.349 ±(99.9%) 0.302 B/op [Average]
[info]   (min, avg, max) = (0.249, 0.349, 0.446), stdev = 0.078
[info]   CI (99.9%): [0.047, 0.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 70.97% complete, ETA 00:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279854.690 ops/s
[info] # Warmup Iteration   2: 620043.227 ops/s
[info] # Warmup Iteration   3: 631187.160 ops/s
[info] Iteration   1: 630708.000 ops/s
[info]                  ·gc.alloc.rate:                   734.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2425.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 634755.113 ops/s
[info]                  ·gc.alloc.rate:                   738.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1607.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 628491.319 ops/s
[info]                  ·gc.alloc.rate:                   731.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1626.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 628419.264 ops/s
[info]                  ·gc.alloc.rate:               731.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      977.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2447.519 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 629747.642 ops/s
[info]                  ·gc.alloc.rate:                   733.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1636.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   630424.268 ±(99.9%) 10013.687 ops/s [Average]
[info]   (min, avg, max) = (628419.264, 630424.268, 634755.113), stdev = 2600.523
[info]   CI (99.9%): [620410.580, 640437.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   733.876 ±(99.9%) 11.708 MB/sec [Average]
[info]   (min, avg, max) = (731.510, 733.876, 738.932), stdev = 3.041
[info]   CI (99.9%): [722.168, 745.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   780.376 ±(99.9%) 682.791 MB/sec [Average]
[info]   (min, avg, max) = (648.220, 780.376, 977.284), stdev = 177.319
[info]   CI (99.9%): [97.585, 1463.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1948.581 ±(99.9%) 1715.544 B/op [Average]
[info]   (min, avg, max) = (1607.103, 1948.581, 2447.519), stdev = 445.521
[info]   CI (99.9%): [233.037, 3664.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.590 ±(99.9%) 4.551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.702), stdev = 1.182
[info]   CI (99.9%): [≈ 0, 5.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.473 ±(99.9%) 11.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.473, 6.744), stdev = 2.949
[info]   CI (99.9%): [≈ 0, 12.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 71.43% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3267826.887 ops/s
[info] # Warmup Iteration   2: 3666082.584 ops/s
[info] # Warmup Iteration   3: 3766731.821 ops/s
[info] Iteration   1: 3766759.912 ops/s
[info]                  ·gc.alloc.rate:                   1493.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3741185.531 ops/s
[info]                  ·gc.alloc.rate:                   1483.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     704.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3772857.989 ops/s
[info]                  ·gc.alloc.rate:                   1495.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3755296.508 ops/s
[info]                  ·gc.alloc.rate:                   1488.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     707.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3760613.682 ops/s
[info]                  ·gc.alloc.rate:                   1490.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     566.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3759342.724 ±(99.9%) 46581.171 ops/s [Average]
[info]   (min, avg, max) = (3741185.531, 3759342.724, 3772857.989), stdev = 12096.982
[info]   CI (99.9%): [3712761.553, 3805923.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1490.555 ±(99.9%) 18.025 MB/sec [Average]
[info]   (min, avg, max) = (1483.621, 1490.555, 1495.906), stdev = 4.681
[info]   CI (99.9%): [1472.530, 1508.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.062 ±(99.9%) 710.687 MB/sec [Average]
[info]   (min, avg, max) = (1334.905, 1479.062, 1687.017), stdev = 184.563
[info]   CI (99.9%): [768.375, 2189.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   619.356 ±(99.9%) 304.068 B/op [Average]
[info]   (min, avg, max) = (557.784, 619.356, 707.039), stdev = 78.966
[info]   CI (99.9%): [315.288, 923.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.026, 0.043), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 71.89% complete, ETA 00:12:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60304.147 ops/s
[info] # Warmup Iteration   2: 233616.624 ops/s
[info] # Warmup Iteration   3: 238745.283 ops/s
[info] Iteration   1: 239286.968 ops/s
[info]                  ·gc.alloc.rate:                   1665.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12916.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.958 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 240588.517 ops/s
[info]                  ·gc.alloc.rate:                   1674.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10809.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 240440.049 ops/s
[info]                  ·gc.alloc.rate:                   1673.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10903.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 240340.149 ops/s
[info]                  ·gc.alloc.rate:                   1672.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10980.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.682 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 240654.110 ops/s
[info]                  ·gc.alloc.rate:                   1674.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11018.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.545 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   240261.959 ±(99.9%) 2151.594 ops/s [Average]
[info]   (min, avg, max) = (239286.968, 240261.959, 240654.110), stdev = 558.762
[info]   CI (99.9%): [238110.365, 242413.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1672.114 ±(99.9%) 14.787 MB/sec [Average]
[info]   (min, avg, max) = (1665.473, 1672.114, 1674.807), stdev = 3.840
[info]   CI (99.9%): [1657.327, 1686.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1728.901 ±(99.9%) 508.545 MB/sec [Average]
[info]   (min, avg, max) = (1653.043, 1728.901, 1964.185), stdev = 132.067
[info]   CI (99.9%): [1220.356, 2237.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11325.538 ±(99.9%) 3437.990 B/op [Average]
[info]   (min, avg, max) = (10809.680, 11325.538, 12916.301), stdev = 892.835
[info]   CI (99.9%): [7887.549, 14763.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.655 ±(99.9%) 0.784 B/op [Average]
[info]   (min, avg, max) = (0.409, 0.655, 0.958), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 1.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 72.35% complete, ETA 00:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608029.717 ops/s
[info] # Warmup Iteration   2: 905051.273 ops/s
[info] # Warmup Iteration   3: 912443.859 ops/s
[info] Iteration   1: 909680.873 ops/s
[info]                  ·gc.alloc.rate:                   2191.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3469.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 900870.758 ops/s
[info]                  ·gc.alloc.rate:                   2170.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2354.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4113.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 918537.265 ops/s
[info]                  ·gc.alloc.rate:                   2213.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3475.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 897364.729 ops/s
[info]                  ·gc.alloc.rate:                   2162.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4162.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 914440.906 ops/s
[info]                  ·gc.alloc.rate:                   2203.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3507.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   908178.906 ±(99.9%) 34393.796 ops/s [Average]
[info]   (min, avg, max) = (897364.729, 908178.906, 918537.265), stdev = 8931.960
[info]   CI (99.9%): [873785.110, 942572.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2188.173 ±(99.9%) 82.864 MB/sec [Average]
[info]   (min, avg, max) = (2162.087, 2188.173, 2213.086), stdev = 21.519
[info]   CI (99.9%): [2105.309, 2271.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3792.000, 3792.000, 3792.001), stdev = 0.001
[info]   CI (99.9%): [3792.000, 3792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2159.993 ±(99.9%) 718.593 MB/sec [Average]
[info]   (min, avg, max) = (2005.600, 2159.993, 2373.134), stdev = 186.616
[info]   CI (99.9%): [1441.401, 2878.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3745.787 ±(99.9%) 1380.845 B/op [Average]
[info]   (min, avg, max) = (3469.835, 3745.787, 4162.147), stdev = 358.601
[info]   CI (99.9%): [2364.942, 5126.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.174 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (0.107, 0.174, 0.292), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 72.81% complete, ETA 00:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 595381.098 ops/s
[info] # Warmup Iteration   2: 1394560.388 ops/s
[info] # Warmup Iteration   3: 1418347.591 ops/s
[info] Iteration   1: 1428186.649 ops/s
[info]                  ·gc.alloc.rate:                   965.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1072.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1429860.299 ops/s
[info]                  ·gc.alloc.rate:                   966.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1073.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1419769.751 ops/s
[info]                  ·gc.alloc.rate:                   959.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1086.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1418005.348 ops/s
[info]                  ·gc.alloc.rate:                   958.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1093.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1431037.993 ops/s
[info]                  ·gc.alloc.rate:                   967.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1090.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1425372.008 ±(99.9%) 23249.673 ops/s [Average]
[info]   (min, avg, max) = (1418005.348, 1425372.008, 1431037.993), stdev = 6037.866
[info]   CI (99.9%): [1402122.335, 1448621.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   963.615 ±(99.9%) 15.706 MB/sec [Average]
[info]   (min, avg, max) = (958.637, 963.615, 967.439), stdev = 4.079
[info]   CI (99.9%): [947.908, 979.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   981.177 ±(99.9%) 28.041 MB/sec [Average]
[info]   (min, avg, max) = (973.552, 981.177, 991.585), stdev = 7.282
[info]   CI (99.9%): [953.136, 1009.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1083.410 ±(99.9%) 36.452 B/op [Average]
[info]   (min, avg, max) = (1072.877, 1083.410, 1093.148), stdev = 9.467
[info]   CI (99.9%): [1046.958, 1119.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.073, 0.115), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 73.27% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5730598.827 ops/s
[info] # Warmup Iteration   2: 6631749.220 ops/s
[info] # Warmup Iteration   3: 6868331.581 ops/s
[info] Iteration   1: 6904006.393 ops/s
[info]                  ·gc.alloc.rate:                   772.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6951054.571 ops/s
[info]                  ·gc.alloc.rate:                   777.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6732080.321 ops/s
[info]                  ·gc.alloc.rate:                   752.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6684823.210 ops/s
[info]                  ·gc.alloc.rate:               747.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      998.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 234.934 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6789920.333 ops/s
[info]                  ·gc.alloc.rate:                   759.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6812376.965 ±(99.9%) 434155.800 ops/s [Average]
[info]   (min, avg, max) = (6684823.210, 6812376.965, 6951054.571), stdev = 112748.883
[info]   CI (99.9%): [6378221.166, 7246532.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   761.865 ±(99.9%) 48.242 MB/sec [Average]
[info]   (min, avg, max) = (747.845, 761.865, 777.328), stdev = 12.528
[info]   CI (99.9%): [713.623, 810.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   797.736 ±(99.9%) 700.802 MB/sec [Average]
[info]   (min, avg, max) = (663.529, 797.736, 998.263), stdev = 181.996
[info]   CI (99.9%): [96.934, 1498.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   184.408 ±(99.9%) 164.250 B/op [Average]
[info]   (min, avg, max) = (150.234, 184.408, 234.934), stdev = 42.655
[info]   CI (99.9%): [20.158, 348.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.167), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.038), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 73.73% complete, ETA 00:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201156.452 ops/s
[info] # Warmup Iteration   2: 517524.897 ops/s
[info] # Warmup Iteration   3: 526411.477 ops/s
[info] Iteration   1: 531494.779 ops/s
[info]                  ·gc.alloc.rate:                   1850.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5838.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.432 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 530631.834 ops/s
[info]                  ·gc.alloc.rate:                   1847.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5907.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.432 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 533373.271 ops/s
[info]                  ·gc.alloc.rate:                   1857.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4937.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 529382.550 ops/s
[info]                  ·gc.alloc.rate:                   1843.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6005.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 529027.499 ops/s
[info]                  ·gc.alloc.rate:                   1842.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5026.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   530781.987 ±(99.9%) 6747.429 ops/s [Average]
[info]   (min, avg, max) = (529027.499, 530781.987, 533373.271), stdev = 1752.286
[info]   CI (99.9%): [524034.557, 537529.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1848.248 ±(99.9%) 22.832 MB/sec [Average]
[info]   (min, avg, max) = (1842.653, 1848.248, 1857.114), stdev = 5.929
[info]   CI (99.9%): [1825.416, 1871.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5480.001, 5480.001, 5480.001), stdev = 0.001
[info]   CI (99.9%): [5480.001, 5480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1869.473 ±(99.9%) 663.328 MB/sec [Average]
[info]   (min, avg, max) = (1673.341, 1869.473, 2020.147), stdev = 172.264
[info]   CI (99.9%): [1206.145, 2532.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5543.399 ±(99.9%) 1989.175 B/op [Average]
[info]   (min, avg, max) = (4937.722, 5543.399, 6005.891), stdev = 516.583
[info]   CI (99.9%): [3554.223, 7532.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.284 ±(99.9%) 0.520 B/op [Average]
[info]   (min, avg, max) = (0.184, 0.284, 0.432), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 74.19% complete, ETA 00:11:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 409569.256 ops/s
[info] # Warmup Iteration   2: 629531.856 ops/s
[info] # Warmup Iteration   3: 637296.770 ops/s
[info] Iteration   1: 625695.872 ops/s
[info]                  ·gc.alloc.rate:                   2223.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2341.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5889.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 637717.400 ops/s
[info]                  ·gc.alloc.rate:                   2265.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4984.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 629025.762 ops/s
[info]                  ·gc.alloc.rate:                   2235.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5922.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 639567.869 ops/s
[info]                  ·gc.alloc.rate:                   2272.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5841.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 634669.450 ops/s
[info]                  ·gc.alloc.rate:                   2255.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5054.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.258 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   633335.271 ±(99.9%) 22515.623 ops/s [Average]
[info]   (min, avg, max) = (625695.872, 633335.271, 639567.869), stdev = 5847.236
[info]   CI (99.9%): [610819.648, 655850.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2250.413 ±(99.9%) 79.382 MB/sec [Average]
[info]   (min, avg, max) = (2223.273, 2250.413, 2272.347), stdev = 20.615
[info]   CI (99.9%): [2171.031, 2329.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5592.001, 5592.001, 5592.001), stdev = 0.001
[info]   CI (99.9%): [5592.001, 5592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2228.277 ±(99.9%) 702.201 MB/sec [Average]
[info]   (min, avg, max) = (2019.756, 2228.277, 2373.738), stdev = 182.359
[info]   CI (99.9%): [1526.077, 2930.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5538.723 ±(99.9%) 1830.445 B/op [Average]
[info]   (min, avg, max) = (4984.670, 5538.723, 5922.920), stdev = 475.361
[info]   CI (99.9%): [3708.278, 7369.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.208 ±(99.9%) 0.452 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.208, 0.367), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 74.65% complete, ETA 00:11:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4617678.363 ops/s
[info] # Warmup Iteration   2: 5002847.650 ops/s
[info] # Warmup Iteration   3: 5092959.364 ops/s
[info] Iteration   1: 5091766.647 ops/s
[info]                  ·gc.alloc.rate:                   1268.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     412.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5170101.700 ops/s
[info]                  ·gc.alloc.rate:                   1287.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5102660.258 ops/s
[info]                  ·gc.alloc.rate:                   1270.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5103559.563 ops/s
[info]                  ·gc.alloc.rate:                   1271.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5103290.882 ops/s
[info]                  ·gc.alloc.rate:                   1271.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     415.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5114275.810 ±(99.9%) 121670.904 ops/s [Average]
[info]   (min, avg, max) = (5091766.647, 5114275.810, 5170101.700), stdev = 31597.547
[info]   CI (99.9%): [4992604.906, 5235946.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1273.916 ±(99.9%) 30.080 MB/sec [Average]
[info]   (min, avg, max) = (1268.195, 1273.916, 1287.681), stdev = 7.812
[info]   CI (99.9%): [1243.835, 1303.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1273.921 ±(99.9%) 577.496 MB/sec [Average]
[info]   (min, avg, max) = (1005.898, 1273.921, 1349.253), stdev = 149.974
[info]   CI (99.9%): [696.425, 1851.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   391.968 ±(99.9%) 176.427 B/op [Average]
[info]   (min, avg, max) = (310.252, 391.968, 415.909), stdev = 45.818
[info]   CI (99.9%): [215.541, 568.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.020, 0.038), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 75.12% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135022.510 ops/s
[info] # Warmup Iteration   2: 357100.428 ops/s
[info] # Warmup Iteration   3: 365511.133 ops/s
[info] Iteration   1: 364868.307 ops/s
[info]                  ·gc.alloc.rate:                   1897.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7093.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 364771.488 ops/s
[info]                  ·gc.alloc.rate:                   1897.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8594.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.629 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 361740.207 ops/s
[info]                  ·gc.alloc.rate:                   1880.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8738.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 361317.008 ops/s
[info]                  ·gc.alloc.rate:                   1878.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7336.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 361957.935 ops/s
[info]                  ·gc.alloc.rate:                   1882.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8818.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.543 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   362930.989 ±(99.9%) 6700.113 ops/s [Average]
[info]   (min, avg, max) = (361317.008, 362930.989, 364868.307), stdev = 1739.998
[info]   CI (99.9%): [356230.876, 369631.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1887.380 ±(99.9%) 35.619 MB/sec [Average]
[info]   (min, avg, max) = (1878.866, 1887.380, 1897.572), stdev = 9.250
[info]   CI (99.9%): [1851.762, 1922.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8184.001, 8184.001, 8184.001), stdev = 0.001
[info]   CI (99.9%): [8184.001, 8184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.593 ±(99.9%) 731.650 MB/sec [Average]
[info]   (min, avg, max) = (1644.660, 1871.593, 2028.197), stdev = 190.007
[info]   CI (99.9%): [1139.943, 2603.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8116.255 ±(99.9%) 3200.779 B/op [Average]
[info]   (min, avg, max) = (7093.225, 8116.255, 8818.902), stdev = 831.232
[info]   CI (99.9%): [4915.476, 11317.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.469 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (0.362, 0.469, 0.629), stdev = 0.116
[info]   CI (99.9%): [0.021, 0.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 75.58% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246751.745 ops/s
[info] # Warmup Iteration   2: 465120.273 ops/s
[info] # Warmup Iteration   3: 474008.438 ops/s
[info] Iteration   1: 474162.987 ops/s
[info]                  ·gc.alloc.rate:                   1291.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4394.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 471769.032 ops/s
[info]                  ·gc.alloc.rate:                   1285.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4432.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 475111.370 ops/s
[info]                  ·gc.alloc.rate:                   1294.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3314.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 463924.847 ops/s
[info]                  ·gc.alloc.rate:                   1263.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4546.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 475276.676 ops/s
[info]                  ·gc.alloc.rate:                   1294.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4453.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   472048.982 ±(99.9%) 18300.203 ops/s [Average]
[info]   (min, avg, max) = (463924.847, 472048.982, 475276.676), stdev = 4752.504
[info]   CI (99.9%): [453748.780, 490349.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1286.113 ±(99.9%) 49.900 MB/sec [Average]
[info]   (min, avg, max) = (1263.956, 1286.113, 1294.855), stdev = 12.959
[info]   CI (99.9%): [1236.213, 1336.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4288.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4288.001, 4288.001, 4288.001), stdev = 0.001
[info]   CI (99.9%): [4288.001, 4288.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1267.696 ±(99.9%) 575.881 MB/sec [Average]
[info]   (min, avg, max) = (1000.595, 1267.696, 1344.948), stdev = 149.555
[info]   CI (99.9%): [691.815, 1843.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4228.453 ±(99.9%) 1979.207 B/op [Average]
[info]   (min, avg, max) = (3314.501, 4228.453, 4546.989), stdev = 513.994
[info]   CI (99.9%): [2249.246, 6207.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.249 ±(99.9%) 0.301 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.249, 0.347), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 76.04% complete, ETA 00:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3067595.649 ops/s
[info] # Warmup Iteration   2: 3553017.144 ops/s
[info] # Warmup Iteration   3: 3574665.517 ops/s
[info] Iteration   1: 3579645.449 ops/s
[info]                  ·gc.alloc.rate:                   582.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3580968.081 ops/s
[info]                  ·gc.alloc.rate:                   582.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3564246.267 ops/s
[info]                  ·gc.alloc.rate:                   579.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 3572872.574 ops/s
[info]                  ·gc.alloc.rate:                   581.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3540329.737 ops/s
[info]                  ·gc.alloc.rate:                   575.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     295.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3567612.422 ±(99.9%) 64044.453 ops/s [Average]
[info]   (min, avg, max) = (3540329.737, 3567612.422, 3580968.081), stdev = 16632.141
[info]   CI (99.9%): [3503567.969, 3631656.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   580.353 ±(99.9%) 10.632 MB/sec [Average]
[info]   (min, avg, max) = (575.858, 580.353, 582.733), stdev = 2.761
[info]   CI (99.9%): [569.721, 590.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.728 ±(99.9%) 572.554 MB/sec [Average]
[info]   (min, avg, max) = (331.743, 597.728, 664.821), stdev = 148.691
[info]   CI (99.9%): [25.174, 1170.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   263.640 ±(99.9%) 252.247 B/op [Average]
[info]   (min, avg, max) = (146.485, 263.640, 295.390), stdev = 65.508
[info]   CI (99.9%): [11.393, 515.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 2.908 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.379, 1.730), stdev = 0.755
[info]   CI (99.9%): [≈ 0, 3.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.167 ±(99.9%) 1.278 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.167, 0.761), stdev = 0.332
[info]   CI (99.9%): [≈ 0, 1.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 76.50% complete, ETA 00:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98621.417 ops/s
[info] # Warmup Iteration   2: 327363.697 ops/s
[info] # Warmup Iteration   3: 329620.830 ops/s
[info] Iteration   1: 329760.206 ops/s
[info]                  ·gc.alloc.rate:                   1200.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4667.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 330222.516 ops/s
[info]                  ·gc.alloc.rate:                   1202.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6243.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 332028.527 ops/s
[info]                  ·gc.alloc.rate:                   1208.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6249.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 331638.273 ops/s
[info]                  ·gc.alloc.rate:                   1206.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4721.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 331643.652 ops/s
[info]                  ·gc.alloc.rate:                   1207.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6328.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   331058.635 ±(99.9%) 3852.534 ops/s [Average]
[info]   (min, avg, max) = (329760.206, 331058.635, 332028.527), stdev = 1000.491
[info]   CI (99.9%): [327206.101, 334911.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1204.974 ±(99.9%) 13.614 MB/sec [Average]
[info]   (min, avg, max) = (1200.156, 1204.974, 1208.406), stdev = 3.536
[info]   CI (99.9%): [1191.360, 1218.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5728.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5728.001, 5728.001, 5728.001), stdev = 0.001
[info]   CI (99.9%): [5728.001, 5728.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1187.055 ±(99.9%) 706.414 MB/sec [Average]
[info]   (min, avg, max) = (977.923, 1187.055, 1333.613), stdev = 183.454
[info]   CI (99.9%): [480.641, 1893.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5642.028 ±(99.9%) 3334.180 B/op [Average]
[info]   (min, avg, max) = (4667.347, 5642.028, 6328.777), stdev = 865.876
[info]   CI (99.9%): [2307.848, 8976.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.475 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (0.395, 0.475, 0.595), stdev = 0.084
[info]   CI (99.9%): [0.152, 0.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 76.96% complete, ETA 00:10:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 946522.759 ops/s
[info] # Warmup Iteration   2: 1747045.258 ops/s
[info] # Warmup Iteration   3: 1756172.361 ops/s
[info] Iteration   1: 1784209.994 ops/s
[info]                  ·gc.alloc.rate:                   2902.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              2560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3024.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2668.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1786462.698 ops/s
[info]                  ·gc.alloc.rate:                   2905.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              2560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2383.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1790891.455 ops/s
[info]                  ·gc.alloc.rate:                   2913.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              2560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2684.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1785797.041 ops/s
[info]                  ·gc.alloc.rate:                   2904.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              2560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2397.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1778854.610 ops/s
[info]                  ·gc.alloc.rate:                   2893.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              2560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2710.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1785243.160 ±(99.9%) 16737.936 ops/s [Average]
[info]   (min, avg, max) = (1778854.610, 1785243.160, 1790891.455), stdev = 4346.789
[info]   CI (99.9%): [1768505.223, 1801981.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2903.829 ±(99.9%) 27.240 MB/sec [Average]
[info]   (min, avg, max) = (2893.473, 2903.829, 2913.040), stdev = 7.074
[info]   CI (99.9%): [2876.589, 2931.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2560.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2560.000, 2560.000, 2560.000), stdev = 0.001
[info]   CI (99.9%): [2560.000, 2560.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2913.644 ±(99.9%) 708.154 MB/sec [Average]
[info]   (min, avg, max) = (2705.917, 2913.644, 3063.666), stdev = 183.905
[info]   CI (99.9%): [2205.490, 3621.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2568.730 ±(99.9%) 629.647 B/op [Average]
[info]   (min, avg, max) = (2383.886, 2568.730, 2710.578), stdev = 163.517
[info]   CI (99.9%): [1939.082, 3198.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (0.073, 0.092, 0.128), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 77.42% complete, ETA 00:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69711.166 ops/s
[info] # Warmup Iteration   2: 291409.882 ops/s
[info] # Warmup Iteration   3: 298265.405 ops/s
[info] Iteration   1: 302043.349 ops/s
[info]                  ·gc.alloc.rate:                   724.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3391.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 299497.681 ops/s
[info]                  ·gc.alloc.rate:                   718.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3423.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 300545.399 ops/s
[info]                  ·gc.alloc.rate:                   721.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5125.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 301442.755 ops/s
[info]                  ·gc.alloc.rate:                   723.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3415.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 300411.662 ops/s
[info]                  ·gc.alloc.rate:               721.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3437.702 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   300788.169 ±(99.9%) 3787.561 ops/s [Average]
[info]   (min, avg, max) = (299497.681, 300788.169, 302043.349), stdev = 983.618
[info]   CI (99.9%): [297000.609, 304575.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   721.806 ±(99.9%) 9.302 MB/sec [Average]
[info]   (min, avg, max) = (718.647, 721.806, 724.919), stdev = 2.416
[info]   CI (99.9%): [712.505, 731.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3776.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3776.001, 3776.001, 3776.002), stdev = 0.001
[info]   CI (99.9%): [3776.001, 3776.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   718.450 ±(99.9%) 560.618 MB/sec [Average]
[info]   (min, avg, max) = (651.058, 718.450, 978.862), stdev = 145.591
[info]   CI (99.9%): [157.832, 1279.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3758.828 ±(99.9%) 2943.634 B/op [Average]
[info]   (min, avg, max) = (3391.271, 3758.828, 5125.989), stdev = 764.452
[info]   CI (99.9%): [815.194, 6702.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.502 ±(99.9%) 3.923 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.502, 2.324), stdev = 1.019
[info]   CI (99.9%): [≈ 0, 4.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.617 ±(99.9%) 20.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.617, 12.105), stdev = 5.306
[info]   CI (99.9%): [≈ 0, 23.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 77.88% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 670722.681 ops/s
[info] # Warmup Iteration   2: 714247.080 ops/s
[info] # Warmup Iteration   3: 705844.261 ops/s
[info] Iteration   1: 727263.309 ops/s
[info]                  ·gc.alloc.rate:                   657.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1451.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 708479.696 ops/s
[info]                  ·gc.alloc.rate:                   641.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1487.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 726832.371 ops/s
[info]                  ·gc.alloc.rate:               657.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1448.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 710691.365 ops/s
[info]                  ·gc.alloc.rate:               643.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 740.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 708192.251 ops/s
[info]                  ·gc.alloc.rate:                   640.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1489.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   716291.799 ±(99.9%) 37996.422 ops/s [Average]
[info]   (min, avg, max) = (708192.251, 716291.799, 727263.309), stdev = 9867.550
[info]   CI (99.9%): [678295.377, 754288.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   648.117 ±(99.9%) 34.258 MB/sec [Average]
[info]   (min, avg, max) = (640.747, 648.117, 657.983), stdev = 8.897
[info]   CI (99.9%): [613.859, 682.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1424.001, 1424.001, 1424.001), stdev = 0.001
[info]   CI (99.9%): [1424.001, 1424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   602.737 ±(99.9%) 577.417 MB/sec [Average]
[info]   (min, avg, max) = (334.495, 602.737, 670.783), stdev = 149.953
[info]   CI (99.9%): [25.319, 1180.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1323.388 ±(99.9%) 1256.778 B/op [Average]
[info]   (min, avg, max) = (740.551, 1323.388, 1489.301), stdev = 326.381
[info]   CI (99.9%): [66.610, 2580.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.101 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.225), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.34% complete, ETA 00:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3472542.229 ops/s
[info] # Warmup Iteration   2: 3724465.820 ops/s
[info] # Warmup Iteration   3: 3812532.074 ops/s
[info] Iteration   1: 3822952.536 ops/s
[info]                  ·gc.alloc.rate:                   2273.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3810020.381 ops/s
[info]                  ·gc.alloc.rate:                   2265.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2366.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     977.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3825362.488 ops/s
[info]                  ·gc.alloc.rate:                   2275.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     976.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3794928.400 ops/s
[info]                  ·gc.alloc.rate:                   2256.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     845.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3790602.076 ops/s
[info]                  ·gc.alloc.rate:                   2254.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2381.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     988.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3808773.176 ±(99.9%) 60874.337 ops/s [Average]
[info]   (min, avg, max) = (3790602.076, 3808773.176, 3825362.488), stdev = 15808.872
[info]   CI (99.9%): [3747898.839, 3869647.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2265.196 ±(99.9%) 36.049 MB/sec [Average]
[info]   (min, avg, max) = (2254.503, 2265.196, 2275.088), stdev = 9.362
[info]   CI (99.9%): [2229.147, 2301.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   936.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (936.000, 936.000, 936.000), stdev = 0.001
[info]   CI (99.9%): [936.000, 936.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2236.198 ±(99.9%) 727.375 MB/sec [Average]
[info]   (min, avg, max) = (2020.468, 2236.198, 2381.008), stdev = 188.897
[info]   CI (99.9%): [1508.823, 2963.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   924.039 ±(99.9%) 301.360 B/op [Average]
[info]   (min, avg, max) = (831.829, 924.039, 988.521), stdev = 78.262
[info]   CI (99.9%): [622.679, 1225.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.034, 0.052), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.80% complete, ETA 00:09:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6229086.713 ops/s
[info] # Warmup Iteration   2: 6631778.183 ops/s
[info] # Warmup Iteration   3: 6889854.982 ops/s
[info] Iteration   1: 6919281.488 ops/s
[info]                  ·gc.alloc.rate:                   809.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6767578.868 ops/s
[info]                  ·gc.alloc.rate:                   791.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6843340.858 ops/s
[info]                  ·gc.alloc.rate:                   800.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6857935.302 ops/s
[info]                  ·gc.alloc.rate:                   801.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6927480.154 ops/s
[info]                  ·gc.alloc.rate:                   809.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6863123.334 ±(99.9%) 249866.039 ops/s [Average]
[info]   (min, avg, max) = (6767578.868, 6863123.334, 6927480.154), stdev = 64889.417
[info]   CI (99.9%): [6613257.295, 7112989.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   802.433 ±(99.9%) 29.483 MB/sec [Average]
[info]   (min, avg, max) = (791.196, 802.433, 809.889), stdev = 7.657
[info]   CI (99.9%): [772.950, 831.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   803.954 ±(99.9%) 703.980 MB/sec [Average]
[info]   (min, avg, max) = (669.451, 803.954, 1005.219), stdev = 182.821
[info]   CI (99.9%): [99.974, 1507.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   184.589 ±(99.9%) 166.713 B/op [Average]
[info]   (min, avg, max) = (152.428, 184.589, 233.309), stdev = 43.295
[info]   CI (99.9%): [17.876, 351.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.013, 0.019), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.26% complete, ETA 00:09:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19978.816 ops/s
[info] # Warmup Iteration   2: 174965.555 ops/s
[info] # Warmup Iteration   3: 184451.815 ops/s
[info] Iteration   1: 191000.327 ops/s
[info]                  ·gc.alloc.rate:                   1593.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13451.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 188880.272 ops/s
[info]                  ·gc.alloc.rate:                   1575.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10957.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 184654.702 ops/s
[info]                  ·gc.alloc.rate:                   1540.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14135.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.355 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 186956.927 ops/s
[info]                  ·gc.alloc.rate:                   1559.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14061.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 189011.356 ops/s
[info]                  ·gc.alloc.rate:                   1576.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11187.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   188100.717 ±(99.9%) 9239.134 ops/s [Average]
[info]   (min, avg, max) = (184654.702, 188100.717, 191000.327), stdev = 2399.374
[info]   CI (99.9%): [178861.582, 197339.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1569.009 ±(99.9%) 76.883 MB/sec [Average]
[info]   (min, avg, max) = (1540.343, 1569.009, 1593.127), stdev = 19.966
[info]   CI (99.9%): [1492.126, 1645.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13128.002, 13128.002, 13128.003), stdev = 0.001
[info]   CI (99.9%): [13128.002, 13128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1523.977 ±(99.9%) 687.477 MB/sec [Average]
[info]   (min, avg, max) = (1314.971, 1523.977, 1670.392), stdev = 178.536
[info]   CI (99.9%): [836.500, 2211.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12758.713 ±(99.9%) 6022.837 B/op [Average]
[info]   (min, avg, max) = (10957.069, 12758.713, 14135.111), stdev = 1564.112
[info]   CI (99.9%): [6735.877, 18781.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.763 ±(99.9%) 1.443 B/op [Average]
[info]   (min, avg, max) = (0.350, 0.763, 1.041), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 2.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 79.72% complete, ETA 00:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 496324.639 ops/s
[info] # Warmup Iteration   2: 737242.712 ops/s
[info] # Warmup Iteration   3: 731363.047 ops/s
[info] Iteration   1: 737613.689 ops/s
[info]                  ·gc.alloc.rate:                   2842.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5739.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 733050.937 ops/s
[info]                  ·gc.alloc.rate:                   2824.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3045.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6537.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 740491.839 ops/s
[info]                  ·gc.alloc.rate:                   2853.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5772.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 738836.298 ops/s
[info]                  ·gc.alloc.rate:                   2846.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5793.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 732363.516 ops/s
[info]                  ·gc.alloc.rate:                   2821.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6583.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   736471.256 ±(99.9%) 13834.987 ops/s [Average]
[info]   (min, avg, max) = (732363.516, 736471.256, 740491.839), stdev = 3592.902
[info]   CI (99.9%): [722636.269, 750306.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2837.691 ±(99.9%) 53.328 MB/sec [Average]
[info]   (min, avg, max) = (2821.721, 2837.691, 2853.086), stdev = 13.849
[info]   CI (99.9%): [2784.363, 2891.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.001, 6064.001, 6064.001), stdev = 0.001
[info]   CI (99.9%): [6064.001, 6064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2846.939 ±(99.9%) 730.993 MB/sec [Average]
[info]   (min, avg, max) = (2690.256, 2846.939, 3063.591), stdev = 189.836
[info]   CI (99.9%): [2115.947, 3577.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6085.383 ±(99.9%) 1673.844 B/op [Average]
[info]   (min, avg, max) = (5739.290, 6085.383, 6583.788), stdev = 434.692
[info]   CI (99.9%): [4411.539, 7759.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.231 ±(99.9%) 0.279 B/op [Average]
[info]   (min, avg, max) = (0.177, 0.231, 0.354), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.18% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2944011.443 ops/s
[info] # Warmup Iteration   2: 2795907.965 ops/s
[info] # Warmup Iteration   3: 2816356.119 ops/s
[info] Iteration   1: 2832345.656 ops/s
[info]                  ·gc.alloc.rate:                   1828.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2784753.522 ops/s
[info]                  ·gc.alloc.rate:                   1797.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     950.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2829467.700 ops/s
[info]                  ·gc.alloc.rate:                   1826.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2824647.304 ops/s
[info]                  ·gc.alloc.rate:                   1823.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2824460.478 ops/s
[info]                  ·gc.alloc.rate:                   1823.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1134.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   2819134.932 ±(99.9%) 75115.156 ops/s [Average]
[info]   (min, avg, max) = (2784753.522, 2819134.932, 2832345.656), stdev = 19507.167
[info]   CI (99.9%): [2744019.776, 2894250.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1819.986 ±(99.9%) 48.586 MB/sec [Average]
[info]   (min, avg, max) = (1797.757, 1819.986, 1828.647), stdev = 12.618
[info]   CI (99.9%): [1771.400, 1868.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1822.396 ±(99.9%) 734.565 MB/sec [Average]
[info]   (min, avg, max) = (1674.921, 1822.396, 2036.639), stdev = 190.764
[info]   CI (99.9%): [1087.831, 2556.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1017.167 ±(99.9%) 400.411 B/op [Average]
[info]   (min, avg, max) = (930.590, 1017.167, 1134.743), stdev = 103.985
[info]   CI (99.9%): [616.757, 1417.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.042, 0.071), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 80.65% complete, ETA 00:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74712.622 ops/s
[info] # Warmup Iteration   2: 257817.230 ops/s
[info] # Warmup Iteration   3: 269839.826 ops/s
[info] Iteration   1: 269232.776 ops/s
[info]                  ·gc.alloc.rate:                   1991.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11534.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.608 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 269644.920 ops/s
[info]                  ·gc.alloc.rate:                   1994.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11641.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.851 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 268294.764 ops/s
[info]                  ·gc.alloc.rate:                   1984.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11793.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 268659.461 ops/s
[info]                  ·gc.alloc.rate:                   1986.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11846.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 267710.798 ops/s
[info]                  ·gc.alloc.rate:                   1979.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9943.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.490 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   268708.544 ±(99.9%) 2933.030 ops/s [Average]
[info]   (min, avg, max) = (267710.798, 268708.544, 269644.920), stdev = 761.699
[info]   CI (99.9%): [265775.513, 271641.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1987.332 ±(99.9%) 21.815 MB/sec [Average]
[info]   (min, avg, max) = (1979.857, 1987.332, 1994.321), stdev = 5.665
[info]   CI (99.9%): [1965.517, 2009.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11640.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11640.002, 11640.002, 11640.002), stdev = 0.001
[info]   CI (99.9%): [11640.001, 11640.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1938.327 ±(99.9%) 536.488 MB/sec [Average]
[info]   (min, avg, max) = (1691.280, 1938.327, 2022.138), stdev = 139.324
[info]   CI (99.9%): [1401.839, 2474.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11351.788 ±(99.9%) 3068.677 B/op [Average]
[info]   (min, avg, max) = (9943.396, 11351.788, 11846.012), stdev = 796.926
[info]   CI (99.9%): [8283.112, 14420.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.512 ±(99.9%) 0.898 B/op [Average]
[info]   (min, avg, max) = (0.244, 0.512, 0.851), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 81.11% complete, ETA 00:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 574992.055 ops/s
[info] # Warmup Iteration   2: 842974.802 ops/s
[info] # Warmup Iteration   3: 843491.482 ops/s
[info] Iteration   1: 847069.568 ops/s
[info]                  ·gc.alloc.rate:                   1954.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3716.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 850768.422 ops/s
[info]                  ·gc.alloc.rate:                   1963.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3725.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 852856.190 ops/s
[info]                  ·gc.alloc.rate:                   1968.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3111.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 852591.216 ops/s
[info]                  ·gc.alloc.rate:                   1968.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3748.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 850704.849 ops/s
[info]                  ·gc.alloc.rate:                   1963.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3765.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   850798.049 ±(99.9%) 8898.763 ops/s [Average]
[info]   (min, avg, max) = (847069.568, 850798.049, 852856.190), stdev = 2310.981
[info]   CI (99.9%): [841899.286, 859696.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1963.550 ±(99.9%) 21.119 MB/sec [Average]
[info]   (min, avg, max) = (1954.820, 1963.550, 1968.383), stdev = 5.485
[info]   CI (99.9%): [1942.431, 1984.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.001, 3632.001, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.000, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1953.280 ±(99.9%) 577.897 MB/sec [Average]
[info]   (min, avg, max) = (1685.999, 1953.280, 2035.156), stdev = 150.078
[info]   CI (99.9%): [1375.383, 2531.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3613.269 ±(99.9%) 1082.784 B/op [Average]
[info]   (min, avg, max) = (3111.429, 3613.269, 3765.162), stdev = 281.196
[info]   CI (99.9%): [2530.485, 4696.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.208 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (0.115, 0.208, 0.270), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 81.57% complete, ETA 00:08:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 690002.239 ops/s
[info] # Warmup Iteration   2: 1518167.279 ops/s
[info] # Warmup Iteration   3: 1544511.698 ops/s
[info] Iteration   1: 1588346.698 ops/s
[info]                  ·gc.alloc.rate:                   912.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1582771.891 ops/s
[info]                  ·gc.alloc.rate:                   909.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     968.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1561055.359 ops/s
[info]                  ·gc.alloc.rate:                   896.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1568993.855 ops/s
[info]                  ·gc.alloc.rate:                   901.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1581972.330 ops/s
[info]                  ·gc.alloc.rate:                   909.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     983.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1576628.026 ±(99.9%) 43241.567 ops/s [Average]
[info]   (min, avg, max) = (1561055.359, 1576628.026, 1588346.698), stdev = 11229.698
[info]   CI (99.9%): [1533386.459, 1619869.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   905.811 ±(99.9%) 24.966 MB/sec [Average]
[info]   (min, avg, max) = (896.654, 905.811, 912.338), stdev = 6.484
[info]   CI (99.9%): [880.845, 930.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   914.746 ±(99.9%) 572.850 MB/sec [Average]
[info]   (min, avg, max) = (648.831, 914.746, 989.385), stdev = 148.767
[info]   CI (99.9%): [341.896, 1487.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   913.427 ±(99.9%) 583.012 B/op [Average]
[info]   (min, avg, max) = (642.901, 913.427, 986.626), stdev = 151.406
[info]   CI (99.9%): [330.415, 1496.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.084), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 82.03% complete, ETA 00:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5425830.133 ops/s
[info] # Warmup Iteration   2: 6062807.489 ops/s
[info] # Warmup Iteration   3: 6192792.105 ops/s
[info] Iteration   1: 6236215.037 ops/s
[info]                  ·gc.alloc.rate:                   475.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6308425.209 ops/s
[info]                  ·gc.alloc.rate:               481.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82.930 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 6300276.908 ops/s
[info]                  ·gc.alloc.rate:                   480.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6254447.556 ops/s
[info]                  ·gc.alloc.rate:                   477.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6266541.047 ops/s
[info]                  ·gc.alloc.rate:               477.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   6273181.151 ±(99.9%) 117710.346 ops/s [Average]
[info]   (min, avg, max) = (6236215.037, 6273181.151, 6308425.209), stdev = 30569.003
[info]   CI (99.9%): [6155470.805, 6390891.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   478.372 ±(99.9%) 8.945 MB/sec [Average]
[info]   (min, avg, max) = (475.489, 478.372, 481.095), stdev = 2.323
[info]   CI (99.9%): [469.426, 487.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.591 ±(99.9%) 628.522 MB/sec [Average]
[info]   (min, avg, max) = (331.729, 449.591, 663.763), stdev = 163.225
[info]   CI (99.9%): [≈ 0, 1078.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   112.905 ±(99.9%) 159.478 B/op [Average]
[info]   (min, avg, max) = (82.873, 112.905, 166.961), stdev = 41.416
[info]   CI (99.9%): [≈ 0, 272.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 3.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.771), stdev = 0.779
[info]   CI (99.9%): [≈ 0, 3.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.447), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 82.49% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184650.045 ops/s
[info] # Warmup Iteration   2: 494865.424 ops/s
[info] # Warmup Iteration   3: 496639.943 ops/s
[info] Iteration   1: 501246.691 ops/s
[info]                  ·gc.alloc.rate:                   1735.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5155.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 498640.611 ops/s
[info]                  ·gc.alloc.rate:                   1726.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5225.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 501393.035 ops/s
[info]                  ·gc.alloc.rate:                   1736.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5239.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 496329.219 ops/s
[info]                  ·gc.alloc.rate:                   1718.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5322.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 500487.517 ops/s
[info]                  ·gc.alloc.rate:                   1732.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6366.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   499619.415 ±(99.9%) 8243.168 ops/s [Average]
[info]   (min, avg, max) = (496329.219, 499619.415, 501393.035), stdev = 2140.725
[info]   CI (99.9%): [491376.247, 507862.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1729.590 ±(99.9%) 28.863 MB/sec [Average]
[info]   (min, avg, max) = (1718.102, 1729.590, 1736.068), stdev = 7.496
[info]   CI (99.9%): [1700.728, 1758.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1734.013 ±(99.9%) 627.521 MB/sec [Average]
[info]   (min, avg, max) = (1642.126, 1734.013, 2024.489), stdev = 162.965
[info]   CI (99.9%): [1106.492, 2361.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5461.717 ±(99.9%) 1960.467 B/op [Average]
[info]   (min, avg, max) = (5155.940, 5461.717, 6366.318), stdev = 509.127
[info]   CI (99.9%): [3501.249, 7422.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.146), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.262 ±(99.9%) 0.436 B/op [Average]
[info]   (min, avg, max) = (0.196, 0.262, 0.458), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 82.95% complete, ETA 00:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2782895.410 ops/s
[info] # Warmup Iteration   2: 3247288.981 ops/s
[info] # Warmup Iteration   3: 3294858.385 ops/s
[info] Iteration   1: 3239256.951 ops/s
[info]                  ·gc.alloc.rate:                   1531.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     811.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3237908.080 ops/s
[info]                  ·gc.alloc.rate:                   1530.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3291029.820 ops/s
[info]                  ·gc.alloc.rate:                   1555.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     804.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3262113.902 ops/s
[info]                  ·gc.alloc.rate:                   1542.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     814.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3273496.775 ops/s
[info]                  ·gc.alloc.rate:                   1547.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3260761.106 ±(99.9%) 87489.136 ops/s [Average]
[info]   (min, avg, max) = (3237908.080, 3260761.106, 3291029.820), stdev = 22720.651
[info]   CI (99.9%): [3173271.970, 3348250.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1541.520 ±(99.9%) 41.219 MB/sec [Average]
[info]   (min, avg, max) = (1530.910, 1541.520, 1555.752), stdev = 10.704
[info]   CI (99.9%): [1500.302, 1582.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1546.808 ±(99.9%) 702.443 MB/sec [Average]
[info]   (min, avg, max) = (1340.535, 1546.808, 1688.357), stdev = 182.422
[info]   CI (99.9%): [844.365, 2249.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   746.471 ±(99.9%) 335.341 B/op [Average]
[info]   (min, avg, max) = (650.833, 746.471, 814.581), stdev = 87.087
[info]   CI (99.9%): [411.130, 1081.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.036, 0.061), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 83.41% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118161.285 ops/s
[info] # Warmup Iteration   2: 302336.535 ops/s
[info] # Warmup Iteration   3: 311020.976 ops/s
[info] Iteration   1: 311685.347 ops/s
[info]                  ·gc.alloc.rate:                   1666.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              8416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8274.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 311361.213 ops/s
[info]                  ·gc.alloc.rate:                   1665.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              8416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8355.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 305106.563 ops/s
[info]                  ·gc.alloc.rate:                   1631.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              8416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8594.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 307545.549 ops/s
[info]                  ·gc.alloc.rate:                   1644.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              8416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8583.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 308489.937 ops/s
[info]                  ·gc.alloc.rate:                   1649.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              8416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8598.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   308837.722 ±(99.9%) 10578.621 ops/s [Average]
[info]   (min, avg, max) = (305106.563, 308837.722, 311685.347), stdev = 2747.234
[info]   CI (99.9%): [298259.100, 319416.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1651.503 ±(99.9%) 56.558 MB/sec [Average]
[info]   (min, avg, max) = (1631.567, 1651.503, 1666.687), stdev = 14.688
[info]   CI (99.9%): [1594.945, 1708.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8416.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8416.001, 8416.001, 8416.001), stdev = 0.001
[info]   CI (99.9%): [8416.001, 8416.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.139 ±(99.9%) 71.870 MB/sec [Average]
[info]   (min, avg, max) = (1638.757, 1664.139, 1685.378), stdev = 18.664
[info]   CI (99.9%): [1592.270, 1736.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8481.366 ±(99.9%) 593.784 B/op [Average]
[info]   (min, avg, max) = (8274.965, 8481.366, 8598.033), stdev = 154.204
[info]   CI (99.9%): [7887.581, 9075.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.444 ±(99.9%) 0.873 B/op [Average]
[info]   (min, avg, max) = (0.213, 0.444, 0.736), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 1.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 83.87% complete, ETA 00:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257232.708 ops/s
[info] # Warmup Iteration   2: 486761.102 ops/s
[info] # Warmup Iteration   3: 486344.738 ops/s
[info] Iteration   1: 495900.455 ops/s
[info]                  ·gc.alloc.rate:                   1344.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              4264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4202.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 498205.894 ops/s
[info]                  ·gc.alloc.rate:                   1349.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              4264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4200.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 493284.420 ops/s
[info]                  ·gc.alloc.rate:                   1336.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              4264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4262.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 492097.924 ops/s
[info]                  ·gc.alloc.rate:                   1333.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              4264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4290.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 492205.759 ops/s
[info]                  ·gc.alloc.rate:                   1334.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              4264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4305.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   494338.890 ±(99.9%) 10201.716 ops/s [Average]
[info]   (min, avg, max) = (492097.924, 494338.890, 498205.894), stdev = 2649.353
[info]   CI (99.9%): [484137.174, 504540.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1339.539 ±(99.9%) 27.643 MB/sec [Average]
[info]   (min, avg, max) = (1333.231, 1339.539, 1349.778), stdev = 7.179
[info]   CI (99.9%): [1311.896, 1367.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4264.001, 4264.001, 4264.001), stdev = 0.001
[info]   CI (99.9%): [4264.001, 4264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1335.849 ±(99.9%) 34.407 MB/sec [Average]
[info]   (min, avg, max) = (1324.901, 1335.849, 1347.160), stdev = 8.935
[info]   CI (99.9%): [1301.442, 1370.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4252.453 ±(99.9%) 188.675 B/op [Average]
[info]   (min, avg, max) = (4200.390, 4252.453, 4305.919), stdev = 48.998
[info]   CI (99.9%): [4063.778, 4441.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.251 ±(99.9%) 0.453 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.251, 0.395), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 84.33% complete, ETA 00:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2606102.442 ops/s
[info] # Warmup Iteration   2: 2962828.672 ops/s
[info] # Warmup Iteration   3: 2982056.504 ops/s
[info] Iteration   1: 3008872.169 ops/s
[info]                  ·gc.alloc.rate:                   565.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3022666.358 ops/s
[info]                  ·gc.alloc.rate:               568.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172.730 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2972576.794 ops/s
[info]                  ·gc.alloc.rate:                   559.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3001120.633 ops/s
[info]                  ·gc.alloc.rate:                   564.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2999851.479 ops/s
[info]                  ·gc.alloc.rate:               564.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   3001017.487 ±(99.9%) 70494.471 ops/s [Average]
[info]   (min, avg, max) = (2972576.794, 3001017.487, 3022666.358), stdev = 18307.190
[info]   CI (99.9%): [2930523.016, 3071511.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   564.519 ±(99.9%) 13.508 MB/sec [Average]
[info]   (min, avg, max) = (559.076, 564.519, 568.704), stdev = 3.508
[info]   CI (99.9%): [551.011, 578.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   531.294 ±(99.9%) 700.644 MB/sec [Average]
[info]   (min, avg, max) = (331.866, 531.294, 664.873), stdev = 181.955
[info]   CI (99.9%): [≈ 0, 1231.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   278.825 ±(99.9%) 370.361 B/op [Average]
[info]   (min, avg, max) = (172.730, 278.825, 351.291), stdev = 96.182
[info]   CI (99.9%): [≈ 0, 649.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.386 ±(99.9%) 2.968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 1.761), stdev = 0.771
[info]   CI (99.9%): [≈ 0, 3.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.202 ±(99.9%) 1.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 0.921), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 1.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 84.79% complete, ETA 00:07:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96632.104 ops/s
[info] # Warmup Iteration   2: 331411.610 ops/s
[info] # Warmup Iteration   3: 335083.243 ops/s
[info] Iteration   1: 339997.503 ops/s
[info]                  ·gc.alloc.rate:                   1315.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6031.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 336514.951 ops/s
[info]                  ·gc.alloc.rate:                   1301.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6134.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 334030.888 ops/s
[info]                  ·gc.alloc.rate:                   1292.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6220.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 340011.202 ops/s
[info]                  ·gc.alloc.rate:                   1315.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6154.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 342767.711 ops/s
[info]                  ·gc.alloc.rate:                   1326.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6142.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.669 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   338664.451 ±(99.9%) 13131.453 ops/s [Average]
[info]   (min, avg, max) = (334030.888, 338664.451, 342767.711), stdev = 3410.197
[info]   CI (99.9%): [325532.998, 351795.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1310.232 ±(99.9%) 51.708 MB/sec [Average]
[info]   (min, avg, max) = (1292.100, 1310.232, 1326.495), stdev = 13.428
[info]   CI (99.9%): [1258.524, 1361.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.653 ±(99.9%) 54.240 MB/sec [Average]
[info]   (min, avg, max) = (1302.968, 1320.653, 1338.274), stdev = 14.086
[info]   CI (99.9%): [1266.413, 1374.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6136.706 ±(99.9%) 261.784 B/op [Average]
[info]   (min, avg, max) = (6031.545, 6136.706, 6220.861), stdev = 67.985
[info]   CI (99.9%): [5874.922, 6398.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 0.806 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.424, 0.669), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 85.25% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154543.286 ops/s
[info] # Warmup Iteration   2: 698995.164 ops/s
[info] # Warmup Iteration   3: 718749.484 ops/s
[info] Iteration   1: 719213.251 ops/s
[info]                  ·gc.alloc.rate:                   2128.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2332.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5103.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 718435.688 ops/s
[info]                  ·gc.alloc.rate:                   2125.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4408.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 722942.000 ops/s
[info]                  ·gc.alloc.rate:                   2139.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4404.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 721555.214 ops/s
[info]                  ·gc.alloc.rate:                   2135.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5168.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 716091.348 ops/s
[info]                  ·gc.alloc.rate:                   2118.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4475.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   719647.500 ±(99.9%) 10331.713 ops/s [Average]
[info]   (min, avg, max) = (716091.348, 719647.500, 722942.000), stdev = 2683.113
[info]   CI (99.9%): [709315.787, 729979.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2129.340 ±(99.9%) 31.887 MB/sec [Average]
[info]   (min, avg, max) = (2118.422, 2129.340, 2139.527), stdev = 8.281
[info]   CI (99.9%): [2097.453, 2161.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2155.117 ±(99.9%) 692.824 MB/sec [Average]
[info]   (min, avg, max) = (2012.406, 2155.117, 2370.172), stdev = 179.924
[info]   CI (99.9%): [1462.293, 2847.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4712.100 ±(99.9%) 1496.749 B/op [Average]
[info]   (min, avg, max) = (4404.289, 4712.100, 5168.355), stdev = 388.701
[info]   CI (99.9%): [3215.350, 6208.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.246 ±(99.9%) 0.321 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.246, 0.320), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 85.71% complete, ETA 00:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 489809.913 ops/s
[info] # Warmup Iteration   2: 1477376.967 ops/s
[info] # Warmup Iteration   3: 1466601.720 ops/s
[info] Iteration   1: 1487998.722 ops/s
[info]                  ·gc.alloc.rate:                   1126.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1034.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1480209.907 ops/s
[info]                  ·gc.alloc.rate:                   1121.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1391.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1483667.607 ops/s
[info]                  ·gc.alloc.rate:                   1123.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1047.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1476749.390 ops/s
[info]                  ·gc.alloc.rate:                   1118.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1411.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1484117.002 ops/s
[info]                  ·gc.alloc.rate:                   1124.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1059.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1482548.526 ±(99.9%) 16395.359 ops/s [Average]
[info]   (min, avg, max) = (1476749.390, 1482548.526, 1487998.722), stdev = 4257.823
[info]   CI (99.9%): [1466153.167, 1498943.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1122.822 ±(99.9%) 12.473 MB/sec [Average]
[info]   (min, avg, max) = (1118.382, 1122.822, 1126.946), stdev = 3.239
[info]   CI (99.9%): [1110.350, 1135.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.532 ±(99.9%) 693.773 MB/sec [Average]
[info]   (min, avg, max) = (977.920, 1119.532, 1324.259), stdev = 180.171
[info]   CI (99.9%): [425.759, 1813.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1188.909 ±(99.9%) 749.004 B/op [Average]
[info]   (min, avg, max) = (1034.371, 1188.909, 1411.429), stdev = 194.514
[info]   CI (99.9%): [439.905, 1937.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.075, 0.111), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 86.18% complete, ETA 00:06:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4922293.529 ops/s
[info] # Warmup Iteration   2: 5498269.719 ops/s
[info] # Warmup Iteration   3: 5604739.737 ops/s
[info] Iteration   1: 5395295.246 ops/s
[info]                  ·gc.alloc.rate:      164.622 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5477839.191 ops/s
[info]                  ·gc.alloc.rate:               167.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5591037.175 ops/s
[info]                  ·gc.alloc.rate:                   170.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5621545.442 ops/s
[info]                  ·gc.alloc.rate:      171.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5608554.386 ops/s
[info]                  ·gc.alloc.rate:               171.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.784 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   5538854.288 ±(99.9%) 379005.019 ops/s [Average]
[info]   (min, avg, max) = (5395295.246, 5538854.288, 5621545.442), stdev = 98426.400
[info]   CI (99.9%): [5159849.269, 5917859.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   168.960 ±(99.9%) 11.498 MB/sec [Average]
[info]   (min, avg, max) = (164.622, 168.960, 171.451), stdev = 2.986
[info]   CI (99.9%): [157.462, 180.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   153.514 ±(99.9%) 539.625 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.514, 255.947), stdev = 140.139
[info]   CI (99.9%): [≈ 0, 693.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.459 ±(99.9%) 152.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.459, 73.498), stdev = 39.678
[info]   CI (99.9%): [≈ 0, 196.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 86.64% complete, ETA 00:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41041.592 ops/s
[info] # Warmup Iteration   2: 214097.708 ops/s
[info] # Warmup Iteration   3: 220563.386 ops/s
[info] Iteration   1: 221729.436 ops/s
[info]                  ·gc.alloc.rate:                   1544.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11586.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.739 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 220987.854 ops/s
[info]                  ·gc.alloc.rate:                   1538.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11725.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.741 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 221733.295 ops/s
[info]                  ·gc.alloc.rate:               1544.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9423.840 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 222122.685 ops/s
[info]                  ·gc.alloc.rate:                   1546.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11835.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 219661.887 ops/s
[info]                  ·gc.alloc.rate:                   1529.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9627.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   221247.031 ±(99.9%) 3760.935 ops/s [Average]
[info]   (min, avg, max) = (219661.887, 221247.031, 222122.685), stdev = 976.703
[info]   CI (99.9%): [217486.097, 225007.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1540.734 ±(99.9%) 26.280 MB/sec [Average]
[info]   (min, avg, max) = (1529.719, 1540.734, 1546.914), stdev = 6.825
[info]   CI (99.9%): [1514.454, 1567.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.002, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1524.132 ±(99.9%) 664.747 MB/sec [Average]
[info]   (min, avg, max) = (1327.735, 1524.132, 1670.529), stdev = 172.633
[info]   CI (99.9%): [859.384, 2188.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10839.902 ±(99.9%) 4640.988 B/op [Average]
[info]   (min, avg, max) = (9423.840, 10839.902, 11835.823), stdev = 1205.250
[info]   CI (99.9%): [6198.914, 15480.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.355 ±(99.9%) 1.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.355, 0.741), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.10% complete, ETA 00:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 469477.594 ops/s
[info] # Warmup Iteration   2: 933265.906 ops/s
[info] # Warmup Iteration   3: 963945.503 ops/s
[info] Iteration   1: 947083.992 ops/s
[info]                  ·gc.alloc.rate:                   1618.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2757.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 962472.061 ops/s
[info]                  ·gc.alloc.rate:                   1643.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2730.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 944793.714 ops/s
[info]                  ·gc.alloc.rate:                   1614.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2794.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 955971.295 ops/s
[info]                  ·gc.alloc.rate:                   1633.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2774.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 959440.236 ops/s
[info]                  ·gc.alloc.rate:                   1638.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2773.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   953952.260 ±(99.9%) 29692.027 ops/s [Average]
[info]   (min, avg, max) = (944793.714, 953952.260, 962472.061), stdev = 7710.925
[info]   CI (99.9%): [924260.233, 983644.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1629.706 ±(99.9%) 49.816 MB/sec [Average]
[info]   (min, avg, max) = (1614.237, 1629.706, 1643.770), stdev = 12.937
[info]   CI (99.9%): [1579.891, 1679.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2688.000, 2688.000, 2688.000), stdev = 0.001
[info]   CI (99.9%): [2688.000, 2688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.032 ±(99.9%) 48.045 MB/sec [Average]
[info]   (min, avg, max) = (1660.043, 1677.032, 1691.064), stdev = 12.477
[info]   CI (99.9%): [1628.987, 1725.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2766.150 ±(99.9%) 92.339 B/op [Average]
[info]   (min, avg, max) = (2730.340, 2766.150, 2794.760), stdev = 23.980
[info]   CI (99.9%): [2673.811, 2858.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.151, 0.204), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 87.56% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 909265.951 ops/s
[info] # Warmup Iteration   2: 2408088.092 ops/s
[info] # Warmup Iteration   3: 2397684.181 ops/s
[info] Iteration   1: 2441954.638 ops/s
[info]                  ·gc.alloc.rate:                   1079.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     630.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2442695.202 ops/s
[info]                  ·gc.alloc.rate:                   1080.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     632.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2436407.023 ops/s
[info]                  ·gc.alloc.rate:                   1077.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2441565.241 ops/s
[info]                  ·gc.alloc.rate:                   1079.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     639.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2466645.263 ops/s
[info]                  ·gc.alloc.rate:                   1090.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2445853.473 ±(99.9%) 45768.369 ops/s [Average]
[info]   (min, avg, max) = (2436407.023, 2445853.473, 2466645.263), stdev = 11885.900
[info]   CI (99.9%): [2400085.104, 2491621.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1081.669 ±(99.9%) 20.157 MB/sec [Average]
[info]   (min, avg, max) = (1077.443, 1081.669, 1090.803), stdev = 5.235
[info]   CI (99.9%): [1061.512, 1101.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1052.898 ±(99.9%) 565.758 MB/sec [Average]
[info]   (min, avg, max) = (977.899, 1052.898, 1315.342), stdev = 146.926
[info]   CI (99.9%): [487.140, 1618.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   677.652 ±(99.9%) 370.562 B/op [Average]
[info]   (min, avg, max) = (630.257, 677.652, 849.676), stdev = 96.234
[info]   CI (99.9%): [307.090, 1048.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.051, 0.067), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.02% complete, ETA 00:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4420429.871 ops/s
[info] # Warmup Iteration   2: 6570491.046 ops/s
[info] # Warmup Iteration   3: 6557159.469 ops/s
[info] Iteration   1: 6616852.556 ops/s
[info]                  ·gc.alloc.rate:                   538.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6430584.877 ops/s
[info]                  ·gc.alloc.rate:                   522.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6651474.770 ops/s
[info]                  ·gc.alloc.rate:               540.965 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78.657 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 6640420.721 ops/s
[info]                  ·gc.alloc.rate:                   540.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6578201.354 ops/s
[info]                  ·gc.alloc.rate:               534.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79.530 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6583506.856 ±(99.9%) 346472.593 ops/s [Average]
[info]   (min, avg, max) = (6430584.877, 6583506.856, 6651474.770), stdev = 89977.832
[info]   CI (99.9%): [6237034.263, 6929979.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   535.471 ±(99.9%) 28.308 MB/sec [Average]
[info]   (min, avg, max) = (522.994, 535.471, 540.965), stdev = 7.351
[info]   CI (99.9%): [507.163, 563.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.595 ±(99.9%) 658.416 MB/sec [Average]
[info]   (min, avg, max) = (332.411, 516.595, 665.175), stdev = 170.988
[info]   CI (99.9%): [≈ 0, 1175.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   123.678 ±(99.9%) 160.052 B/op [Average]
[info]   (min, avg, max) = (78.657, 123.678, 162.798), stdev = 41.565
[info]   CI (99.9%): [≈ 0, 283.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.378 ±(99.9%) 2.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.745), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.090 ±(99.9%) 0.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.415), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.48% complete, ETA 00:05:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4924075.065 ops/s
[info] # Warmup Iteration   2: 6818281.969 ops/s
[info] # Warmup Iteration   3: 7207961.013 ops/s
[info] Iteration   1: 7228237.645 ops/s
[info]                  ·gc.alloc.rate:                   220.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7139248.701 ops/s
[info]                  ·gc.alloc.rate:               217.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7142380.768 ops/s
[info]                  ·gc.alloc.rate:                   217.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7173525.702 ops/s
[info]                  ·gc.alloc.rate:      218.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7175617.135 ops/s
[info]                  ·gc.alloc.rate:               218.852 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.105 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   7171801.990 ±(99.9%) 137870.189 ops/s [Average]
[info]   (min, avg, max) = (7139248.701, 7171801.990, 7228237.645), stdev = 35804.450
[info]   CI (99.9%): [7033931.801, 7309672.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   218.743 ±(99.9%) 4.219 MB/sec [Average]
[info]   (min, avg, max) = (217.766, 218.743, 220.473), stdev = 1.096
[info]   CI (99.9%): [214.524, 222.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.653 ±(99.9%) 440.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.653, 255.834), stdev = 114.405
[info]   CI (99.9%): [≈ 0, 645.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   44.912 ±(99.9%) 96.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.912, 56.391), stdev = 25.108
[info]   CI (99.9%): [≈ 0, 141.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.94% complete, ETA 00:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41716.446 ops/s
[info] # Warmup Iteration   2: 307107.055 ops/s
[info] # Warmup Iteration   3: 313761.216 ops/s
[info] Iteration   1: 316580.086 ops/s
[info]                  ·gc.alloc.rate:                   1628.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8135.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 313766.075 ops/s
[info]                  ·gc.alloc.rate:                   1614.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6621.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.627 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 316945.162 ops/s
[info]                  ·gc.alloc.rate:                   1630.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8249.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 317104.646 ops/s
[info]                  ·gc.alloc.rate:                   1631.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8305.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 316479.361 ops/s
[info]                  ·gc.alloc.rate:                   1627.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8368.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   316175.066 ±(99.9%) 5278.697 ops/s [Average]
[info]   (min, avg, max) = (313766.075, 316175.066, 317104.646), stdev = 1370.861
[info]   CI (99.9%): [310896.369, 321453.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1626.507 ±(99.9%) 26.646 MB/sec [Average]
[info]   (min, avg, max) = (1614.335, 1626.507, 1631.151), stdev = 6.920
[info]   CI (99.9%): [1599.861, 1653.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.001), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.872 ±(99.9%) 594.837 MB/sec [Average]
[info]   (min, avg, max) = (1320.261, 1594.872, 1682.701), stdev = 154.477
[info]   CI (99.9%): [1000.035, 2189.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7936.081 ±(99.9%) 2849.422 B/op [Average]
[info]   (min, avg, max) = (6621.203, 7936.081, 8368.042), stdev = 739.986
[info]   CI (99.9%): [5086.659, 10785.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.415 ±(99.9%) 0.571 B/op [Average]
[info]   (min, avg, max) = (0.310, 0.415, 0.627), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 89.40% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345359.593 ops/s
[info] # Warmup Iteration   2: 500762.449 ops/s
[info] # Warmup Iteration   3: 506977.359 ops/s
[info] Iteration   1: 500667.935 ops/s
[info]                  ·gc.alloc.rate:                   1951.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6301.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 501884.176 ops/s
[info]                  ·gc.alloc.rate:                   1956.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6323.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 500053.202 ops/s
[info]                  ·gc.alloc.rate:                   1950.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5310.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 501807.132 ops/s
[info]                  ·gc.alloc.rate:                   1956.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6372.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 507606.657 ops/s
[info]                  ·gc.alloc.rate:                   1979.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6314.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   502403.820 ±(99.9%) 11589.460 ops/s [Average]
[info]   (min, avg, max) = (500053.202, 502403.820, 507606.657), stdev = 3009.746
[info]   CI (99.9%): [490814.360, 513993.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1958.876 ±(99.9%) 44.762 MB/sec [Average]
[info]   (min, avg, max) = (1950.308, 1958.876, 1979.053), stdev = 11.625
[info]   CI (99.9%): [1914.114, 2003.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6136.001, 6136.001, 6136.001), stdev = 0.001
[info]   CI (99.9%): [6136.001, 6136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1955.441 ±(99.9%) 577.797 MB/sec [Average]
[info]   (min, avg, max) = (1687.990, 1955.441, 2036.551), stdev = 150.052
[info]   CI (99.9%): [1377.644, 2533.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6124.368 ±(99.9%) 1754.550 B/op [Average]
[info]   (min, avg, max) = (5310.705, 6124.368, 6372.468), stdev = 455.651
[info]   CI (99.9%): [4369.819, 7878.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.222 ±(99.9%) 0.288 B/op [Average]
[info]   (min, avg, max) = (0.131, 0.222, 0.327), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 89.86% complete, ETA 00:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384782.961 ops/s
[info] # Warmup Iteration   2: 886849.289 ops/s
[info] # Warmup Iteration   3: 882368.653 ops/s
[info] Iteration   1: 894597.409 ops/s
[info]                  ·gc.alloc.rate:                   1914.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3487.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 895127.856 ops/s
[info]                  ·gc.alloc.rate:                   1915.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3517.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 896188.167 ops/s
[info]                  ·gc.alloc.rate:                   1917.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2946.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 888924.052 ops/s
[info]                  ·gc.alloc.rate:                   1902.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3583.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 890022.107 ops/s
[info]                  ·gc.alloc.rate:                   1904.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3592.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   892971.918 ±(99.9%) 12584.178 ops/s [Average]
[info]   (min, avg, max) = (888924.052, 892971.918, 896188.167), stdev = 3268.071
[info]   CI (99.9%): [880387.741, 905556.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1910.961 ±(99.9%) 27.097 MB/sec [Average]
[info]   (min, avg, max) = (1902.175, 1910.961, 1917.795), stdev = 7.037
[info]   CI (99.9%): [1883.864, 1938.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3368.000, 3368.000, 3368.001), stdev = 0.001
[info]   CI (99.9%): [3368.000, 3368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1943.288 ±(99.9%) 576.526 MB/sec [Average]
[info]   (min, avg, max) = (1677.701, 1943.288, 2031.754), stdev = 149.722
[info]   CI (99.9%): [1366.762, 2519.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3425.505 ±(99.9%) 1045.253 B/op [Average]
[info]   (min, avg, max) = (2946.352, 3425.505, 3592.712), stdev = 271.449
[info]   CI (99.9%): [2380.252, 4470.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.169 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (0.110, 0.169, 0.220), stdev = 0.041
[info]   CI (99.9%): [0.009, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 90.32% complete, ETA 00:04:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 769228.649 ops/s
[info] # Warmup Iteration   2: 815745.622 ops/s
[info] # Warmup Iteration   3: 818853.611 ops/s
[info] Iteration   1: 824749.653 ops/s
[info]                  ·gc.alloc.rate:                   1387.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2558.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 822136.566 ops/s
[info]                  ·gc.alloc.rate:                   1383.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2571.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 818625.525 ops/s
[info]                  ·gc.alloc.rate:                   1377.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2589.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 814860.809 ops/s
[info]                  ·gc.alloc.rate:                   1371.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3260.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 823848.806 ops/s
[info]                  ·gc.alloc.rate:                   1386.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2585.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   820844.272 ±(99.9%) 15721.043 ops/s [Average]
[info]   (min, avg, max) = (814860.809, 820844.272, 824749.653), stdev = 4082.705
[info]   CI (99.9%): [805123.228, 836565.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1381.141 ±(99.9%) 25.881 MB/sec [Average]
[info]   (min, avg, max) = (1371.390, 1381.141, 1387.578), stdev = 6.721
[info]   CI (99.9%): [1355.260, 1407.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2648.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2648.001, 2648.001, 2648.001), stdev = 0.001
[info]   CI (99.9%): [2648.000, 2648.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1414.603 ±(99.9%) 589.961 MB/sec [Average]
[info]   (min, avg, max) = (1340.570, 1414.603, 1688.535), stdev = 153.211
[info]   CI (99.9%): [824.642, 2004.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2713.140 ±(99.9%) 1178.926 B/op [Average]
[info]   (min, avg, max) = (2558.293, 2713.140, 3260.371), stdev = 306.163
[info]   CI (99.9%): [1534.214, 3892.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.128 ±(99.9%) 0.276 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.128, 0.201), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 90.78% complete, ETA 00:04:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191699.662 ops/s
[info] # Warmup Iteration   2: 292390.810 ops/s
[info] # Warmup Iteration   3: 292951.518 ops/s
[info] Iteration   1: 292960.134 ops/s
[info]                  ·gc.alloc.rate:                   1495.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8923.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.671 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 292852.668 ops/s
[info]                  ·gc.alloc.rate:                   1494.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7174.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.559 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 296656.346 ops/s
[info]                  ·gc.alloc.rate:                   1513.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8893.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.552 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 293911.235 ops/s
[info]                  ·gc.alloc.rate:                   1499.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7210.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 295693.316 ops/s
[info]                  ·gc.alloc.rate:                   1509.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7188.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   294414.740 ±(99.9%) 6520.284 ops/s [Average]
[info]   (min, avg, max) = (292852.668, 294414.740, 296656.346), stdev = 1693.297
[info]   CI (99.9%): [287894.456, 300935.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1502.513 ±(99.9%) 33.114 MB/sec [Average]
[info]   (min, avg, max) = (1494.596, 1502.513, 1513.903), stdev = 8.599
[info]   CI (99.9%): [1469.400, 1535.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8032.001, 8032.002, 8032.002), stdev = 0.001
[info]   CI (99.9%): [8032.001, 8032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1473.951 ±(99.9%) 685.439 MB/sec [Average]
[info]   (min, avg, max) = (1335.069, 1473.951, 1676.352), stdev = 178.006
[info]   CI (99.9%): [788.512, 2159.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7878.430 ±(99.9%) 3622.895 B/op [Average]
[info]   (min, avg, max) = (7174.695, 7878.430, 8923.967), stdev = 940.854
[info]   CI (99.9%): [4255.535, 11501.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.468 ±(99.9%) 0.708 B/op [Average]
[info]   (min, avg, max) = (0.223, 0.468, 0.671), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 1.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 91.24% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373928.837 ops/s
[info] # Warmup Iteration   2: 721224.910 ops/s
[info] # Warmup Iteration   3: 720765.768 ops/s
[info] Iteration   1: 727283.505 ops/s
[info]                  ·gc.alloc.rate:                   735.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1416.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 727736.419 ops/s
[info]                  ·gc.alloc.rate:                   736.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1416.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 728931.917 ops/s
[info]                  ·gc.alloc.rate:                   737.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1415.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 727562.088 ops/s
[info]                  ·gc.alloc.rate:                   735.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2132.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 732796.831 ops/s
[info]                  ·gc.alloc.rate:                   741.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1417.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   728862.152 ±(99.9%) 8809.507 ops/s [Average]
[info]   (min, avg, max) = (727283.505, 728862.152, 732796.831), stdev = 2287.801
[info]   CI (99.9%): [720052.645, 737671.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   737.254 ±(99.9%) 8.928 MB/sec [Average]
[info]   (min, avg, max) = (735.650, 737.254, 741.238), stdev = 2.319
[info]   CI (99.9%): [728.326, 746.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   722.164 ±(99.9%) 567.007 MB/sec [Average]
[info]   (min, avg, max) = (654.476, 722.164, 985.542), stdev = 147.250
[info]   CI (99.9%): [155.158, 1289.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1559.675 ±(99.9%) 1232.018 B/op [Average]
[info]   (min, avg, max) = (1415.990, 1559.675, 2132.019), stdev = 319.951
[info]   CI (99.9%): [327.658, 2791.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.162 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.162, 0.225), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 91.71% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 707873.350 ops/s
[info] # Warmup Iteration   2: 980163.439 ops/s
[info] # Warmup Iteration   3: 939056.694 ops/s
[info] Iteration   1: 947085.114 ops/s
[info]                  ·gc.alloc.rate:                   799.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1104.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 939838.402 ops/s
[info]                  ·gc.alloc.rate:                   793.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 927251.101 ops/s
[info]                  ·gc.alloc.rate:                   782.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1693.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 946400.248 ops/s
[info]                  ·gc.alloc.rate:               798.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1107.770 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 927648.195 ops/s
[info]                  ·gc.alloc.rate:                   782.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1699.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   937644.612 ±(99.9%) 37459.779 ops/s [Average]
[info]   (min, avg, max) = (927251.101, 937644.612, 947085.114), stdev = 9728.186
[info]   CI (99.9%): [900184.833, 975104.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   791.211 ±(99.9%) 31.835 MB/sec [Average]
[info]   (min, avg, max) = (782.386, 791.211, 799.119), stdev = 8.268
[info]   CI (99.9%): [759.376, 823.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   798.995 ±(99.9%) 704.918 MB/sec [Average]
[info]   (min, avg, max) = (664.781, 798.995, 1001.526), stdev = 183.065
[info]   CI (99.9%): [94.077, 1503.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1343.644 ±(99.9%) 1239.386 B/op [Average]
[info]   (min, avg, max) = (1104.752, 1343.644, 1699.239), stdev = 321.865
[info]   CI (99.9%): [104.258, 2583.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.173), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 92.17% complete, ETA 00:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591271.089 ops/s
[info] # Warmup Iteration   2: 760984.583 ops/s
[info] # Warmup Iteration   3: 762415.538 ops/s
[info] Iteration   1: 762741.943 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 762694.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 762659.896 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 760339.918 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 760426.786 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   761772.611 ±(99.9%) 4886.159 ops/s [Average]
[info]   (min, avg, max) = (760339.918, 761772.611, 762741.943), stdev = 1268.920
[info]   CI (99.9%): [756886.452, 766658.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 92.63% complete, ETA 00:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 579476.498 ops/s
[info] # Warmup Iteration   2: 767156.873 ops/s
[info] # Warmup Iteration   3: 766185.804 ops/s
[info] Iteration   1: 771869.469 ops/s
[info]                  ·gc.alloc.rate:                   824.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1350.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 773785.449 ops/s
[info]                  ·gc.alloc.rate:                   825.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2020.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 778703.148 ops/s
[info]                  ·gc.alloc.rate:               831.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1339.664 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 773563.415 ops/s
[info]                  ·gc.alloc.rate:                   825.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2027.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 781143.684 ops/s
[info]                  ·gc.alloc.rate:                   833.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1342.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   775813.033 ±(99.9%) 15097.789 ops/s [Average]
[info]   (min, avg, max) = (771869.469, 775813.033, 781143.684), stdev = 3920.848
[info]   CI (99.9%): [760715.244, 790910.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   828.158 ±(99.9%) 16.108 MB/sec [Average]
[info]   (min, avg, max) = (824.000, 828.158, 833.870), stdev = 4.183
[info]   CI (99.9%): [812.050, 844.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.000, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   796.202 ±(99.9%) 698.417 MB/sec [Average]
[info]   (min, avg, max) = (662.207, 796.202, 996.545), stdev = 181.377
[info]   CI (99.9%): [97.785, 1494.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1615.945 ±(99.9%) 1433.971 B/op [Average]
[info]   (min, avg, max) = (1339.664, 1615.945, 2027.522), stdev = 372.398
[info]   CI (99.9%): [181.974, 3049.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.161 ±(99.9%) 0.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.296), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 93.09% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1129814.444 ops/s
[info] # Warmup Iteration   2: 1557388.803 ops/s
[info] # Warmup Iteration   3: 1568638.800 ops/s
[info] Iteration   1: 1594719.326 ops/s
[info]                  ·gc.alloc.rate:                   1953.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1978.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1599405.516 ops/s
[info]                  ·gc.alloc.rate:                   1959.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1652.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1598645.784 ops/s
[info]                  ·gc.alloc.rate:                   1958.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1993.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1589391.264 ops/s
[info]                  ·gc.alloc.rate:                   1947.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2011.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1578794.402 ops/s
[info]                  ·gc.alloc.rate:                   1934.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2030.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1592191.258 ±(99.9%) 32640.498 ops/s [Average]
[info]   (min, avg, max) = (1578794.402, 1592191.258, 1599405.516), stdev = 8476.634
[info]   CI (99.9%): [1559550.760, 1624831.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1950.656 ±(99.9%) 39.091 MB/sec [Average]
[info]   (min, avg, max) = (1934.803, 1950.656, 1959.620), stdev = 10.152
[info]   CI (99.9%): [1911.564, 1989.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1928.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1928.000, 1928.000, 1928.000), stdev = 0.001
[info]   CI (99.9%): [1928.000, 1928.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1955.493 ±(99.9%) 595.627 MB/sec [Average]
[info]   (min, avg, max) = (1679.683, 1955.493, 2037.213), stdev = 154.682
[info]   CI (99.9%): [1359.867, 2551.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1933.166 ±(99.9%) 608.637 B/op [Average]
[info]   (min, avg, max) = (1652.580, 1933.166, 2030.051), stdev = 158.061
[info]   CI (99.9%): [1324.529, 2541.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.078, 0.102), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 93.55% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 578787.203 ops/s
[info] # Warmup Iteration   2: 1173063.966 ops/s
[info] # Warmup Iteration   3: 1171885.075 ops/s
[info] Iteration   1: 1216215.576 ops/s
[info]                  ·gc.alloc.rate:                   754.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1200778.600 ops/s
[info]                  ·gc.alloc.rate:                   744.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     857.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1216851.874 ops/s
[info]                  ·gc.alloc.rate:                   754.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     847.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1210071.424 ops/s
[info]                  ·gc.alloc.rate:                   750.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1281.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1214699.690 ops/s
[info]                  ·gc.alloc.rate:                   753.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     855.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1211723.433 ±(99.9%) 25676.668 ops/s [Average]
[info]   (min, avg, max) = (1200778.600, 1211723.433, 1216851.874), stdev = 6668.149
[info]   CI (99.9%): [1186046.765, 1237400.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   751.496 ±(99.9%) 15.890 MB/sec [Average]
[info]   (min, avg, max) = (744.764, 751.496, 754.734), stdev = 4.126
[info]   CI (99.9%): [735.607, 767.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   722.098 ±(99.9%) 567.173 MB/sec [Average]
[info]   (min, avg, max) = (654.501, 722.098, 985.550), stdev = 147.293
[info]   CI (99.9%): [154.925, 1289.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   937.964 ±(99.9%) 740.551 B/op [Average]
[info]   (min, avg, max) = (846.931, 937.964, 1281.892), stdev = 192.319
[info]   CI (99.9%): [197.413, 1678.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.076 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.076, 0.108), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 94.01% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1855005.728 ops/s
[info] # Warmup Iteration   2: 1988812.976 ops/s
[info] # Warmup Iteration   3: 1963784.454 ops/s
[info] Iteration   1: 1992939.376 ops/s
[info]                  ·gc.alloc.rate:                   324.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1999508.587 ops/s
[info]                  ·gc.alloc.rate:               325.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201.352 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2000839.080 ops/s
[info]                  ·gc.alloc.rate:                   325.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2002612.089 ops/s
[info]                  ·gc.alloc.rate:                   325.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1969860.256 ops/s
[info]                  ·gc.alloc.rate:               320.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 267.720 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1993151.877 ±(99.9%) 52074.220 ops/s [Average]
[info]   (min, avg, max) = (1969860.256, 1993151.877, 2002612.089), stdev = 13523.509
[info]   CI (99.9%): [1941077.658, 2045226.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   324.235 ±(99.9%) 8.210 MB/sec [Average]
[info]   (min, avg, max) = (320.560, 324.235, 325.728), stdev = 2.132
[info]   CI (99.9%): [316.024, 332.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   354.839 ±(99.9%) 362.874 MB/sec [Average]
[info]   (min, avg, max) = (255.806, 354.839, 511.685), stdev = 94.237
[info]   CI (99.9%): [≈ 0, 717.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   280.213 ±(99.9%) 287.083 B/op [Average]
[info]   (min, avg, max) = (201.352, 280.213, 404.033), stdev = 74.555
[info]   CI (99.9%): [≈ 0, 567.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.323 ±(99.9%) 2.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.323, 1.511), stdev = 0.665
[info]   CI (99.9%): [≈ 0, 2.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.254 ±(99.9%) 2.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.254, 1.189), stdev = 0.523
[info]   CI (99.9%): [≈ 0, 2.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 94.47% complete, ETA 00:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 975655.310 ops/s
[info] # Warmup Iteration   2: 1468416.739 ops/s
[info] # Warmup Iteration   3: 1480064.374 ops/s
[info] Iteration   1: 1478092.745 ops/s
[info]                  ·gc.alloc.rate:                   961.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1057.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1467575.191 ops/s
[info]                  ·gc.alloc.rate:                   954.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1066.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1472366.383 ops/s
[info]                  ·gc.alloc.rate:               957.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 710.640 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 1472518.425 ops/s
[info]                  ·gc.alloc.rate:                   958.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1068.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1474254.375 ops/s
[info]                  ·gc.alloc.rate:                   959.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1070.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1472961.424 ±(99.9%) 14607.600 ops/s [Average]
[info]   (min, avg, max) = (1467575.191, 1472961.424, 1478092.745), stdev = 3793.547
[info]   CI (99.9%): [1458353.824, 1487569.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   958.421 ±(99.9%) 9.587 MB/sec [Average]
[info]   (min, avg, max) = (954.880, 958.421, 961.677), stdev = 2.490
[info]   CI (99.9%): [948.834, 968.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1024.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.000, 1024.000, 1024.000), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931.138 ±(99.9%) 573.492 MB/sec [Average]
[info]   (min, avg, max) = (664.810, 931.138, 1003.259), stdev = 148.934
[info]   CI (99.9%): [357.646, 1504.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   994.822 ±(99.9%) 612.021 B/op [Average]
[info]   (min, avg, max) = (710.640, 994.822, 1070.637), stdev = 158.940
[info]   CI (99.9%): [382.801, 1606.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.111), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 94.93% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1275347.731 ops/s
[info] # Warmup Iteration   2: 2616766.101 ops/s
[info] # Warmup Iteration   3: 2703342.153 ops/s
[info] Iteration   1: 2722508.851 ops/s
[info]                  ·gc.alloc.rate:                   996.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2659820.400 ops/s
[info]                  ·gc.alloc.rate:                   973.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     582.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2702587.698 ops/s
[info]                  ·gc.alloc.rate:                   989.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2699150.824 ops/s
[info]                  ·gc.alloc.rate:                   987.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     578.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2716514.028 ops/s
[info]                  ·gc.alloc.rate:                   994.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     577.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2700116.360 ±(99.9%) 94342.963 ops/s [Average]
[info]   (min, avg, max) = (2659820.400, 2700116.360, 2722508.851), stdev = 24500.568
[info]   CI (99.9%): [2605773.397, 2794459.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   988.201 ±(99.9%) 34.467 MB/sec [Average]
[info]   (min, avg, max) = (973.488, 988.201, 996.390), stdev = 8.951
[info]   CI (99.9%): [953.734, 1022.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   576.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (576.000, 576.000, 576.000), stdev = 0.001
[info]   CI (99.9%): [576.000, 576.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   989.008 ±(99.9%) 22.557 MB/sec [Average]
[info]   (min, avg, max) = (983.291, 989.008, 997.271), stdev = 5.858
[info]   CI (99.9%): [966.451, 1011.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   576.500 ±(99.9%) 19.713 B/op [Average]
[info]   (min, avg, max) = (568.428, 576.500, 582.221), stdev = 5.119
[info]   CI (99.9%): [556.787, 596.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.056, 0.074), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 95.39% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2218232.829 ops/s
[info] # Warmup Iteration   2: 2925701.848 ops/s
[info] # Warmup Iteration   3: 3012387.850 ops/s
[info] Iteration   1: 3010205.270 ops/s
[info]                  ·gc.alloc.rate:                   596.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3027428.622 ops/s
[info]                  ·gc.alloc.rate:               600.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172.467 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 3022432.224 ops/s
[info]                  ·gc.alloc.rate:                   599.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     345.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2962484.073 ops/s
[info]                  ·gc.alloc.rate:                   587.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3025690.103 ops/s
[info]                  ·gc.alloc.rate:                   599.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     345.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3009648.058 ±(99.9%) 104778.606 ops/s [Average]
[info]   (min, avg, max) = (2962484.073, 3009648.058, 3027428.622), stdev = 27210.671
[info]   CI (99.9%): [2904869.453, 3114426.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   596.730 ±(99.9%) 20.298 MB/sec [Average]
[info]   (min, avg, max) = (587.565, 596.730, 600.157), stdev = 5.271
[info]   CI (99.9%): [576.432, 617.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.989 ±(99.9%) 573.096 MB/sec [Average]
[info]   (min, avg, max) = (331.754, 597.989, 665.169), stdev = 148.831
[info]   CI (99.9%): [24.893, 1171.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   312.879 ±(99.9%) 302.453 B/op [Average]
[info]   (min, avg, max) = (172.467, 312.879, 352.831), stdev = 78.546
[info]   CI (99.9%): [10.425, 615.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.417 ±(99.9%) 3.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.417, 1.814), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 3.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.218 ±(99.9%) 1.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.218, 0.948), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 95.85% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2359064.430 ops/s
[info] # Warmup Iteration   2: 3185436.726 ops/s
[info] # Warmup Iteration   3: 3194317.399 ops/s
[info] Iteration   1: 3193426.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3186629.329 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3196164.610 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3197008.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3197776.073 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3194200.989 ±(99.9%) 17482.124 ops/s [Average]
[info]   (min, avg, max) = (3186629.329, 3194200.989, 3197776.073), stdev = 4540.052
[info]   CI (99.9%): [3176718.865, 3211683.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 96.31% complete, ETA 00:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2173948.578 ops/s
[info] # Warmup Iteration   2: 2805653.185 ops/s
[info] # Warmup Iteration   3: 2823342.008 ops/s
[info] Iteration   1: 2810596.341 ops/s
[info]                  ·gc.alloc.rate:                   1185.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2818637.435 ops/s
[info]                  ·gc.alloc.rate:                   1189.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     556.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2820211.175 ops/s
[info]                  ·gc.alloc.rate:                   1190.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2814071.065 ops/s
[info]                  ·gc.alloc.rate:                   1187.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2828408.843 ops/s
[info]                  ·gc.alloc.rate:                   1193.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2818384.972 ±(99.9%) 26055.896 ops/s [Average]
[info]   (min, avg, max) = (2810596.341, 2818384.972, 2828408.843), stdev = 6766.633
[info]   CI (99.9%): [2792329.076, 2844440.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1189.171 ±(99.9%) 11.110 MB/sec [Average]
[info]   (min, avg, max) = (1185.791, 1189.171, 1193.281), stdev = 2.885
[info]   CI (99.9%): [1178.061, 1200.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1200.811 ±(99.9%) 704.887 MB/sec [Average]
[info]   (min, avg, max) = (996.662, 1200.811, 1343.948), stdev = 183.057
[info]   CI (99.9%): [495.924, 1905.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   670.439 ±(99.9%) 391.668 B/op [Average]
[info]   (min, avg, max) = (556.482, 670.439, 747.839), stdev = 101.715
[info]   CI (99.9%): [278.771, 1062.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.046 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.046, 0.070), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.77% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6066.124 ops/s
[info] # Warmup Iteration   2: 10335.382 ops/s
[info] # Warmup Iteration   3: 11219.928 ops/s
[info] Iteration   1: 11823.187 ops/s
[info]                  ·gc.alloc.rate:                   1667.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220311.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.855 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11835.936 ops/s
[info]                  ·gc.alloc.rate:                   1669.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221487.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.912 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11982.211 ops/s
[info]                  ·gc.alloc.rate:                   1689.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              221974.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219995.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12000.409 ops/s
[info]                  ·gc.alloc.rate:                   1692.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220713.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.730 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11950.407 ops/s
[info]                  ·gc.alloc.rate:                   1685.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222426.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.673 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11918.430 ±(99.9%) 320.365 ops/s [Average]
[info]   (min, avg, max) = (11823.187, 11918.430, 12000.409), stdev = 83.198
[info]   CI (99.9%): [11598.065, 12238.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1681.029 ±(99.9%) 45.475 MB/sec [Average]
[info]   (min, avg, max) = (1667.497, 1681.029, 1692.752), stdev = 11.810
[info]   CI (99.9%): [1635.555, 1726.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221985.271 ±(99.9%) 80.612 B/op [Average]
[info]   (min, avg, max) = (221968.036, 221985.271, 222008.039), stdev = 20.935
[info]   CI (99.9%): [221904.658, 222065.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1673.466 ±(99.9%) 51.986 MB/sec [Average]
[info]   (min, avg, max) = (1655.055, 1673.466, 1688.933), stdev = 13.501
[info]   CI (99.9%): [1621.480, 1725.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   220986.912 ±(99.9%) 3771.020 B/op [Average]
[info]   (min, avg, max) = (219995.357, 220986.912, 222426.541), stdev = 979.322
[info]   CI (99.9%): [217215.892, 224757.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.129, 0.187), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17.062 ±(99.9%) 35.478 B/op [Average]
[info]   (min, avg, max) = (2.730, 17.062, 24.912), stdev = 9.213
[info]   CI (99.9%): [≈ 0, 52.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 97.24% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5588.836 ops/s
[info] # Warmup Iteration   2: 15336.629 ops/s
[info] # Warmup Iteration   3: 15342.795 ops/s
[info] Iteration   1: 15734.477 ops/s
[info]                  ·gc.alloc.rate:                   243.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              24320.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25584.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.471 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15699.812 ops/s
[info]                  ·gc.alloc.rate:               242.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          24320.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25641.800 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15816.175 ops/s
[info]                  ·gc.alloc.rate:                   244.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              24320.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25453.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15508.207 ops/s
[info]                  ·gc.alloc.rate:               239.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          24320.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25957.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15698.149 ops/s
[info]                  ·gc.alloc.rate:                   242.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              24316.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          322.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32356.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15691.364 ±(99.9%) 435.227 ops/s [Average]
[info]   (min, avg, max) = (15508.207, 15691.364, 15816.175), stdev = 113.027
[info]   CI (99.9%): [15256.137, 16126.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   242.498 ±(99.9%) 6.609 MB/sec [Average]
[info]   (min, avg, max) = (239.734, 242.498, 244.427), stdev = 1.716
[info]   CI (99.9%): [235.889, 249.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24319.313 ±(99.9%) 6.155 B/op [Average]
[info]   (min, avg, max) = (24316.454, 24319.313, 24320.030), stdev = 1.598
[info]   CI (99.9%): [24313.158, 24325.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   269.213 ±(99.9%) 115.338 MB/sec [Average]
[info]   (min, avg, max) = (255.777, 269.213, 322.794), stdev = 29.953
[info]   CI (99.9%): [153.875, 384.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26998.947 ±(99.9%) 11555.316 B/op [Average]
[info]   (min, avg, max) = (25453.770, 26998.947, 32356.861), stdev = 3000.879
[info]   CI (99.9%): [15443.631, 38554.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.603 ±(99.9%) 5.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.603, 2.927), stdev = 1.300
[info]   CI (99.9%): [≈ 0, 5.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   60.440 ±(99.9%) 501.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.440, 293.420), stdev = 130.266
[info]   CI (99.9%): [≈ 0, 562.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 97.70% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18455.509 ops/s
[info] # Warmup Iteration   2: 22096.291 ops/s
[info] # Warmup Iteration   3: 36565.353 ops/s
[info] Iteration   1: 36461.357 ops/s
[info]                  ·gc.alloc.rate:                   405.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22083.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 36662.866 ops/s
[info]                  ·gc.alloc.rate:               407.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10980.752 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 36582.813 ops/s
[info]                  ·gc.alloc.rate:                   406.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14314.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.560 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 36518.296 ops/s
[info]                  ·gc.alloc.rate:                   405.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28666.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.691 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 36518.071 ops/s
[info]                  ·gc.alloc.rate:               405.786 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14325.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36548.681 ±(99.9%) 296.330 ops/s [Average]
[info]   (min, avg, max) = (36461.357, 36548.681, 36662.866), stdev = 76.956
[info]   CI (99.9%): [36252.350, 36845.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   406.152 ±(99.9%) 3.120 MB/sec [Average]
[info]   (min, avg, max) = (405.319, 406.152, 407.396), stdev = 0.810
[info]   CI (99.9%): [403.033, 409.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17488.019 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (17488.012, 17488.019, 17488.046), stdev = 0.015
[info]   CI (99.9%): [17487.960, 17488.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   419.582 ±(99.9%) 640.804 MB/sec [Average]
[info]   (min, avg, max) = (255.805, 419.582, 665.147), stdev = 166.415
[info]   CI (99.9%): [≈ 0, 1060.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18074.153 ±(99.9%) 27684.591 B/op [Average]
[info]   (min, avg, max) = (10980.752, 18074.153, 28666.168), stdev = 7189.600
[info]   CI (99.9%): [≈ 0, 45758.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.360 ±(99.9%) 2.908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.360, 1.710), stdev = 0.755
[info]   CI (99.9%): [≈ 0, 3.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.480 ±(99.9%) 125.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.480, 73.560), stdev = 32.487
[info]   CI (99.9%): [≈ 0, 140.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.16% complete, ETA 00:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 870.705 ops/s
[info] # Warmup Iteration   2: 3004.508 ops/s
[info] # Warmup Iteration   3: 2795.312 ops/s
[info] Iteration   1: 3391.448 ops/s
[info]                  ·gc.alloc.rate:                   1095.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              508127.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453960.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3509.489 ops/s
[info]                  ·gc.alloc.rate:                   1133.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              508152.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441985.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3497.869 ops/s
[info]                  ·gc.alloc.rate:                   1129.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              508152.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     595162.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3510.155 ops/s
[info]                  ·gc.alloc.rate:                   1133.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              508152.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     447832.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.666 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3503.524 ops/s
[info]                  ·gc.alloc.rate:               1131.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          508152.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 601195.543 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3482.497 ±(99.9%) 196.928 ops/s [Average]
[info]   (min, avg, max) = (3391.448, 3482.497, 3510.155), stdev = 51.142
[info]   CI (99.9%): [3285.569, 3679.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1124.661 ±(99.9%) 63.268 MB/sec [Average]
[info]   (min, avg, max) = (1095.416, 1124.661, 1133.615), stdev = 16.430
[info]   CI (99.9%): [1061.393, 1187.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   508147.127 ±(99.9%) 43.056 B/op [Average]
[info]   (min, avg, max) = (508127.125, 508147.127, 508152.132), stdev = 11.182
[info]   CI (99.9%): [508104.071, 508190.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1125.003 ±(99.9%) 724.435 MB/sec [Average]
[info]   (min, avg, max) = (978.644, 1125.003, 1338.877), stdev = 188.134
[info]   CI (99.9%): [400.567, 1849.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   508027.142 ±(99.9%) 317421.198 B/op [Average]
[info]   (min, avg, max) = (441985.240, 508027.142, 601195.543), stdev = 82433.277
[info]   CI (99.9%): [190605.944, 825448.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.270 ±(99.9%) 42.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.270, 28.981), stdev = 10.986
[info]   CI (99.9%): [≈ 0, 55.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.62% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22080.376 ops/s
[info] # Warmup Iteration   2: 59971.199 ops/s
[info] # Warmup Iteration   3: 59132.438 ops/s
[info] Iteration   1: 59149.422 ops/s
[info]                  ·gc.alloc.rate:                   755.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17201.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57630.371 ops/s
[info]                  ·gc.alloc.rate:                   736.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17655.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58558.295 ops/s
[info]                  ·gc.alloc.rate:                   747.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26112.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57675.688 ops/s
[info]                  ·gc.alloc.rate:               736.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17760.150 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 59060.052 ops/s
[info]                  ·gc.alloc.rate:                   754.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17414.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.664 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   58414.766 ±(99.9%) 2815.336 ops/s [Average]
[info]   (min, avg, max) = (57630.371, 58414.766, 59149.422), stdev = 731.134
[info]   CI (99.9%): [55599.430, 61230.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   746.086 ±(99.9%) 36.035 MB/sec [Average]
[info]   (min, avg, max) = (736.019, 746.086, 755.610), stdev = 9.358
[info]   CI (99.9%): [710.051, 782.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20099.999 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (20099.917, 20099.999, 20100.084), stdev = 0.069
[info]   CI (99.9%): [20099.734, 20100.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   713.825 ±(99.9%) 554.946 MB/sec [Average]
[info]   (min, avg, max) = (646.491, 713.825, 971.577), stdev = 144.118
[info]   CI (99.9%): [158.879, 1268.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19228.784 ±(99.9%) 14840.874 B/op [Average]
[info]   (min, avg, max) = (17201.538, 19228.784, 26112.350), stdev = 3854.128
[info]   CI (99.9%): [4387.909, 34069.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.454 ±(99.9%) 3.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.454, 2.238), stdev = 0.848
[info]   CI (99.9%): [≈ 0, 4.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.08% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55983.298 ops/s
[info] # Warmup Iteration   2: 77010.783 ops/s
[info] # Warmup Iteration   3: 79986.390 ops/s
[info] Iteration   1: 79401.696 ops/s
[info]                  ·gc.alloc.rate:                   520.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11652.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 80928.108 ops/s
[info]                  ·gc.alloc.rate:               530.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6458.217 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 77898.425 ops/s
[info]                  ·gc.alloc.rate:                   510.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13404.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 80761.728 ops/s
[info]                  ·gc.alloc.rate:                   529.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12916.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80912.252 ops/s
[info]                  ·gc.alloc.rate:               530.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6452.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   79980.442 ±(99.9%) 5110.810 ops/s [Average]
[info]   (min, avg, max) = (77898.425, 79980.442, 80928.108), stdev = 1327.261
[info]   CI (99.9%): [74869.632, 85091.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   524.449 ±(99.9%) 33.538 MB/sec [Average]
[info]   (min, avg, max) = (510.788, 524.449, 530.636), stdev = 8.710
[info]   CI (99.9%): [490.911, 557.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.590 ±(99.9%) 656.349 MB/sec [Average]
[info]   (min, avg, max) = (331.786, 515.590, 663.453), stdev = 170.452
[info]   CI (99.9%): [≈ 0, 1171.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10176.830 ±(99.9%) 13310.479 B/op [Average]
[info]   (min, avg, max) = (6452.935, 10176.830, 13404.460), stdev = 3456.689
[info]   CI (99.9%): [≈ 0, 23487.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.410 ±(99.9%) 3.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.410, 1.905), stdev = 0.837
[info]   CI (99.9%): [≈ 0, 3.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.130 ±(99.9%) 63.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.130, 37.763), stdev = 16.582
[info]   CI (99.9%): [≈ 0, 71.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.54% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61697.067 ops/s
[info] # Warmup Iteration   2: 85377.663 ops/s
[info] # Warmup Iteration   3: 85419.494 ops/s
[info] Iteration   1: 85153.681 ops/s
[info]                  ·gc.alloc.rate:      12.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 84717.937 ops/s
[info]                  ·gc.alloc.rate:      12.058 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 85178.634 ops/s
[info]                  ·gc.alloc.rate:      12.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 85204.245 ops/s
[info]                  ·gc.alloc.rate:      12.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 84497.748 ops/s
[info]                  ·gc.alloc.rate:      12.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   84950.449 ±(99.9%) 1242.965 ops/s [Average]
[info]   (min, avg, max) = (84497.748, 84950.449, 85204.245), stdev = 322.794
[info]   CI (99.9%): [83707.483, 86193.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.091 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (12.026, 12.091, 12.127), stdev = 0.046
[info]   CI (99.9%): [11.914, 12.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.005, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.005, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:46:03
[info] Benchmark                                                                               Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    788875.222 ±   45306.746   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      2077.298 ±     119.384  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      2088.413 ±     607.631  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4165.222 ±    1114.374    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.100 ±       0.132  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.199 ±       0.256    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        25.000                    ms
[info] AdtBenchmark.readJacksonScala                                                          thrpt    5   1646894.572 ±   41829.285   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                           thrpt    5      1171.979 ±      29.696  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  thrpt    5      1185.161 ±     696.401  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5      1132.881 ±     673.424    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±       0.080  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.080 ±       0.077    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                thrpt    5        18.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                 thrpt    5        18.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                         thrpt    5   3680581.079 ±  115992.063   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                          thrpt    5       243.218 ±       7.615  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5       271.799 ±     137.663  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       116.186 ±      57.173    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.304 ±       2.518  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.129 ±       1.070    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                               thrpt    5         5.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                thrpt    5         9.000                    ms
[info] AdtBenchmark.readPlayJson                                                              thrpt    5    166946.946 ±    4629.713   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                               thrpt    5      1336.659 ±      36.980  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                          thrpt    5     12600.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5      1320.570 ±      53.334  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5     12449.208 ±     728.126    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.079 ±       0.119  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.745 ±       1.109    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                    thrpt    5        20.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                     thrpt    5        20.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                         thrpt    5   2109907.921 ±  101439.451   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                          thrpt    5       686.385 ±      32.996  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     thrpt    5       512.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5       652.437 ±       6.452  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       486.744 ±      26.067    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.519 ±       3.929  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.383 ±       2.893    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                               thrpt    5        10.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                thrpt    5        11.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                        thrpt    5  15860303.692 ± 2053497.742   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                         thrpt    5       806.325 ±     103.791  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5       865.154 ±     704.369  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5        85.918 ±      70.941    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.222  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.008 ±       0.021    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                              thrpt    5        13.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                               thrpt    5        10.000                    ms
[info] AdtBenchmark.writePlayJson                                                             thrpt    5    321755.177 ±    7665.810   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                              thrpt    5       996.111 ±      23.621  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                         thrpt    5      4872.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5       983.942 ±      26.894  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      4812.635 ±     178.922    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.075 ±       0.122  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.366 ±       0.593    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                   thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                    thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1629705.320 ±   69005.487   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2543.399 ±     106.387  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2503.286 ±     723.220  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      2417.562 ±     710.782    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.112 ±       0.044  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.109 ±       0.047    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        37.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                      thrpt    5   2600199.524 ±   62859.911   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1824.136 ±      44.680  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5      1802.123 ±     683.561  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1090.935 ±     425.513    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.104 ±       0.127  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.063 ±       0.077    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                            thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                             thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                     thrpt    5  10638665.280 ±  375376.301   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1351.964 ±      47.685  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5      1346.096 ±      21.346  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       199.151 ±      10.016    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±       0.154  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.010 ±       0.023    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                          thrpt    5    619574.600 ±   17902.990   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1637.901 ±      46.960  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1661.734 ±      73.998  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4220.691 ±     212.507    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.087 ±       0.191  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.222 ±       0.489    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                 thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   2061700.270 ±   34220.528   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2054.158 ±      34.569  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1568.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2021.763 ±      54.316  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1543.319 ±      60.959    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.096 ±       0.134  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.073 ±       0.102    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        30.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                     thrpt    5   6018506.716 ±   37705.913   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1652.152 ±       9.912  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1662.721 ±      75.089  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       434.767 ±      20.825    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.096 ±       0.134  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.025 ±       0.035    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                    thrpt    5  20815994.531 ±  667849.746   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       634.897 ±      20.296  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       664.468 ±       3.190  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        50.238 ±       1.646    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.392 ±       2.881  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.030 ±       0.221    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                            thrpt    5  27391572.488 ±   68631.252   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                         thrpt    5   1300924.955 ±   28319.128   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1924.699 ±      42.578  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      2328.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1937.687 ±     534.958  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      2343.863 ±     654.209    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.112 ±       0.044  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.136 ±       0.054    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                               thrpt    5        29.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                thrpt    5        31.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                      thrpt    5      7329.587 ±     133.866   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1233.377 ±      22.428  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    264808.060 ±       0.007    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1270.044 ±     567.037  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    272630.197 ±  119874.432    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        15.200 ±      19.693    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                            thrpt    5        19.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                             thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                               thrpt    5     25347.278 ±     296.799   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1089.558 ±      11.820  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     67642.651 ±      57.973    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1056.574 ±     553.910  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     65612.193 ±   35090.954    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         3.618 ±      10.788    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        15.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                              thrpt    5     30111.951 ±    1238.792   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       546.682 ±      22.244  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     28568.016 ±       0.010    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       533.299 ±     702.636  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     27932.597 ±   37488.714    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.335 ±       2.577  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5        17.389 ±     133.397    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         8.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                              thrpt    5     13296.219 ±     324.653   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1408.903 ±      34.634  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5    166760.059 ±       0.433    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1393.483 ±     552.105  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    164900.705 ±   63371.503    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         6.890 ±      12.240    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        20.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                             thrpt    5     14684.730 ±     356.742   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5      1422.567 ±      34.288  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5    152456.032 ±       0.018    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5      1475.428 ±     706.353  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5    158188.292 ±   78253.983    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         8.929 ±      10.587    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5        22.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        18.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5     14997.467 ±     323.162   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5      1403.302 ±      30.366  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5    147248.031 ±       0.018    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space             thrpt    5      1407.959 ±     577.848  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm        thrpt    5    147722.558 ±   59807.438    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space         thrpt    5         0.071 ±       0.146  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm    thrpt    5         7.440 ±      15.461    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5        21.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                            thrpt    5        17.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                     thrpt    5     45432.197 ±    1652.115   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1738.701 ±      63.318  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     60216.010 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1749.763 ±     599.963  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     60579.985 ±   19433.109    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.129 ±       0.104  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.473 ±       3.661    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                            thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                              thrpt    5    108104.654 ±    2728.109   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5       251.682 ±       6.405  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      3664.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       270.000 ±     122.293  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3929.118 ±    1701.520    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.455 ±       3.808  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         6.574 ±      54.981    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                    thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                     thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                             thrpt    5    205916.090 ±    9097.917   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       280.548 ±      12.204  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2144.002 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       286.887 ±     163.719  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2191.683 ±    1220.471    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.325 ±       2.743  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.456 ±      20.713    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                  thrpt    5     13002.235 ±     747.833   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      3965.099 ±     227.842  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    479960.357 ±       2.783    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      3941.233 ±     709.269  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    477187.544 ±   93351.913    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.150 ±       0.154  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        18.158 ±      18.732    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                        thrpt    5        58.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                         thrpt    5        49.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                    thrpt    5     44541.645 ±    1622.397   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1102.618 ±      40.131  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     38960.010 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1132.367 ±     695.950  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     39990.374 ±   23877.322    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.087 ±       0.084  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         3.087 ±       2.990    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                          thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                           thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                             thrpt    5    116104.956 ±    1602.460   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5       829.940 ±      12.098  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     11248.000 ±       0.030    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       854.774 ±     695.866  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     11586.701 ±    9473.895    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.072 ±       1.417    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        11.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                            thrpt    5    272892.811 ±   12166.309   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       980.840 ±      44.062  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      5656.002 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       933.151 ±     570.587  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      5381.635 ±    3303.794    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.087 ±       0.132  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.505 ±       0.761    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        19.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    316260.865 ±   15885.330   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                 thrpt    5     53316.480 ±    1019.346   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       527.141 ±      10.247  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     15560.002 ±       0.118    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       511.220 ±     651.329  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     15109.186 ±   19479.505    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.435 ±       3.482  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5        12.860 ±     102.820    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                       thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                        thrpt    5     21876.904 ±     800.463   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      2037.325 ±      74.550  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    146567.879 ±       1.227    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      2023.529 ±      47.195  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    145587.787 ±    7090.973    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.162 ±       0.207  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        11.677 ±      14.849    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                              thrpt    5        30.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                               thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                 thrpt    5     53715.483 ±    2548.240   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       125.071 ±       5.996  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5      3664.009 ±       0.005    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       102.324 ±     539.526  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      3009.531 ±   15870.718    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         1.002 ±       8.538  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        29.855 ±     254.466    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                        thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                thrpt    5    126612.300 ±    1858.421   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       172.503 ±       2.583  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      2144.004 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       153.512 ±     539.617  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1910.005 ±    6714.077    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.052 ±       0.445    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                     thrpt    5      9755.694 ±     518.996   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      3370.622 ±     179.952  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    543720.752 ±       6.092    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      3390.243 ±      61.584  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    546983.097 ±   34955.516    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.117 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        18.810 ±      11.592    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                           thrpt    5        50.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                            thrpt    5        53.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                       thrpt    5     30812.966 ±    3471.217   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1342.306 ±     152.668  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     68553.974 ±      85.754    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1336.952 ±      33.382  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     68334.168 ±    8821.663    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.117 ±       0.264  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         5.985 ±      13.719    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                             thrpt    5        20.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                              thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                               thrpt    5    226605.222 ±    9310.260   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       541.446 ±      22.418  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      3760.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       531.258 ±     699.892  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3695.164 ±    4932.097    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.388 ±       2.939  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         2.682 ±      20.298    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    247511.519 ±    1968.665   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                    thrpt    5      4372.580 ±      83.878   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1736.618 ±      33.430  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    624976.102 ±       0.015    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1742.087 ±     529.920  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    627030.888 ±  196062.437    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        23.991 ±      55.782    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                          thrpt    5        26.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                           thrpt    5        23.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                      thrpt    5      2757.146 ±      72.939   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1398.164 ±      37.441  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    797976.159 ±       0.022    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1405.242 ±     590.953  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    801765.115 ±  323414.520    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.121 ±       0.104  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        68.920 ±      59.806    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                            thrpt    5        21.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                             thrpt    5        17.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                               thrpt    5      5881.432 ±      24.869   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       883.578 ±       3.730  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5    236424.076 ±       0.011    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       920.912 ±     567.360  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5    246421.575 ±  152003.203    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        20.046 ±      44.432    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                     thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                              thrpt    5      7321.466 ±     352.293   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       541.844 ±      26.088  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5    116448.060 ±       0.009    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       533.140 ±     702.498  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    114853.735 ±  154302.399    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.350 ±       2.656  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5        74.787 ±     566.697    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                   thrpt    5      3654.000 ±      82.287   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1592.819 ±      36.056  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    686032.483 ±      72.000    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1600.895 ±     558.574  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    689631.671 ±  245555.529    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.062 ±       0.139  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        26.932 ±      59.964    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                         thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                          thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                     thrpt    5      6035.040 ±     319.679   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5       636.997 ±      33.645  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5    166096.073 ±       0.011    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5       661.662 ±       3.173  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    172554.943 ±    9615.554    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.403 ±       3.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       104.739 ±     787.539    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                           thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                            thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                              thrpt    5      6873.815 ±     140.228   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       355.385 ±       7.476  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     81355.615 ±       1.204    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       349.617 ±     368.259  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     80100.230 ±   85953.470    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.445 ±       3.723  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       101.888 ±     851.852    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                             thrpt    5      7433.044 ±      26.587   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       325.173 ±       1.199  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5     68848.059 ±       0.008    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       352.776 ±     364.768  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     74690.067 ±   77161.298    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.378 ±       3.086  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5        80.041 ±     654.246    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5      7684.109 ±     199.717   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5       264.909 ±       6.856  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5     54240.056 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space             thrpt    5       219.916 ±     490.129  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm        thrpt    5     45081.526 ±  100306.368    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space         thrpt    5         0.360 ±       3.040  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm    thrpt    5        73.416 ±     620.331    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                            thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                       thrpt    5      4059.361 ±      99.667   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1506.576 ±      37.236  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    584072.110 ±       0.018    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1474.984 ±     707.800  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    571805.105 ±  273275.179    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.125 ±       0.204  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        48.460 ±      79.458    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                             thrpt    5        22.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                              thrpt    5        18.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                thrpt    5     10214.578 ±     505.034   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       912.344 ±      45.465  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    140547.087 ±      59.443    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       921.119 ±     554.065  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    141943.425 ±   86304.704    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        10.925 ±      25.760    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                               thrpt    5     19198.079 ±    1323.489   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       100.516 ±       6.934  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      8240.025 ±       0.013    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       102.324 ±     539.523  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      8494.853 ±   44805.924    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.431 ±       3.604  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        36.500 ±     305.244    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         3.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                    thrpt    5      4443.307 ±      88.209   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1914.975 ±      38.209  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    678257.814 ±      83.652    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1877.272 ±     694.151  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    664952.921 ±  247801.898    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.096 ±       0.166  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        33.855 ±      58.243    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                          thrpt    5        28.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                           thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                      thrpt    5      9258.496 ±    1454.930   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5       640.396 ±      81.436  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    109064.350 ±   27600.640    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5       661.698 ±       2.895  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    112602.693 ±   16568.711    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.394 ±       2.923  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        67.316 ±     501.431    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                            thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                             thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                               thrpt    5     11252.753 ±     959.170   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       393.469 ±      33.535  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     55021.830 ±       0.506    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       363.892 ±     485.535  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     51217.441 ±   74181.029    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.452 ±       3.715  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        65.718 ±     541.176    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                              thrpt    5     13091.300 ±     736.068   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       387.106 ±      21.577  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     46528.036 ±       0.022    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       368.043 ±     309.074  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     44244.521 ±   37233.905    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.374 ±       2.989  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5        44.692 ±     357.407    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5     13190.036 ±     191.119   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5       308.369 ±       4.501  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5     36792.035 ±       0.021    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              thrpt    5       286.450 ±     714.969  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         thrpt    5     34232.124 ±   85695.607    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          thrpt    5         0.373 ±       3.003  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     thrpt    5        44.658 ±     359.170    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5         5.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                     thrpt    5      9834.216 ±      39.901   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1617.880 ±       6.958  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    258884.521 ±      26.989    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1610.471 ±     565.152  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    257692.382 ±   90136.448    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.096 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        15.321 ±      11.449    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                           thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                            thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                              thrpt    5      9971.782 ±     343.134   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1534.294 ±      53.005  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    242112.814 ±      53.768    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1532.768 ±     702.398  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    241877.184 ±  110802.916    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5        12.473 ±      24.215    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                    thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                     thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                             thrpt    5    102705.634 ±    1769.615   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       267.334 ±       4.486  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       220.207 ±     491.390  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      3375.753 ±    7539.462    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.323 ±       2.646  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         4.958 ±      40.649    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                  thrpt    5      5236.500 ±     209.676   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1393.088 ±      55.948  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    418664.085 ±       0.012    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1395.159 ±     533.664  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    419395.998 ±  165156.578    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        21.276 ±      36.291    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                        thrpt    5        21.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                         thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                    thrpt    5     24380.194 ±     603.064   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1794.901 ±      43.486  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5    115854.772 ±     121.527    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1815.783 ±     722.757  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    117213.006 ±   47027.650    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.193  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         4.837 ±      12.423    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                          thrpt    5        27.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                           thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                            thrpt    5    264538.466 ±    9621.975   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       583.576 ±      21.183  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3472.002 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       597.858 ±     572.855  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      3558.428 ±    3427.097    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.396 ±       2.964  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         2.342 ±      17.519    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    291091.511 ±    3252.861   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                 thrpt    5     28602.713 ±     268.431   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1875.651 ±      17.979  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5    103200.017 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1879.844 ±     696.887  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    103413.818 ±   37501.521    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.100 ±       0.067  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         5.497 ±       3.654    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                       thrpt    5        28.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                        thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                         thrpt    5     16179.899 ±     316.957   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2131.999 ±      41.411  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    207380.770 ±      26.711    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2160.487 ±     704.091  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    210151.871 ±   68360.391    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.121 ±       0.215  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        11.754 ±      20.972    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                               thrpt    5        32.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                thrpt    5        29.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                  thrpt    5     39572.917 ±    1576.541   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       284.280 ±      11.120  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     11305.181 ±      10.071    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       284.201 ±     149.680  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     11297.657 ±    5768.287    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.444 ±       3.754  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        17.588 ±     148.784    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                 thrpt    5     82971.504 ±    1165.928   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       434.426 ±       6.217  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      8240.005 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       384.381 ±     620.792  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      7290.664 ±   11767.736    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.336 ±       2.714  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         6.340 ±      51.254    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                      thrpt    5      8693.628 ±      71.784   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3073.831 ±      25.397  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    556456.106 ±       0.480    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      3047.011 ±      65.926  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    551605.743 ±   14850.141    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.108 ±       0.174  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        19.596 ±      31.473    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                            thrpt    5        45.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                             thrpt    5        47.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                        thrpt    5     24369.150 ±    7172.741   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1522.446 ±     449.977  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     98309.971 ±     118.380    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1541.125 ±     684.643  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     99561.306 ±   37457.173    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.106 ±       0.139  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         6.837 ±       8.780    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                              thrpt    5        23.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                               thrpt    5        19.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                 thrpt    5     99611.069 ±    4460.827   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       803.376 ±      35.645  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     12692.328 ±       0.039    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       788.647 ±     696.603  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     12468.608 ±   11190.749    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.117 ±       2.919    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                thrpt    5    112953.630 ±    3456.248   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       481.183 ±      14.801  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      6704.004 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       515.994 ±     657.341  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      7196.230 ±    9234.563    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.403 ±       3.115  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.681 ±      43.961    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    140674.643 ±    1523.263   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5         0.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                     thrpt    5      3651.082 ±      59.805   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1596.513 ±      26.180  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    688196.251 ±       2.601    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1604.467 ±     575.836  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    691849.384 ±  257991.011    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.050 ±       0.166  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        21.563 ±      71.913    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                           thrpt    5        24.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                            thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                   thrpt    5     24780.833 ±     801.100   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                    thrpt    5      1387.939 ±      45.993  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                               thrpt    5     88133.480 ±      29.495    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1405.801 ±     549.902  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     89227.007 ±   32500.873    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.096 ±       0.217  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         6.086 ±      13.787    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                         thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                          thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                            thrpt    5     28263.402 ±     685.881   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                             thrpt    5      1308.955 ±      31.459  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        thrpt    5     72888.395 ±      53.466    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1326.787 ±      46.600  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     73882.514 ±    2583.442    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         3.933 ±      10.232    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                  thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                   thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                           thrpt    5    249534.618 ±   11503.135   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                            thrpt    5       649.571 ±      30.253  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       666.898 ±       2.959  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      4205.739 ±     189.671    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.367 ±       1.086    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                 thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                thrpt    5     15805.571 ±     267.422   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                 thrpt    5      1616.773 ±      27.265  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                            thrpt    5    160984.299 ±       2.312    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1603.359 ±     574.755  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5    159610.367 ±   55432.100    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         7.048 ±      15.574    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                      thrpt    5        24.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                       thrpt    5        21.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                  thrpt    5     42483.318 ±    3529.003   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                   thrpt    5      1351.037 ±     111.748  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                              thrpt    5     50040.010 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          thrpt    5      1336.149 ±     905.099  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     thrpt    5     49392.321 ±   30944.616    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         2.774 ±       4.424    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                        thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                         thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                          thrpt    5    993038.520 ±   23609.993   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                           thrpt    5      1065.074 ±      25.551  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5      1001.215 ±      15.854  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      1586.852 ±      51.839    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.112 ±       0.069    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                 thrpt    5        13.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                  thrpt    5   1334883.883 ±   26400.122   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                               thrpt    5     48229.447 ±    1790.199   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                thrpt    5      1278.723 ±      47.553  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                           thrpt    5     41728.009 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       thrpt    5      1264.607 ±     585.129  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  thrpt    5     41286.487 ±   19668.695    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              thrpt    5         2.167 ±       4.237    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                     thrpt    5        19.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                      thrpt    5        16.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                   thrpt    5     16276.293 ±      53.500   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                    thrpt    5      1342.770 ±       4.971  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                               thrpt    5    129825.491 ±      33.283    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1337.709 ±      32.552  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5    129335.947 ±    2917.938    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         6.442 ±      12.743    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                         thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                          thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                            thrpt    5     16753.863 ±     382.933   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                             thrpt    5      1227.965 ±      27.910  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        thrpt    5    115355.065 ±      66.904    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1192.319 ±     690.455  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5    112014.454 ±   65066.235    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         6.250 ±      11.122    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                  thrpt    5        18.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                   thrpt    5        16.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                           thrpt    5    290218.090 ±   10146.794   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            thrpt    5       742.111 ±      26.170  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      4024.002 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       733.837 ±     576.273  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      3983.303 ±    3243.263    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.382 ±       0.990    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                 thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                  thrpt    5         8.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                thrpt    5     12787.814 ±     324.945   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                 thrpt    5      1636.729 ±      41.853  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            thrpt    5    201424.446 ±       3.538    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1603.215 ±     559.868  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5    197353.878 ±   71315.744    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.113  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5        10.261 ±      14.139    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                      thrpt    5        24.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                       thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                          thrpt    5   1202646.975 ±   50217.356   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           thrpt    5       996.473 ±      41.732  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      1304.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5      1000.861 ±      14.443  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      1309.866 ±      57.820    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.082 ±       0.212    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                 thrpt    5        13.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                  thrpt    5   1445710.759 ±  130925.461   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.readCirce                                                        thrpt    5     14197.052 ±     881.523   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      2084.396 ±     130.746  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    231006.484 ±      52.905    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      2092.727 ±     538.527  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    231801.343 ±   46222.370    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.133 ±       0.156  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        14.766 ±      17.443    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                              thrpt    5        31.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                               thrpt    5        30.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                 thrpt    5     30938.040 ±     499.986   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       422.744 ±       6.212  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     21501.564 ±      47.788    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       429.074 ±     572.142  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     21846.673 ±   29471.574    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.452 ±       3.633  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        22.976 ±     184.532    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                thrpt    5     54125.060 ±    1624.977   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       562.918 ±      16.994  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     16368.008 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       533.053 ±     702.835  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     15521.845 ±   20706.589    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.349 ±       2.695  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        10.261 ±      79.461    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                     thrpt    5      8285.080 ±     188.445   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      3008.059 ±      72.603  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    571347.931 ±    2199.353    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2979.409 ±     566.680  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    565971.434 ±  112838.147    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        11.876 ±      21.647    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                           thrpt    5        44.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                            thrpt    5        40.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                       thrpt    5     20083.165 ±    2411.175   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1663.648 ±     202.409  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5    130349.986 ±     112.557    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1677.626 ±      46.610  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    131560.976 ±   17978.265    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.107 ±       0.075  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         8.422 ±       6.336    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                thrpt    5     56542.922 ±     558.007   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       704.850 ±       7.165  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     19616.257 ±       0.164    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       721.480 ±     572.743  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     20087.611 ±   16191.219    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.855 ±       4.292    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        11.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                               thrpt    5     70564.315 ±    4918.576   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       470.612 ±      32.669  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     10496.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       449.531 ±     628.290  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     10052.784 ±   14348.584    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.393 ±       3.115  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         9.024 ±      71.805    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     75156.183 ±     458.091   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                    thrpt    5      3150.938 ±      61.708   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1465.837 ±      29.001  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    732136.417 ±       2.013    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1467.740 ±     691.298  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    733009.773 ±  341651.214    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.042 ±       0.080  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        20.820 ±      40.359    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                          thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                           thrpt    5        19.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                       thrpt    5     17193.456 ±     340.793   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2378.090 ±      47.477  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    217677.411 ±      20.614    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2366.687 ±      48.953  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    216636.099 ±    4603.272    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.171 ±       0.191  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        15.613 ±      17.300    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                             thrpt    5        35.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                              thrpt    5        32.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                thrpt    5     44849.034 ±    5306.983   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       176.937 ±      20.853  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      6208.010 ±       0.002    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       153.523 ±     539.657  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      5458.658 ±   19210.297    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.011 ±       0.098  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.397 ±       3.417    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                      thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                               thrpt    5     93034.173 ±    3285.660   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       246.874 ±       8.694  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4176.005 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       220.124 ±     491.096  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3730.947 ±    8328.058    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.323 ±       2.682  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         5.485 ±      45.495    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                    thrpt    5      9517.636 ±     283.196   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3304.903 ±     100.687  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    546384.673 ±       5.107    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      3321.900 ±     573.082  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    549322.978 ±  105870.157    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.150 ±       0.105  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        24.763 ±      16.944    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                          thrpt    5        49.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                           thrpt    5        44.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                      thrpt    5     24844.533 ±    5572.521   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1583.507 ±     356.856  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    100309.450 ±     116.512    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1542.433 ±     685.457  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5     97659.082 ±   36346.505    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.117 ±       0.091  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         7.402 ±       5.975    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                            thrpt    5        23.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                             thrpt    5        20.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                               thrpt    5    115108.454 ±    3111.049   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       878.521 ±      24.024  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     12011.364 ±       0.038    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       921.183 ±     568.035  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     12594.163 ±    7754.990    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.309 ±       1.234    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                              thrpt    5    125822.241 ±    1912.594   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       505.975 ±       7.825  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      6328.004 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       516.035 ±     658.081  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      6448.505 ±    8163.117    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.388 ±       3.027  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         4.829 ±      37.704    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    146686.394 ±     240.322   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                   thrpt    5      3282.747 ±      20.019   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1804.502 ±      10.917  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    865019.393 ±       2.042    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1811.314 ±     724.708  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    868338.797 ±  349926.407    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        13.974 ±      43.846    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                         thrpt    5        27.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                          thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                        thrpt    5     18493.084 ±     404.772   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1942.464 ±      43.821  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    165289.146 ±     993.225    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1888.483 ±     719.181  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    160711.849 ±   61828.941    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         8.154 ±       7.881    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                              thrpt    5        28.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                               thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                 thrpt    5    102124.664 ±     658.172   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1340.400 ±       8.680  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     20656.004 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1328.382 ±      45.746  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     20470.955 ±     772.355    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.219 ±       2.030    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                thrpt    5    234074.264 ±    4000.270   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       761.470 ±      12.972  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       733.547 ±     572.524  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4931.217 ±    3816.762    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.067 ±       0.207  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.448 ±       1.398    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                     thrpt    5     16537.056 ±     566.861   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2130.055 ±      73.064  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    202704.183 ±       1.328    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2153.110 ±     730.302  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    204904.504 ±   69422.490    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.117 ±       0.185  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        11.101 ±      17.565    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                           thrpt    5        32.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                            thrpt    5        30.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                       thrpt    5     21065.935 ±     433.750   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1705.147 ±      34.562  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5    127370.288 ±      70.807    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1747.466 ±     600.774  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    130537.622 ±   45150.345    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.100 ±       0.191  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         7.455 ±      14.156    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                             thrpt    5        26.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                thrpt    5     88573.989 ±    2235.051   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1213.371 ±      30.695  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     21560.011 ±       0.053    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1191.116 ±     708.361  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     21176.278 ±   12915.821    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.227  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.485 ±       4.094    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                               thrpt    5    223209.002 ±    8060.832   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       711.385 ±      25.700  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      5016.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       731.184 ±     569.953  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      5153.253 ±    3940.269    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.645 ±       1.163    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    246625.526 ±     658.435   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                    thrpt    5     25531.891 ±     628.069   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1740.801 ±      42.686  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    107288.217 ±       1.556    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1742.434 ±     529.109  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    107364.391 ±   30784.276    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.113  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         5.135 ±       7.016    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                          thrpt    5        26.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                           thrpt    5        22.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                      thrpt    5     59944.910 ±     913.536   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1472.914 ±      22.508  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     38672.007 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1467.889 ±     692.984  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5     38537.621 ±   18076.674    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.639 ±       2.092    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                            thrpt    5        22.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                             thrpt    5        20.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                               thrpt    5     73992.382 ±    2209.073   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1164.105 ±      34.740  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     24760.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1120.002 ±     695.393  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     23840.042 ±   15342.481    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.418 ±       3.280    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                              thrpt    5     82484.093 ±     864.061   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1234.741 ±      12.872  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     23560.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1268.330 ±     575.782  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     24204.589 ±   11110.037    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.430 ±       1.748    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        19.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                   thrpt    5     38259.741 ±     604.035   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2021.759 ±      31.864  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     83168.098 ±       0.748    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      2007.094 ±      83.994  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     82564.800 ±    3196.494    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.191  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.745 ±       7.914    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                         thrpt    5        30.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                          thrpt    5        30.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                     thrpt    5    117245.214 ±    1665.274   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1137.203 ±      16.300  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     15264.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1127.754 ±     707.192  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     15144.139 ±    9704.931    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.100 ±       0.200  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         1.342 ±       2.694    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                           thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                            thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                              thrpt    5    302425.045 ±   10581.845   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1051.523 ±      36.906  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      5472.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1053.201 ±     581.372  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      5486.460 ±    3241.514    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.075 ±       0.193  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.389 ±       0.996    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        16.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                             thrpt    5    632725.690 ±   22517.892   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       816.999 ±      29.422  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2032.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       863.017 ±     700.756  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2149.037 ±    1795.310    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.100 ±       0.119  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.248 ±       0.293    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    675783.501 ±   72613.316   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                  thrpt    5    196485.006 ±    5622.227   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1033.691 ±      29.630  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      8280.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1056.095 ±     555.644  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      8456.838 ±    4333.710    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.634 ±       0.542    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                        thrpt    5        16.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                         thrpt    5        15.000                    ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5    884254.987 ±   26723.988   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      2890.448 ±      87.642  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5144.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      2915.444 ±     709.026  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5187.300 ±    1159.624    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.158 ±       0.185  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.282 ±       0.335    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        43.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        34.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                       thrpt    5   1662189.777 ±   47768.157   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                        thrpt    5      1563.280 ±      44.605  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1530.038 ±     689.186  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5      1449.090 ±     672.814    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±       0.088  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.075 ±       0.083    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                             thrpt    5        23.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                              thrpt    5        21.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                      thrpt    5   7534437.741 ±  104250.101   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                       thrpt    5      2259.818 ±      32.400  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5      2234.848 ±     727.575  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       466.756 ±     150.281    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.113  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.017 ±       0.024    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                            thrpt    5        33.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                             thrpt    5        25.000                    ms
[info] ArraysBenchmark.readPlayJson                                                           thrpt    5    320752.814 ±    5504.645   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                            thrpt    5      1955.008 ±      34.176  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                       thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1939.121 ±     603.068  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      9515.545 ±    3033.760    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.104 ±       0.113  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.511 ±       0.553    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                 thrpt    5        29.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                  thrpt    5        28.000                    ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1000358.512 ±   13621.465   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2303.484 ±      31.100  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3624.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2296.283 ±     556.784  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      3612.243 ±     844.300    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.108 ±       0.174  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.170 ±       0.274    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        34.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        27.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                      thrpt    5   3408937.533 ±  116091.300   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                       thrpt    5      1975.639 ±      68.350  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5      1942.021 ±     554.414  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       896.413 ±     251.020    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.096 ±       0.134  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.044 ±       0.061    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                            thrpt    5        29.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                             thrpt    5        27.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                     thrpt    5  16410987.249 ±  609604.373   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                      thrpt    5       750.837 ±      27.936  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5       798.797 ±     704.616  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5        76.557 ±      66.519    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.243  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.008 ±       0.023    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                           thrpt    5        12.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                            thrpt    5         9.000                    ms
[info] ArraysBenchmark.writePlayJson                                                          thrpt    5    422157.610 ±   16138.980   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                           thrpt    5      1506.647 ±      56.964  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                      thrpt    5      5616.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1459.954 ±     704.271  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5      5446.549 ±    2795.727    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.067 ±       0.105  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.249 ±       0.399    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                thrpt    5        22.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                 thrpt    5        23.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                      thrpt    5   2110423.111 ±   37748.658   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1362.409 ±      24.406  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1016.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5      1324.325 ±      52.210  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       987.610 ±      39.687    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.096 ±       0.072  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.071 ±       0.054    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                            thrpt    5        20.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                             thrpt    5        19.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                     thrpt    5   5156358.895 ±  258181.594   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5       681.527 ±      34.322  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5       666.610 ±       2.177  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       203.475 ±      10.279    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±       0.154  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.020 ±       0.046    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                            thrpt    5         8.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                          thrpt    5    395137.490 ±   17674.290   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1793.718 ±      80.379  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5      7144.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1801.510 ±     725.867  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5      7173.167 ±    2777.208    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.092 ±       0.146  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.365 ±       0.575    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                thrpt    5        27.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                 thrpt    5        28.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                     thrpt    5   2636409.860 ±   99558.306   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1393.731 ±      52.750  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1391.394 ±     549.701  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       830.612 ±     326.267    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.083 ±       0.127  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.050 ±       0.075    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        19.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                    thrpt    5   6437084.174 ±  348457.689   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       981.698 ±      52.972  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       999.741 ±      13.827  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       244.443 ±      11.101    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.079 ±       0.088  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.019 ±       0.022    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        15.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        12.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                         thrpt    5    643656.137 ±   20524.154   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1904.249 ±      60.976  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      4656.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1939.336 ±     575.165  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      4743.520 ±    1494.582    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.092 ±       0.108  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.224 ±       0.265    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                               thrpt    5        29.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    828813.772 ±   17660.130   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2751.204 ±      57.707  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5224.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2776.851 ±     572.532  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      5273.282 ±    1135.583    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.129 ±       0.200  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.245 ±       0.380    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        41.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        32.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                thrpt    5    985577.496 ±    9767.960   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1222.375 ±      12.101  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1188.020 ±     707.581  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1896.841 ±    1120.777    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.058 ±       0.143  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.093 ±       0.229    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        18.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                               thrpt    5   7732023.971 ±  168193.166   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       353.760 ±       7.752  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       303.683 ±     168.258  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        61.792 ±      33.719    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.312 ±       2.550  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.063 ±       0.518    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                    thrpt    5    270762.865 ±    7744.391   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1392.808 ±      39.835  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5      8096.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1388.177 ±     572.649  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      8073.383 ±    3534.979    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.091  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.436 ±       0.528    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                          thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                           thrpt    5        21.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      8160.295 ±      38.670   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2100.314 ±       9.092  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    405000.546 ±       4.240    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2088.238 ±     609.722  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    402676.851 ±  117913.952    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.124 ±       0.166  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        23.883 ±      31.877    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        31.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                thrpt    5     13187.142 ±     381.055   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       480.696 ±      13.851  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5     57368.033 ±       0.005    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       491.222 ±     625.497  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     58660.976 ±   75037.943    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.548 ±       4.409  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        65.187 ±     524.090    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                       thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                               thrpt    5     23414.559 ±     514.879   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       438.165 ±       9.359  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     29448.020 ±       0.014    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       383.744 ±     619.165  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     25773.033 ±   41230.446    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.353 ±       2.814  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        23.690 ±     189.043    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                    thrpt    5      2346.559 ±      94.305   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1495.177 ±      60.226  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5   1002665.588 ±      12.053    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1457.083 ±     703.038  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    977226.853 ±  473815.024    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.091  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        50.229 ±      60.874    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                          thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                           thrpt    5        23.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      8712.298 ±     129.667   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      2005.491 ±      29.705  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    362278.319 ±      53.972    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2018.534 ±     880.466  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    364544.394 ±  155201.769    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.151 ±       0.271  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        27.288 ±      48.695    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        30.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                               thrpt    5     41906.997 ±    2073.992   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       607.323 ±      30.036  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     22807.871 ±       0.256    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       584.579 ±     560.004  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     21976.335 ±   21316.661    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.579 ±       4.671  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        21.524 ±     173.626    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                     thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                              thrpt    5     85709.864 ±    3565.338   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       644.457 ±      26.483  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     11832.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       596.838 ±     570.668  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     10968.561 ±   10616.044    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.062 ±       0.080  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.146 ±       1.462    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5     79038.613 ±     318.934   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5         1.206 ±       0.005  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                   thrpt    5      5810.815 ±      94.157   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1724.671 ±      27.863  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    467103.942 ±       2.657    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1731.637 ±     611.100  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    469041.050 ±  168147.702    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.062 ±       0.150  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        16.895 ±      40.457    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                         thrpt    5        26.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                          thrpt    5        26.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                              thrpt    5   5310551.890 ±  175310.808   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1592.842 ±      52.325  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1547.866 ±     702.029  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       458.558 ±     202.804    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.087 ±       0.105  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.026 ±       0.031    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        23.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        18.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                   thrpt    5    358011.802 ±    2367.217   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1910.857 ±      12.914  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5      8400.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1871.072 ±     732.608  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      8225.448 ±    3236.024    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.143  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.384 ±       0.630    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                          thrpt    5        28.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                             thrpt    5   3356283.477 ±   67385.275   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       494.751 ±       9.909  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       232.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       515.757 ±     657.056  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       242.069 ±     310.961    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.400 ±       3.043  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.188 ±       1.429    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        10.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                  thrpt    5    391527.326 ±    8754.323   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1542.412 ±      34.311  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      6200.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1527.001 ±     720.828  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      6136.611 ±    2840.426    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.104 ±       0.234  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.418 ±       0.939    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                        thrpt    5        23.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                         thrpt    5        23.000                    ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    657752.523 ±   12084.282   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2397.632 ±      42.803  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5736.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2434.083 ±     594.766  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      5823.223 ±    1420.944    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.146 ±       0.127  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.349 ±       0.302    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        36.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        29.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                    thrpt    5    630424.268 ±   10013.687   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       733.876 ±      11.708  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       780.376 ±     682.791  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1948.581 ±    1715.544    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.590 ±       4.551  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.473 ±      11.356    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                          thrpt    5        12.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                           thrpt    5        13.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                   thrpt    5   3759342.724 ±   46581.171   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1490.555 ±      18.025  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5      1479.062 ±     710.687  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       619.356 ±     304.068    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.062 ±       0.113  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.026 ±       0.047    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        22.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        20.000                    ms
[info] IterablesBenchmark.readPlayJson                                                        thrpt    5    240261.959 ±    2151.594   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1672.114 ±      14.787  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1728.901 ±     508.545  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     11325.538 ±    3437.990    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.100 ±       0.119  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.655 ±       0.784    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                              thrpt    5        26.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                               thrpt    5        25.000                    ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    908178.906 ±   34393.796   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      2188.173 ±      82.864  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3792.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2159.993 ±     718.593  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      3745.787 ±    1380.845    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.100 ±       0.174  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.174 ±       0.309    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        32.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        26.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                   thrpt    5   1425372.008 ±   23249.673   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       963.615 ±      15.706  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       981.177 ±      28.041  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1083.410 ±      36.452    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.119  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.073 ±       0.131    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        15.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        15.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                  thrpt    5   6812376.965 ±  434155.800   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       761.865 ±      48.242  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       797.736 ±     700.802  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       184.408 ±     164.250    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.087 ±       0.256  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.020 ±       0.058    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5        12.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        11.000                    ms
[info] IterablesBenchmark.writePlayJson                                                       thrpt    5    530781.987 ±    6747.429   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1848.248 ±      22.832  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      5480.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1869.473 ±     663.328  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      5543.399 ±    1989.175    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.096 ±       0.176  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.284 ±       0.520    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                             thrpt    5        28.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                              thrpt    5        27.000                    ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    633335.271 ±   22515.623   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2250.413 ±      79.382  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5592.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2228.277 ±     702.201  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5538.723 ±    1830.445    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.083 ±       0.179  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.208 ±       0.452    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        33.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        26.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                        thrpt    5   5114275.810 ±  121670.904   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      1273.916 ±      30.080  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5      1273.921 ±     577.496  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       391.968 ±     176.427    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.067 ±       0.132  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.020 ±       0.040    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        19.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        16.000                    ms
[info] MapsBenchmark.readPlayJson                                                             thrpt    5    362930.989 ±    6700.113   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1887.380 ±      35.619  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      8184.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5      1871.593 ±     731.650  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      8116.255 ±    3200.779    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.108 ±       0.105  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.469 ±       0.448    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        28.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        28.000                    ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    472048.982 ±   18300.203   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1286.113 ±      49.900  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4288.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      1267.696 ±     575.881  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4228.453 ±    1979.207    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.075 ±       0.091  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.249 ±       0.301    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        19.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        15.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                       thrpt    5   3567612.422 ±   64044.453   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       580.353 ±      10.632  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       256.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       597.728 ±     572.554  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       263.640 ±     252.247    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.379 ±       2.908  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.167 ±       1.278    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         9.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5         9.000                    ms
[info] MapsBenchmark.writePlayJson                                                            thrpt    5    331058.635 ±    3852.534   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1204.974 ±      13.614  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5728.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1187.055 ±     706.414  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      5642.028 ±    3334.180    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.100 ±       0.067  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.475 ±       0.323    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        18.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        20.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   1785243.160 ±   16737.936   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      2903.829 ±      27.240  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2560.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      2913.644 ±     708.154  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      2568.730 ±     629.647    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.104 ±       0.113  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.092 ±       0.100    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        43.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        34.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                              thrpt    5    300788.169 ±    3787.561   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5       721.806 ±       9.302  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      3776.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       718.450 ±     560.618  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3758.828 ±    2943.634    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.502 ±       3.923  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         2.617 ±      20.432    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                    thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                     thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                             thrpt    5    716291.799 ±   37996.422   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       648.117 ±      34.258  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1424.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       602.737 ±     577.417  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      1323.388 ±    1256.778    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.046 ±       0.183  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.101 ±       0.399    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   3808773.176 ±   60874.337   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      2265.196 ±      36.049  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       936.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5      2236.198 ±     727.375  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5       924.039 ±     301.360    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5         0.083 ±       0.127  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.034 ±       0.052    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        33.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        25.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   6863123.334 ±  249866.039   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       802.433 ±      29.483  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       184.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5       803.954 ±     703.980  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5       184.589 ±     166.713    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5         0.058 ±       0.088  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5         0.013 ±       0.020    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5        12.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                  thrpt    5    188100.717 ±    9239.134   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1569.009 ±      76.883  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5     13128.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1523.977 ±     687.477  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5     12758.713 ±    6022.837    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.092 ±       0.176  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.763 ±       1.443    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                        thrpt    5        23.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                         thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    736471.256 ±   13834.987   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2837.691 ±      53.328  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6064.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      2846.939 ±     730.993  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6085.383 ±    1673.844    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.108 ±       0.132  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.231 ±       0.279    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        42.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        34.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                            thrpt    5   2819134.932 ±   75115.156   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1819.986 ±      48.586  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1822.396 ±     734.565  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1017.167 ±     400.411    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.075 ±       0.122  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.042 ±       0.069    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        21.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                 thrpt    5    268708.544 ±    2933.030   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1987.332 ±      21.815  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     11640.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1938.327 ±     536.488  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     11351.788 ±    3068.677    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.087 ±       0.154  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.512 ±       0.898    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                       thrpt    5        29.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                        thrpt    5        29.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    850798.049 ±    8898.763   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1963.550 ±      21.119  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3632.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1953.280 ±     577.897  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3613.269 ±    1082.784    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.112 ±       0.134  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.208 ±       0.248    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        29.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        24.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                            thrpt    5   1576628.026 ±   43241.567   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       905.811 ±      24.966  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5       914.746 ±     572.850  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       913.427 ±     583.012    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±       0.098  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.062 ±       0.099    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        14.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        14.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                           thrpt    5   6273181.151 ±  117710.346   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       478.372 ±       8.945  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       449.591 ±     628.522  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5       112.905 ±     159.478    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.379 ±       3.000  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.096 ±       0.757    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5         7.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5         8.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                thrpt    5    499619.415 ±    8243.168   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1729.590 ±      28.863  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5      5448.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1734.013 ±     627.521  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5      5461.717 ±    1960.467    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.139  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.262 ±       0.436    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                      thrpt    5        26.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                       thrpt    5        25.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                 thrpt    5   3260761.106 ±   87489.136   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5      1541.520 ±      41.219  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5      1546.808 ±     702.443  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       746.471 ±     335.341    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.122  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.036 ±       0.059    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5        23.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        18.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                      thrpt    5    308837.722 ±   10578.621   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1651.503 ±      56.558  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8416.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1664.139 ±      71.870  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      8481.366 ±     593.784    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.174  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.444 ±       0.873    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                            thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                             thrpt    5        25.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    494338.890 ±   10201.716   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1339.539 ±      27.643  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4264.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1335.849 ±      34.407  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5      4252.453 ±     188.675    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.143  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.251 ±       0.453    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        16.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                thrpt    5   3001017.487 ±   70494.471   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       564.519 ±      13.508  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       531.294 ±     700.644  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       278.825 ±     370.361    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.386 ±       2.968  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.202 ±       1.552    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                     thrpt    5    338664.451 ±   13131.453   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1310.232 ±      51.708  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5      6088.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1320.653 ±      54.240  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      6136.706 ±     261.784    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.176  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.424 ±       0.806    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                           thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                            thrpt    5        20.000                    ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    719647.500 ±   10331.713   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2129.340 ±      31.887  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4656.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2155.117 ±     692.824  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4712.100 ±    1496.749    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.112 ±       0.146  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.246 ±       0.321    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                   thrpt    5   1482548.526 ±   16395.359   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1122.822 ±      12.473  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5      1119.532 ±     693.773  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1188.909 ±     749.004    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.071 ±       0.091  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.075 ±       0.097    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                         thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        19.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                  thrpt    5   5538854.288 ±  379005.019   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       168.960 ±      11.498  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       153.514 ±     539.625  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        43.459 ±     152.784    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.014 ±       0.118  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.004 ±       0.033    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         5.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                       thrpt    5    221247.031 ±    3760.935   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1540.734 ±      26.280  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     10960.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1524.132 ±     664.747  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     10839.902 ±    4640.988    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.050 ±       0.193  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.355 ±       1.372    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                             thrpt    5        23.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                              thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    953952.260 ±   29692.027   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1629.706 ±      49.816  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2688.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1677.032 ±      48.045  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      2766.150 ±      92.339    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.092 ±       0.122  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.151 ±       0.199    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        19.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                  thrpt    5   2445853.473 ±   45768.369   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1081.669 ±      20.157  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1052.898 ±     565.758  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       677.652 ±     370.562    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.079 ±       0.088  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.051 ±       0.057    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        15.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                 thrpt    5   6583506.856 ±  346472.593   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       535.471 ±      28.308  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       516.595 ±     658.416  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       123.678 ±     160.052    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.378 ±       2.946  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.090 ±       0.701    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   7171801.990 ±  137870.189   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5       218.743 ±       4.219  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                 thrpt    5       204.653 ±     440.531  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm            thrpt    5        44.912 ±      96.683    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space             thrpt    5         0.005 ±       0.044  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.001 ±       0.010    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                      thrpt    5    316175.066 ±    5278.697   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1626.507 ±      26.646  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      8096.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1594.872 ±     594.837  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      7936.081 ±    2849.422    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.113  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.415 ±       0.571    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                            thrpt    5        24.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                             thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                  thrpt    5    502403.820 ±   11589.460   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                   thrpt    5      1958.876 ±      44.762  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                              thrpt    5      6136.001 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                          thrpt    5      1955.441 ±     577.797  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                     thrpt    5      6124.368 ±    1754.550    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                      thrpt    5         0.071 ±       0.091  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.222 ±       0.288    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                        thrpt    5        29.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                         thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                           thrpt    5    892971.918 ±   12584.178   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                            thrpt    5      1910.961 ±      27.097  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                       thrpt    5      3368.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                   thrpt    5      1943.288 ±     576.526  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      3425.505 ±    1045.253    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.096 ±       0.091  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.169 ±       0.159    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                 thrpt    5        29.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                          thrpt    5    820844.272 ±   15721.043   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                           thrpt    5      1381.141 ±      25.881  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      2648.001 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5      1414.603 ±     589.961  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      2713.140 ±    1178.926    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.067 ±       0.143  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.128 ±       0.276    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                 thrpt    5        15.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                 thrpt    5    294414.740 ±    6520.284   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                  thrpt    5      1502.513 ±      33.114  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                             thrpt    5      8032.002 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1473.951 ±     685.439  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5      7878.430 ±    3622.895    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.087 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.468 ±       0.708    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                       thrpt    5        22.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                        thrpt    5        19.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                          thrpt    5    728862.152 ±    8809.507   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                           thrpt    5       737.254 ±       8.928  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1592.001 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5       722.164 ±     567.007  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      1559.675 ±    1232.018    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.075 ±       0.108  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.162 ±       0.231    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                thrpt    5        11.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                 thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                         thrpt    5    937644.612 ±   37459.779   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                          thrpt    5       791.211 ±      31.835  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                     thrpt    5      1328.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       798.995 ±     704.918  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5      1343.644 ±    1239.386    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.071 ±       0.156  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.119 ±       0.262    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                               thrpt    5        12.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                thrpt    5        12.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                 thrpt    5    761772.611 ±    4886.159   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm             thrpt    5         0.001 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                       thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                              thrpt    5    775813.033 ±   15097.789   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                               thrpt    5       828.158 ±      16.108  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                          thrpt    5      1680.001 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                      thrpt    5       796.202 ±     698.417  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1615.945 ±    1433.971    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.200  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.161 ±       0.406    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                    thrpt    5        12.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                     thrpt    5        10.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                               thrpt    5   1592191.258 ±   32640.498   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                thrpt    5      1950.656 ±      39.091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                           thrpt    5      1928.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                       thrpt    5      1955.493 ±     595.627  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1933.166 ±     608.637    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   thrpt    5         0.079 ±       0.088  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.078 ±       0.087    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                     thrpt    5        29.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                      thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                        thrpt    5   1211723.433 ±   25676.668   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                         thrpt    5       751.496 ±      15.890  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                    thrpt    5       976.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                thrpt    5       722.098 ±     567.173  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           thrpt    5       937.964 ±     740.551    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.058 ±       0.105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.076 ±       0.135    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                              thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                               thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                       thrpt    5   1993151.877 ±   52074.220   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                        thrpt    5       324.235 ±       8.210  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   thrpt    5       256.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5       354.839 ±     362.874  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5       280.213 ±     287.083    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.323 ±       2.560  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.254 ±       2.013    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                             thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                              thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                              thrpt    5   1472961.424 ±   14607.600   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                               thrpt    5       958.421 ±       9.587  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                          thrpt    5      1024.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                      thrpt    5       931.138 ±     573.492  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                 thrpt    5       994.822 ±     612.021    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                  thrpt    5         0.062 ±       0.150  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.067 ±       0.160    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                    thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                     thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                       thrpt    5   2700116.360 ±   94342.963   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                        thrpt    5       988.201 ±      34.467  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   thrpt    5       576.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               thrpt    5       989.008 ±      22.557  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          thrpt    5       576.500 ±      19.713    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.096 ±       0.134  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.056 ±       0.079    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                             thrpt    5        15.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                              thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                      thrpt    5   3009648.058 ±  104778.606   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                       thrpt    5       596.730 ±      20.298  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  thrpt    5       312.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              thrpt    5       597.989 ±     573.096  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         thrpt    5       312.879 ±     302.453    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          thrpt    5         0.417 ±       3.013  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     thrpt    5         0.218 ±       1.575    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                            thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                             thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                              thrpt    5   3194200.989 ±   17482.124   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                    thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                           thrpt    5   2818384.972 ±   26055.896   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                            thrpt    5      1189.171 ±      11.110  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                       thrpt    5       664.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   thrpt    5      1200.811 ±     704.887  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              thrpt    5       670.439 ±     391.668    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               thrpt    5         0.083 ±       0.150  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.046 ±       0.083    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                 thrpt    5        18.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                  thrpt    5        16.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     11918.430 ±     320.365   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1681.029 ±      45.475  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    221985.271 ±      80.612    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1673.466 ±      51.986  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    220986.912 ±    3771.020    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.129 ±       0.268  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        17.062 ±      35.478    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        25.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        21.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                   thrpt    5     15691.364 ±     435.227   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       242.498 ±       6.609  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     24319.313 ±       6.155    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       269.213 ±     115.338  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     26998.947 ±   11555.316    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.603 ±       5.004  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        60.440 ±     501.610    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                         thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                          thrpt    5        16.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                  thrpt    5     36548.681 ±     296.330   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       406.152 ±       3.120  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5     17488.019 ±       0.059    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       419.582 ±     640.804  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     18074.153 ±   27684.591    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.360 ±       2.908  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        15.480 ±     125.094    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                       thrpt    5      3482.497 ±     196.928   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1124.661 ±      63.268  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    508147.127 ±      43.056    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1125.003 ±     724.435  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    508027.142 ±  317421.198    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.029 ±       0.091  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        13.270 ±      42.304    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                             thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                              thrpt    5        20.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                  thrpt    5     58414.766 ±    2815.336   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       746.086 ±      36.035  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     20099.999 ±       0.265    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       713.825 ±     554.946  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     19228.784 ±   14840.874    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.054 ±       0.122  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.454 ±       3.267    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                 thrpt    5     79980.442 ±    5110.810   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       524.449 ±      33.538  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       515.590 ±     656.349  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     10176.830 ±   13310.479    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.410 ±       3.221  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         8.130 ±      63.851    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5     84950.449 ±    1242.965   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        12.091 ±       0.177  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5       224.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk8.json
[success] Total time: 2810 s, completed Feb 3, 2018 5:34:17 PM
